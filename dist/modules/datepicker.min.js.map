{"version":3,"sources":["modules/datepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","screenReaderDateFormat","focusOnOpen","$get","isNative","isTouch","DatepickerFactory","$datepicker","options","$options","pickerViews","datepickerViews","scope","evt","apply","test","keyCode","shiftKey","altKey","preventDefault","stopPropagation","setMode","$mode","undefined","$apply","$select","date","disabled","hide","_init","init","$isSelected","el","focused","element","focus","$views","views","viewDate","$iconLeft","$iconRight","$hasToday","id","dropdownId","$nextLabel","labelNext","$previousLabel","$picker","handleOnKeyDown","$toggleMode","select","value","Date","length","$setToday","$clear","$focused","selectedDayId","dayInfo","isNext","update","selected","$onKeyDown","continueHandling","onKeyDown","isDate","isNaN","updateDisabledDates","disabledDateRanges","dateRanges","$date","forEach","i","$build","controller","$dateValue","rows","$setDisabledEl","keep","$setViewValue","$render","copy","extend","year","getFullYear","month","getDate","mode","pristine","built","call","$updateSelected","updateSelected","day","build","isSelected","steps","targetDate","getUTCFullYear","getUTCMonth","$selectPane","UTC","$onMouseDown","getUTCDate","targetEl","parent","parentScope","$digest","$onFocusOut","inTable","relatedTarget","$window","document","body","$element","prop","attr","focusElement","_destroy","destroy","off","_show","show","$timeout","$isShown","on","_hide","blur","directive","$scope","link","lang","$dateFormatter","getDefaultLocale","require","navigator","userAgent","restrict","falseValueRegExp","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","isMaxValid","isValid","isMinValid","parsedDate","getTime","$parsers","unshift","viewValue","$setValidity","getDateFormattedString","formatDate","key","isDefined","$eval","bsKey","format","dateParser","$dateParser","strict","bsShow","isString","newValue","$watch","oldValue","match","validateAgainstMinMaxDate","$observe","disabledDates","timezoneOffsetAdjust","$formatters","modelValue","isUndefined","NaN","parse","postLink","arrays","mod","n","m","arr","splice","size","$sce","weekDaysMin","weekdaysShort","weekDaysShortLabels","weekDaysLongLabels","weekDaysLabelsHtml","weekDayLabel","weekdays","slice","concat","startDate","getMonth","split","picker","firstDayOfMonth","firstDayOfMonthOffset","getTimezoneOffset","firstDate","firstDateOffset","days","selectedDay","todayDay","daylightSavingAdjust","dayItem","label","isToday","screenReaderLabel","getDatetimeFormat","muted","defaultFirstDayTabIndex","push","title","showLabels","labels","isTodayDisabled","hasSelectedDate","$modeLabel","isDisabled","time","indexOf","getDay","actualTime","target","find","hasClass","newDate","name","months","selectedMonth","monthItem","thisMonthDate","thisMonth","lastDate","actualMonth","setMonth","parseInt","firstYear","years","selectedYear","yearItem","thisYear","actualYear","setYear","Array","prototype"],"mappings":"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","file":"modules/datepicker.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', [\r\n  'mgcrea.ngStrap.helpers.dateParser',\r\n  'mgcrea.ngStrap.helpers.dateFormatter',\r\n  'mgcrea.ngStrap.helpers.focusElement',\r\n  'mgcrea.ngStrap.tooltip'])\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      hasToday: false,\r\n      hasClear: false,\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right',\r\n      // The format that will be given to the screen reader values placed in the DOM.\r\n      screenReaderDateFormat: 'fullDate',\r\n      // Focuses the table element in the dropdown upon display of the picker.\r\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\r\n      focusOnOpen: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\r\n        // defaults and the configuration passed.\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // Add assistive technology helper attributes.\r\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\r\n\r\n        // View vars\r\n\r\n        // Initialize the datepicker view collection by passing a reference to the base object.\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        /*\r\n         * View mode for the date picker.\r\n         * 0: days\r\n         * 1: months\r\n         * 2: years\r\n         */\r\n        scope.$mode = options.startView;\r\n        // icon class override\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        // Show buttons at the bottom of the picker.\r\n        scope.$hasToday = options.hasToday;\r\n        scope.$hasClear = options.hasClear;\r\n        /*\r\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\r\n         * aria attributes which are linked via ids.\r\n         */\r\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\r\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\r\n        scope.keyboard = options.keyboard;\r\n        scope.focusOnOpen = options.focusOnOpen;\r\n\r\n        // labels\r\n        scope.$nextLabel = options.labelNext;\r\n        scope.$previousLabel = options.labelPrevious;\r\n\r\n        // This is the actual current picker view.\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Internal handlers\r\n\r\n        function handleOnKeyDown (evt, apply) {\r\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\r\n            return false;\r\n          }\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n              if (options.focusOnOpen) return true;\r\n            } else {\r\n              if (apply === undefined || apply) {\r\n                scope.$apply(function () {\r\n                  $datepicker.setMode(scope.$mode - 1);\r\n                });\r\n              } else {\r\n                $datepicker.setMode(scope.$mode - 1);\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        }\r\n\r\n        // Scope methods\r\n\r\n        /**\r\n         * Pass through from the scope to the provider for the selection of a date.\r\n         */\r\n        scope.$select = function (date, disabled) {\r\n          if (disabled) return;\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n        scope.$setToday = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(new Date());\r\n          } else {\r\n            $datepicker.select(new Date(), true);\r\n          }\r\n        };\r\n        scope.$clear = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(null);\r\n          } else {\r\n            $datepicker.select(null, true);\r\n          }\r\n        };\r\n        scope.$focused = function (dayInfo) {\r\n          scope.selectedDayId = dayInfo.id;\r\n          if (dayInfo.isNext && !scope.selected) {\r\n            if (scope.$mode) {\r\n              $datepicker.update(dayInfo.date);\r\n            } else {\r\n              scope.$select(dayInfo.date);\r\n            }\r\n          }\r\n        };\r\n        scope.$onKeyDown = function (evt, day) {\r\n          var continueHandling = handleOnKeyDown(evt, false);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (angular.isDate(date)) {\r\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\r\n              controller.$dateValue = new Date(date);\r\n            }\r\n          } else {\r\n            controller.$dateValue = null;\r\n          }\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () {\r\n                $datepicker.hide(true);\r\n              });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {\r\n              year: date.getFullYear(),\r\n              month: date.getMonth(),\r\n              date: date.getDate()\r\n            });\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        /**\r\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\r\n         * rebuilt. The views are days, months, and years.\r\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\r\n         */\r\n        $datepicker.setMode = function setMode (mode) {\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          // The picker has been changed so the view needs to be built.\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        /**\r\n         * Builds the datepicker's view based on the picker that is currently set.\r\n         */\r\n        $datepicker.$build = function $build (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], function (day) {\r\n              updateSelected(day);\r\n              if (day.selected) scope.selected = day;\r\n            });\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {\r\n            year: targetDate.getUTCFullYear(),\r\n            month: targetDate.getUTCMonth(),\r\n            date: targetDate.getUTCDate()\r\n          });\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Handles the onKeyDown event from the element that this datepicker is bound.\r\n         * In the standard case this will be an input element. If the trigger is set\r\n         * to click and is bound to a button then it is likely we're servicing a 508\r\n         * type situation where the implementation will no longer uses. Focus will be\r\n         * given to the table.\r\n         */\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          var continueHandling = handleOnKeyDown(evt);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n            parentScope.$digest();\r\n          }\r\n        };\r\n\r\n        $datepicker.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inTable = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n              inTable = true;\r\n              break;\r\n            } else {\r\n              inTable = false;\r\n            }\r\n          }\r\n\r\n          if (!inTable) {\r\n            $datepicker.hide();\r\n          } else {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n          }\r\n        };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n          el.focused = el.selected;\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        // The datepicker will override the init functionality of the tool\r\n        var _init = $datepicker.init;\r\n        /**\r\n         * Initialize the datepicker.\r\n         */\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\r\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\r\n        var _destroy = $datepicker.destroy;\r\n\r\n        /**\r\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\r\n         */\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be shown.\r\n        var _show = $datepicker.show;\r\n\r\n        /**\r\n         * Override for the tooltip's show function.\r\n         *\r\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\r\n         * Once shown it sets up the appropriate events.\r\n         */\r\n        $datepicker.show = function show () {\r\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n\r\n          // Call the \"overriden base\" function on the tooltip.\r\n          _show();\r\n\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n\r\n            // Update assistive technologies for view changes:\r\n            $datepicker.$element.attr('aria-hidden', 'false');\r\n            element.attr('aria-expanded', 'true');\r\n\r\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n            // If keyboard navigation is enabled (true by default).\r\n            if (options.keyboard) {\r\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\r\n              // Check to see if the table element should receive the focus when the picker is shown.\r\n              if (options.focusOnOpen) {\r\n                // Focus the table element.\r\n                // $datepicker.$element.find('table')[0].focus();\r\n                $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\r\n              } else {\r\n                element.on('keydown', $datepicker.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be hidden.\r\n        var _hide = $datepicker.hide;\r\n\r\n        /**\r\n         * Overrid efor the tooltip's hide function.\r\n         *\r\n         * Updates attributes for assistive technologies and unbinds events.\r\n         */\r\n        $datepicker.hide = function (blur) {\r\n          // If the picker is already hidden don't do anything.\r\n          if (!$datepicker.$isShown) return;\r\n\r\n          // Update the attributes used by assisteive technologies\r\n          $datepicker.$element.attr('aria-hidden', 'true');\r\n          element.attr('aria-expanded', 'false');\r\n\r\n          // Unbind the mouse and touch events\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n          // If keyboard events were bound then unbind them.\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          if (options.focusOnOpen) {\r\n            $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\r\n            element[0].focus();\r\n          }\r\n          // Call the tooltip's hide function.\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\r\n    return {\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        options = angular.extend({}, $datepicker.defaults, options);\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\r\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n      }\r\n    };\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLong = $dateFormatter.weekdays(lang);\r\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n\r\n        var weekDaysLabelsHtml = '';\r\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\r\n          var weekDayShortLabel = weekDaysShortLabels[i];\r\n          var weekDayLabel = weekDaysLongLabels[i];\r\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\r\n        }\r\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {\r\n          year: startDate.getFullYear(),\r\n          month: startDate.getMonth(),\r\n          date: startDate.getDate()\r\n        };\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {\r\n            month: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n                // in $datepicker.$selectPane, so picker would not update selected day display if\r\n                // user picks first day of the new month.\r\n                // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n              // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            var selectedDay;\r\n            var todayDay;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              // push the day information onto the collection\r\n              var dayItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: day,\r\n                value: day.getDate(),\r\n                isToday: day.toDateString() === today,\r\n                label: formatDate(day, this.format),\r\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\r\n                selected: picker.$date && this.isSelected(day),\r\n                muted: day.getMonth() !== viewDate.month,\r\n                disabled: this.isDisabled(day)\r\n              };\r\n\r\n              if (dayItem.selected) selectedDay = dayItem;\r\n              if (dayItem.isToday) todayDay = dayItem;\r\n\r\n              days.push(dayItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedDay) {\r\n                scope.selectedDayId = selectedDay.id;\r\n                if (todayDay) todayDay.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedDay.focused = true;\r\n                scope.selected = selectedDay;\r\n              } else if (todayDay) {\r\n                todayDay.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.isTodayDisabled = this.isDisabled(new Date());\r\n            scope.hasSelectedDate = picker.$date != null;\r\n            scope.$modeLabel = options.labelMonth;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\r\n              date.getMonth() === picker.$date.getMonth() &&\r\n              date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n              // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n              // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n              // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            var actualTime;\r\n\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date) {\r\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n                picker.$date = new Date();\r\n              } else {\r\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\r\n              }\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return false;\r\n            }\r\n\r\n            actualTime = picker.$date.getTime();\r\n\r\n            var newDate;\r\n\r\n            switch (evt.keyCode) {\r\n              // enter\r\n              case 13:\r\n                if (options.focusOnOpen) {\r\n                  picker.select(new Date(actualTime), true);\r\n                  return false;\r\n                }\r\n                break;\r\n              // pageup\r\n              case 33:\r\n                if (evt.altKey) { // move back a year\r\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move back a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\r\n                  }\r\n                }\r\n                break;\r\n\r\n              // pagedown\r\n              case 34:\r\n                if (evt.altKey) { // move forward a year\r\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move forward a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\r\n                  }\r\n                }\r\n\r\n                break;\r\n\r\n              // left arrow\r\n              case 37:\r\n                newDate = new Date(actualTime - 1 * 864e5);\r\n                break;\r\n\r\n              // up arrow\r\n              case 38:\r\n                newDate = new Date(actualTime - 7 * 864e5);\r\n                break;\r\n\r\n              // right arrow\r\n              case 39:\r\n                newDate = new Date(actualTime + 1 * 864e5);\r\n                break;\r\n\r\n              // down arrow\r\n              case 40:\r\n                newDate = new Date(actualTime + 7 * 864e5);\r\n                break;\r\n\r\n              default:\r\n                return false;\r\n            }\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n\r\n            if (evt && evt.stopPropagation) evt.stopPropagation();\r\n\r\n            return false;\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            var selectedMonth;\r\n            var thisMonth;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n\r\n              var monthItem = {\r\n                date: month,\r\n                label: formatDate(month, this.format),\r\n                selected: picker.$isSelected(month),\r\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\r\n                disabled: this.isDisabled(month)\r\n              };\r\n\r\n              if (monthItem.selected) selectedMonth = monthItem;\r\n              if (monthItem.isToday) thisMonth = monthItem;\r\n\r\n              months.push(monthItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedMonth) {\r\n                scope.selectedDayId = selectedMonth.id;\r\n                if (thisMonth) thisMonth.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedMonth.focused = true;\r\n                scope.selected = selectedMonth;\r\n              } else if (thisMonth) {\r\n                thisMonth.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modeLabel = options.labelYear;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\r\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 12\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            var selectedYear;\r\n            var thisYear;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n\r\n              var yearItem = {\r\n                date: year,\r\n                label: formatDate(year, this.format),\r\n                selected: picker.$isSelected(year),\r\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\r\n                disabled: this.isDisabled(year)\r\n              };\r\n\r\n              if (yearItem.selected) selectedYear = yearItem;\r\n              if (yearItem.isToday) thisYear = yearItem;\r\n\r\n              years.push(yearItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedYear) {\r\n                scope.selectedDayId = selectedYear.id;\r\n                if (thisYear) thisYear.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedYear.focused = true;\r\n                scope.selected = selectedYear;\r\n              } else if (thisYear) {\r\n                thisYear.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modelLabel = options.labelDays;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}