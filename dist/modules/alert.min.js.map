{"version":3,"sources":["modules/alert.js"],"names":["angular","container","provider","element","this","defaults","backdrop","keyboard","show","duration","type","dismissable","focusMeDisabled","$get","$alert","options","$modal","returnFocus","containerEl","$element","AlertFactory","extend","config","findNextFocusableElement","document","findFocusableElements","toArray","focusable","undefined","filter","i","el","index","indexOf","activeElement","$scope","$timeout","hide","scope","directive","restrict","link","isDefined","key","falseValueRegExp","forEach","bsKey","charAt","toUpperCase","slice","attr","test","title","$eval","hasOwnProperty","$watch","isObject","newValue","oldValue","bsAlert","alert","trigger","destroy","on","toggle","$on"],"mappings":"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","file":"modules/alert.min.js","sourcesContent":["'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true,\n\t  focusMeDisabled: false\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\t\t\n\t\t$alert.returnFocus = function() {\n\t\t\tfunction findFocusableElements() {\n\t\t\t\tvar containerEl = angular.element($alert.$element).closest('[ng-controller]');\n\t\t\t\t\n\t\t\t\treturn containerEl.find('a:not([disabled]),button:not([disabled]),input:not([disabled]),select:not([disabled]),[tabindex]:not([disabled]):not([tabindex=\"-1\"])').filter(function (i,el) {\n\t\t\t\t\treturn !angular.element(el).parentsUntil(containerEl, '[tabindex=\"-1\"]').length\n\t\t\t\t});\n\t\t\t}\n\t\t\tfunction findNextFocusableElement() {\n\t\t\t\tif (document.activeElement) {\n\t\t\t\t\tvar focusable = findFocusableElements().toArray();\n\t\t\t\t\tif (focusable === undefined) return;\n\t\t\t\t\tvar index = focusable.indexOf(document.activeElement);\n\t\t\t\t\treturn focusable[index + 1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tangular.element(findNextFocusableElement()).focus();\n\n\n\t\t}\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\t\tif (options.focusMeDisabled) {\n          $alert.$scope.focusMeDisabled = options.focusMeDisabled;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}