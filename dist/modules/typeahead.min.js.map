{"version":3,"sources":["modules/typeahead.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","minLength","filter","limit","autoSelect","comparator","trimValue","translations","resultsText","noResultsText","selectResultText","selectedProperty","downArrow","enter","escape","tab","TypeaheadFactory","$typeahead","options","upArrow","scope","id","$resetMatches","element","controller","config","$activeIndex","$tooltip","$activate","$scope","$$postDigest","activate","$matches","select","index","$select","evt","$isActive","matches","safeDigest","update","setFeedbackMessage","document","setTimeout","$$rAF","message","getElementById","$id","$setViewValue","value","$render","parentScope","$digest","prefixEvent","onSelect","$emit","length","isDefined","isFunction","$viewValue","$getIndex","$generateResultId","$onMouseDown","preventDefault","stopPropagation","equals","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","children","lowWatermark","clientHeight","setAriaActiveDescendant","$isVisible","which","KEY_CODES","fromJson","keyCode","ele","focus","$$updateScrollTop","show","$element","assertDiv","$timeout","attr","on","append","$onKeyDown","ariaLabelledby","hide","off","onKeyUp","$isShown","onFocusKeyUp","$onFocusKeyUp","undefined","resultId","$$phase","array","then","$filter","expression","directive","results","postLink","restrict","forEach","require","link","falseValueRegExp","key","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$match","$watchCollection","values","watchOptions","replace","trim","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","$on","destroy"],"mappings":"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","file":"modules/typeahead.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true,\r\n      translations: {\r\n        resultsText: \"suggestions\",\r\n        noResultsText: \"no suggestions available\",\r\n        selectResultText: \"you must select a value from the dropdown list\"\r\n      },\r\n      selectedProperty: ''\r\n    };\r\n\r\n    var KEY_CODES = {\r\n      downArrow: 40,\r\n      enter: 13,\r\n      escape: 27,\r\n      upArrow: 38,\r\n      tab: 9\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n        scope.id = options.id;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function isActive (index) {\r\n          return scope.$activeIndex === index ? true : undefined;\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.setFeedbackMessage = function(message) {\r\n          var element = angular.element(document.getElementById(scope.$id + '_sr_text'))\r\n          if(element) {\r\n            angular.element(element).text(message);\r\n            setTimeout(function() {\r\n              angular.element(element).text('');\r\n            },2000);\r\n          } \r\n        }\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          if (typeof value === 'object' && options.selectedProperty !== void 0 && options.selectedProperty.length > 0) {\r\n            controller.$setViewValue(value[options.selectedProperty]);\r\n          } else {\r\n            controller.$setViewValue(value);\r\n          }\r\n          // console.log('$setViewValue', value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        scope.$generateResultId = function (index) {\r\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          $typeahead.setAriaActiveDescendant();\r\n          \r\n          // If the key code isn't up arrow, down arrow, or enter return.\r\n          if (!/(38|40|13|27|9)/.test(evt.keyCode)) return;                 \r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          if (evt.which === KEY_CODES.escape || evt.which === KEY_CODES.tab) {\r\n            if($typeahead.$isVisible()) {              \r\n              var translations = angular.fromJson(options.translations);\r\n              $typeahead.setFeedbackMessage(translations.selectResultText);              \r\n\r\n              return;\r\n            }\r\n            else {\r\n              $typeahead.hide();\r\n              evt.stopPropagation();    \r\n            }            \r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n            // Navigate with keyboard\r\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n            $typeahead.setAriaActiveDescendant(scope.$activeIndex);   \r\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n            $typeahead.setAriaActiveDescendant(scope.$activeIndex);\r\n          } else if ((evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex === 0) || (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex === scope.$matches.length - 1)) {\r\n            scope.$activeIndex = -1;\r\n            var ele = '#' + evt.currentTarget.id;\r\n            // position the cursor after the last letter of the selected item inside the control to allow the user to easily delete the selection if desired\r\n            angular.element(ele).val('').val(controller.$viewValue);\r\n            angular.element(ele).focus();\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n            $typeahead.setAriaActiveDescendant();\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              if (scope.$id) {\r\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\r\n                $typeahead.$element.attr('id', scope.$id + '_listbox');\r\n                element.attr('aria-controls', scope.$id + '_listbox');\r\n\r\n                var assertDiv = document.getElementById(scope.$id + '_sr_text');\r\n                if (!assertDiv) {\r\n                  $typeahead.$element.parent().append('<div id=\"' + scope.$id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\r\n                }\r\n              }\r\n\r\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\r\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\r\n\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                // event for the element that we attach is added to event queue\r\n                // before pushing the same event more that once for the same element, event need to detach\r\n                // list item jumps happening in search list for this setted keydown off\r\n                if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n\r\n          var assertDiv = document.getElementById(scope.$id + '_sr_text');\r\n          angular.element(assertDiv).remove();\r\n\r\n          $typeahead.setAriaActiveDescendant();\r\n\r\n          hide();\r\n        };\r\n\r\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();               \r\n          }\r\n        };\r\n\r\n        // Helper functions within this closure\r\n\r\n        $typeahead.setAriaActiveDescendant = function(index) {\r\n          if (index === undefined || !scope.id) {\r\n            element.attr('aria-activedescendant', '');\r\n          } else {\r\n            var resultId = scope.$generateResultId(index);\r\n            if (resultId) {\r\n              element.attr('aria-activedescendant', resultId);\r\n            } else {\r\n              element.attr('aria-activedescendant', '');\r\n            }\r\n          }\r\n        }\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby', 'translations', 'selectedProperty'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');    \r\n        \r\n        // Add aria-expanded attribute\r\n        element.attr('aria-expanded', false);\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\r\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\r\n          element.attr('aria-autocomplete', 'list');\r\n        }\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          typeahead.setAriaActiveDescendant();\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);  \r\n       \r\n          if (typeahead.$scope.$matches !== void 0 && selected.length >= options.minLength) {\r\n            var translations = angular.fromJson(options.translations);\r\n            if (typeahead.$scope.$matches.length > 0) {\r\n              typeahead.setFeedbackMessage(typeahead.$scope.$matches.length + ' ' + translations.resultsText);\r\n            } else {\r\n              typeahead.setFeedbackMessage(translations.noResultsText);\r\n            }\r\n          }   \r\n          \r\n          element.attr('aria-expanded', typeahead.$isVisible());\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          element.off('keydown');\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}