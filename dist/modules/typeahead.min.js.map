{"version":3,"sources":["modules/typeahead.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","minLength","filter","limit","autoSelect","comparator","trimValue","KEY_CODES","downArrow","enter","escape","upArrow","$typeahead","options","parentScope","scope","id","$resetMatches","element","controller","config","setAriaActiveDescendant","index","removeAttr","resultId","$generateResultId","attr","$$phase","$root","$activeIndex","$tooltip","$activate","$scope","$$postDigest","activate","$matches","select","$select","evt","$isActive","matches","safeDigest","update","$$rAF","value","$render","$emit","prefixEvent","isDefined","onSelect","$setViewValue","length","isFunction","$viewValue","$getIndex","$onMouseDown","preventDefault","stopPropagation","equals","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","children","lowWatermark","clientHeight","keyCode","$isVisible","getElementById","$digest","document","label","show","$element","assertDiv","$timeout","parent","append","ariaLabelledby","hide","$onKeyDown","onKeyUp","which","$isShown","onFocusKeyUp","$onFocusKeyUp","undefined","array","then","TypeaheadFactory","$filter","expression","directive","results","postLink","restrict","forEach","require","link","falseValueRegExp","key","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$match","$watchCollection","values","watchOptions","replace","trim","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","isObject","toString","$on","off","destroy"],"mappings":"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","file":"modules/typeahead.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    var KEY_CODES = {\r\n      downArrow: 40,\r\n      enter: 13,\r\n      escape: 27,\r\n      upArrow: 38\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory(element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n        scope.id = options.id;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function isActive (index) {\r\n          return scope.$activeIndex === index ? true : undefined;\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        scope.$generateResultId = function (index) {\r\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          // If the key code isn't up arrow, down arrow, or enter return.\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n            // Navigate with keyboard\r\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n            setAriaActiveDescendant();\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              if (options.id) {\r\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\r\n                $typeahead.$element.attr('id', options.id + '_listbox');\r\n                element.attr('aria-controls', options.id + '_listbox');\r\n\r\n                var assertDiv = document.getElementById(options.id + '_sr_text');\r\n                if (!assertDiv) {\r\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\r\n                }\r\n              }\r\n\r\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\r\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\r\n\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n\r\n          var assertDiv = document.getElementById(options.id + '_sr_text');\r\n          angular.element(assertDiv).remove();\r\n\r\n          setAriaActiveDescendant();\r\n\r\n          hide();\r\n        };\r\n\r\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Helper functions within this closure\r\n\r\n        function setAriaActiveDescendant(index) {\r\n          if (index === undefined || !scope.id) {\r\n            element.removeAttr('aria-activedescendant');\r\n          } else {\r\n            var resultId = scope.$generateResultId(index);\r\n            if (resultId) {\r\n              element.attr('aria-activedescendant', resultId);\r\n            } else {\r\n              element.removeAttr('aria-activedescendant');\r\n            }\r\n          }\r\n        }\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest(scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\r\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\r\n          element.attr('aria-autocomplete', 'list');\r\n        }\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          element.off('keydown');\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}