{"version":3,"sources":["modules/typeahead.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","minLength","filter","limit","autoSelect","comparator","trimValue","translations","feedbackId","selectedProperty","KEY_CODES","downArrow","enter","escape","upArrow","tab","TypeaheadFactory","$typeahead","options","scope","id","$resetMatches","element","controller","config","setAriaActiveDescendant","index","removeAttr","resultId","$generateResultId","attr","$$phase","$root","$activeIndex","$tooltip","$activate","$scope","$$postDigest","activate","$matches","select","$select","evt","$isActive","matches","safeDigest","update","$$rAF","value","$setViewValue","parentScope","$digest","prefixEvent","onSelect","$render","$emit","length","isDefined","isFunction","$viewValue","$getIndex","$onMouseDown","preventDefault","stopPropagation","equals","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","children","lowWatermark","clientHeight","keyCode","$isVisible","getElementById","ele","currentTarget","isUndefined","label","$$updateScrollTop","focus","show","$element","assertDiv","$timeout","on","append","$onKeyDown","ariaLabelledby","hide","off","onKeyUp","which","$isShown","onFocusKeyUp","$onFocusKeyUp","fromJson","undefined","text","selectResultText","array","then","$filter","expression","directive","results","postLink","restrict","forEach","require","link","setFeedbackMessage","message","document","falseValueRegExp","key","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$match","$watchCollection","values","watchOptions","replace","trim","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","substring","displayValue","$formatters","push","modelValue","selected","isObject","toString","selectionStart","val","selectionEnd","setSelectionRange","ss","sd","$on","destroy"],"mappings":"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","file":"typeahead.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true,\r\n      translations: null,\r\n      feedbackId: '',\r\n      selectedProperty: ''\r\n    };\r\n\r\n    var KEY_CODES = {\r\n      downArrow: 40,\r\n      enter: 13,\r\n      escape: 27,\r\n      upArrow: 38,\r\n      tab: 9\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n        scope.id = options.id;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function isActive (index) {\r\n          return scope.$activeIndex === index ? true : undefined;\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          if (typeof value === 'object' && options.selectedProperty !== void 0 && options.selectedProperty.length > 0) {\r\n            controller.$setViewValue(value[options.selectedProperty]);\r\n          } else {\r\n            controller.$setViewValue(value);\r\n          }\r\n          // console.log('$setViewValue', value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        scope.$generateResultId = function (index) {\r\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          // If the key code isn't up arrow, down arrow, or enter return.\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n            // Navigate with keyboard\r\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if ((evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex === 0) || (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex === scope.$matches.length - 1)) {\r\n            scope.$activeIndex = -1;\r\n            var ele = '#' + evt.currentTarget.id;\r\n            // position the cursor after the last letter of the selected item inside the control to allow the user to easily delete the selection if desired\r\n            angular.element(ele).val('').val(controller.$viewValue);\r\n            angular.element(ele).focus();\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n            setAriaActiveDescendant();\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              if (options.id) {\r\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\r\n                $typeahead.$element.attr('id', options.id + '_listbox');\r\n                element.attr('aria-controls', options.id + '_listbox');\r\n\r\n                var assertDiv = document.getElementById(options.id + '_sr_text');\r\n                if (!assertDiv) {\r\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\r\n                }\r\n              }\r\n\r\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\r\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\r\n\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                // event for the element that we attach is added to event queue\r\n                // before pushing the same event more that once for the same element, event need to detach\r\n                // list item jumps happening in search list for this setted keydown off\r\n                if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n\r\n          var assertDiv = document.getElementById(options.id + '_sr_text');\r\n          angular.element(assertDiv).remove();\r\n\r\n          setAriaActiveDescendant();\r\n\r\n          hide();\r\n        };\r\n\r\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape) {\r\n            // Feedback message handling as per SS-25684 and SS-11481\r\n            if (options.feedbackId !== void 0 && options.translations !== void 0) {\r\n              var translations = angular.fromJson(options.translations);\r\n              var element = document.getElementById(options.feedbackId);\r\n              if ($typeahead.$scope.$matches !== void 0 && $typeahead.$scope.$matches.length > 0) {\r\n                angular.element(element).text(translations.selectResultText);\r\n              }\r\n              // $typeahead.hide();\r\n              // evt.stopPropagation();\r\n            }\r\n          }\r\n        };\r\n\r\n        // Helper functions within this closure\r\n\r\n        function setAriaActiveDescendant (index) {\r\n          if (index === undefined || !scope.id) {\r\n            element.removeAttr('aria-activedescendant');\r\n          } else {\r\n            var resultId = scope.$generateResultId(index);\r\n            if (resultId) {\r\n              element.attr('aria-activedescendant', resultId);\r\n            } else {\r\n              element.removeAttr('aria-activedescendant');\r\n            }\r\n          }\r\n        }\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby', 'translations', 'feedbackId', 'selectedProperty'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\r\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\r\n          element.attr('aria-autocomplete', 'list');\r\n        }\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            // Feedback message handling as per SS-25684 and SS-11481\r\n            setFeedbackMessage('');\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n\r\n          // Feedback message handling as per SS-25684 and SS-11481\r\n          if (options.translations !== void 0) {\r\n            // Clear feedback element contents\r\n            setFeedbackMessage('');\r\n\r\n            if (typeahead.$scope.$matches !== void 0) {\r\n              var translations = angular.fromJson(options.translations);\r\n              if (typeahead.$scope.$matches.length > 0) {\r\n                setFeedbackMessage(typeahead.$scope.$matches.length + ' ' + translations.resultsText);\r\n              } else {\r\n                setFeedbackMessage(translations.noResultsText);\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n        // Feedback message handling as per SS-25684 and SS-11481\r\n        element.on('keydown', function (evt) {\r\n          if (evt.which === 9) {\r\n            evt.preventDefault();\r\n            if (options.translations !== void 0) {\r\n              var translations = angular.fromJson(options.translations);\r\n              if (typeahead.$scope.$matches.length > 0) {\r\n                setFeedbackMessage(translations.selectResultText);\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          element.off('keydown');\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n        function setFeedbackMessage (message) {\r\n          if (options.feedbackId !== void 0) {\r\n            var element = document.getElementById(options.feedbackId);\r\n            angular.element(element).text(message);\r\n          }\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"]}