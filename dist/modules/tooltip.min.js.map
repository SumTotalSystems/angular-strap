{"version":3,"sources":["modules/tooltip.js"],"names":["angular","target","provider","placement","this","defaults","templateUrl","template","titleTemplate","trigger","keyboard","html","show","title","type","delay","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","$get","promise","$tooltip","$bsCompiler","compile","options","split","length","clearTimeout","hoverState","prefixEvent","hide","isFunction","onShow","leaveAnimateCallback","scope","$emit","destroyTipElement","onHide","_tipToHide","evt","preventDefault","element","triggers","on","forEach","toggle","unbindTriggerEvents","enter","leave","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$timeout","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","$element","elRect","getBoundingClientRect","rect","p","width","height","top","left","extend","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","test","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","findElement","$arrow","timeout","$isShown","tipScope","$destroy","$$phase","$options","config","$promise","$scope","$new","$rootScope","$id","attr","map","parseFloat","$sce","trustAsHtml","$setEnabled","$$postDigest","id","$hide","setEnabled","isEnabled","compileData","then","data","tipContainer","init","container","bindTriggerEvents","isElement","destroy","focus","isDefined","onBeforeShow","after","parent","lastChild","display","visibility","link","clonedElement","animation","addClass","prefixClass","safeDigest","version","prepend","$$rAF","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","replace","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","stopPropagation","directive","$root","$digest","restrict","query","querySelectorAll","isNative","isTouch","isString","tooltip","transclusion","falseValueRegExp","key","$eval","bsKey","dataTarget","slice","hasOwnProperty","oldValue","$observe","newValue","bsTooltip","bsShow","$watch","match","setViewport","$on"],"mappings":"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","file":"modules/tooltip.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        // var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n              // element.on('blur', $tooltip.leave);\n            } else if (trigger !== 'manual') {\n              // Only bind up hover events if we are on a desktop\n              if (!isTouch) {\n                element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n                element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              }\n              // if (nodeName === 'button' && trigger !== 'hover') {\n              //   element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              // }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              // Remove previously defined hover events if we are on a desktop\n              if (!isTouch) {\n                element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n                element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              }\n              // if (nodeName === 'button' && trigger !== 'hover') {\n              //   element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              // }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}