{"version":3,"sources":["modules/tab.js"],"names":["angular","_tabsHash","_addTabControl","animation","template","navClass","controller","activeClass","this","isDefined","$attrs","key","control","$scope","$activeClass","$options","self","newIndex","disabled","navigatePane","toLeft","$panes","$setActive","name","index","length","focusCurrentTab","$timeout","activeAs","$activePaneChangeListeners","$viewChangeListeners","$push","pane","isUndefined","$onClick","copy","defaults","preventDefault","stopPropagation","evt","forEach","tabPane","$labeledBy","$active","active","activeIndex","undefined","id","$remove","indexOf","splice","map","value","fn","$pane","$onKeyPress","e","keyCode","charCode","$index","$get","$tab","directive","scope","require","transclude","templateUrl","attr","link","postLink","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","$setViewValue","$formatters","modelValue","push","liElements","element","find","i","iElement","attrs","bsActivePane","parsedBsActivePane","$parse","assign","$watch","newValue","oldValue","$window","$animate","$sce","title","trustAsHtml","render","$isActive","addClass","$describedBy","$on"],"mappings":"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","file":"modules/tab.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active'\r\n    };\r\n    var _tabsHash = {};\r\n\r\n    var _addTabControl = function (key, control) {\r\n      if (!_tabsHash[key]) _tabsHash[key] = control;\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      $scope.$onClick = function $onClick (evt, pane, index) {\r\n        if (!pane.disabled) {\r\n          self.$setActive(pane.name || index);\r\n          focusCurrentTab();\r\n        }\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n      };\r\n\r\n      function navigatePane (index, toLeft) {\r\n        var newIndex = 0;\r\n\r\n        if (toLeft) {\r\n          // Moving to the left\r\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\r\n        } else {\r\n          // Moving to the right\r\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\r\n        }\r\n\r\n        if (self.$panes[newIndex].disabled) {\r\n          navigatePane(newIndex, toLeft);\r\n        } else {\r\n          self.$setActive(self.$panes[newIndex].name || newIndex);\r\n          focusCurrentTab();\r\n        }\r\n      }\r\n\r\n      function focusCurrentTab () {\r\n        $timeout(function () {\r\n          var activeAs = angular.element($element[0].querySelectorAll('li.' + self.$options.activeClass));\r\n\r\n          if (activeAs.length > 0 && activeAs[0]) {\r\n            activeAs[0].focus();\r\n          }\r\n        }, 100);\r\n      }\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n\r\n        self.$panes.push(pane);\r\n\r\n        self.$panes.forEach(function (tabPane, index) {\r\n          // Set an id value for the pane so that it can be used in the template\r\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\r\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\r\n        });\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\r\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\r\n          // If space or enter was pressed\r\n          self.$setActive(name);\r\n\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n\r\n        } else if (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\r\n        }\r\n      };\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      $tab.addTabControl = _addTabControl;\r\n      $tab.tabsHash = _tabsHash;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\r\n        // tabs are available in the tab component\r\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\r\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\r\n        }\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          $timeout(function () {\r\n            // get li elements\r\n            var liElements = element.find('li');\r\n            for (var i = 0; i < liElements.length; i++) {\r\n              var iElement = angular.element(liElements[i]);\r\n              if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\r\n                // if li is active, set focus to it.\r\n                iElement.find('a')[0].focus();\r\n              }\r\n            }\r\n            // delay, for the class (.active) change to reflect in DOM.\r\n          }, 100);\r\n        });\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Set up the assistive attributes\r\n        element.attr('role', 'tabpanel');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n        // Save tab id into scope\r\n        scope.id = attrs.id;\r\n\r\n        scope.name = scope.name || scope.id;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // Once the push has occured when can then update the element with some properties.\r\n        // Update the aria-describedby attribute\r\n        if (scope.$describedBy !== undefined) {\r\n          element.attr('aria-describedby', scope.$describedBy);\r\n        }\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}