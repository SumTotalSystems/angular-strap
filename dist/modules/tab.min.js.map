{"version":3,"sources":["modules/tab.js"],"names":["angular","module","provider","_tabsHash","animation","_addTabControl","template","navClass","activeClass","controller","isVertical","this","isDefined","$attrs","key","control","forEach","$scope","self","newIndex","disabled","navigatePane","toLeft","$panes","$setActive","name","index","length","$activePaneChangeListeners","pane","$options","copy","defaults","$navClass","$activeClass","falseValueRegExp","test","stopPropagation","$onClick","evt","preventDefault","tabPane","$labeledBy","isUndefined","$active","active","activeIndex","undefined","id","$remove","indexOf","splice","map","value","fn","$pane","$onKeyPress","e","keyCode","charCode","$tab","$get","directive","scope","require","transclude","templateUrl","attr","link","postLink","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","$setViewValue","$formatters","modelValue","push","liElements","element","find","i","iElement","$timeout","parsedBsActivePane","attrs","bsActivePane","assign","$parse","$watch","newValue","oldValue","$window","$animate","$sce","title","trustAsHtml","render","$isActive","addClass","$push","$describedBy","$on","restrict","elem","focusOn","children","focus"],"mappings":"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","file":"modules/tab.min.js","sourcesContent":["'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active',\r\n      isVertical: false\r\n    };\r\n    var _tabsHash = {};\r\n\r\n    var _addTabControl = function (key, control) {\r\n      if (!_tabsHash[key]) _tabsHash[key] = control;\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      $scope.$onClick = function $onClick (evt, pane, index) {\r\n        if (!pane.disabled) {\r\n          self.$setActive(pane.name || index);\r\n        }\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n      };\r\n\r\n      function navigatePane (index, toLeft) {\r\n        var newIndex = 0;\r\n\r\n        if (toLeft) {\r\n          // Moving to the left\r\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\r\n        } else {\r\n          // Moving to the right\r\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\r\n        }\r\n\r\n        if (self.$panes[newIndex].disabled) {\r\n          navigatePane(newIndex, toLeft);\r\n        } else {\r\n          self.$setActive(self.$panes[newIndex].name || newIndex);\r\n        }\r\n      }\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n\r\n        self.$panes.push(pane);\r\n\r\n        self.$panes.forEach(function (tabPane, index) {\r\n          // Set an id value for the pane so that it can be used in the template\r\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\r\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\r\n        });\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\r\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\r\n          // If space or enter was pressed\r\n          self.$setActive(name);\r\n\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n\r\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\r\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\r\n        }\r\n      };\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      $tab.addTabControl = _addTabControl;\r\n      $tab.tabsHash = _tabsHash;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\r\n        // tabs are available in the tab component\r\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\r\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\r\n        }\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          $timeout(function () {\r\n            // get li elements\r\n            var liElements = element.find('li');\r\n            for (var i = 0; i < liElements.length; i++) {\r\n              var iElement = angular.element(liElements[i]);\r\n              iElement.removeAttr('tabindex');\r\n\r\n              // As per SS-44480\r\n              // if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\r\n                // if li is active, set focus to it.\r\n                // iElement.find('a')[0].focus();\r\n              // }\r\n            }\r\n            // delay, for the class (.active) change to reflect in DOM.\r\n          }, 100);\r\n        });\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Set up the assistive attributes\r\n        element.attr('role', 'tabpanel');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n        // Save tab id into scope\r\n        scope.id = attrs.id;\r\n\r\n        scope.name = scope.name || scope.id;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // Once the push has occured when can then update the element with some properties.\r\n        // Update the aria-labelledby attribute\r\n\t\t// SS-11127 - removed aria-describedby from tab and tab-panel and utilized aria-labeledby on the tab-panel using the ID of the tab and not the ID of the tab link\r\n        if (scope.$describedBy !== undefined) {\r\n          element.attr('aria-labelledby', scope.$describedBy);\r\n        }\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('focusOn', function () {\r\n    return {\r\n      restrict: 'A',\r\n      link: function (scope, elem, attr) {\r\n        scope.$watch(attr.focusOn, function (newValue, oldValue) {\r\n          if (newValue !== oldValue && newValue) {\r\n            elem[0].children[0].focus()\r\n          }\r\n        });\r\n      }\r\n    };\r\n  });\r\n"],"sourceRoot":"/source/"}