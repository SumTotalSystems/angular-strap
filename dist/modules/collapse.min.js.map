{"version":3,"sources":["modules/collapse.js"],"names":["angular","module","provider","controller","this","animation","self","forEach","startCollapsed","isDefined","allowMultiple","$scope","$element","$attrs","activeIndexes","$targets","$active","i","length","index","value","indexOf","splice","deactivateItem","activateItem","$options","attr","undefined","$toggles","push","$collapse","defaults","key","$viewChangeListeners","$registerToggle","element","$registerTarget","$unregisterToggle","fn","fixActiveItemIndexes","$setActive","disallowToggle","isActive","$activeIndexes","$get","require","link","postLink","ngModelCtrl","directive","$window","$animate","$setViewValue","$formatters","attrs","modelValue","isArray","bsCollapseCtrl","ENTER","KEY_CODES","SPACE","actionEventHandler","controllers","disabled","bsCollapseToggle","scope","$apply","which","console","on","bind","e","log","render","active","action","activeClass","$unregisterTarget","addClass"],"mappings":"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","file":"modules/collapse.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n        element.attr('aria-expanded', 'false');\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n\n        var i = 0;\n        if (self.$targets) {\n          for (i = 0; i < self.$targets.length; i++) {\n            self.$targets[i].attr('aria-hidden', 'true');\n          }\n          for (i = 0; i < self.$targets.$active.length; i++) {\n            if (self.$targets[self.$targets.$active[i]]) {\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\n            }\n            if (self.$toggles[self.$targets.$active[i]]) {\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\n            }\n          }\n        }\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\n          }\n          if (self.$toggles[self.$targets.$active[0]]) {\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\n          }\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\n          }\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\n          }\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n    var KEY_CODES = {\n      ENTER: 13,\n      SPACE: 32\n    };\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\n            console.log('key handler handling');\n            actionEventHandler();\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}