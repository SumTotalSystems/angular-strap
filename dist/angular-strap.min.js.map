{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","navbar/navbar.js","popover/popover.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/focus-out.js","helpers/focus-element.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","KEY_CODES","downArrow","enter","escape","upArrow","$typeahead","parentScope","id","$resetMatches","config","setAriaActiveDescendant","index","resultId","$generateResultId","attr","$$phase","$root","$activeIndex","$tooltip","$activate","$scope","$$postDigest","activate","$matches","select","$select","evt","$isActive","matches","safeDigest","update","$$rAF","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","$viewValue","$getIndex","$onMouseDown","preventDefault","stopPropagation","equals","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$isVisible","getElementById","$digest","document","label","show","$element","assertDiv","$timeout","parent","append","ariaLabelledby","hide","$onKeyDown","onKeyUp","which","$isShown","onFocusKeyUp","$onFocusKeyUp","array","TypeaheadFactory","$filter","expression","directive","results","postLink","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$match","$watchCollection","values","watchOptions","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","toString","$on","off","destroy","target","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","$get","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","on","isTouch","toggle","unbindTriggerEvents","$onFocusElementMouseDown","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","tipScope","$destroy","$options","$promise","$new","$rootScope","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","$hide","setEnabled","isEnabled","compileData","tipContainer","init","bindTriggerEvents","isElement","focus","onBeforeShow","after","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","isUndefined","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","$window","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","self","newIndex","navigatePane","toLeft","$panes","$setActive","name","focusCurrentTab","activeAs","$activePaneChangeListeners","$viewChangeListeners","$push","pane","$navClass","$activeClass","$onClick","tabPane","$labeledBy","$active","activeIndex","$remove","indexOf","splice","fn","$pane","$onKeyPress","e","charCode","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","liElements","find","iElement","attrs","bsActivePane","parsedBsActivePane","$parse","assign","render","$describedBy","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$selectNone","$updateActiveIndex","a","b","$apply","isArray","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","routeAttr","$navbar","li","liElement","pattern","path","RegExp","regexp","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","backdrop","size","zIndex","containerElement","bodyElement","layoutHideElement","backdropCount","backdropBaseZindex","ModalFactory","focusableElement","$modal","modalElement","findFocusableElements","focusableElements","focusable","findNextFocusableElement","call","inReverse","prototype","reverse","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","dialogBaseZindex","returnFocus","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","validSizes","minor","backdropAnimation","bindBackdropEvents","nextFocusable","shiftKey","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","callback","$event","ngFocusOut","ngEventHandler","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","noop","indexOfCaseInsensitive","len","str","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","weekdays","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","inMenu","relatedTarget","$onFocusOut","parentEl","hasClass","webkitMatchesSelector","Element","mozMatchesSelector","msMatchesSelector","oMatchesSelector","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","screenReaderDateFormat","focusOnOpen","DatepickerFactory","$datepicker","pickerViews","datepickerViews","altKey","setMode","$mode","focused","$views","views","$iconLeft","$iconRight","$hasToday","dropdownId","$nextLabel","labelNext","$previousLabel","$picker","handleOnKeyDown","$toggleMode","$setToday","$clear","$focused","selectedDayId","dayInfo","isNext","continueHandling","onKeyDown","inTable","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","built","$updateSelected","updateSelected","build","isSelected","steps","getUTCFullYear","getUTCMonth","$selectPane","UTC","getUTCDate","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysShortLabels","weekDaysLongLabels","weekDaysLabelsHtml","weekDayLabel","concat","picker","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","days","selectedDay","todayDay","dayItem","isToday","screenReaderLabel","muted","defaultFirstDayTabIndex","showLabels","labels","isTodayDisabled","hasSelectedDate","$modeLabel","isDisabled","getDay","actualTime","months","selectedMonth","monthItem","thisMonthDate","thisMonth","lastDate","actualMonth","firstYear","years","selectedYear","yearItem","thisYear","actualYear","setYear","Array","startCollapsed","allowMultiple","activeIndexes","$targets","deactivateItem","activateItem","$toggles","$collapse","$registerToggle","$registerTarget","$unregisterToggle","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","ENTER","SPACE","actionEventHandler","bsCollapseToggle","bind","log","action","$unregisterTarget","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\r\n'use strict';\r\n\r\n// Source: typeahead\\typeahead.js\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    var KEY_CODES = {\n      downArrow: 40,\n      enter: 13,\n      escape: 27,\n      upArrow: 38\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n        scope.id = options.id;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        scope.$isActive = function isActive (index) {\n          return scope.$activeIndex === index ? true : undefined;\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        scope.$generateResultId = function (index) {\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          // If the key code isn't up arrow, down arrow, or enter return.\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n            // Navigate with keyboard\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n            setAriaActiveDescendant(scope.$activeIndex);\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n            setAriaActiveDescendant(scope.$activeIndex);\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n            setAriaActiveDescendant();\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              if (options.id) {\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\n                $typeahead.$element.attr('id', options.id + '_listbox');\n                element.attr('aria-controls', options.id + '_listbox');\n\n                var assertDiv = document.getElementById(options.id + '_sr_text');\n                if (!assertDiv) {\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\n                }\n              }\n\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\n\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n\n          var assertDiv = document.getElementById(options.id + '_sr_text');\n          angular.element(assertDiv).remove();\n\n          setAriaActiveDescendant();\n\n          hide();\n        };\n\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\n        $typeahead.$onKeyUp = function (evt) {\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\n            $typeahead.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\n        $typeahead.$onFocusKeyUp = function (evt) {\n          if (evt.which === KEY_CODES.escape) {\n            $typeahead.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        // Helper functions within this closure\n\n        function setAriaActiveDescendant (index) {\n          if (index === undefined || !scope.id) {\n            element.removeAttr('aria-activedescendant');\n          } else {\n            var resultId = scope.$generateResultId(index);\n            if (resultId) {\n              element.attr('aria-activedescendant', resultId);\n            } else {\n              element.removeAttr('aria-activedescendant');\n            }\n          }\n        }\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\n          element.attr('aria-autocomplete', 'list');\n        }\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          element.off('keydown');\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: tooltip\\tooltip.js\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      mouseDownPreventDefault: true,\r\n      mouseDownStopPropagation: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($tooltip);\r\n          }\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          if (tipElement !== null) {\r\n            // Support v1.2+ $animate\r\n            // https://github.com/angular/angular.js/issues/11713\r\n            if (angular.version.minor <= 2) {\r\n              $animate.leave(tipElement, leaveAnimateCallback);\r\n            } else {\r\n              $animate.leave(tipElement).then(leaveAnimateCallback);\r\n            }\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\r\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n              // element.on('blur', $tooltip.leave);\r\n            } else if (trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) { // eslint-disable-line\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: timepicker\\timepicker.js\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tab\\tab.js\r\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active',\n      isVertical: false\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['isVertical'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      $scope.$onClick = function $onClick (evt, pane, index) {\n        if (!pane.disabled) {\n          self.$setActive(pane.name || index);\n          focusCurrentTab();\n        }\n\n        evt.preventDefault();\n        evt.stopPropagation();\n      };\n\n      function navigatePane (index, toLeft) {\n        var newIndex = 0;\n\n        if (toLeft) {\n          // Moving to the left\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\n        } else {\n          // Moving to the right\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\n        }\n\n        if (self.$panes[newIndex].disabled) {\n          navigatePane(newIndex, toLeft);\n        } else {\n          self.$setActive(self.$panes[newIndex].name || newIndex);\n          focusCurrentTab();\n        }\n      }\n\n      function focusCurrentTab () {\n        $timeout(function () {\n          var activeAs = angular.element($element[0].querySelectorAll('li.' + self.$options.activeClass));\n\n          if (activeAs.length > 0 && activeAs[0]) {\n            activeAs[0].focus();\n          }\n        }, 100);\n      }\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n\n        self.$panes.push(pane);\n\n        self.$panes.forEach(function (tabPane, index) {\n          // Set an id value for the pane so that it can be used in the template\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\n        });\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          // If space or enter was pressed\n          self.$setActive(name);\n\n          e.preventDefault();\n          e.stopPropagation();\n\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\n          // If the left of right arrow key was pressed.\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\n          // If the left of right arrow key was pressed.\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          $timeout(function () {\n            // get li elements\n            var liElements = element.find('li');\n            for (var i = 0; i < liElements.length; i++) {\n              var iElement = angular.element(liElements[i]);\n              if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\n                // if li is active, set focus to it.\n                iElement.find('a')[0].focus();\n              }\n            }\n            // delay, for the class (.active) change to reflect in DOM.\n          }, 100);\n        });\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Set up the assistive attributes\n        element.attr('role', 'tabpanel');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n        // Save tab id into scope\n        scope.id = attrs.id;\n\n        scope.name = scope.name || scope.id;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // Once the push has occured when can then update the element with some properties.\n        // Update the aria-describedby attribute\n        if (scope.$describedBy !== undefined) {\n          element.attr('aria-describedby', scope.$describedBy);\n        }\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\r\n\r\n// Source: select\\select.js\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok',\r\n      toggle: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              if (options.toggle) {\r\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\r\n              } else {\r\n                controller.$setViewValue(value);\r\n              }\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $select);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            var anchor;\r\n\r\n            if (evt.target.nodeName !== 'A') {\r\n              var anchorCandidate = targetEl.parent();\r\n              while (!anchor && anchorCandidate.length > 0) {\r\n                if (anchorCandidate[0].nodeName === 'A') {\r\n                  anchor = anchorCandidate;\r\n                }\r\n                anchorCandidate = anchorCandidate.parent();\r\n              }\r\n            }\r\n\r\n            if (anchor) {\r\n              angular.element(anchor).triggerHandler('click');\r\n            } else {\r\n              targetEl.triggerHandler('click');\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: scrollspy\\scrollspy.js\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: navbar\\navbar.js\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: popover\\popover.js\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\r\n            if (newValue === false) {\r\n              popover.setEnabled(false);\r\n            } else {\r\n              popover.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: modal\\modal.js\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null,\n      containerElement: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var layoutHideElement = angular.element($window.document.getElementById('#layoutContainer'));\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (options.containerElement) {\n          layoutHideElement = angular.element(options.containerElement);\n        }\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        $modal.returnFocus = function () {\n\n        };\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({\n          position: 'fixed',\n          top: '0px',\n          left: '0px',\n          bottom: '0px',\n          right: '0px'\n        });\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({\n              'z-index': dialogBaseZindex + (backdropCount * 20)\n            });\n            backdropElement.css({\n              'z-index': backdropBaseZindex + (backdropCount * 20)\n            });\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({\n            display: 'block'\n          }).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n\n          layoutHideElement.attr('aria-hidden', 'true');\n\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'false');\n\n          var focusableElement = angular.element(findElement('.modal'));\n\n          if (focusableElement.length > 0) {\n            focusableElement.attr('tabindex', '0');\n            setTimeout(function () {\n              focusableElement.focus();\n            }, 500);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'true');\n\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n            layoutHideElement.attr('aria-hidden', 'false');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        function findFocusableElements () {\n          // Add all elements we want to include in our selection\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\n          if (document.activeElement) {\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\n              function (element) {\n                // Check for visibility while always include the current activeElement\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\n              });\n\n            return focusable;\n          }\n        }\n\n        function findNextFocusableElement (inReverse) {\n          if (document.activeElement) {\n            var focusable = findFocusableElements();\n            if (focusable === undefined) return;\n            if (inReverse) {\n              focusable = Array.prototype.reverse.call(focusable);\n            }\n\n            var index = focusable.indexOf(document.activeElement);\n            return focusable[index + 1];\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          // Escape was pressed on an open modal. Hide it.\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $modal.$onKeyDown = function (evt) {\n          if (options.keyboard) {\n            if (evt.keyCode === 9) {\n\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\n              if (nextFocusable === undefined) {\n                if (evt.preventDefault) evt.preventDefault();\n                if (evt.stopPropagation) evt.stopPropagation();\n\n                var focusable = findFocusableElements();\n                if (evt.shiftKey) {\n                  focusable[focusable.length - 1].focus();\n                } else {\n                  focusable[0].focus();\n                }\n              }\n            }\n          }\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n            modalElement.on('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n            modalElement.off('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {\n          scope: scope,\n          element: element,\n          show: false\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        if (options.keyboard) {\n          modal.returnFocus = function () {\n            element[0].focus();\n          };\n        }\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: helpers\\raf.js\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n\r\n// Source: helpers\\parse-options.js\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\focus-out.js\r\nangular.module('mgcrea.ngStrap.helpers.ngFocusOut', [])\r\n  .directive('ngFocusOut', ['$parse', '$rootScope', function ($parse, $rootScope) {\r\n    return {\r\n      restrict: 'A',\r\n      compile: function ($element, attr) {\r\n        // NOTE:\r\n        // We expose the powerful `$event` object on the scope that provides access to the Window,\r\n        // etc. This is OK, because expressions are not sandboxed any more (and the expression\r\n        // sandbox was never meant to be a security feature anyway).\r\n        var fn = $parse(attr.ngFocusOut);\r\n\r\n        return function link (scope, element) {\r\n          function ngEventHandler (event) {\r\n            var callback = function () {\r\n              fn(scope, {\r\n                $event: event\r\n              });\r\n            };\r\n            if ($rootScope.$$phase) {\r\n              scope.$evalAsync(callback);\r\n            } else {\r\n              scope.$apply(callback);\r\n            }\r\n          }\r\n\r\n          // setup the handler\r\n          element.on('focusout', ngEventHandler);\r\n\r\n          scope.$on('$destroy', function () {\r\n            // tear down the handler\r\n            element.off('focusout', ngEventHandler);\r\n          });\r\n        };\r\n      }\r\n    };\r\n  }]);\r\n\r\n// Source: helpers\\focus-element.js\r\nangular.module('mgcrea.ngStrap.helpers.focusElement', [])\r\n  .directive('focusElement', ['$timeout', '$parse', function ($timeout, $parse) {\r\n    return {\r\n      link: function (scope, element, attrs) {\r\n        scope.$watch(attrs.focusElement, function (value) {\r\n          if (value === true) {\r\n            $timeout(function () {\r\n              element[0].focus();\r\n            });\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n\r\n// Source: helpers\\dimensions.js\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n\r\n// Source: helpers\\debounce.js\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n\r\n// Source: helpers\\date-parser.js\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          if (value.match(/Z/)) {\r\n            date = new Date(value.substr(1, value.length - 3));\r\n          } else {\r\n            date = new Date(value.substr(1, value.length - 2));\r\n          }\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n\r\n// Source: helpers\\date-formatter.js\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    this.weekdays = function (lang) {\r\n      return $locale.DATETIME_FORMATS.DAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\compiler.js\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = options.resolve || {};\r\n    var locals = options.locals || {};\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template) {\r\n      resolve.$template = $q.when(template);\r\n    } else if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n    }\r\n\r\n    if (options.titleTemplate) {\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          findElement('[ng-bind=\"title\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if (!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function (locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n\r\n// Source: dropdown\\dropdown.js\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        if (element && element[0] && element[0].tagName.toUpperCase() === 'BUTTON') {\n          element.attr('aria-haspopup', 'true');\n          element.attr('data-toggle', 'dropdown');\n          element.attr('aria-expanded', 'false');\n          element.attr('role', 'button');\n        }\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if ((/(9)/.test(evt.keyCode) && !options.keyboard) || /27/.test(evt.keyCode)) {\n            $dropdown.hide(/27/.test(evt.keyCode));\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (evt.keyCode === 40 && index === items.length - 1) index = 0;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        $dropdown.$onFocusOut = function (evt) {\n          // find out if the related target's parents contain the datepicker's $element\n          var inMenu = false;\n          var parent = angular.element(evt.relatedTarget);\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n            parent = parent.parent();\n            if (parent !== undefined && parent[0] === $dropdown.$element[0]) {\n              inMenu = true;\n              break;\n            } else {\n              inMenu = false;\n            }\n          }\n\n          if (!inMenu) {\n            $dropdown.hide();\n          } else {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Set assistive technology properties\n            element.attr('aria-expanded', 'true');\n            if ($dropdown.$element) {\n              $dropdown.$element.attr('aria-hidden', 'false');\n              $dropdown.$element.attr('role', 'menu');\n              $dropdown.$element.attr('tabindex', '-1');\n            }\n            if (options.keyboard && $dropdown.$element) {\n              $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n              $dropdown.$element.on('focusout', $dropdown.$onFocusOut);\n            }\n\n            bodyEl.on('click', onBodyClick);\n\n            if ($dropdown.$element) {\n              var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider)'));\n              items.attr('role', 'presentation');\n\n              angular.element($dropdown.$element[0].querySelectorAll('li.divider')).attr('role', 'seperator');\n\n              items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n              items.attr('role', 'menuitem');\n              if (items.length && options.keyboard) {\n                items[0].focus();\n              }\n            }\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function (returnFocus) {\n          if (!$dropdown.$isShown) return;\n\n          element.attr('aria-expanded', 'true');\n          $dropdown.$element.attr('aria-hidden', 'true');\n\n          if (options.keyboard && $dropdown.$element) {\n            $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n            $dropdown.$element.off('focusout', $dropdown.$onFocusOut);\n          }\n\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          $timeout(function () {\n            hide();\n            if (returnFocus) {\n              $timeout(function () {\n                if (element && element[0]) {\n                  element[0].focus();\n                }\n              }, 0, false);\n            }\n          }, 200);\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return undefined;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\r\n\r\n// Source: datepicker\\datepicker.js\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      // The format that will be given to the screen reader values placed in the DOM.\n      screenReaderDateFormat: 'fullDate',\n      // Focuses the table element in the dropdown upon display of the picker.\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\n      focusOnOpen: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\n        // defaults and the configuration passed.\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // Add assistive technology helper attributes.\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\n\n        // View vars\n\n        // Initialize the datepicker view collection by passing a reference to the base object.\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        /*\n         * View mode for the date picker.\n         * 0: days\n         * 1: months\n         * 2: years\n         */\n        scope.$mode = options.startView;\n        // icon class override\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        // Show buttons at the bottom of the picker.\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        /*\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\n         * aria attributes which are linked via ids.\n         */\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\n        scope.keyboard = options.keyboard;\n        scope.focusOnOpen = options.focusOnOpen;\n\n        // labels\n        scope.$nextLabel = options.labelNext;\n        scope.$previousLabel = options.labelPrevious;\n\n        // This is the actual current picker view.\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Internal handlers\n\n        function handleOnKeyDown (evt, apply) {\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\n            return false;\n          }\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n              if (options.focusOnOpen) return true;\n            } else {\n              if (apply === undefined || apply) {\n                scope.$apply(function () {\n                  $datepicker.setMode(scope.$mode - 1);\n                });\n              } else {\n                $datepicker.setMode(scope.$mode - 1);\n              }\n            }\n            return false;\n          }\n\n          return true;\n        }\n\n        // Scope methods\n\n        /**\n         * Pass through from the scope to the provider for the selection of a date.\n         */\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n        scope.$focused = function (dayInfo) {\n          scope.selectedDayId = dayInfo.id;\n          if (dayInfo.isNext && !scope.selected) {\n            if (scope.$mode) {\n              $datepicker.update(dayInfo.date);\n            } else {\n              scope.$select(dayInfo.date);\n            }\n          }\n        };\n        scope.$onKeyDown = function (evt, day) {\n          var continueHandling = handleOnKeyDown(evt, false);\n\n          if (continueHandling) {\n            // Navigate with keyboard\n            $picker.onKeyDown(evt);\n          }\n        };\n        scope.$onFocusOut = function (evt) {\n          // find out if the related target's parents contain the datepicker's $element\n          var inTable = false;\n          var parent = angular.element(evt.relatedTarget);\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n            parent = parent.parent();\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\n              inTable = true;\n              break;\n            } else {\n              inTable = false;\n            }\n          }\n\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\n          //\n\n          if (!inTable && !evt.relatedTarget) {\n            // hmm\n          } else if (!inTable) {\n            $datepicker.hide();\n          } else {\n            evt.stopPropagation();\n            evt.preventDefault();\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () {\n                $datepicker.hide(true);\n              });\n            }\n          } else {\n            angular.extend(viewDate, {\n              year: date.getFullYear(),\n              month: date.getMonth(),\n              date: date.getDate()\n            });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        /**\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\n         * rebuilt. The views are days, months, and years.\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\n         */\n        $datepicker.setMode = function setMode (mode) {\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          // The picker has been changed so the view needs to be built.\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        /**\n         * Builds the datepicker's view based on the picker that is currently set.\n         */\n        $datepicker.$build = function $build (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], function (day) {\n              updateSelected(day);\n              if (day.selected) scope.selected = day;\n            });\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {\n            year: targetDate.getUTCFullYear(),\n            month: targetDate.getUTCMonth(),\n            date: targetDate.getUTCDate()\n          });\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        /**\n         * Handles the onKeyDown event from the element that this datepicker is bound.\n         * In the standard case this will be an input element. If the trigger is set\n         * to click and is bound to a button then it is likely we're servicing a 508\n         * type situation where the implementation will no longer uses. Focus will be\n         * given to the table.\n         */\n        $datepicker.$onKeyDown = function (evt) {\n          var continueHandling = handleOnKeyDown(evt);\n\n          if (continueHandling) {\n            // Navigate with keyboard\n            $picker.onKeyDown(evt);\n            parentScope.$digest();\n          }\n        };\n\n        // $datepicker.$onFocusOut = function (evt) {\n        //   // find out if the related target's parents contain the datepicker's $element\n        //   var inTable = false;\n        //   var parent = angular.element(evt.relatedTarget);\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n        //     parent = parent.parent();\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\n        //       inTable = true;\n        //       break;\n        //     } else {\n        //       inTable = false;\n        //     }\n        //   }\n\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\n        //   //\n\n        //   if (!inTable && !evt.relatedTarget) {\n        //     // hmm\n        //   } else if (!inTable) {\n        //     $datepicker.hide();\n        //   } else {\n        //     evt.stopPropagation();\n        //     evt.preventDefault();\n        //   }\n        // };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n          el.focused = el.selected;\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        // The datepicker will override the init functionality of the tool\n        var _init = $datepicker.init;\n        /**\n         * Initialize the datepicker.\n         */\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\n        var _destroy = $datepicker.destroy;\n\n        /**\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\n         */\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\n        // is to be shown.\n        var _show = $datepicker.show;\n\n        /**\n         * Override for the tooltip's show function.\n         *\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\n         * Once shown it sets up the appropriate events.\n         */\n        $datepicker.show = function show () {\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n\n          // Call the \"overriden base\" function on the tooltip.\n          _show();\n\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n\n            // Update assistive technologies for view changes:\n            $datepicker.$element.attr('aria-hidden', 'false');\n            element.attr('aria-expanded', 'true');\n\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\n            // If keyboard navigation is enabled (true by default).\n            if (options.keyboard) {\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\n              // Check to see if the table element should receive the focus when the picker is shown.\n              if (options.focusOnOpen) {\n                // Focus the table element.\n                // $datepicker.$element.find('table')[0].focus();\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\n              } else {\n                element.on('keydown', $datepicker.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\n        // is to be hidden.\n        var _hide = $datepicker.hide;\n\n        /**\n         * Overrid efor the tooltip's hide function.\n         *\n         * Updates attributes for assistive technologies and unbinds events.\n         */\n        $datepicker.hide = function (blur) {\n          // If the picker is already hidden don't do anything.\n          if (!$datepicker.$isShown) return;\n\n          // Update the attributes used by assisteive technologies\n          $datepicker.$element.attr('aria-hidden', 'true');\n          element.attr('aria-expanded', 'false');\n\n          // Unbind the mouse and touch events\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\n          // If keyboard events were bound then unbind them.\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\n          }\n          if (options.focusOnOpen) {\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\n            element[0].focus();\n          }\n          // Call the tooltip's hide function.\n          _hide(blur);\n        };\n\n        return $datepicker;\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\n    return {\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        options = angular.extend({}, $datepicker.defaults, options);\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              options[key] = dateParser.getDateForAttribute(key, newValue);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            options.dateFormat = newValue;\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n\n          return date === null ? null : new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n\n          return getDateFormattedString();\n        });\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n      }\n    };\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLong = $dateFormatter.weekdays(lang);\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n\n        var weekDaysLabelsHtml = '';\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\n          var weekDayShortLabel = weekDaysShortLabels[i];\n          var weekDayLabel = weekDaysLongLabels[i];\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\n        }\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {\n          year: startDate.getFullYear(),\n          month: startDate.getMonth(),\n          date: startDate.getDate()\n        };\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {\n            month: 1\n          },\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\n              // in $datepicker.$selectPane, so picker would not update selected day display if\n              // user picks first day of the new month.\n              // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n            // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            var selectedDay;\n            var todayDay;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              // push the day information onto the collection\n              var dayItem = {\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\n                date: day,\n                value: day.getDate(),\n                isToday: day.toDateString() === today,\n                label: formatDate(day, this.format),\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\n                selected: picker.$date && this.isSelected(day),\n                muted: day.getMonth() !== viewDate.month,\n                disabled: this.isDisabled(day)\n              };\n\n              if (dayItem.selected) selectedDay = dayItem;\n              if (dayItem.isToday) todayDay = dayItem;\n\n              days.push(dayItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedDay) {\n                scope.selectedDayId = selectedDay.id;\n                if (todayDay) todayDay.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedDay.focused = true;\n                scope.selected = selectedDay;\n              } else if (todayDay) {\n                todayDay.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            scope.hasSelectedDate = picker.$date != null;\n            scope.$modeLabel = options.labelMonth;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\n              date.getMonth() === picker.$date.getMonth() &&\n              date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n            // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n            // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n            // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            var actualTime;\n\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date) {\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\n                picker.$date = new Date();\n              } else {\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\n              }\n            }\n\n            if (!picker.$date) {\n              return false;\n            }\n\n            actualTime = picker.$date.getTime();\n\n            var newDate;\n\n            switch (evt.keyCode) {\n              // enter\n              case 13:\n                if (options.focusOnOpen) {\n                  picker.select(new Date(actualTime), true);\n                  return false;\n                }\n                break;\n                // pageup\n              case 33:\n                if (evt.altKey) { // move back a year\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\n                } else { // move back a month\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\n                  }\n                }\n                break;\n\n                // pagedown\n              case 34:\n                if (evt.altKey) { // move forward a year\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\n                } else { // move forward a month\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\n                  }\n                }\n\n                break;\n\n                // left arrow\n              case 37:\n                newDate = new Date(actualTime - 1 * 864e5);\n                break;\n\n                // up arrow\n              case 38:\n                newDate = new Date(actualTime - 7 * 864e5);\n                break;\n\n                // right arrow\n              case 39:\n                newDate = new Date(actualTime + 1 * 864e5);\n                break;\n\n                // down arrow\n              case 40:\n                newDate = new Date(actualTime + 7 * 864e5);\n                break;\n\n              default:\n                return false;\n            }\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n\n            if (evt && evt.stopPropagation) evt.stopPropagation();\n\n            return false;\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {\n            year: 1\n          },\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\n            var selectedMonth;\n            var thisMonth;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n\n              var monthItem = {\n                date: month,\n                label: formatDate(month, this.format),\n                selected: picker.$isSelected(month),\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\n                disabled: this.isDisabled(month)\n              };\n\n              if (monthItem.selected) selectedMonth = monthItem;\n              if (monthItem.isToday) thisMonth = monthItem;\n\n              months.push(monthItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedMonth) {\n                scope.selectedDayId = selectedMonth.id;\n                if (thisMonth) thisMonth.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedMonth.focused = true;\n                scope.selected = selectedMonth;\n              } else if (thisMonth) {\n                thisMonth.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.$modeLabel = options.labelYear;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date &&\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\n            }\n\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {\n            year: 12\n          },\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            var selectedYear;\n            var thisYear;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n\n              var yearItem = {\n                date: year,\n                label: formatDate(year, this.format),\n                selected: picker.$isSelected(year),\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\n                disabled: this.isDisabled(year)\n              };\n\n              if (yearItem.selected) selectedYear = yearItem;\n              if (yearItem.isToday) thisYear = yearItem;\n\n              years.push(yearItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedYear) {\n                scope.selectedDayId = selectedYear.id;\n                if (thisYear) thisYear.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedYear.focused = true;\n                scope.selected = selectedYear;\n              } else if (thisYear) {\n                thisYear.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.$modelLabel = options.labelDays;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date &&\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\n            }\n\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\r\n\r\n// Source: collapse\\collapse.js\r\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n        element.attr('aria-expanded', 'false');\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n\n        var i = 0;\n        if (self.$targets) {\n          for (i = 0; i < self.$targets.length; i++) {\n            self.$targets[i].attr('aria-hidden', 'true');\n          }\n          for (i = 0; i < self.$targets.$active.length; i++) {\n            if (self.$targets[self.$targets.$active[i]]) {\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\n            }\n            if (self.$toggles[self.$targets.$active[i]]) {\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\n            }\n          }\n        }\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\n          }\n          if (self.$toggles[self.$targets.$active[0]]) {\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\n          }\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\n          }\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\n          }\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n    var KEY_CODES = {\n      ENTER: 13,\n      SPACE: 32\n    };\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\n            console.log('key handler handling');\n            actionEventHandler();\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\r\n\r\n// Source: button\\button.js\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = !!controller.$viewValue;\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$viewValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: aside\\aside.js\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: alert\\alert.js\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: affix\\affix.js\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true,\r\n      setWidth: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = options.setWidth && !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element[0].style.position;\r\n          var initialTop = element[0].style.top;\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n            element.css('top', initialTop);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null) {\r\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window, $timeout) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix;\r\n        $timeout(function () { affix = $affix(element, options); });\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n\r\n// Source: module.js\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n\r\n})(window, document);\r\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    var KEY_CODES = {\n      downArrow: 40,\n      enter: 13,\n      escape: 27,\n      upArrow: 38\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n        scope.id = options.id;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        scope.$isActive = function isActive (index) {\n          return scope.$activeIndex === index ? true : undefined;\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        scope.$generateResultId = function (index) {\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          // If the key code isn't up arrow, down arrow, or enter return.\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n            // Navigate with keyboard\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n            setAriaActiveDescendant(scope.$activeIndex);\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n            setAriaActiveDescendant(scope.$activeIndex);\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n            setAriaActiveDescendant();\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              if (options.id) {\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\n                $typeahead.$element.attr('id', options.id + '_listbox');\n                element.attr('aria-controls', options.id + '_listbox');\n\n                var assertDiv = document.getElementById(options.id + '_sr_text');\n                if (!assertDiv) {\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\n                }\n              }\n\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\n\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n\n          var assertDiv = document.getElementById(options.id + '_sr_text');\n          angular.element(assertDiv).remove();\n\n          setAriaActiveDescendant();\n\n          hide();\n        };\n\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\n        $typeahead.$onKeyUp = function (evt) {\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\n            $typeahead.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\n        $typeahead.$onFocusKeyUp = function (evt) {\n          if (evt.which === KEY_CODES.escape) {\n            $typeahead.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        // Helper functions within this closure\n\n        function setAriaActiveDescendant (index) {\n          if (index === undefined || !scope.id) {\n            element.removeAttr('aria-activedescendant');\n          } else {\n            var resultId = scope.$generateResultId(index);\n            if (resultId) {\n              element.attr('aria-activedescendant', resultId);\n            } else {\n              element.removeAttr('aria-activedescendant');\n            }\n          }\n        }\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\n          element.attr('aria-autocomplete', 'list');\n        }\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          element.off('keydown');\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\r\n\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = options.resolve || {};\r\n    var locals = options.locals || {};\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template) {\r\n      resolve.$template = $q.when(template);\r\n    } else if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n    }\r\n\r\n    if (options.titleTemplate) {\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          findElement('[ng-bind=\"title\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if (!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function (locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        if (element && element[0] && element[0].tagName.toUpperCase() === 'BUTTON') {\n          element.attr('aria-haspopup', 'true');\n          element.attr('data-toggle', 'dropdown');\n          element.attr('aria-expanded', 'false');\n          element.attr('role', 'button');\n        }\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if ((/(9)/.test(evt.keyCode) && !options.keyboard) || /27/.test(evt.keyCode)) {\n            $dropdown.hide(/27/.test(evt.keyCode));\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (evt.keyCode === 40 && index === items.length - 1) index = 0;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        $dropdown.$onFocusOut = function (evt) {\n          // find out if the related target's parents contain the datepicker's $element\n          var inMenu = false;\n          var parent = angular.element(evt.relatedTarget);\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n            parent = parent.parent();\n            if (parent !== undefined && parent[0] === $dropdown.$element[0]) {\n              inMenu = true;\n              break;\n            } else {\n              inMenu = false;\n            }\n          }\n\n          if (!inMenu) {\n            $dropdown.hide();\n          } else {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Set assistive technology properties\n            element.attr('aria-expanded', 'true');\n            if ($dropdown.$element) {\n              $dropdown.$element.attr('aria-hidden', 'false');\n              $dropdown.$element.attr('role', 'menu');\n              $dropdown.$element.attr('tabindex', '-1');\n            }\n            if (options.keyboard && $dropdown.$element) {\n              $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n              $dropdown.$element.on('focusout', $dropdown.$onFocusOut);\n            }\n\n            bodyEl.on('click', onBodyClick);\n\n            if ($dropdown.$element) {\n              var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider)'));\n              items.attr('role', 'presentation');\n\n              angular.element($dropdown.$element[0].querySelectorAll('li.divider')).attr('role', 'seperator');\n\n              items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n              items.attr('role', 'menuitem');\n              if (items.length && options.keyboard) {\n                items[0].focus();\n              }\n            }\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function (returnFocus) {\n          if (!$dropdown.$isShown) return;\n\n          element.attr('aria-expanded', 'true');\n          $dropdown.$element.attr('aria-hidden', 'true');\n\n          if (options.keyboard && $dropdown.$element) {\n            $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n            $dropdown.$element.off('focusout', $dropdown.$onFocusOut);\n          }\n\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          $timeout(function () {\n            hide();\n            if (returnFocus) {\n              $timeout(function () {\n                if (element && element[0]) {\n                  element[0].focus();\n                }\n              }, 0, false);\n            }\n          }, 200);\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return undefined;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      mouseDownPreventDefault: true,\r\n      mouseDownStopPropagation: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($tooltip);\r\n          }\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          if (tipElement !== null) {\r\n            // Support v1.2+ $animate\r\n            // https://github.com/angular/angular.js/issues/11713\r\n            if (angular.version.minor <= 2) {\r\n              $animate.leave(tipElement, leaveAnimateCallback);\r\n            } else {\r\n              $animate.leave(tipElement).then(leaveAnimateCallback);\r\n            }\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\r\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n              // element.on('blur', $tooltip.leave);\r\n            } else if (trigger !== 'manual') {\r\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              if (nodeName === 'button' && trigger !== 'hover') {\r\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) { // eslint-disable-line\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active',\n      isVertical: false\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['isVertical'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      $scope.$onClick = function $onClick (evt, pane, index) {\n        if (!pane.disabled) {\n          self.$setActive(pane.name || index);\n          focusCurrentTab();\n        }\n\n        evt.preventDefault();\n        evt.stopPropagation();\n      };\n\n      function navigatePane (index, toLeft) {\n        var newIndex = 0;\n\n        if (toLeft) {\n          // Moving to the left\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\n        } else {\n          // Moving to the right\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\n        }\n\n        if (self.$panes[newIndex].disabled) {\n          navigatePane(newIndex, toLeft);\n        } else {\n          self.$setActive(self.$panes[newIndex].name || newIndex);\n          focusCurrentTab();\n        }\n      }\n\n      function focusCurrentTab () {\n        $timeout(function () {\n          var activeAs = angular.element($element[0].querySelectorAll('li.' + self.$options.activeClass));\n\n          if (activeAs.length > 0 && activeAs[0]) {\n            activeAs[0].focus();\n          }\n        }, 100);\n      }\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n\n        self.$panes.push(pane);\n\n        self.$panes.forEach(function (tabPane, index) {\n          // Set an id value for the pane so that it can be used in the template\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\n        });\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          // If space or enter was pressed\n          self.$setActive(name);\n\n          e.preventDefault();\n          e.stopPropagation();\n\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\n          // If the left of right arrow key was pressed.\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\n          // If the left of right arrow key was pressed.\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          $timeout(function () {\n            // get li elements\n            var liElements = element.find('li');\n            for (var i = 0; i < liElements.length; i++) {\n              var iElement = angular.element(liElements[i]);\n              if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\n                // if li is active, set focus to it.\n                iElement.find('a')[0].focus();\n              }\n            }\n            // delay, for the class (.active) change to reflect in DOM.\n          }, 100);\n        });\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Set up the assistive attributes\n        element.attr('role', 'tabpanel');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n        // Save tab id into scope\n        scope.id = attrs.id;\n\n        scope.name = scope.name || scope.id;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // Once the push has occured when can then update the element with some properties.\n        // Update the aria-describedby attribute\n        if (scope.$describedBy !== undefined) {\n          element.attr('aria-describedby', scope.$describedBy);\n        }\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok',\r\n      toggle: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              if (options.toggle) {\r\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\r\n              } else {\r\n                controller.$setViewValue(value);\r\n              }\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $select);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            var anchor;\r\n\r\n            if (evt.target.nodeName !== 'A') {\r\n              var anchorCandidate = targetEl.parent();\r\n              while (!anchor && anchorCandidate.length > 0) {\r\n                if (anchorCandidate[0].nodeName === 'A') {\r\n                  anchor = anchorCandidate;\r\n                }\r\n                anchorCandidate = anchorCandidate.parent();\r\n              }\r\n            }\r\n\r\n            if (anchor) {\r\n              angular.element(anchor).triggerHandler('click');\r\n            } else {\r\n              targetEl.triggerHandler('click');\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\r\n            if (newValue === false) {\r\n              popover.setEnabled(false);\r\n            } else {\r\n              popover.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null,\n      containerElement: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var layoutHideElement = angular.element($window.document.getElementById('#layoutContainer'));\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (options.containerElement) {\n          layoutHideElement = angular.element(options.containerElement);\n        }\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        $modal.returnFocus = function () {\n\n        };\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({\n          position: 'fixed',\n          top: '0px',\n          left: '0px',\n          bottom: '0px',\n          right: '0px'\n        });\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({\n              'z-index': dialogBaseZindex + (backdropCount * 20)\n            });\n            backdropElement.css({\n              'z-index': backdropBaseZindex + (backdropCount * 20)\n            });\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({\n            display: 'block'\n          }).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n\n          layoutHideElement.attr('aria-hidden', 'true');\n\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'false');\n\n          var focusableElement = angular.element(findElement('.modal'));\n\n          if (focusableElement.length > 0) {\n            focusableElement.attr('tabindex', '0');\n            setTimeout(function () {\n              focusableElement.focus();\n            }, 500);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'true');\n\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n            layoutHideElement.attr('aria-hidden', 'false');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        function findFocusableElements () {\n          // Add all elements we want to include in our selection\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\n          if (document.activeElement) {\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\n              function (element) {\n                // Check for visibility while always include the current activeElement\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\n              });\n\n            return focusable;\n          }\n        }\n\n        function findNextFocusableElement (inReverse) {\n          if (document.activeElement) {\n            var focusable = findFocusableElements();\n            if (focusable === undefined) return;\n            if (inReverse) {\n              focusable = Array.prototype.reverse.call(focusable);\n            }\n\n            var index = focusable.indexOf(document.activeElement);\n            return focusable[index + 1];\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          // Escape was pressed on an open modal. Hide it.\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $modal.$onKeyDown = function (evt) {\n          if (options.keyboard) {\n            if (evt.keyCode === 9) {\n\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\n              if (nextFocusable === undefined) {\n                if (evt.preventDefault) evt.preventDefault();\n                if (evt.stopPropagation) evt.stopPropagation();\n\n                var focusable = findFocusableElements();\n                if (evt.shiftKey) {\n                  focusable[focusable.length - 1].focus();\n                } else {\n                  focusable[0].focus();\n                }\n              }\n            }\n          }\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n            modalElement.on('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n            modalElement.off('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {\n          scope: scope,\n          element: element,\n          show: false\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        if (options.keyboard) {\n          modal.returnFocus = function () {\n            element[0].focus();\n          };\n        }\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\r\n\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.ngFocusOut', [])\r\n  .directive('ngFocusOut', ['$parse', '$rootScope', function ($parse, $rootScope) {\r\n    return {\r\n      restrict: 'A',\r\n      compile: function ($element, attr) {\r\n        // NOTE:\r\n        // We expose the powerful `$event` object on the scope that provides access to the Window,\r\n        // etc. This is OK, because expressions are not sandboxed any more (and the expression\r\n        // sandbox was never meant to be a security feature anyway).\r\n        var fn = $parse(attr.ngFocusOut);\r\n\r\n        return function link (scope, element) {\r\n          function ngEventHandler (event) {\r\n            var callback = function () {\r\n              fn(scope, {\r\n                $event: event\r\n              });\r\n            };\r\n            if ($rootScope.$$phase) {\r\n              scope.$evalAsync(callback);\r\n            } else {\r\n              scope.$apply(callback);\r\n            }\r\n          }\r\n\r\n          // setup the handler\r\n          element.on('focusout', ngEventHandler);\r\n\r\n          scope.$on('$destroy', function () {\r\n            // tear down the handler\r\n            element.off('focusout', ngEventHandler);\r\n          });\r\n        };\r\n      }\r\n    };\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.focusElement', [])\r\n  .directive('focusElement', ['$timeout', '$parse', function ($timeout, $parse) {\r\n    return {\r\n      link: function (scope, element, attrs) {\r\n        scope.$watch(attrs.focusElement, function (value) {\r\n          if (value === true) {\r\n            $timeout(function () {\r\n              element[0].focus();\r\n            });\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          if (value.match(/Z/)) {\r\n            date = new Date(value.substr(1, value.length - 3));\r\n          } else {\r\n            date = new Date(value.substr(1, value.length - 2));\r\n          }\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    this.weekdays = function (lang) {\r\n      return $locale.DATETIME_FORMATS.DAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      // The format that will be given to the screen reader values placed in the DOM.\n      screenReaderDateFormat: 'fullDate',\n      // Focuses the table element in the dropdown upon display of the picker.\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\n      focusOnOpen: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\n        // defaults and the configuration passed.\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // Add assistive technology helper attributes.\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\n\n        // View vars\n\n        // Initialize the datepicker view collection by passing a reference to the base object.\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        /*\n         * View mode for the date picker.\n         * 0: days\n         * 1: months\n         * 2: years\n         */\n        scope.$mode = options.startView;\n        // icon class override\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        // Show buttons at the bottom of the picker.\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        /*\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\n         * aria attributes which are linked via ids.\n         */\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\n        scope.keyboard = options.keyboard;\n        scope.focusOnOpen = options.focusOnOpen;\n\n        // labels\n        scope.$nextLabel = options.labelNext;\n        scope.$previousLabel = options.labelPrevious;\n\n        // This is the actual current picker view.\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Internal handlers\n\n        function handleOnKeyDown (evt, apply) {\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\n            return false;\n          }\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n              if (options.focusOnOpen) return true;\n            } else {\n              if (apply === undefined || apply) {\n                scope.$apply(function () {\n                  $datepicker.setMode(scope.$mode - 1);\n                });\n              } else {\n                $datepicker.setMode(scope.$mode - 1);\n              }\n            }\n            return false;\n          }\n\n          return true;\n        }\n\n        // Scope methods\n\n        /**\n         * Pass through from the scope to the provider for the selection of a date.\n         */\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n        scope.$focused = function (dayInfo) {\n          scope.selectedDayId = dayInfo.id;\n          if (dayInfo.isNext && !scope.selected) {\n            if (scope.$mode) {\n              $datepicker.update(dayInfo.date);\n            } else {\n              scope.$select(dayInfo.date);\n            }\n          }\n        };\n        scope.$onKeyDown = function (evt, day) {\n          var continueHandling = handleOnKeyDown(evt, false);\n\n          if (continueHandling) {\n            // Navigate with keyboard\n            $picker.onKeyDown(evt);\n          }\n        };\n        scope.$onFocusOut = function (evt) {\n          // find out if the related target's parents contain the datepicker's $element\n          var inTable = false;\n          var parent = angular.element(evt.relatedTarget);\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n            parent = parent.parent();\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\n              inTable = true;\n              break;\n            } else {\n              inTable = false;\n            }\n          }\n\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\n          //\n\n          if (!inTable && !evt.relatedTarget) {\n            // hmm\n          } else if (!inTable) {\n            $datepicker.hide();\n          } else {\n            evt.stopPropagation();\n            evt.preventDefault();\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () {\n                $datepicker.hide(true);\n              });\n            }\n          } else {\n            angular.extend(viewDate, {\n              year: date.getFullYear(),\n              month: date.getMonth(),\n              date: date.getDate()\n            });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        /**\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\n         * rebuilt. The views are days, months, and years.\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\n         */\n        $datepicker.setMode = function setMode (mode) {\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          // The picker has been changed so the view needs to be built.\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        /**\n         * Builds the datepicker's view based on the picker that is currently set.\n         */\n        $datepicker.$build = function $build (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], function (day) {\n              updateSelected(day);\n              if (day.selected) scope.selected = day;\n            });\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {\n            year: targetDate.getUTCFullYear(),\n            month: targetDate.getUTCMonth(),\n            date: targetDate.getUTCDate()\n          });\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        /**\n         * Handles the onKeyDown event from the element that this datepicker is bound.\n         * In the standard case this will be an input element. If the trigger is set\n         * to click and is bound to a button then it is likely we're servicing a 508\n         * type situation where the implementation will no longer uses. Focus will be\n         * given to the table.\n         */\n        $datepicker.$onKeyDown = function (evt) {\n          var continueHandling = handleOnKeyDown(evt);\n\n          if (continueHandling) {\n            // Navigate with keyboard\n            $picker.onKeyDown(evt);\n            parentScope.$digest();\n          }\n        };\n\n        // $datepicker.$onFocusOut = function (evt) {\n        //   // find out if the related target's parents contain the datepicker's $element\n        //   var inTable = false;\n        //   var parent = angular.element(evt.relatedTarget);\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n        //     parent = parent.parent();\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\n        //       inTable = true;\n        //       break;\n        //     } else {\n        //       inTable = false;\n        //     }\n        //   }\n\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\n        //   //\n\n        //   if (!inTable && !evt.relatedTarget) {\n        //     // hmm\n        //   } else if (!inTable) {\n        //     $datepicker.hide();\n        //   } else {\n        //     evt.stopPropagation();\n        //     evt.preventDefault();\n        //   }\n        // };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n          el.focused = el.selected;\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        // The datepicker will override the init functionality of the tool\n        var _init = $datepicker.init;\n        /**\n         * Initialize the datepicker.\n         */\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\n        var _destroy = $datepicker.destroy;\n\n        /**\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\n         */\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\n        // is to be shown.\n        var _show = $datepicker.show;\n\n        /**\n         * Override for the tooltip's show function.\n         *\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\n         * Once shown it sets up the appropriate events.\n         */\n        $datepicker.show = function show () {\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n\n          // Call the \"overriden base\" function on the tooltip.\n          _show();\n\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n\n            // Update assistive technologies for view changes:\n            $datepicker.$element.attr('aria-hidden', 'false');\n            element.attr('aria-expanded', 'true');\n\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\n            // If keyboard navigation is enabled (true by default).\n            if (options.keyboard) {\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\n              // Check to see if the table element should receive the focus when the picker is shown.\n              if (options.focusOnOpen) {\n                // Focus the table element.\n                // $datepicker.$element.find('table')[0].focus();\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\n              } else {\n                element.on('keydown', $datepicker.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\n        // is to be hidden.\n        var _hide = $datepicker.hide;\n\n        /**\n         * Overrid efor the tooltip's hide function.\n         *\n         * Updates attributes for assistive technologies and unbinds events.\n         */\n        $datepicker.hide = function (blur) {\n          // If the picker is already hidden don't do anything.\n          if (!$datepicker.$isShown) return;\n\n          // Update the attributes used by assisteive technologies\n          $datepicker.$element.attr('aria-hidden', 'true');\n          element.attr('aria-expanded', 'false');\n\n          // Unbind the mouse and touch events\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\n          // If keyboard events were bound then unbind them.\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\n          }\n          if (options.focusOnOpen) {\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\n            element[0].focus();\n          }\n          // Call the tooltip's hide function.\n          _hide(blur);\n        };\n\n        return $datepicker;\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\n    return {\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        options = angular.extend({}, $datepicker.defaults, options);\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              options[key] = dateParser.getDateForAttribute(key, newValue);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            options.dateFormat = newValue;\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n\n          return date === null ? null : new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n\n          return getDateFormattedString();\n        });\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n      }\n    };\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLong = $dateFormatter.weekdays(lang);\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n\n        var weekDaysLabelsHtml = '';\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\n          var weekDayShortLabel = weekDaysShortLabels[i];\n          var weekDayLabel = weekDaysLongLabels[i];\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\n        }\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {\n          year: startDate.getFullYear(),\n          month: startDate.getMonth(),\n          date: startDate.getDate()\n        };\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {\n            month: 1\n          },\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\n              // in $datepicker.$selectPane, so picker would not update selected day display if\n              // user picks first day of the new month.\n              // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n            // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            var selectedDay;\n            var todayDay;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              // push the day information onto the collection\n              var dayItem = {\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\n                date: day,\n                value: day.getDate(),\n                isToday: day.toDateString() === today,\n                label: formatDate(day, this.format),\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\n                selected: picker.$date && this.isSelected(day),\n                muted: day.getMonth() !== viewDate.month,\n                disabled: this.isDisabled(day)\n              };\n\n              if (dayItem.selected) selectedDay = dayItem;\n              if (dayItem.isToday) todayDay = dayItem;\n\n              days.push(dayItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedDay) {\n                scope.selectedDayId = selectedDay.id;\n                if (todayDay) todayDay.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedDay.focused = true;\n                scope.selected = selectedDay;\n              } else if (todayDay) {\n                todayDay.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            scope.hasSelectedDate = picker.$date != null;\n            scope.$modeLabel = options.labelMonth;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\n              date.getMonth() === picker.$date.getMonth() &&\n              date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n            // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n            // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n            // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            var actualTime;\n\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date) {\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\n                picker.$date = new Date();\n              } else {\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\n              }\n            }\n\n            if (!picker.$date) {\n              return false;\n            }\n\n            actualTime = picker.$date.getTime();\n\n            var newDate;\n\n            switch (evt.keyCode) {\n              // enter\n              case 13:\n                if (options.focusOnOpen) {\n                  picker.select(new Date(actualTime), true);\n                  return false;\n                }\n                break;\n                // pageup\n              case 33:\n                if (evt.altKey) { // move back a year\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\n                } else { // move back a month\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\n                  }\n                }\n                break;\n\n                // pagedown\n              case 34:\n                if (evt.altKey) { // move forward a year\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\n                } else { // move forward a month\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\n                  }\n                }\n\n                break;\n\n                // left arrow\n              case 37:\n                newDate = new Date(actualTime - 1 * 864e5);\n                break;\n\n                // up arrow\n              case 38:\n                newDate = new Date(actualTime - 7 * 864e5);\n                break;\n\n                // right arrow\n              case 39:\n                newDate = new Date(actualTime + 1 * 864e5);\n                break;\n\n                // down arrow\n              case 40:\n                newDate = new Date(actualTime + 7 * 864e5);\n                break;\n\n              default:\n                return false;\n            }\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n\n            if (evt && evt.stopPropagation) evt.stopPropagation();\n\n            return false;\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {\n            year: 1\n          },\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\n            var selectedMonth;\n            var thisMonth;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n\n              var monthItem = {\n                date: month,\n                label: formatDate(month, this.format),\n                selected: picker.$isSelected(month),\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\n                disabled: this.isDisabled(month)\n              };\n\n              if (monthItem.selected) selectedMonth = monthItem;\n              if (monthItem.isToday) thisMonth = monthItem;\n\n              months.push(monthItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedMonth) {\n                scope.selectedDayId = selectedMonth.id;\n                if (thisMonth) thisMonth.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedMonth.focused = true;\n                scope.selected = selectedMonth;\n              } else if (thisMonth) {\n                thisMonth.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.$modeLabel = options.labelYear;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date &&\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\n            }\n\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {\n            year: 12\n          },\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            var selectedYear;\n            var thisYear;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n\n              var yearItem = {\n                date: year,\n                label: formatDate(year, this.format),\n                selected: picker.$isSelected(year),\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\n                disabled: this.isDisabled(year)\n              };\n\n              if (yearItem.selected) selectedYear = yearItem;\n              if (yearItem.isToday) thisYear = yearItem;\n\n              years.push(yearItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedYear) {\n                scope.selectedDayId = selectedYear.id;\n                if (thisYear) thisYear.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedYear.focused = true;\n                scope.selected = selectedYear;\n              } else if (thisYear) {\n                thisYear.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.$modelLabel = options.labelDays;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date &&\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\n            }\n\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n        element.attr('aria-expanded', 'false');\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n\n        var i = 0;\n        if (self.$targets) {\n          for (i = 0; i < self.$targets.length; i++) {\n            self.$targets[i].attr('aria-hidden', 'true');\n          }\n          for (i = 0; i < self.$targets.$active.length; i++) {\n            if (self.$targets[self.$targets.$active[i]]) {\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\n            }\n            if (self.$toggles[self.$targets.$active[i]]) {\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\n            }\n          }\n        }\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\n          }\n          if (self.$toggles[self.$targets.$active[0]]) {\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\n          }\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\n          }\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\n          }\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n    var KEY_CODES = {\n      ENTER: 13,\n      SPACE: 32\n    };\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\n            console.log('key handler handling');\n            actionEventHandler();\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = !!controller.$viewValue;\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$viewValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true,\r\n      setWidth: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = options.setWidth && !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element[0].style.position;\r\n          var initialTop = element[0].style.top;\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n            element.css('top', initialTop);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null) {\r\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window, $timeout) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix;\r\n        $timeout(function () { affix = $affix(element, options); });\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n"],"sourceRoot":"/source/"}