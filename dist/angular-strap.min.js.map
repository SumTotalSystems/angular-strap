{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/focus-out.js","helpers/focus-element.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","translations","resultsText","noResultsText","selectResultText","selectedProperty","downArrow","enter","escape","tab","TypeaheadFactory","$typeahead","upArrow","id","$resetMatches","config","$activeIndex","$tooltip","$activate","$scope","$$postDigest","activate","$matches","select","index","$select","evt","$isActive","matches","safeDigest","update","setFeedbackMessage","document","setTimeout","$$rAF","message","getElementById","$id","$setViewValue","$render","parentScope","$digest","onSelect","$emit","length","isDefined","isFunction","$viewValue","$getIndex","$generateResultId","$onMouseDown","preventDefault","stopPropagation","equals","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","setAriaActiveDescendant","$isVisible","which","KEY_CODES","fromJson","keyCode","ele","focus","$$updateScrollTop","show","$element","assertDiv","$timeout","attr","on","append","$onKeyDown","ariaLabelledby","hide","off","onKeyUp","$isShown","onFocusKeyUp","$onFocusKeyUp","resultId","$$phase","array","$filter","expression","directive","results","postLink","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$match","$watchCollection","values","watchOptions","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","$on","destroy","target","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","$get","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","isTouch","unbindTriggerEvents","i","leave","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","tipScope","$destroy","$options","$promise","$new","$rootScope","map","parseFloat","$sce","trustAsHtml","$setEnabled","$hide","setEnabled","isEnabled","toggle","compileData","tipContainer","init","bindTriggerEvents","isElement","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","$root","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","isUndefined","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","label","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","nodeName","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","$window","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","self","newIndex","navigatePane","toLeft","$panes","$setActive","name","$activePaneChangeListeners","pane","$navClass","$activeClass","$onClick","tabPane","$labeledBy","$active","activeIndex","$remove","indexOf","splice","fn","$pane","$onKeyPress","e","charCode","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","liElements","find","iElement","parsedBsActivePane","attrs","bsActivePane","assign","$parse","render","$push","$describedBy","elem","focusOn","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$selectNone","$updateActiveIndex","a","b","$apply","isArray","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","li","liElement","pattern","path","RegExp","regexp","backdrop","size","zIndex","containerElement","bodyElement","layoutHideElement","backdropCount","backdropBaseZindex","ModalFactory","modalElement","$modal","defaultPrevented","findFocusableElements","focusableElements","focusable","findNextFocusableElement","call","inReverse","prototype","reverse","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","dialogBaseZindex","returnFocus","$show","bottom","destroyModalElement","z-index","customClass","validSizes","minor","backdropAnimation","bindBackdropEvents","nextFocusable","shiftKey","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","callback","$event","ngFocusOut","ngEventHandler","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","noop","toLowerCase","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","weekdays","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","eq","click","$onFocusOut","inMenu","relatedTarget","parentEl","hasClass","webkitMatchesSelector","Element","mozMatchesSelector","msMatchesSelector","oMatchesSelector","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","keydown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","screenReaderDateFormat","focusOnOpen","DatepickerFactory","$datepicker","pickerViews","datepickerViews","altKey","setMode","$mode","focused","$views","views","$iconLeft","$iconRight","$hasToday","dropdownId","$nextLabel","labelNext","$previousLabel","$picker","handleOnKeyDown","$toggleMode","$setToday","$clear","$focused","selectedDayId","dayInfo","isNext","continueHandling","onKeyDown","inTable","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","built","$updateSelected","updateSelected","build","isSelected","steps","getUTCFullYear","getUTCMonth","$selectPane","UTC","getUTCDate","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysShortLabels","weekDaysLongLabels","weekDaysLabelsHtml","weekDayLabel","concat","picker","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","days","selectedDay","todayDay","dayItem","isToday","screenReaderLabel","muted","defaultFirstDayTabIndex","showLabels","labels","isTodayDisabled","hasSelectedDate","$modeLabel","isDisabled","getDay","actualTime","months","selectedMonth","monthItem","thisMonthDate","thisMonth","lastDate","actualMonth","firstYear","years","selectedYear","yearItem","thisYear","startYear","endYear","$modelLabel","actualYear","setYear","Array","startCollapsed","allowMultiple","activeIndexes","$targets","deactivateItem","activateItem","$toggles","$collapse","$viewChangeListeners","$registerToggle","$registerTarget","$unregisterToggle","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","ENTER","SPACE","actionEventHandler","bsCollapseToggle","bind","log","action","$unregisterTarget","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","focusMeDisabled","$alert","containerEl","AlertFactory","toArray","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\r\n'use strict';\r\n\r\n// Source: typeahead\\typeahead.js\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true,\r\n      translations: {\r\n        resultsText: \"suggestions\",\r\n        noResultsText: \"no suggestions available\",\r\n        selectResultText: \"you must select a value from the dropdown list\"\r\n      },\r\n      selectedProperty: ''\r\n    };\r\n\r\n    var KEY_CODES = {\r\n      downArrow: 40,\r\n      enter: 13,\r\n      escape: 27,\r\n      upArrow: 38,\r\n      tab: 9\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n        scope.id = options.id;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function isActive (index) {\r\n          return scope.$activeIndex === index ? true : undefined;\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.setFeedbackMessage = function(message) {\r\n          var element = angular.element(document.getElementById(scope.$id + '_sr_text'))\r\n          if(element) {\r\n            angular.element(element).text(message);\r\n            setTimeout(function() {\r\n              angular.element(element).text('');\r\n            },2000);\r\n          } \r\n        }\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          if (typeof value === 'object' && options.selectedProperty !== void 0 && options.selectedProperty.length > 0) {\r\n            controller.$setViewValue(value[options.selectedProperty]);\r\n          } else {\r\n            controller.$setViewValue(value);\r\n          }\r\n          // console.log('$setViewValue', value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        scope.$generateResultId = function (index) {\r\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          $typeahead.setAriaActiveDescendant();\r\n          \r\n          // If the key code isn't up arrow, down arrow, or enter return.\r\n          if (!/(38|40|13|27|9)/.test(evt.keyCode)) return;                 \r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          if (evt.which === KEY_CODES.escape || evt.which === KEY_CODES.tab) {\r\n            if($typeahead.$isVisible()) {              \r\n              var translations = angular.fromJson(options.translations);\r\n              $typeahead.setFeedbackMessage(translations.selectResultText);              \r\n\r\n              return;\r\n            }\r\n            else {\r\n              $typeahead.hide();\r\n              evt.stopPropagation();    \r\n            }            \r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n            // Navigate with keyboard\r\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n            $typeahead.setAriaActiveDescendant(scope.$activeIndex);   \r\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n            $typeahead.setAriaActiveDescendant(scope.$activeIndex);\r\n          } else if ((evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex === 0) || (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex === scope.$matches.length - 1)) {\r\n            scope.$activeIndex = -1;\r\n            var ele = '#' + evt.currentTarget.id;\r\n            // position the cursor after the last letter of the selected item inside the control to allow the user to easily delete the selection if desired\r\n            angular.element(ele).val('').val(controller.$viewValue);\r\n            angular.element(ele).focus();\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n            $typeahead.setAriaActiveDescendant();\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              if (scope.$id) {\r\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\r\n                $typeahead.$element.attr('id', scope.$id + '_listbox');\r\n                element.attr('aria-controls', scope.$id + '_listbox');\r\n\r\n                var assertDiv = document.getElementById(scope.$id + '_sr_text');\r\n                if (!assertDiv) {\r\n                  $typeahead.$element.parent().append('<div id=\"' + scope.$id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\r\n                }\r\n              }\r\n\r\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\r\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\r\n\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                // event for the element that we attach is added to event queue\r\n                // before pushing the same event more that once for the same element, event need to detach\r\n                // list item jumps happening in search list for this setted keydown off\r\n                if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n\r\n          var assertDiv = document.getElementById(scope.$id + '_sr_text');\r\n          angular.element(assertDiv).remove();\r\n\r\n          $typeahead.setAriaActiveDescendant();\r\n\r\n          hide();\r\n        };\r\n\r\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();               \r\n          }\r\n        };\r\n\r\n        // Helper functions within this closure\r\n\r\n        $typeahead.setAriaActiveDescendant = function(index) {\r\n          if (index === undefined || !scope.id) {\r\n            element.attr('aria-activedescendant', '');\r\n          } else {\r\n            var resultId = scope.$generateResultId(index);\r\n            if (resultId) {\r\n              element.attr('aria-activedescendant', resultId);\r\n            } else {\r\n              element.attr('aria-activedescendant', '');\r\n            }\r\n          }\r\n        }\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby', 'translations', 'selectedProperty'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');    \r\n        \r\n        // Add aria-expanded attribute\r\n        element.attr('aria-expanded', false);\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\r\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\r\n          element.attr('aria-autocomplete', 'list');\r\n        }\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          typeahead.setAriaActiveDescendant();\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);  \r\n       \r\n          if (typeahead.$scope.$matches !== void 0 && selected.length >= options.minLength) {\r\n            var translations = angular.fromJson(options.translations);\r\n            if (typeahead.$scope.$matches.length > 0) {\r\n              typeahead.setFeedbackMessage(typeahead.$scope.$matches.length + ' ' + translations.resultsText);\r\n            } else {\r\n              typeahead.setFeedbackMessage(translations.noResultsText);\r\n            }\r\n          }   \r\n          \r\n          element.attr('aria-expanded', typeahead.$isVisible());\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          element.off('keydown');\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tooltip\\tooltip.js\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      mouseDownPreventDefault: true,\r\n      mouseDownStopPropagation: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        // var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($tooltip);\r\n          }\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          if (tipElement !== null) {\r\n            // Support v1.2+ $animate\r\n            // https://github.com/angular/angular.js/issues/11713\r\n            if (angular.version.minor <= 2) {\r\n              $animate.leave(tipElement, leaveAnimateCallback);\r\n            } else {\r\n              $animate.leave(tipElement).then(leaveAnimateCallback);\r\n            }\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\r\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n              // element.on('blur', $tooltip.leave);\r\n            } else if (trigger !== 'manual') {\r\n              // Only bind up hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              } else if (trigger === 'focus') { // but do bind focus events for touch\r\n                element.on('focus', $tooltip.enter);\r\n                element.on('blur', $tooltip.leave);\r\n              }\r\n\r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              // Remove previously defined hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              } else if (trigger === 'focus') { // Remove previously defined focus events\r\n                element.off('focus', $tooltip.enter);\r\n                element.off('blur', $tooltip.leave);\r\n              }\r\n\r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) { // eslint-disable-line\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: timepicker\\timepicker.js\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tab\\tab.js\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active',\r\n      isVertical: false\r\n    };\r\n    var _tabsHash = {};\r\n\r\n    var _addTabControl = function (key, control) {\r\n      if (!_tabsHash[key]) _tabsHash[key] = control;\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      $scope.$onClick = function $onClick (evt, pane, index) {\r\n        if (!pane.disabled) {\r\n          self.$setActive(pane.name || index);\r\n        }\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n      };\r\n\r\n      function navigatePane (index, toLeft) {\r\n        var newIndex = 0;\r\n\r\n        if (toLeft) {\r\n          // Moving to the left\r\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\r\n        } else {\r\n          // Moving to the right\r\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\r\n        }\r\n\r\n        if (self.$panes[newIndex].disabled) {\r\n          navigatePane(newIndex, toLeft);\r\n        } else {\r\n          self.$setActive(self.$panes[newIndex].name || newIndex);\r\n        }\r\n      }\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n\r\n        self.$panes.push(pane);\r\n\r\n        self.$panes.forEach(function (tabPane, index) {\r\n          // Set an id value for the pane so that it can be used in the template\r\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\r\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\r\n        });\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\r\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\r\n          // If space or enter was pressed\r\n          self.$setActive(name);\r\n\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n\r\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\r\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\r\n        }\r\n      };\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      $tab.addTabControl = _addTabControl;\r\n      $tab.tabsHash = _tabsHash;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\r\n        // tabs are available in the tab component\r\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\r\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\r\n        }\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          $timeout(function () {\r\n            // get li elements\r\n            var liElements = element.find('li');\r\n            for (var i = 0; i < liElements.length; i++) {\r\n              var iElement = angular.element(liElements[i]);\r\n              iElement.removeAttr('tabindex');\r\n\r\n              // As per SS-44480\r\n              // if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\r\n                // if li is active, set focus to it.\r\n                // iElement.find('a')[0].focus();\r\n              // }\r\n            }\r\n            // delay, for the class (.active) change to reflect in DOM.\r\n          }, 100);\r\n        });\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Set up the assistive attributes\r\n        element.attr('role', 'tabpanel');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n        // Save tab id into scope\r\n        scope.id = attrs.id;\r\n\r\n        scope.name = scope.name || scope.id;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // Once the push has occured when can then update the element with some properties.\r\n        // Update the aria-labelledby attribute\r\n\t\t// SS-11127 - removed aria-describedby from tab and tab-panel and utilized aria-labeledby on the tab-panel using the ID of the tab and not the ID of the tab link\r\n        if (scope.$describedBy !== undefined) {\r\n          element.attr('aria-labelledby', scope.$describedBy);\r\n        }\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('focusOn', function () {\r\n    return {\r\n      restrict: 'A',\r\n      link: function (scope, elem, attr) {\r\n        scope.$watch(attr.focusOn, function (newValue, oldValue) {\r\n          if (newValue !== oldValue && newValue) {\r\n            elem[0].children[0].focus();\r\n          }\r\n        });\r\n      }\r\n    };\r\n  });\r\n\r\n// Source: select\\select.js\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok',\r\n      toggle: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              if (options.toggle) {\r\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\r\n              } else {\r\n                controller.$setViewValue(value);\r\n              }\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $select);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            var anchor;\r\n\r\n            if (evt.target.nodeName !== 'A') {\r\n              var anchorCandidate = targetEl.parent();\r\n              while (!anchor && anchorCandidate.length > 0) {\r\n                if (anchorCandidate[0].nodeName === 'A') {\r\n                  anchor = anchorCandidate;\r\n                }\r\n                anchorCandidate = anchorCandidate.parent();\r\n              }\r\n            }\r\n\r\n            if (anchor) {\r\n              angular.element(anchor).triggerHandler('click');\r\n            } else {\r\n              targetEl.triggerHandler('click');\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: scrollspy\\scrollspy.js\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: popover\\popover.js\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\r\n            if (newValue === false) {\r\n              popover.setEnabled(false);\r\n            } else {\r\n              popover.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: navbar\\navbar.js\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: modal\\modal.js\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true,\r\n      size: null,\r\n      zIndex: null,\r\n      containerElement: null\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      var layoutHideElement = angular.element('#layoutContainer');\r\n\r\n      var backdropCount = 0;\r\n      var dialogBaseZindex = 1050;\r\n      var backdropBaseZindex = 1040;\r\n\r\n      var validSizes = {\r\n        lg: 'modal-lg',\r\n        sm: 'modal-sm'\r\n      };\r\n\r\n      function ModalFactory (config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if (options.containerElement) {\r\n          layoutHideElement = angular.element(options.containerElement);\r\n        }\r\n        if (!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        if (options.zIndex) {\r\n          dialogBaseZindex = parseInt(options.zIndex, 10);\r\n          backdropBaseZindex = dialogBaseZindex - 10;\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        $modal.returnFocus = function () {\r\n\r\n        };\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function (key) {\r\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData;\r\n        var modalElement;\r\n        var modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({\r\n          position: 'fixed',\r\n          top: '0px',\r\n          left: '0px',\r\n          bottom: '0px',\r\n          right: '0px'\r\n        });\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function () {\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function () {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if (backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function () {\r\n          if ($modal.$isShown) return;\r\n\r\n          var parent;\r\n          var after;\r\n          if (angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if (modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\r\n\r\n          if (options.backdrop) {\r\n            // set z-index\r\n            modalElement.css({\r\n              'z-index': dialogBaseZindex + (backdropCount * 20)\r\n            });\r\n            backdropElement.css({\r\n              'z-index': backdropBaseZindex + (backdropCount * 20)\r\n            });\r\n\r\n            // increment number of backdrops\r\n            backdropCount++;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($modal);\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({\r\n            display: 'block'\r\n          }).addClass(options.placement);\r\n\r\n          // Options: customClass\r\n          if (options.customClass) {\r\n            modalElement.addClass(options.customClass);\r\n          }\r\n\r\n          // Options: size\r\n          if (options.size && validSizes[options.size]) {\r\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\r\n          }\r\n\r\n          // Options: animation\r\n          if (options.animation) {\r\n            if (options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function () {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n\r\n          layoutHideElement.attr('aria-hidden', 'true');\r\n\r\n          if (options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'false');\r\n          modalElement.attr('tabindex', '0');\r\n          modalElement.focus();\r\n          if (!modalElement.length || !angular.element(modalElement[0]).hasClass('modal')) {\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n            unbindKeyboardEvents();\r\n          }\r\n        }\r\n\r\n        $modal.hide = function () {\r\n          if (!$modal.$isShown) return;\r\n\r\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'true');\r\n\r\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            // decrement number of backdrops\r\n            backdropCount--;\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($modal);\r\n          }\r\n          if (findElement('.modal').length <= 0) {\r\n            bodyElement.removeClass(options.prefixClass + '-open');\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n          }\r\n          if (options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        function findFocusableElements () {\r\n          // Add all elements we want to include in our selection\r\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\r\n          if (document.activeElement) {\r\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\r\n              function (element) {\r\n                // Check for visibility while always include the current activeElement\r\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\r\n              });\r\n\r\n            return focusable;\r\n          }\r\n        }\r\n\r\n        function findNextFocusableElement (inReverse) {\r\n          if (document.activeElement) {\r\n            var focusable = findFocusableElements();\r\n            if (focusable === undefined) return;\r\n            if (inReverse) {\r\n              focusable = Array.prototype.reverse.call(focusable);\r\n            }\r\n\r\n            var index = focusable.indexOf(document.activeElement);\r\n            return focusable[index + 1];\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function () {\r\n          if ($modal.$isShown) {\r\n            $modal.hide();\r\n          } else {\r\n            $modal.show();\r\n          }\r\n        };\r\n\r\n        $modal.focus = function () {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function (evt) {\r\n\r\n          // Escape was pressed on an open modal. Hide it.  Backspace key, nothing happen.\r\n          if ((evt.which === 8 || evt.which === 27) && $modal.$isShown) {\r\n            if (evt.which === 27) {\r\n              $modal.hide();\r\n            }\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $modal.$onKeyDown = function (evt) {\r\n          if (options.keyboard) {\r\n            if (evt.keyCode === 8 && evt.target.tagName !== 'TEXTAREA' && evt.target.tagName !== 'INPUT') {\r\n              evt.preventDefault();\r\n            }\r\n\r\n            if (evt.keyCode === 9) {\r\n\r\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\r\n              if (nextFocusable === undefined) {\r\n                if (evt.preventDefault) evt.preventDefault();\r\n                if (evt.stopPropagation) evt.stopPropagation();\r\n\r\n                var focusable = findFocusableElements();\r\n                if (evt.shiftKey) {\r\n                  focusable[focusable.length - 1].focus();\r\n                } else {\r\n                  focusable[0].focus();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n        function bindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n            modalElement.on('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n            modalElement.off('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        // Private helpers\r\n\r\n        function hideOnBackdropClick (evt) {\r\n          if (evt.target !== evt.currentTarget) return;\r\n          if (options.backdrop === 'static') {\r\n            $modal.focus();\r\n          } else {\r\n            $modal.hide();\r\n          }\r\n        }\r\n\r\n        function preventEventDefault (evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement () {\r\n          if ($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if (modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope,\r\n          element: element,\r\n          show: false\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Options: alias modalClass to customClass\r\n        if (options.modalClass) {\r\n          options.customClass = options.modalClass;\r\n        }\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsModal) {\r\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        if (options.keyboard) {\r\n          modal.returnFocus = function () {\r\n            element[0].focus();\r\n          };\r\n        }\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\raf.js\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n\r\n// Source: helpers\\parse-options.js\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\focus-out.js\r\nangular.module('mgcrea.ngStrap.helpers.ngFocusOut', [])\r\n  .directive('ngFocusOut', ['$parse', '$rootScope', function ($parse, $rootScope) {\r\n    return {\r\n      restrict: 'A',\r\n      compile: function ($element, attr) {\r\n        // NOTE:\r\n        // We expose the powerful `$event` object on the scope that provides access to the Window,\r\n        // etc. This is OK, because expressions are not sandboxed any more (and the expression\r\n        // sandbox was never meant to be a security feature anyway).\r\n        var fn = $parse(attr.ngFocusOut);\r\n\r\n        return function link (scope, element) {\r\n          function ngEventHandler (event) {\r\n            var callback = function () {\r\n              fn(scope, {\r\n                $event: event\r\n              });\r\n            };\r\n            if ($rootScope.$$phase) {\r\n              scope.$evalAsync(callback);\r\n            } else {\r\n              scope.$apply(callback);\r\n            }\r\n          }\r\n\r\n          // setup the handler\r\n          element.on('focusout', ngEventHandler);\r\n\r\n          scope.$on('$destroy', function () {\r\n            // tear down the handler\r\n            element.off('focusout', ngEventHandler);\r\n          });\r\n        };\r\n      }\r\n    };\r\n  }]);\r\n\r\n// Source: helpers\\focus-element.js\r\nangular.module('mgcrea.ngStrap.helpers.focusElement', [])\r\n  .directive('focusElement', ['$timeout', '$parse', function ($timeout, $parse) {\r\n    return {\r\n      link: function (scope, element, attrs) {\r\n        scope.$watch(attrs.focusElement, function (value) {\r\n          if (value === true) {\r\n            $timeout(function () {\r\n              element[0].focus();\r\n            });\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n\r\n// Source: helpers\\dimensions.js\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n\r\n// Source: helpers\\debounce.js\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n\r\n// Source: helpers\\date-parser.js\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          if (value.match(/Z/)) {\r\n            date = new Date(value.substr(1, value.length - 3));\r\n          } else {\r\n            date = new Date(value.substr(1, value.length - 2));\r\n          }\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n\r\n// Source: helpers\\date-formatter.js\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    this.weekdays = function (lang) {\r\n      return $locale.DATETIME_FORMATS.DAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\compiler.js\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = options.resolve || {};\r\n    var locals = options.locals || {};\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template) {\r\n      resolve.$template = $q.when(template);\r\n    } else if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n    }\r\n\r\n    if (options.titleTemplate) {\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          findElement('[ng-bind=\"title\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if (!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function (locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n\r\n// Source: dropdown\\dropdown.js\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory (element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        /* var scope = */\r\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        if (element && element[0] && element[0].tagName.toUpperCase() === 'BUTTON') {\r\n          element.attr('aria-haspopup', 'true');\r\n          element.attr('aria-expanded', 'false');\r\n        }\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function (evt) {\r\n          if (evt.keyCode === 9 || evt.keyCode === 27) {\r\n            $dropdown.hide(/27/.test(evt.keyCode));\r\n            return;\r\n          } else if ($dropdown.$element && (evt.keyCode === 38 || evt.keyCode === 40 || evt.keyCode === 32 || evt.keyCode === 13)) {\r\n            $dropdown.$element.focus();\r\n\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n\r\n            // Retrieve active index\r\n            var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n            if (!items.length) return;\r\n            var index;\r\n            angular.forEach(items, function (el, i) {\r\n              if (matchesSelector && matchesSelector.call(el, '.active')) {\r\n                index = i;\r\n                angular.element(el).removeClass('active');\r\n              }\r\n            });\r\n\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 32 || evt.keyCode === 13) {\r\n              items.eq(index).click();\r\n            } else if (evt.keyCode === 38 && index > 0) index--;\r\n            else if (evt.keyCode === 38 && (angular.isUndefined(index) || index === 0)) index = items.length - 1;\r\n            else if (evt.keyCode === 40 && index < items.length - 1) index++;\r\n            else if (evt.keyCode === 40 && index === items.length - 1) index = 0;\r\n            else if (angular.isUndefined(index)) index = 0;\r\n            items.eq(index).addClass('active');\r\n            $dropdown.$element.attr('aria-activedescendant', items.eq(index).attr('id'));\r\n          }\r\n        };\r\n\r\n        $dropdown.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inMenu = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $dropdown.$element[0]) {\r\n              inMenu = true;\r\n              break;\r\n            } else {\r\n              inMenu = false;\r\n            }\r\n          }\r\n\r\n          if (!inMenu) {\r\n            $dropdown.hide();\r\n          } else {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Set assistive technology properties\r\n            element.attr('aria-expanded', 'true');\r\n            if ($dropdown.$element) {\r\n              $dropdown.$element.attr('aria-activedescendant', '');\r\n              $dropdown.$element.attr('role', 'menu');\r\n              $dropdown.$element.attr('tabindex', '-1');\r\n            }\r\n            if (options.keyboard && $dropdown.$element) {\r\n              $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n              $dropdown.$element.on('focusout', $dropdown.$onFocusOut);\r\n            }\r\n\r\n            bodyEl.on('click', onBodyClick);\r\n\r\n            if ($dropdown.$element) {\r\n              var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider)'));\r\n              // <li> should have role=\"none\" as per SS-9603\r\n              items.attr('role', 'none');\r\n\r\n              angular.element($dropdown.$element[0].querySelectorAll('li.divider')).attr('role', 'seperator');\r\n\r\n              items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n              items.attr('role', 'menuitem');\r\n              if (items.length && options.keyboard) {\r\n                // Dropdown menu items that are natively focusable need to have a tabindex of -1 per SS-9603\r\n                // Menu item ID's should be unique for aria-activedescendant\r\n                angular.forEach(items, function (value, key) {\r\n                  angular.element(value).attr('id', $dropdown.$scope.$id + '_menuitem_' + key);\r\n                  angular.element(value).attr('tabindex', '-1');\r\n                });\r\n              }\r\n            }\r\n          }, 0, false);\r\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function (returnFocus) {\r\n          if (!$dropdown.$isShown) return;\r\n\r\n          element.attr('aria-expanded', 'false');\r\n\r\n          if (options.keyboard && $dropdown.$element) {\r\n            $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n            $dropdown.$element.off('focusout', $dropdown.$onFocusOut);\r\n          }\r\n\r\n          bodyEl.off('click', onBodyClick);\r\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\r\n          $timeout(function () {\r\n            hide();\r\n            if (returnFocus) {\r\n              $timeout(function () {\r\n                if (element && element[0]) {\r\n                  element[0].focus();\r\n                }\r\n              }, 0, false);\r\n            }\r\n          }, 200);\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function () {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick (evt) {\r\n          if (evt.target === element[0]) return undefined;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      compile: function (tElement, tAttrs) {\r\n\r\n        // Support for inlined template (next sibling)\r\n        // It must be fetched before compilation\r\n        if (!tAttrs.bsDropdown) {\r\n          var nextSibling = tElement[0].nextSibling;\r\n          while (nextSibling && nextSibling.nodeType !== 1) {\r\n            nextSibling = nextSibling.nextSibling;\r\n          }\r\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\r\n            tAttrs.template = nextSibling.outerHTML;\r\n            tAttrs.templateUrl = undefined;\r\n            nextSibling.parentNode.removeChild(nextSibling);\r\n          }\r\n        }\r\n\r\n        return function postLink (scope, element, attr) {\r\n\r\n          // Directive options\r\n          var options = {\r\n            scope: scope\r\n          };\r\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\r\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\r\n          });\r\n\r\n          // use string regex match boolean attr falsy values, leave truthy values be\r\n          var falseValueRegExp = /^(false|0|)$/i;\r\n          angular.forEach(['html', 'container'], function (key) {\r\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n          });\r\n\r\n          // bind functions from the attrs to the show and hide events\r\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n            if (angular.isDefined(attr[bsKey])) {\r\n              options[key] = scope.$eval(attr[bsKey]);\r\n            }\r\n          });\r\n\r\n          // Support scope as an object\r\n          if (attr.bsDropdown) {\r\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\r\n              scope.content = newValue;\r\n            }, true);\r\n          }\r\n\r\n          // Initialize dropdown\r\n          var dropdown = $dropdown(element, options);\r\n\r\n          // Pickup key press on the dropdown button\r\n          element.keydown(function (evt) {\r\n            if (evt.keyCode === 38 || evt.keyCode === 40 || evt.keyCode === 27 || evt.keyCode === 9) {\r\n              dropdown.$onKeyDown(evt);\r\n            }\r\n          });\r\n\r\n          // Visibility binding support\r\n          if (attr.bsShow) {\r\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n              if (!dropdown || !angular.isDefined(newValue)) return;\r\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n              if (newValue === true) {\r\n                dropdown.show();\r\n              } else {\r\n                dropdown.hide();\r\n              }\r\n            });\r\n          }\r\n\r\n          // Garbage collection\r\n          scope.$on('$destroy', function () {\r\n            if (dropdown) dropdown.destroy();\r\n            options = null;\r\n            dropdown = null;\r\n          });\r\n\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: datepicker\\datepicker.js\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      hasToday: false,\r\n      hasClear: false,\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right',\r\n      // The format that will be given to the screen reader values placed in the DOM.\r\n      screenReaderDateFormat: 'fullDate',\r\n      // Focuses the table element in the dropdown upon display of the picker.\r\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\r\n      focusOnOpen: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\r\n        // defaults and the configuration passed.\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // Add assistive technology helper attributes.\r\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\r\n\r\n        // View vars\r\n\r\n        // Initialize the datepicker view collection by passing a reference to the base object.\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        /*\r\n         * View mode for the date picker.\r\n         * 0: days\r\n         * 1: months\r\n         * 2: years\r\n         */\r\n        scope.$mode = options.startView;\r\n        // icon class override\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        // Show buttons at the bottom of the picker.\r\n        scope.$hasToday = options.hasToday;\r\n        scope.$hasClear = options.hasClear;\r\n        /*\r\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\r\n         * aria attributes which are linked via ids.\r\n         */\r\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\r\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\r\n        scope.keyboard = options.keyboard;\r\n        scope.focusOnOpen = options.focusOnOpen;\r\n\r\n        // labels\r\n        scope.$nextLabel = options.labelNext;\r\n        scope.$previousLabel = options.labelPrevious;\r\n\r\n        // This is the actual current picker view.\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Internal handlers\r\n\r\n        function handleOnKeyDown (evt, apply) {\r\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\r\n            return false;\r\n          }\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n              if (options.focusOnOpen) return true;\r\n            } else {\r\n              if (apply === undefined || apply) {\r\n                scope.$apply(function () {\r\n                  $datepicker.setMode(scope.$mode - 1);\r\n                });\r\n              } else {\r\n                $datepicker.setMode(scope.$mode - 1);\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        }\r\n\r\n        // Scope methods\r\n\r\n        /**\r\n         * Pass through from the scope to the provider for the selection of a date.\r\n         */\r\n        scope.$select = function (date, disabled) {\r\n          if (disabled) return;\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n        scope.$setToday = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(new Date());\r\n          } else {\r\n            $datepicker.select(new Date(), true);\r\n          }\r\n        };\r\n        scope.$clear = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(null);\r\n          } else {\r\n            $datepicker.select(null, true);\r\n          }\r\n        };\r\n        scope.$focused = function (dayInfo) {\r\n          scope.selectedDayId = dayInfo.id;\r\n          if (dayInfo.isNext && !scope.selected) {\r\n            if (scope.$mode) {\r\n              $datepicker.update(dayInfo.date);\r\n            } else {\r\n              scope.$select(dayInfo.date);\r\n            }\r\n          }\r\n        };\r\n        scope.$onKeyDown = function (evt, day) {\r\n          var continueHandling = handleOnKeyDown(evt, false);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n          }\r\n        };\r\n        scope.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inTable = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n              inTable = true;\r\n              break;\r\n            } else {\r\n              inTable = false;\r\n            }\r\n          }\r\n\r\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n          //\r\n\r\n          if (!inTable && !evt.relatedTarget) {\r\n            // hmm\r\n          } else if (!inTable) {\r\n            $datepicker.hide();\r\n          } else {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (angular.isDate(date)) {\r\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\r\n              controller.$dateValue = new Date(date);\r\n            }\r\n          } else {\r\n            controller.$dateValue = null;\r\n          }\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () {\r\n                $datepicker.hide(true);\r\n              });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {\r\n              year: date.getFullYear(),\r\n              month: date.getMonth(),\r\n              date: date.getDate()\r\n            });\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        /**\r\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\r\n         * rebuilt. The views are days, months, and years.\r\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\r\n         */\r\n        $datepicker.setMode = function setMode (mode) {\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          // The picker has been changed so the view needs to be built.\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        /**\r\n         * Builds the datepicker's view based on the picker that is currently set.\r\n         */\r\n        $datepicker.$build = function $build (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], function (day) {\r\n              updateSelected(day);\r\n              if (day.selected) scope.selected = day;\r\n            });\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {\r\n            year: targetDate.getUTCFullYear(),\r\n            month: targetDate.getUTCMonth(),\r\n            date: targetDate.getUTCDate()\r\n          });\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Handles the onKeyDown event from the element that this datepicker is bound.\r\n         * In the standard case this will be an input element. If the trigger is set\r\n         * to click and is bound to a button then it is likely we're servicing a 508\r\n         * type situation where the implementation will no longer uses. Focus will be\r\n         * given to the table.\r\n         */\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          var continueHandling = handleOnKeyDown(evt);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n            parentScope.$digest();\r\n          }\r\n        };\r\n\r\n        // $datepicker.$onFocusOut = function (evt) {\r\n        //   // find out if the related target's parents contain the datepicker's $element\r\n        //   var inTable = false;\r\n        //   var parent = angular.element(evt.relatedTarget);\r\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n        //     parent = parent.parent();\r\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n        //       inTable = true;\r\n        //       break;\r\n        //     } else {\r\n        //       inTable = false;\r\n        //     }\r\n        //   }\r\n\r\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n        //   //\r\n\r\n        //   if (!inTable && !evt.relatedTarget) {\r\n        //     // hmm\r\n        //   } else if (!inTable) {\r\n        //     $datepicker.hide();\r\n        //   } else {\r\n        //     evt.stopPropagation();\r\n        //     evt.preventDefault();\r\n        //   }\r\n        // };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n          el.focused = el.selected;\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        // The datepicker will override the init functionality of the tool\r\n        var _init = $datepicker.init;\r\n        /**\r\n         * Initialize the datepicker.\r\n         */\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\r\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\r\n        var _destroy = $datepicker.destroy;\r\n\r\n        /**\r\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\r\n         */\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be shown.\r\n        var _show = $datepicker.show;\r\n\r\n        /**\r\n         * Override for the tooltip's show function.\r\n         *\r\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\r\n         * Once shown it sets up the appropriate events.\r\n         */\r\n        $datepicker.show = function show () {\r\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n\r\n          // Call the \"overriden base\" function on the tooltip.\r\n          _show();\r\n\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n\r\n            // Update assistive technologies for view changes:\r\n            $datepicker.$element.attr('aria-hidden', 'false');\r\n            element.attr('aria-expanded', 'true');\r\n\r\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n            // If keyboard navigation is enabled (true by default).\r\n            if (options.keyboard) {\r\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\r\n              // Check to see if the table element should receive the focus when the picker is shown.\r\n              if (options.focusOnOpen) {\r\n                // Focus the table element.\r\n                // $datepicker.$element.find('table')[0].focus();\r\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\r\n              } else {\r\n                element.on('keydown', $datepicker.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be hidden.\r\n        var _hide = $datepicker.hide;\r\n\r\n        /**\r\n         * Overrid efor the tooltip's hide function.\r\n         *\r\n         * Updates attributes for assistive technologies and unbinds events.\r\n         */\r\n        $datepicker.hide = function (blur) {\r\n          // If the picker is already hidden don't do anything.\r\n          if (!$datepicker.$isShown) return;\r\n\r\n          // Update the attributes used by assisteive technologies\r\n          $datepicker.$element.attr('aria-hidden', 'true');\r\n          element.attr('aria-expanded', 'false');\r\n\r\n          // Unbind the mouse and touch events\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n          // If keyboard events were bound then unbind them.\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          if (options.focusOnOpen) {\r\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\r\n            element[0].focus();\r\n          }\r\n          // Call the tooltip's hide function.\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\r\n    return {\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        options = angular.extend({}, $datepicker.defaults, options);\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\r\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n\r\n          return date === null ? null : new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n      }\r\n    };\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLong = $dateFormatter.weekdays(lang);\r\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n\r\n        var weekDaysLabelsHtml = '';\r\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\r\n          var weekDayShortLabel = weekDaysShortLabels[i];\r\n          var weekDayLabel = weekDaysLongLabels[i];\r\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\r\n        }\r\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {\r\n          year: startDate.getFullYear(),\r\n          month: startDate.getMonth(),\r\n          date: startDate.getDate()\r\n        };\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {\r\n            month: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n              // in $datepicker.$selectPane, so picker would not update selected day display if\r\n              // user picks first day of the new month.\r\n              // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n            // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            var selectedDay;\r\n            var todayDay;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              // push the day information onto the collection\r\n              var dayItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: day,\r\n                value: day.getDate(),\r\n                isToday: day.toDateString() === today,\r\n                label: formatDate(day, this.format),\r\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\r\n                selected: picker.$date && this.isSelected(day),\r\n                muted: day.getMonth() !== viewDate.month,\r\n                disabled: this.isDisabled(day)\r\n              };\r\n\r\n              if (dayItem.selected) selectedDay = dayItem;\r\n              if (dayItem.isToday) todayDay = dayItem;\r\n\r\n              days.push(dayItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedDay) {\r\n                scope.selectedDayId = selectedDay.id;\r\n                if (todayDay) todayDay.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedDay.focused = true;\r\n                scope.selected = selectedDay;\r\n              } else if (todayDay) {\r\n                todayDay.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.isTodayDisabled = this.isDisabled(new Date());\r\n            scope.hasSelectedDate = picker.$date != null;\r\n            scope.$modeLabel = options.labelMonth;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\r\n              date.getMonth() === picker.$date.getMonth() &&\r\n              date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n            // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n            // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n            // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            var actualTime;\r\n\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date) {\r\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n                picker.$date = new Date();\r\n              } else {\r\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\r\n              }\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return false;\r\n            }\r\n\r\n            actualTime = picker.$date.getTime();\r\n\r\n            var newDate;\r\n\r\n            switch (evt.keyCode) {\r\n              // enter\r\n              case 13:\r\n                if (options.focusOnOpen) {\r\n                  picker.select(new Date(actualTime), true);\r\n                  return false;\r\n                }\r\n                break;\r\n                // pageup\r\n              case 33:\r\n                if (evt.altKey) { // move back a year\r\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move back a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\r\n                  }\r\n                }\r\n                break;\r\n\r\n                // pagedown\r\n              case 34:\r\n                if (evt.altKey) { // move forward a year\r\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move forward a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\r\n                  }\r\n                }\r\n\r\n                break;\r\n\r\n                // left arrow\r\n              case 37:\r\n                newDate = new Date(actualTime - 1 * 864e5);\r\n                break;\r\n\r\n                // up arrow\r\n              case 38:\r\n                newDate = new Date(actualTime - 7 * 864e5);\r\n                break;\r\n\r\n                // right arrow\r\n              case 39:\r\n                newDate = new Date(actualTime + 1 * 864e5);\r\n                break;\r\n\r\n                // down arrow\r\n              case 40:\r\n                newDate = new Date(actualTime + 7 * 864e5);\r\n                break;\r\n\r\n              default:\r\n                return false;\r\n            }\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n\r\n            if (evt && evt.stopPropagation) evt.stopPropagation();\r\n\r\n            return false;\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            var selectedMonth;\r\n            var thisMonth;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n\r\n              var monthItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: month,\r\n                label: formatDate(month, this.format),\r\n                selected: picker.$isSelected(month),\r\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\r\n                disabled: this.isDisabled(month)\r\n              };\r\n\r\n              if (monthItem.selected) selectedMonth = monthItem;\r\n              if (monthItem.isToday) thisMonth = monthItem;\r\n\r\n              months.push(monthItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedMonth) {\r\n                scope.selectedDayId = selectedMonth.id;\r\n                if (thisMonth) thisMonth.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedMonth.focused = true;\r\n                scope.selected = selectedMonth;\r\n              } else if (thisMonth) {\r\n                thisMonth.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modeLabel = options.labelYear;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\r\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 12\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            var selectedYear;\r\n            var thisYear;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n\r\n              var yearItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: year,\r\n                label: formatDate(year, this.format),\r\n                selected: picker.$isSelected(year),\r\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\r\n                disabled: this.isDisabled(year)\r\n              };\r\n\r\n              if (yearItem.selected) selectedYear = yearItem;\r\n              if (yearItem.isToday) thisYear = yearItem;\r\n\r\n              years.push(yearItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedYear) {\r\n                scope.selectedDayId = selectedYear.id;\r\n                if (thisYear) thisYear.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedYear.focused = true;\r\n                scope.selected = selectedYear;\r\n              } else if (thisYear) {\r\n                thisYear.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.startYear = years[0].label;\r\n            scope.endYear = years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modelLabel = options.labelDays;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: collapse\\collapse.js\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function (element) {\r\n        self.$toggles.push(element);\r\n        element.attr('aria-expanded', 'false');\r\n      };\r\n      self.$registerTarget = function (element) {\r\n        self.$targets.push(element);\r\n\r\n        var i = 0;\r\n        if (self.$targets) {\r\n          for (i = 0; i < self.$targets.length; i++) {\r\n            self.$targets[i].attr('aria-hidden', 'true');\r\n          }\r\n          for (i = 0; i < self.$targets.$active.length; i++) {\r\n            if (self.$targets[self.$targets.$active[i]]) {\r\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\r\n            }\r\n            if (self.$toggles[self.$targets.$active[i]]) {\r\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      self.$unregisterToggle = function (element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function (element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        if (angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        } else if (!self.$options.disallowToggle && isActive(value)) {\r\n          deactivateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function () {\r\n        if (self.$options.allowMultiple) {\r\n          return self.$targets.$active;\r\n        }\r\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes (index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for (var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive (value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) !== -1;\r\n      }\r\n\r\n      function deactivateItem (value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\r\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem (value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\r\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[0]]) {\r\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\r\n          }\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n\r\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\r\n          }\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            } else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              } else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function () {\r\n    var KEY_CODES = {\r\n      ENTER: 13,\r\n      SPACE: 32\r\n    };\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        var actionEventHandler = function () {\r\n          if (!attrs.disabled) {\r\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n            bsCollapseCtrl.$setActive(index * 1);\r\n            scope.$apply();\r\n          }\r\n        };\r\n\r\n        element.on('click', actionEventHandler);\r\n        element.bind('keydown keypress', function (e) {\r\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\r\n            console.log('key handler handling');\r\n            actionEventHandler();\r\n            e.preventDefault();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function ($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if (bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          } else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: button\\button.js\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = !!controller.$viewValue;\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$viewValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: aside\\aside.js\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: alert\\alert.js\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true,\r\n      focusMeDisabled: false\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n        $alert.returnFocus = function () {\r\n          function findFocusableElements () {\r\n            var containerEl = angular.element($alert.$element).closest('[ng-controller]');\r\n            return containerEl.find('a:not([disabled]),button:not([disabled]),input:not([disabled]),select:not([disabled]),[tabindex]:not([disabled]):not([tabindex=\"-1\"])').filter(function (i, el) {\r\n              return !angular.element(el).parentsUntil(containerEl, '[tabindex=\"-1\"]').length;\r\n            });\r\n          }\r\n\r\n          function findNextFocusableElement () {\r\n            if (document.activeElement) {\r\n              var focusable = findFocusableElements().toArray();\r\n              if (focusable === undefined) return;\r\n              var index = focusable.indexOf(document.activeElement);\r\n              return focusable[index + 1];\r\n            }\r\n          }\r\n          angular.element(findNextFocusableElement()).focus();\r\n        };\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n        if (options.focusMeDisabled) {\r\n          $alert.$scope.focusMeDisabled = options.focusMeDisabled;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: affix\\affix.js\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true,\r\n      setWidth: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = options.setWidth && !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element[0].style.position;\r\n          var initialTop = element[0].style.top;\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n            element.css('top', initialTop);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null) {\r\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window, $timeout) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix;\r\n        $timeout(function () { affix = $affix(element, options); });\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n\r\n// Source: module.js\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n\r\n})(window, document);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true,\r\n      translations: {\r\n        resultsText: \"suggestions\",\r\n        noResultsText: \"no suggestions available\",\r\n        selectResultText: \"you must select a value from the dropdown list\"\r\n      },\r\n      selectedProperty: ''\r\n    };\r\n\r\n    var KEY_CODES = {\r\n      downArrow: 40,\r\n      enter: 13,\r\n      escape: 27,\r\n      upArrow: 38,\r\n      tab: 9\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n        scope.id = options.id;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function isActive (index) {\r\n          return scope.$activeIndex === index ? true : undefined;\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.setFeedbackMessage = function(message) {\r\n          var element = angular.element(document.getElementById(scope.$id + '_sr_text'))\r\n          if(element) {\r\n            angular.element(element).text(message);\r\n            setTimeout(function() {\r\n              angular.element(element).text('');\r\n            },2000);\r\n          } \r\n        }\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          if (typeof value === 'object' && options.selectedProperty !== void 0 && options.selectedProperty.length > 0) {\r\n            controller.$setViewValue(value[options.selectedProperty]);\r\n          } else {\r\n            controller.$setViewValue(value);\r\n          }\r\n          // console.log('$setViewValue', value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        scope.$generateResultId = function (index) {\r\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          $typeahead.setAriaActiveDescendant();\r\n          \r\n          // If the key code isn't up arrow, down arrow, or enter return.\r\n          if (!/(38|40|13|27|9)/.test(evt.keyCode)) return;                 \r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          if (evt.which === KEY_CODES.escape || evt.which === KEY_CODES.tab) {\r\n            if($typeahead.$isVisible()) {              \r\n              var translations = angular.fromJson(options.translations);\r\n              $typeahead.setFeedbackMessage(translations.selectResultText);              \r\n\r\n              return;\r\n            }\r\n            else {\r\n              $typeahead.hide();\r\n              evt.stopPropagation();    \r\n            }            \r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n            // Navigate with keyboard\r\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n            $typeahead.setAriaActiveDescendant(scope.$activeIndex);   \r\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n            $typeahead.setAriaActiveDescendant(scope.$activeIndex);\r\n          } else if ((evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex === 0) || (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex === scope.$matches.length - 1)) {\r\n            scope.$activeIndex = -1;\r\n            var ele = '#' + evt.currentTarget.id;\r\n            // position the cursor after the last letter of the selected item inside the control to allow the user to easily delete the selection if desired\r\n            angular.element(ele).val('').val(controller.$viewValue);\r\n            angular.element(ele).focus();\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n            $typeahead.setAriaActiveDescendant();\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              if (scope.$id) {\r\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\r\n                $typeahead.$element.attr('id', scope.$id + '_listbox');\r\n                element.attr('aria-controls', scope.$id + '_listbox');\r\n\r\n                var assertDiv = document.getElementById(scope.$id + '_sr_text');\r\n                if (!assertDiv) {\r\n                  $typeahead.$element.parent().append('<div id=\"' + scope.$id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\r\n                }\r\n              }\r\n\r\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\r\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\r\n\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                // event for the element that we attach is added to event queue\r\n                // before pushing the same event more that once for the same element, event need to detach\r\n                // list item jumps happening in search list for this setted keydown off\r\n                if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n\r\n          var assertDiv = document.getElementById(scope.$id + '_sr_text');\r\n          angular.element(assertDiv).remove();\r\n\r\n          $typeahead.setAriaActiveDescendant();\r\n\r\n          hide();\r\n        };\r\n\r\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();               \r\n          }\r\n        };\r\n\r\n        // Helper functions within this closure\r\n\r\n        $typeahead.setAriaActiveDescendant = function(index) {\r\n          if (index === undefined || !scope.id) {\r\n            element.attr('aria-activedescendant', '');\r\n          } else {\r\n            var resultId = scope.$generateResultId(index);\r\n            if (resultId) {\r\n              element.attr('aria-activedescendant', resultId);\r\n            } else {\r\n              element.attr('aria-activedescendant', '');\r\n            }\r\n          }\r\n        }\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby', 'translations', 'selectedProperty'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');    \r\n        \r\n        // Add aria-expanded attribute\r\n        element.attr('aria-expanded', false);\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\r\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\r\n          element.attr('aria-autocomplete', 'list');\r\n        }\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          typeahead.setAriaActiveDescendant();\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);  \r\n       \r\n          if (typeahead.$scope.$matches !== void 0 && selected.length >= options.minLength) {\r\n            var translations = angular.fromJson(options.translations);\r\n            if (typeahead.$scope.$matches.length > 0) {\r\n              typeahead.setFeedbackMessage(typeahead.$scope.$matches.length + ' ' + translations.resultsText);\r\n            } else {\r\n              typeahead.setFeedbackMessage(translations.noResultsText);\r\n            }\r\n          }   \r\n          \r\n          element.attr('aria-expanded', typeahead.$isVisible());\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          element.off('keydown');\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = options.resolve || {};\r\n    var locals = options.locals || {};\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template) {\r\n      resolve.$template = $q.when(template);\r\n    } else if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n    }\r\n\r\n    if (options.titleTemplate) {\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          findElement('[ng-bind=\"title\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if (!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function (locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory (element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        /* var scope = */\r\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        if (element && element[0] && element[0].tagName.toUpperCase() === 'BUTTON') {\r\n          element.attr('aria-haspopup', 'true');\r\n          element.attr('aria-expanded', 'false');\r\n        }\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function (evt) {\r\n          if (evt.keyCode === 9 || evt.keyCode === 27) {\r\n            $dropdown.hide(/27/.test(evt.keyCode));\r\n            return;\r\n          } else if ($dropdown.$element && (evt.keyCode === 38 || evt.keyCode === 40 || evt.keyCode === 32 || evt.keyCode === 13)) {\r\n            $dropdown.$element.focus();\r\n\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n\r\n            // Retrieve active index\r\n            var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n            if (!items.length) return;\r\n            var index;\r\n            angular.forEach(items, function (el, i) {\r\n              if (matchesSelector && matchesSelector.call(el, '.active')) {\r\n                index = i;\r\n                angular.element(el).removeClass('active');\r\n              }\r\n            });\r\n\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 32 || evt.keyCode === 13) {\r\n              items.eq(index).click();\r\n            } else if (evt.keyCode === 38 && index > 0) index--;\r\n            else if (evt.keyCode === 38 && (angular.isUndefined(index) || index === 0)) index = items.length - 1;\r\n            else if (evt.keyCode === 40 && index < items.length - 1) index++;\r\n            else if (evt.keyCode === 40 && index === items.length - 1) index = 0;\r\n            else if (angular.isUndefined(index)) index = 0;\r\n            items.eq(index).addClass('active');\r\n            $dropdown.$element.attr('aria-activedescendant', items.eq(index).attr('id'));\r\n          }\r\n        };\r\n\r\n        $dropdown.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inMenu = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $dropdown.$element[0]) {\r\n              inMenu = true;\r\n              break;\r\n            } else {\r\n              inMenu = false;\r\n            }\r\n          }\r\n\r\n          if (!inMenu) {\r\n            $dropdown.hide();\r\n          } else {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Set assistive technology properties\r\n            element.attr('aria-expanded', 'true');\r\n            if ($dropdown.$element) {\r\n              $dropdown.$element.attr('aria-activedescendant', '');\r\n              $dropdown.$element.attr('role', 'menu');\r\n              $dropdown.$element.attr('tabindex', '-1');\r\n            }\r\n            if (options.keyboard && $dropdown.$element) {\r\n              $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n              $dropdown.$element.on('focusout', $dropdown.$onFocusOut);\r\n            }\r\n\r\n            bodyEl.on('click', onBodyClick);\r\n\r\n            if ($dropdown.$element) {\r\n              var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider)'));\r\n              // <li> should have role=\"none\" as per SS-9603\r\n              items.attr('role', 'none');\r\n\r\n              angular.element($dropdown.$element[0].querySelectorAll('li.divider')).attr('role', 'seperator');\r\n\r\n              items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n              items.attr('role', 'menuitem');\r\n              if (items.length && options.keyboard) {\r\n                // Dropdown menu items that are natively focusable need to have a tabindex of -1 per SS-9603\r\n                // Menu item ID's should be unique for aria-activedescendant\r\n                angular.forEach(items, function (value, key) {\r\n                  angular.element(value).attr('id', $dropdown.$scope.$id + '_menuitem_' + key);\r\n                  angular.element(value).attr('tabindex', '-1');\r\n                });\r\n              }\r\n            }\r\n          }, 0, false);\r\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function (returnFocus) {\r\n          if (!$dropdown.$isShown) return;\r\n\r\n          element.attr('aria-expanded', 'false');\r\n\r\n          if (options.keyboard && $dropdown.$element) {\r\n            $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n            $dropdown.$element.off('focusout', $dropdown.$onFocusOut);\r\n          }\r\n\r\n          bodyEl.off('click', onBodyClick);\r\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\r\n          $timeout(function () {\r\n            hide();\r\n            if (returnFocus) {\r\n              $timeout(function () {\r\n                if (element && element[0]) {\r\n                  element[0].focus();\r\n                }\r\n              }, 0, false);\r\n            }\r\n          }, 200);\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function () {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick (evt) {\r\n          if (evt.target === element[0]) return undefined;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      compile: function (tElement, tAttrs) {\r\n\r\n        // Support for inlined template (next sibling)\r\n        // It must be fetched before compilation\r\n        if (!tAttrs.bsDropdown) {\r\n          var nextSibling = tElement[0].nextSibling;\r\n          while (nextSibling && nextSibling.nodeType !== 1) {\r\n            nextSibling = nextSibling.nextSibling;\r\n          }\r\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\r\n            tAttrs.template = nextSibling.outerHTML;\r\n            tAttrs.templateUrl = undefined;\r\n            nextSibling.parentNode.removeChild(nextSibling);\r\n          }\r\n        }\r\n\r\n        return function postLink (scope, element, attr) {\r\n\r\n          // Directive options\r\n          var options = {\r\n            scope: scope\r\n          };\r\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\r\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\r\n          });\r\n\r\n          // use string regex match boolean attr falsy values, leave truthy values be\r\n          var falseValueRegExp = /^(false|0|)$/i;\r\n          angular.forEach(['html', 'container'], function (key) {\r\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n          });\r\n\r\n          // bind functions from the attrs to the show and hide events\r\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n            if (angular.isDefined(attr[bsKey])) {\r\n              options[key] = scope.$eval(attr[bsKey]);\r\n            }\r\n          });\r\n\r\n          // Support scope as an object\r\n          if (attr.bsDropdown) {\r\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\r\n              scope.content = newValue;\r\n            }, true);\r\n          }\r\n\r\n          // Initialize dropdown\r\n          var dropdown = $dropdown(element, options);\r\n\r\n          // Pickup key press on the dropdown button\r\n          element.keydown(function (evt) {\r\n            if (evt.keyCode === 38 || evt.keyCode === 40 || evt.keyCode === 27 || evt.keyCode === 9) {\r\n              dropdown.$onKeyDown(evt);\r\n            }\r\n          });\r\n\r\n          // Visibility binding support\r\n          if (attr.bsShow) {\r\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n              if (!dropdown || !angular.isDefined(newValue)) return;\r\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n              if (newValue === true) {\r\n                dropdown.show();\r\n              } else {\r\n                dropdown.hide();\r\n              }\r\n            });\r\n          }\r\n\r\n          // Garbage collection\r\n          scope.$on('$destroy', function () {\r\n            if (dropdown) dropdown.destroy();\r\n            options = null;\r\n            dropdown = null;\r\n          });\r\n\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      mouseDownPreventDefault: true,\r\n      mouseDownStopPropagation: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        // var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($tooltip);\r\n          }\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          if (tipElement !== null) {\r\n            // Support v1.2+ $animate\r\n            // https://github.com/angular/angular.js/issues/11713\r\n            if (angular.version.minor <= 2) {\r\n              $animate.leave(tipElement, leaveAnimateCallback);\r\n            } else {\r\n              $animate.leave(tipElement).then(leaveAnimateCallback);\r\n            }\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\r\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n              // element.on('blur', $tooltip.leave);\r\n            } else if (trigger !== 'manual') {\r\n              // Only bind up hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              } else if (trigger === 'focus') { // but do bind focus events for touch\r\n                element.on('focus', $tooltip.enter);\r\n                element.on('blur', $tooltip.leave);\r\n              }\r\n\r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              // Remove previously defined hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              } else if (trigger === 'focus') { // Remove previously defined focus events\r\n                element.off('focus', $tooltip.enter);\r\n                element.off('blur', $tooltip.leave);\r\n              }\r\n\r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) { // eslint-disable-line\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active',\r\n      isVertical: false\r\n    };\r\n    var _tabsHash = {};\r\n\r\n    var _addTabControl = function (key, control) {\r\n      if (!_tabsHash[key]) _tabsHash[key] = control;\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      $scope.$onClick = function $onClick (evt, pane, index) {\r\n        if (!pane.disabled) {\r\n          self.$setActive(pane.name || index);\r\n        }\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n      };\r\n\r\n      function navigatePane (index, toLeft) {\r\n        var newIndex = 0;\r\n\r\n        if (toLeft) {\r\n          // Moving to the left\r\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\r\n        } else {\r\n          // Moving to the right\r\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\r\n        }\r\n\r\n        if (self.$panes[newIndex].disabled) {\r\n          navigatePane(newIndex, toLeft);\r\n        } else {\r\n          self.$setActive(self.$panes[newIndex].name || newIndex);\r\n        }\r\n      }\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n\r\n        self.$panes.push(pane);\r\n\r\n        self.$panes.forEach(function (tabPane, index) {\r\n          // Set an id value for the pane so that it can be used in the template\r\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\r\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\r\n        });\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\r\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\r\n          // If space or enter was pressed\r\n          self.$setActive(name);\r\n\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n\r\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\r\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\r\n        }\r\n      };\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      $tab.addTabControl = _addTabControl;\r\n      $tab.tabsHash = _tabsHash;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\r\n        // tabs are available in the tab component\r\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\r\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\r\n        }\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          $timeout(function () {\r\n            // get li elements\r\n            var liElements = element.find('li');\r\n            for (var i = 0; i < liElements.length; i++) {\r\n              var iElement = angular.element(liElements[i]);\r\n              iElement.removeAttr('tabindex');\r\n\r\n              // As per SS-44480\r\n              // if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\r\n                // if li is active, set focus to it.\r\n                // iElement.find('a')[0].focus();\r\n              // }\r\n            }\r\n            // delay, for the class (.active) change to reflect in DOM.\r\n          }, 100);\r\n        });\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Set up the assistive attributes\r\n        element.attr('role', 'tabpanel');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n        // Save tab id into scope\r\n        scope.id = attrs.id;\r\n\r\n        scope.name = scope.name || scope.id;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // Once the push has occured when can then update the element with some properties.\r\n        // Update the aria-labelledby attribute\r\n\t\t// SS-11127 - removed aria-describedby from tab and tab-panel and utilized aria-labeledby on the tab-panel using the ID of the tab and not the ID of the tab link\r\n        if (scope.$describedBy !== undefined) {\r\n          element.attr('aria-labelledby', scope.$describedBy);\r\n        }\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('focusOn', function () {\r\n    return {\r\n      restrict: 'A',\r\n      link: function (scope, elem, attr) {\r\n        scope.$watch(attr.focusOn, function (newValue, oldValue) {\r\n          if (newValue !== oldValue && newValue) {\r\n            elem[0].children[0].focus();\r\n          }\r\n        });\r\n      }\r\n    };\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok',\r\n      toggle: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              if (options.toggle) {\r\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\r\n              } else {\r\n                controller.$setViewValue(value);\r\n              }\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $select);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            var anchor;\r\n\r\n            if (evt.target.nodeName !== 'A') {\r\n              var anchorCandidate = targetEl.parent();\r\n              while (!anchor && anchorCandidate.length > 0) {\r\n                if (anchorCandidate[0].nodeName === 'A') {\r\n                  anchor = anchorCandidate;\r\n                }\r\n                anchorCandidate = anchorCandidate.parent();\r\n              }\r\n            }\r\n\r\n            if (anchor) {\r\n              angular.element(anchor).triggerHandler('click');\r\n            } else {\r\n              targetEl.triggerHandler('click');\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\r\n            if (newValue === false) {\r\n              popover.setEnabled(false);\r\n            } else {\r\n              popover.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true,\r\n      size: null,\r\n      zIndex: null,\r\n      containerElement: null\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      var layoutHideElement = angular.element('#layoutContainer');\r\n\r\n      var backdropCount = 0;\r\n      var dialogBaseZindex = 1050;\r\n      var backdropBaseZindex = 1040;\r\n\r\n      var validSizes = {\r\n        lg: 'modal-lg',\r\n        sm: 'modal-sm'\r\n      };\r\n\r\n      function ModalFactory (config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if (options.containerElement) {\r\n          layoutHideElement = angular.element(options.containerElement);\r\n        }\r\n        if (!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        if (options.zIndex) {\r\n          dialogBaseZindex = parseInt(options.zIndex, 10);\r\n          backdropBaseZindex = dialogBaseZindex - 10;\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        $modal.returnFocus = function () {\r\n\r\n        };\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function (key) {\r\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData;\r\n        var modalElement;\r\n        var modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({\r\n          position: 'fixed',\r\n          top: '0px',\r\n          left: '0px',\r\n          bottom: '0px',\r\n          right: '0px'\r\n        });\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function () {\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function () {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if (backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function () {\r\n          if ($modal.$isShown) return;\r\n\r\n          var parent;\r\n          var after;\r\n          if (angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if (modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\r\n\r\n          if (options.backdrop) {\r\n            // set z-index\r\n            modalElement.css({\r\n              'z-index': dialogBaseZindex + (backdropCount * 20)\r\n            });\r\n            backdropElement.css({\r\n              'z-index': backdropBaseZindex + (backdropCount * 20)\r\n            });\r\n\r\n            // increment number of backdrops\r\n            backdropCount++;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($modal);\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({\r\n            display: 'block'\r\n          }).addClass(options.placement);\r\n\r\n          // Options: customClass\r\n          if (options.customClass) {\r\n            modalElement.addClass(options.customClass);\r\n          }\r\n\r\n          // Options: size\r\n          if (options.size && validSizes[options.size]) {\r\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\r\n          }\r\n\r\n          // Options: animation\r\n          if (options.animation) {\r\n            if (options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function () {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n\r\n          layoutHideElement.attr('aria-hidden', 'true');\r\n\r\n          if (options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'false');\r\n          modalElement.attr('tabindex', '0');\r\n          modalElement.focus();\r\n          if (!modalElement.length || !angular.element(modalElement[0]).hasClass('modal')) {\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n            unbindKeyboardEvents();\r\n          }\r\n        }\r\n\r\n        $modal.hide = function () {\r\n          if (!$modal.$isShown) return;\r\n\r\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'true');\r\n\r\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            // decrement number of backdrops\r\n            backdropCount--;\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($modal);\r\n          }\r\n          if (findElement('.modal').length <= 0) {\r\n            bodyElement.removeClass(options.prefixClass + '-open');\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n          }\r\n          if (options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        function findFocusableElements () {\r\n          // Add all elements we want to include in our selection\r\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\r\n          if (document.activeElement) {\r\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\r\n              function (element) {\r\n                // Check for visibility while always include the current activeElement\r\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\r\n              });\r\n\r\n            return focusable;\r\n          }\r\n        }\r\n\r\n        function findNextFocusableElement (inReverse) {\r\n          if (document.activeElement) {\r\n            var focusable = findFocusableElements();\r\n            if (focusable === undefined) return;\r\n            if (inReverse) {\r\n              focusable = Array.prototype.reverse.call(focusable);\r\n            }\r\n\r\n            var index = focusable.indexOf(document.activeElement);\r\n            return focusable[index + 1];\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function () {\r\n          if ($modal.$isShown) {\r\n            $modal.hide();\r\n          } else {\r\n            $modal.show();\r\n          }\r\n        };\r\n\r\n        $modal.focus = function () {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function (evt) {\r\n\r\n          // Escape was pressed on an open modal. Hide it.  Backspace key, nothing happen.\r\n          if ((evt.which === 8 || evt.which === 27) && $modal.$isShown) {\r\n            if (evt.which === 27) {\r\n              $modal.hide();\r\n            }\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $modal.$onKeyDown = function (evt) {\r\n          if (options.keyboard) {\r\n            if (evt.keyCode === 8 && evt.target.tagName !== 'TEXTAREA' && evt.target.tagName !== 'INPUT') {\r\n              evt.preventDefault();\r\n            }\r\n\r\n            if (evt.keyCode === 9) {\r\n\r\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\r\n              if (nextFocusable === undefined) {\r\n                if (evt.preventDefault) evt.preventDefault();\r\n                if (evt.stopPropagation) evt.stopPropagation();\r\n\r\n                var focusable = findFocusableElements();\r\n                if (evt.shiftKey) {\r\n                  focusable[focusable.length - 1].focus();\r\n                } else {\r\n                  focusable[0].focus();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n        function bindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n            modalElement.on('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n            modalElement.off('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        // Private helpers\r\n\r\n        function hideOnBackdropClick (evt) {\r\n          if (evt.target !== evt.currentTarget) return;\r\n          if (options.backdrop === 'static') {\r\n            $modal.focus();\r\n          } else {\r\n            $modal.hide();\r\n          }\r\n        }\r\n\r\n        function preventEventDefault (evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement () {\r\n          if ($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if (modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope,\r\n          element: element,\r\n          show: false\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Options: alias modalClass to customClass\r\n        if (options.modalClass) {\r\n          options.customClass = options.modalClass;\r\n        }\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsModal) {\r\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        if (options.keyboard) {\r\n          modal.returnFocus = function () {\r\n            element[0].focus();\r\n          };\r\n        }\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.ngFocusOut', [])\r\n  .directive('ngFocusOut', ['$parse', '$rootScope', function ($parse, $rootScope) {\r\n    return {\r\n      restrict: 'A',\r\n      compile: function ($element, attr) {\r\n        // NOTE:\r\n        // We expose the powerful `$event` object on the scope that provides access to the Window,\r\n        // etc. This is OK, because expressions are not sandboxed any more (and the expression\r\n        // sandbox was never meant to be a security feature anyway).\r\n        var fn = $parse(attr.ngFocusOut);\r\n\r\n        return function link (scope, element) {\r\n          function ngEventHandler (event) {\r\n            var callback = function () {\r\n              fn(scope, {\r\n                $event: event\r\n              });\r\n            };\r\n            if ($rootScope.$$phase) {\r\n              scope.$evalAsync(callback);\r\n            } else {\r\n              scope.$apply(callback);\r\n            }\r\n          }\r\n\r\n          // setup the handler\r\n          element.on('focusout', ngEventHandler);\r\n\r\n          scope.$on('$destroy', function () {\r\n            // tear down the handler\r\n            element.off('focusout', ngEventHandler);\r\n          });\r\n        };\r\n      }\r\n    };\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.focusElement', [])\r\n  .directive('focusElement', ['$timeout', '$parse', function ($timeout, $parse) {\r\n    return {\r\n      link: function (scope, element, attrs) {\r\n        scope.$watch(attrs.focusElement, function (value) {\r\n          if (value === true) {\r\n            $timeout(function () {\r\n              element[0].focus();\r\n            });\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          if (value.match(/Z/)) {\r\n            date = new Date(value.substr(1, value.length - 3));\r\n          } else {\r\n            date = new Date(value.substr(1, value.length - 2));\r\n          }\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    this.weekdays = function (lang) {\r\n      return $locale.DATETIME_FORMATS.DAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      hasToday: false,\r\n      hasClear: false,\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right',\r\n      // The format that will be given to the screen reader values placed in the DOM.\r\n      screenReaderDateFormat: 'fullDate',\r\n      // Focuses the table element in the dropdown upon display of the picker.\r\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\r\n      focusOnOpen: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\r\n        // defaults and the configuration passed.\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // Add assistive technology helper attributes.\r\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\r\n\r\n        // View vars\r\n\r\n        // Initialize the datepicker view collection by passing a reference to the base object.\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        /*\r\n         * View mode for the date picker.\r\n         * 0: days\r\n         * 1: months\r\n         * 2: years\r\n         */\r\n        scope.$mode = options.startView;\r\n        // icon class override\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        // Show buttons at the bottom of the picker.\r\n        scope.$hasToday = options.hasToday;\r\n        scope.$hasClear = options.hasClear;\r\n        /*\r\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\r\n         * aria attributes which are linked via ids.\r\n         */\r\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\r\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\r\n        scope.keyboard = options.keyboard;\r\n        scope.focusOnOpen = options.focusOnOpen;\r\n\r\n        // labels\r\n        scope.$nextLabel = options.labelNext;\r\n        scope.$previousLabel = options.labelPrevious;\r\n\r\n        // This is the actual current picker view.\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Internal handlers\r\n\r\n        function handleOnKeyDown (evt, apply) {\r\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\r\n            return false;\r\n          }\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n              if (options.focusOnOpen) return true;\r\n            } else {\r\n              if (apply === undefined || apply) {\r\n                scope.$apply(function () {\r\n                  $datepicker.setMode(scope.$mode - 1);\r\n                });\r\n              } else {\r\n                $datepicker.setMode(scope.$mode - 1);\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        }\r\n\r\n        // Scope methods\r\n\r\n        /**\r\n         * Pass through from the scope to the provider for the selection of a date.\r\n         */\r\n        scope.$select = function (date, disabled) {\r\n          if (disabled) return;\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n        scope.$setToday = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(new Date());\r\n          } else {\r\n            $datepicker.select(new Date(), true);\r\n          }\r\n        };\r\n        scope.$clear = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(null);\r\n          } else {\r\n            $datepicker.select(null, true);\r\n          }\r\n        };\r\n        scope.$focused = function (dayInfo) {\r\n          scope.selectedDayId = dayInfo.id;\r\n          if (dayInfo.isNext && !scope.selected) {\r\n            if (scope.$mode) {\r\n              $datepicker.update(dayInfo.date);\r\n            } else {\r\n              scope.$select(dayInfo.date);\r\n            }\r\n          }\r\n        };\r\n        scope.$onKeyDown = function (evt, day) {\r\n          var continueHandling = handleOnKeyDown(evt, false);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n          }\r\n        };\r\n        scope.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inTable = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n              inTable = true;\r\n              break;\r\n            } else {\r\n              inTable = false;\r\n            }\r\n          }\r\n\r\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n          //\r\n\r\n          if (!inTable && !evt.relatedTarget) {\r\n            // hmm\r\n          } else if (!inTable) {\r\n            $datepicker.hide();\r\n          } else {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (angular.isDate(date)) {\r\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\r\n              controller.$dateValue = new Date(date);\r\n            }\r\n          } else {\r\n            controller.$dateValue = null;\r\n          }\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () {\r\n                $datepicker.hide(true);\r\n              });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {\r\n              year: date.getFullYear(),\r\n              month: date.getMonth(),\r\n              date: date.getDate()\r\n            });\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        /**\r\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\r\n         * rebuilt. The views are days, months, and years.\r\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\r\n         */\r\n        $datepicker.setMode = function setMode (mode) {\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          // The picker has been changed so the view needs to be built.\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        /**\r\n         * Builds the datepicker's view based on the picker that is currently set.\r\n         */\r\n        $datepicker.$build = function $build (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], function (day) {\r\n              updateSelected(day);\r\n              if (day.selected) scope.selected = day;\r\n            });\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {\r\n            year: targetDate.getUTCFullYear(),\r\n            month: targetDate.getUTCMonth(),\r\n            date: targetDate.getUTCDate()\r\n          });\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Handles the onKeyDown event from the element that this datepicker is bound.\r\n         * In the standard case this will be an input element. If the trigger is set\r\n         * to click and is bound to a button then it is likely we're servicing a 508\r\n         * type situation where the implementation will no longer uses. Focus will be\r\n         * given to the table.\r\n         */\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          var continueHandling = handleOnKeyDown(evt);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n            parentScope.$digest();\r\n          }\r\n        };\r\n\r\n        // $datepicker.$onFocusOut = function (evt) {\r\n        //   // find out if the related target's parents contain the datepicker's $element\r\n        //   var inTable = false;\r\n        //   var parent = angular.element(evt.relatedTarget);\r\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n        //     parent = parent.parent();\r\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n        //       inTable = true;\r\n        //       break;\r\n        //     } else {\r\n        //       inTable = false;\r\n        //     }\r\n        //   }\r\n\r\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n        //   //\r\n\r\n        //   if (!inTable && !evt.relatedTarget) {\r\n        //     // hmm\r\n        //   } else if (!inTable) {\r\n        //     $datepicker.hide();\r\n        //   } else {\r\n        //     evt.stopPropagation();\r\n        //     evt.preventDefault();\r\n        //   }\r\n        // };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n          el.focused = el.selected;\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        // The datepicker will override the init functionality of the tool\r\n        var _init = $datepicker.init;\r\n        /**\r\n         * Initialize the datepicker.\r\n         */\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\r\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\r\n        var _destroy = $datepicker.destroy;\r\n\r\n        /**\r\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\r\n         */\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be shown.\r\n        var _show = $datepicker.show;\r\n\r\n        /**\r\n         * Override for the tooltip's show function.\r\n         *\r\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\r\n         * Once shown it sets up the appropriate events.\r\n         */\r\n        $datepicker.show = function show () {\r\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n\r\n          // Call the \"overriden base\" function on the tooltip.\r\n          _show();\r\n\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n\r\n            // Update assistive technologies for view changes:\r\n            $datepicker.$element.attr('aria-hidden', 'false');\r\n            element.attr('aria-expanded', 'true');\r\n\r\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n            // If keyboard navigation is enabled (true by default).\r\n            if (options.keyboard) {\r\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\r\n              // Check to see if the table element should receive the focus when the picker is shown.\r\n              if (options.focusOnOpen) {\r\n                // Focus the table element.\r\n                // $datepicker.$element.find('table')[0].focus();\r\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\r\n              } else {\r\n                element.on('keydown', $datepicker.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be hidden.\r\n        var _hide = $datepicker.hide;\r\n\r\n        /**\r\n         * Overrid efor the tooltip's hide function.\r\n         *\r\n         * Updates attributes for assistive technologies and unbinds events.\r\n         */\r\n        $datepicker.hide = function (blur) {\r\n          // If the picker is already hidden don't do anything.\r\n          if (!$datepicker.$isShown) return;\r\n\r\n          // Update the attributes used by assisteive technologies\r\n          $datepicker.$element.attr('aria-hidden', 'true');\r\n          element.attr('aria-expanded', 'false');\r\n\r\n          // Unbind the mouse and touch events\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n          // If keyboard events were bound then unbind them.\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          if (options.focusOnOpen) {\r\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\r\n            element[0].focus();\r\n          }\r\n          // Call the tooltip's hide function.\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\r\n    return {\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        options = angular.extend({}, $datepicker.defaults, options);\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\r\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n\r\n          return date === null ? null : new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n      }\r\n    };\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLong = $dateFormatter.weekdays(lang);\r\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n\r\n        var weekDaysLabelsHtml = '';\r\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\r\n          var weekDayShortLabel = weekDaysShortLabels[i];\r\n          var weekDayLabel = weekDaysLongLabels[i];\r\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\r\n        }\r\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {\r\n          year: startDate.getFullYear(),\r\n          month: startDate.getMonth(),\r\n          date: startDate.getDate()\r\n        };\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {\r\n            month: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n              // in $datepicker.$selectPane, so picker would not update selected day display if\r\n              // user picks first day of the new month.\r\n              // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n            // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            var selectedDay;\r\n            var todayDay;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              // push the day information onto the collection\r\n              var dayItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: day,\r\n                value: day.getDate(),\r\n                isToday: day.toDateString() === today,\r\n                label: formatDate(day, this.format),\r\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\r\n                selected: picker.$date && this.isSelected(day),\r\n                muted: day.getMonth() !== viewDate.month,\r\n                disabled: this.isDisabled(day)\r\n              };\r\n\r\n              if (dayItem.selected) selectedDay = dayItem;\r\n              if (dayItem.isToday) todayDay = dayItem;\r\n\r\n              days.push(dayItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedDay) {\r\n                scope.selectedDayId = selectedDay.id;\r\n                if (todayDay) todayDay.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedDay.focused = true;\r\n                scope.selected = selectedDay;\r\n              } else if (todayDay) {\r\n                todayDay.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.isTodayDisabled = this.isDisabled(new Date());\r\n            scope.hasSelectedDate = picker.$date != null;\r\n            scope.$modeLabel = options.labelMonth;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\r\n              date.getMonth() === picker.$date.getMonth() &&\r\n              date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n            // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n            // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n            // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            var actualTime;\r\n\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date) {\r\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n                picker.$date = new Date();\r\n              } else {\r\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\r\n              }\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return false;\r\n            }\r\n\r\n            actualTime = picker.$date.getTime();\r\n\r\n            var newDate;\r\n\r\n            switch (evt.keyCode) {\r\n              // enter\r\n              case 13:\r\n                if (options.focusOnOpen) {\r\n                  picker.select(new Date(actualTime), true);\r\n                  return false;\r\n                }\r\n                break;\r\n                // pageup\r\n              case 33:\r\n                if (evt.altKey) { // move back a year\r\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move back a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\r\n                  }\r\n                }\r\n                break;\r\n\r\n                // pagedown\r\n              case 34:\r\n                if (evt.altKey) { // move forward a year\r\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move forward a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\r\n                  }\r\n                }\r\n\r\n                break;\r\n\r\n                // left arrow\r\n              case 37:\r\n                newDate = new Date(actualTime - 1 * 864e5);\r\n                break;\r\n\r\n                // up arrow\r\n              case 38:\r\n                newDate = new Date(actualTime - 7 * 864e5);\r\n                break;\r\n\r\n                // right arrow\r\n              case 39:\r\n                newDate = new Date(actualTime + 1 * 864e5);\r\n                break;\r\n\r\n                // down arrow\r\n              case 40:\r\n                newDate = new Date(actualTime + 7 * 864e5);\r\n                break;\r\n\r\n              default:\r\n                return false;\r\n            }\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n\r\n            if (evt && evt.stopPropagation) evt.stopPropagation();\r\n\r\n            return false;\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            var selectedMonth;\r\n            var thisMonth;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n\r\n              var monthItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: month,\r\n                label: formatDate(month, this.format),\r\n                selected: picker.$isSelected(month),\r\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\r\n                disabled: this.isDisabled(month)\r\n              };\r\n\r\n              if (monthItem.selected) selectedMonth = monthItem;\r\n              if (monthItem.isToday) thisMonth = monthItem;\r\n\r\n              months.push(monthItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedMonth) {\r\n                scope.selectedDayId = selectedMonth.id;\r\n                if (thisMonth) thisMonth.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedMonth.focused = true;\r\n                scope.selected = selectedMonth;\r\n              } else if (thisMonth) {\r\n                thisMonth.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modeLabel = options.labelYear;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\r\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 12\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            var selectedYear;\r\n            var thisYear;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n\r\n              var yearItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: year,\r\n                label: formatDate(year, this.format),\r\n                selected: picker.$isSelected(year),\r\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\r\n                disabled: this.isDisabled(year)\r\n              };\r\n\r\n              if (yearItem.selected) selectedYear = yearItem;\r\n              if (yearItem.isToday) thisYear = yearItem;\r\n\r\n              years.push(yearItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedYear) {\r\n                scope.selectedDayId = selectedYear.id;\r\n                if (thisYear) thisYear.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedYear.focused = true;\r\n                scope.selected = selectedYear;\r\n              } else if (thisYear) {\r\n                thisYear.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.startYear = years[0].label;\r\n            scope.endYear = years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modelLabel = options.labelDays;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function (element) {\r\n        self.$toggles.push(element);\r\n        element.attr('aria-expanded', 'false');\r\n      };\r\n      self.$registerTarget = function (element) {\r\n        self.$targets.push(element);\r\n\r\n        var i = 0;\r\n        if (self.$targets) {\r\n          for (i = 0; i < self.$targets.length; i++) {\r\n            self.$targets[i].attr('aria-hidden', 'true');\r\n          }\r\n          for (i = 0; i < self.$targets.$active.length; i++) {\r\n            if (self.$targets[self.$targets.$active[i]]) {\r\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\r\n            }\r\n            if (self.$toggles[self.$targets.$active[i]]) {\r\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      self.$unregisterToggle = function (element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function (element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        if (angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        } else if (!self.$options.disallowToggle && isActive(value)) {\r\n          deactivateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function () {\r\n        if (self.$options.allowMultiple) {\r\n          return self.$targets.$active;\r\n        }\r\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes (index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for (var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive (value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) !== -1;\r\n      }\r\n\r\n      function deactivateItem (value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\r\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem (value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\r\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[0]]) {\r\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\r\n          }\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n\r\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\r\n          }\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            } else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              } else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function () {\r\n    var KEY_CODES = {\r\n      ENTER: 13,\r\n      SPACE: 32\r\n    };\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        var actionEventHandler = function () {\r\n          if (!attrs.disabled) {\r\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n            bsCollapseCtrl.$setActive(index * 1);\r\n            scope.$apply();\r\n          }\r\n        };\r\n\r\n        element.on('click', actionEventHandler);\r\n        element.bind('keydown keypress', function (e) {\r\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\r\n            console.log('key handler handling');\r\n            actionEventHandler();\r\n            e.preventDefault();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function ($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if (bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          } else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = !!controller.$viewValue;\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$viewValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true,\r\n      focusMeDisabled: false\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n        $alert.returnFocus = function () {\r\n          function findFocusableElements () {\r\n            var containerEl = angular.element($alert.$element).closest('[ng-controller]');\r\n            return containerEl.find('a:not([disabled]),button:not([disabled]),input:not([disabled]),select:not([disabled]),[tabindex]:not([disabled]):not([tabindex=\"-1\"])').filter(function (i, el) {\r\n              return !angular.element(el).parentsUntil(containerEl, '[tabindex=\"-1\"]').length;\r\n            });\r\n          }\r\n\r\n          function findNextFocusableElement () {\r\n            if (document.activeElement) {\r\n              var focusable = findFocusableElements().toArray();\r\n              if (focusable === undefined) return;\r\n              var index = focusable.indexOf(document.activeElement);\r\n              return focusable[index + 1];\r\n            }\r\n          }\r\n          angular.element(findNextFocusableElement()).focus();\r\n        };\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n        if (options.focusMeDisabled) {\r\n          $alert.$scope.focusMeDisabled = options.focusMeDisabled;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true,\r\n      setWidth: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = options.setWidth && !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element[0].style.position;\r\n          var initialTop = element[0].style.top;\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n            element.css('top', initialTop);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null) {\r\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window, $timeout) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix;\r\n        $timeout(function () { affix = $affix(element, options); });\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n"],"sourceRoot":"/source/"}