{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","timepicker/timepicker.js","tooltip/tooltip.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/focus-out.js","helpers/focus-element.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker_before.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","KEY_CODES","downArrow","enter","escape","upArrow","$typeahead","parentScope","id","$resetMatches","config","setAriaActiveDescendant","index","resultId","$generateResultId","attr","$$phase","$root","$activeIndex","$tooltip","$activate","$scope","$$postDigest","activate","$matches","select","$select","evt","$isActive","matches","safeDigest","update","$$rAF","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","$viewValue","$getIndex","$onMouseDown","preventDefault","stopPropagation","equals","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$isVisible","getElementById","ele","currentTarget","isUndefined","label","$$updateScrollTop","$digest","focus","show","$element","assertDiv","$timeout","on","append","$onKeyDown","ariaLabelledby","hide","off","onKeyUp","which","$isShown","onFocusKeyUp","$onFocusKeyUp","array","TypeaheadFactory","$filter","expression","directive","results","postLink","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$match","$watchCollection","values","watchOptions","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","toString","$on","destroy","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$get","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","isNaN","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","parseInt","hours","disabled","i","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","target","nodeName","targetEl","triggerHandler","isTouch","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","prop","_destroy","_show","_hide","blur","$options","$window","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","$eval","timepicker","bsShow","match","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","unbindTriggerEvents","leave","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","body","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","setOffset","using","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","tipScope","$destroy","$promise","$new","$rootScope","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","$hide","setEnabled","isEnabled","toggle","compileData","tipContainer","bindTriggerEvents","isElement","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","tooltip","transclusion","dataTarget","hasOwnProperty","$observe","bsTooltip","setViewport","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","self","newIndex","navigatePane","toLeft","$panes","$setActive","name","$activePaneChangeListeners","pane","$navClass","$activeClass","$onClick","tabPane","$labeledBy","$active","activeIndex","$remove","indexOf","splice","fn","$pane","$onKeyPress","e","charCode","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","liElements","find","iElement","attrs","bsActivePane","parsedBsActivePane","$parse","assign","render","$push","$describedBy","elem","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$selectNone","$updateActiveIndex","a","b","$apply","isArray","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","li","liElement","pattern","path","RegExp","regexp","backdrop","size","zIndex","containerElement","bodyElement","layoutHideElement","backdropCount","backdropBaseZindex","ModalFactory","modalElement","$modal","defaultPrevented","findFocusableElements","focusableElements","focusable","findNextFocusableElement","call","inReverse","prototype","reverse","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","dialogBaseZindex","returnFocus","$show","bottom","destroyModalElement","z-index","customClass","validSizes","minor","backdropAnimation","bindBackdropEvents","nextFocusable","shiftKey","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","callback","$event","ngFocusOut","ngEventHandler","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","noop","toLowerCase","indexOfCaseInsensitive","len","str","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","weekdays","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","inMenu","relatedTarget","$onFocusOut","parentEl","hasClass","webkitMatchesSelector","Element","mozMatchesSelector","msMatchesSelector","oMatchesSelector","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","screenReaderDateFormat","focusOnOpen","DatepickerFactory","$datepicker","pickerViews","datepickerViews","altKey","setMode","$mode","focused","$views","views","$iconLeft","$iconRight","$hasToday","dropdownId","$nextLabel","labelNext","$previousLabel","$picker","handleOnKeyDown","$toggleMode","$setToday","$clear","$focused","selectedDayId","dayInfo","isNext","continueHandling","onKeyDown","inTable","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","built","$updateSelected","updateSelected","build","isSelected","steps","getUTCFullYear","getUTCMonth","$selectPane","UTC","getUTCDate","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysShortLabels","weekDaysLongLabels","weekDaysLabelsHtml","weekDayLabel","concat","picker","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","days","selectedDay","todayDay","dayItem","isToday","screenReaderLabel","muted","defaultFirstDayTabIndex","showLabels","labels","isTodayDisabled","hasSelectedDate","$modeLabel","isDisabled","getDay","actualTime","months","selectedMonth","monthItem","thisMonthDate","thisMonth","lastDate","actualMonth","firstYear","years","selectedYear","yearItem","thisYear","actualYear","setYear","Array","startYear","endYear","$modelLabel","startCollapsed","allowMultiple","activeIndexes","$targets","deactivateItem","activateItem","$toggles","$collapse","$viewChangeListeners","$registerToggle","$registerTarget","$unregisterToggle","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","ENTER","SPACE","actionEventHandler","bsCollapseToggle","bind","log","action","$unregisterTarget","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","focusMeDisabled","$alert","containerEl","AlertFactory","toArray","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\r\n'use strict';\r\n\r\n// Source: typeahead\\typeahead.js\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    var KEY_CODES = {\r\n      downArrow: 40,\r\n      enter: 13,\r\n      escape: 27,\r\n      upArrow: 38\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n        scope.id = options.id;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function isActive (index) {\r\n          return scope.$activeIndex === index ? true : undefined;\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        scope.$generateResultId = function (index) {\r\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          // If the key code isn't up arrow, down arrow, or enter return.\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n            // Navigate with keyboard\r\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } \r\n          else if ((evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex == 0) || (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex == scope.$matches.length - 1)) {\r\n            scope.$activeIndex = -1;\r\n            var ele = '#' + evt.currentTarget.id;\r\n            //position the cursor after the last letter of the selected item inside the control to allow the user to easily delete the selection if desired\r\n            angular.element(ele).val('').val(controller.$viewValue);\r\n            angular.element(ele).focus();\r\n          }\r\n          else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n            setAriaActiveDescendant();\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              if (options.id) {\r\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\r\n                $typeahead.$element.attr('id', options.id + '_listbox');\r\n                element.attr('aria-controls', options.id + '_listbox');\r\n\r\n                var assertDiv = document.getElementById(options.id + '_sr_text');\r\n                if (!assertDiv) {\r\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\r\n                }\r\n              }\r\n\r\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\r\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\r\n\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                //event for the element that we attach is added to event queue\r\n                //before pushing the same event more that once for the same element, event need to detach\r\n                //list item jumps happening in search list for this setted keydown off\r\n                if (element) element.off('keydown', $typeahead.$onKeyDown); \r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n\r\n          var assertDiv = document.getElementById(options.id + '_sr_text');\r\n          angular.element(assertDiv).remove();\r\n\r\n          setAriaActiveDescendant();\r\n\r\n          hide();\r\n        };\r\n\r\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Helper functions within this closure\r\n\r\n        function setAriaActiveDescendant (index) {\r\n          if (index === undefined || !scope.id) {\r\n            element.removeAttr('aria-activedescendant');\r\n          } else {\r\n            var resultId = scope.$generateResultId(index);\r\n            if (resultId) {\r\n              element.attr('aria-activedescendant', resultId);\r\n            } else {\r\n              element.removeAttr('aria-activedescendant');\r\n            }\r\n          }\r\n        }\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\r\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\r\n          element.attr('aria-autocomplete', 'list');\r\n        }\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          element.off('keydown');\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: timepicker\\timepicker.js\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tooltip\\tooltip.js\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      mouseDownPreventDefault: true,\r\n      mouseDownStopPropagation: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        // var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($tooltip);\r\n          }\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          if (tipElement !== null) {\r\n            // Support v1.2+ $animate\r\n            // https://github.com/angular/angular.js/issues/11713\r\n            if (angular.version.minor <= 2) {\r\n              $animate.leave(tipElement, leaveAnimateCallback);\r\n            } else {\r\n              $animate.leave(tipElement).then(leaveAnimateCallback);\r\n            }\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\r\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n              // element.on('blur', $tooltip.leave);\r\n            } else if (trigger !== 'manual') {\r\n              // Only bind up hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              }\r\n\t\t\t  //but do bind focus events for touch\r\n              else if (trigger === 'focus') {\r\n                element.on('focus', $tooltip.enter);\r\n                element.on('blur', $tooltip.leave);\r\n\t\t\t  }\r\n\t\t  \r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              // Remove previously defined hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              }\r\n\t\t\t  // Remove previously defined focus events\r\n              else if (trigger === 'focus') {\r\n                element.off('focus', $tooltip.enter);\r\n                element.off('blur', $tooltip.leave);\r\n\t\t\t  }\r\n\t\t\t  \r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) { // eslint-disable-line\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tab\\tab.js\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active',\r\n      isVertical: false\r\n    };\r\n    var _tabsHash = {};\r\n\r\n    var _addTabControl = function (key, control) {\r\n      if (!_tabsHash[key]) _tabsHash[key] = control;\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      $scope.$onClick = function $onClick (evt, pane, index) {\r\n        if (!pane.disabled) {\r\n          self.$setActive(pane.name || index);\r\n        }\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n      };\r\n\r\n      function navigatePane (index, toLeft) {\r\n        var newIndex = 0;\r\n\r\n        if (toLeft) {\r\n          // Moving to the left\r\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\r\n        } else {\r\n          // Moving to the right\r\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\r\n        }\r\n\r\n        if (self.$panes[newIndex].disabled) {\r\n          navigatePane(newIndex, toLeft);\r\n        } else {\r\n          self.$setActive(self.$panes[newIndex].name || newIndex);\r\n        }\r\n      }\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n\r\n        self.$panes.push(pane);\r\n\r\n        self.$panes.forEach(function (tabPane, index) {\r\n          // Set an id value for the pane so that it can be used in the template\r\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\r\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\r\n        });\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\r\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\r\n          // If space or enter was pressed\r\n          self.$setActive(name);\r\n\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n\r\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\r\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\r\n        }\r\n      };\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      $tab.addTabControl = _addTabControl;\r\n      $tab.tabsHash = _tabsHash;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\r\n        // tabs are available in the tab component\r\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\r\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\r\n        }\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          $timeout(function () {\r\n            // get li elements\r\n            var liElements = element.find('li');\r\n            for (var i = 0; i < liElements.length; i++) {\r\n              var iElement = angular.element(liElements[i]);\r\n              if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\r\n                // if li is active, set focus to it.\r\n                iElement.find('a')[0].focus();\r\n              }\r\n            }\r\n            // delay, for the class (.active) change to reflect in DOM.\r\n          }, 100);\r\n        });\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Set up the assistive attributes\r\n        element.attr('role', 'tabpanel');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n        // Save tab id into scope\r\n        scope.id = attrs.id;\r\n\r\n        scope.name = scope.name || scope.id;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // Once the push has occured when can then update the element with some properties.\r\n        // Update the aria-labelledby attribute\r\n\t\t// SS-11127 - removed aria-describedby from tab and tab-panel and utilized aria-labeledby on the tab-panel using the ID of the tab and not the ID of the tab link\r\n        if (scope.$describedBy !== undefined) {\r\n          element.attr('aria-labelledby', scope.$describedBy);\r\n        }\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n  \r\n  .directive('focusOn', function() {\r\n\t\treturn {\r\n\t\t\trestrict: 'A',\r\n\t\t\tlink: function(scope, elem, attr) {\r\n\t\t\t\tscope.$watch(attr.focusOn, function(newValue, oldValue) {\r\n\t\t\t\t\tnewValue !== oldValue && newValue && elem[0].focus();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n// Source: select\\select.js\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok',\r\n      toggle: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              if (options.toggle) {\r\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\r\n              } else {\r\n                controller.$setViewValue(value);\r\n              }\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $select);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            var anchor;\r\n\r\n            if (evt.target.nodeName !== 'A') {\r\n              var anchorCandidate = targetEl.parent();\r\n              while (!anchor && anchorCandidate.length > 0) {\r\n                if (anchorCandidate[0].nodeName === 'A') {\r\n                  anchor = anchorCandidate;\r\n                }\r\n                anchorCandidate = anchorCandidate.parent();\r\n              }\r\n            }\r\n\r\n            if (anchor) {\r\n              angular.element(anchor).triggerHandler('click');\r\n            } else {\r\n              targetEl.triggerHandler('click');\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: scrollspy\\scrollspy.js\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: popover\\popover.js\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\r\n            if (newValue === false) {\r\n              popover.setEnabled(false);\r\n            } else {\r\n              popover.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: navbar\\navbar.js\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: modal\\modal.js\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true,\r\n      size: null,\r\n      zIndex: null,\r\n      containerElement: null\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      var layoutHideElement = angular.element('#layoutContainer');\r\n\r\n      var backdropCount = 0;\r\n      var dialogBaseZindex = 1050;\r\n      var backdropBaseZindex = 1040;\r\n\r\n      var validSizes = {\r\n        lg: 'modal-lg',\r\n        sm: 'modal-sm'\r\n      };\r\n\r\n      function ModalFactory (config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if (options.containerElement) {\r\n          layoutHideElement = angular.element(options.containerElement);\r\n        }\r\n        if (!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        if (options.zIndex) {\r\n          dialogBaseZindex = parseInt(options.zIndex, 10);\r\n          backdropBaseZindex = dialogBaseZindex - 10;\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        $modal.returnFocus = function () {\r\n\r\n        };\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function (key) {\r\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData;\r\n        var modalElement;\r\n        var modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({\r\n          position: 'fixed',\r\n          top: '0px',\r\n          left: '0px',\r\n          bottom: '0px',\r\n          right: '0px'\r\n        });\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function () {\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function () {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if (backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function () {\r\n          if ($modal.$isShown) return;\r\n\r\n          var parent;\r\n          var after;\r\n          if (angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if (modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\r\n\r\n          if (options.backdrop) {\r\n            // set z-index\r\n            modalElement.css({\r\n              'z-index': dialogBaseZindex + (backdropCount * 20)\r\n            });\r\n            backdropElement.css({\r\n              'z-index': backdropBaseZindex + (backdropCount * 20)\r\n            });\r\n\r\n            // increment number of backdrops\r\n            backdropCount++;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($modal);\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({\r\n            display: 'block'\r\n          }).addClass(options.placement);\r\n\r\n          // Options: customClass\r\n          if (options.customClass) {\r\n            modalElement.addClass(options.customClass);\r\n          }\r\n\r\n          // Options: size\r\n          if (options.size && validSizes[options.size]) {\r\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\r\n          }\r\n\r\n          // Options: animation\r\n          if (options.animation) {\r\n            if (options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function () {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n\r\n          layoutHideElement.attr('aria-hidden', 'true');\r\n\r\n          if (options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'false');\r\n\t\t  modalElement.attr('tabindex', '0');\r\n\t\t  modalElement.focus();\r\n\r\n\t\t  if(!modalElement.length || !angular.element(modalElement[0]).hasClass(\"modal\"))\r\n\t\t  {\r\n\t\t\tlayoutHideElement.attr('aria-hidden', 'false');\r\n\t\t\tunbindKeyboardEvents();\r\n\t\t  }\r\n        }\r\n\r\n        $modal.hide = function () {\r\n          if (!$modal.$isShown) return;\r\n\r\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'true');\r\n\r\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            // decrement number of backdrops\r\n            backdropCount--;\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($modal);\r\n          }\r\n          if (findElement('.modal').length <= 0) {\r\n            bodyElement.removeClass(options.prefixClass + '-open');\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n          }\r\n          if (options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        function findFocusableElements () {\r\n          // Add all elements we want to include in our selection\r\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\r\n          if (document.activeElement) {\r\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\r\n              function (element) {\r\n                // Check for visibility while always include the current activeElement\r\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\r\n              });\r\n\r\n            return focusable;\r\n          }\r\n        }\r\n\r\n        function findNextFocusableElement (inReverse) {\r\n          if (document.activeElement) {\r\n            var focusable = findFocusableElements();\r\n            if (focusable === undefined) return;\r\n            if (inReverse) {\r\n              focusable = Array.prototype.reverse.call(focusable);\r\n            }\r\n\r\n            var index = focusable.indexOf(document.activeElement);\r\n            return focusable[index + 1];\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function () {\r\n          if ($modal.$isShown) {\r\n            $modal.hide();\r\n          } else {\r\n            $modal.show();\r\n          }\r\n        };\r\n\r\n        $modal.focus = function () {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function (evt) {\r\n\r\n          // Escape was pressed on an open modal. Hide it.  Backspace key, nothing happen.\r\n          if ((evt.which === 8||evt.which === 27) && $modal.$isShown) {\r\n            if (evt.which === 27) {\r\n               $modal.hide();\r\n            }\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $modal.$onKeyDown = function (evt) {\r\n          if (options.keyboard) {\r\n            if (evt.keyCode === 8 && evt.target.tagName!=='TEXTAREA' && evt.target.tagName!=='INPUT') {\r\n                evt.preventDefault();\r\n            }\t\t\t\t\r\n\t\t\t  \r\n            if (evt.keyCode === 9) {\r\n\r\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\r\n              if (nextFocusable === undefined) {\r\n                if (evt.preventDefault) evt.preventDefault();\r\n                if (evt.stopPropagation) evt.stopPropagation();\r\n\r\n                var focusable = findFocusableElements();\r\n                if (evt.shiftKey) {\r\n                  focusable[focusable.length - 1].focus();\r\n                } else {\r\n                  focusable[0].focus();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n        function bindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n            modalElement.on('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n            modalElement.off('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        // Private helpers\r\n\r\n        function hideOnBackdropClick (evt) {\r\n          if (evt.target !== evt.currentTarget) return;\r\n          if (options.backdrop === 'static') {\r\n            $modal.focus();\r\n          } else {\r\n            $modal.hide();\r\n          }\r\n        }\r\n\r\n        function preventEventDefault (evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement () {\r\n          if ($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if (modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope,\r\n          element: element,\r\n          show: false\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Options: alias modalClass to customClass\r\n        if (options.modalClass) {\r\n          options.customClass = options.modalClass;\r\n        }\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsModal) {\r\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        if (options.keyboard) {\r\n          modal.returnFocus = function () {\r\n            element[0].focus();\r\n          };\r\n        }\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\raf.js\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n\r\n// Source: helpers\\parse-options.js\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\focus-out.js\r\nangular.module('mgcrea.ngStrap.helpers.ngFocusOut', [])\r\n  .directive('ngFocusOut', ['$parse', '$rootScope', function ($parse, $rootScope) {\r\n    return {\r\n      restrict: 'A',\r\n      compile: function ($element, attr) {\r\n        // NOTE:\r\n        // We expose the powerful `$event` object on the scope that provides access to the Window,\r\n        // etc. This is OK, because expressions are not sandboxed any more (and the expression\r\n        // sandbox was never meant to be a security feature anyway).\r\n        var fn = $parse(attr.ngFocusOut);\r\n\r\n        return function link (scope, element) {\r\n          function ngEventHandler (event) {\r\n            var callback = function () {\r\n              fn(scope, {\r\n                $event: event\r\n              });\r\n            };\r\n            if ($rootScope.$$phase) {\r\n              scope.$evalAsync(callback);\r\n            } else {\r\n              scope.$apply(callback);\r\n            }\r\n          }\r\n\r\n          // setup the handler\r\n          element.on('focusout', ngEventHandler);\r\n\r\n          scope.$on('$destroy', function () {\r\n            // tear down the handler\r\n            element.off('focusout', ngEventHandler);\r\n          });\r\n        };\r\n      }\r\n    };\r\n  }]);\r\n\r\n// Source: helpers\\focus-element.js\r\nangular.module('mgcrea.ngStrap.helpers.focusElement', [])\r\n  .directive('focusElement', ['$timeout', '$parse', function ($timeout, $parse) {\r\n    return {\r\n      link: function (scope, element, attrs) {\r\n        scope.$watch(attrs.focusElement, function (value) {\r\n          if (value === true) {\r\n            $timeout(function () {\r\n              element[0].focus();\r\n            });\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n\r\n// Source: helpers\\dimensions.js\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n\r\n// Source: helpers\\debounce.js\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n\r\n// Source: helpers\\date-parser.js\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          if (value.match(/Z/)) {\r\n            date = new Date(value.substr(1, value.length - 3));\r\n          } else {\r\n            date = new Date(value.substr(1, value.length - 2));\r\n          }\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n\r\n// Source: helpers\\date-formatter.js\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    this.weekdays = function (lang) {\r\n      return $locale.DATETIME_FORMATS.DAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\compiler.js\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = options.resolve || {};\r\n    var locals = options.locals || {};\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template) {\r\n      resolve.$template = $q.when(template);\r\n    } else if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n    }\r\n\r\n    if (options.titleTemplate) {\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          findElement('[ng-bind=\"title\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if (!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function (locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n\r\n// Source: dropdown\\dropdown.js\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory (element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        /* var scope = */\r\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        if (element && element[0] && element[0].tagName.toUpperCase() === 'BUTTON') {\r\n          element.attr('aria-haspopup', 'true');\r\n          element.attr('data-toggle', 'dropdown');\r\n          element.attr('aria-expanded', 'false');\r\n          element.attr('role', 'button');\r\n        }\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function (evt) {\r\n          if ((/(9)/.test(evt.keyCode) && !options.keyboard) || /27/.test(evt.keyCode)) {\r\n            $dropdown.hide(/27/.test(evt.keyCode));\r\n            return;\r\n          }\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if (!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function (el, i) {\r\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if (evt.keyCode === 38 && index > 0) index--;\r\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if (evt.keyCode === 40 && index === items.length - 1) index = 0;\r\n          else if (angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        $dropdown.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inMenu = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $dropdown.$element[0]) {\r\n              inMenu = true;\r\n              break;\r\n            } else {\r\n              inMenu = false;\r\n            }\r\n          }\r\n\r\n          if (!inMenu) {\r\n            $dropdown.hide();\r\n          } else {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Set assistive technology properties\r\n            element.attr('aria-expanded', 'true');\r\n            if ($dropdown.$element) {\r\n              $dropdown.$element.attr('aria-hidden', 'false');\r\n              $dropdown.$element.attr('role', 'menu');\r\n              $dropdown.$element.attr('tabindex', '-1');\r\n            }\r\n            if (options.keyboard && $dropdown.$element) {\r\n              $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n              $dropdown.$element.on('focusout', $dropdown.$onFocusOut);\r\n            }\r\n\r\n            bodyEl.on('click', onBodyClick);\r\n\r\n            if ($dropdown.$element) {\r\n              var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider)'));\r\n              items.attr('role', 'presentation');\r\n\r\n              angular.element($dropdown.$element[0].querySelectorAll('li.divider')).attr('role', 'seperator');\r\n\r\n              items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n              items.attr('role', 'menuitem');\r\n              if (items.length && options.keyboard) {\r\n                items[0].focus();\r\n              }\r\n            }\r\n          }, 0, false);\r\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function (returnFocus) {\r\n          if (!$dropdown.$isShown) return;\r\n\r\n          element.attr('aria-expanded', 'false');\r\n          $dropdown.$element.attr('aria-hidden', 'true');\r\n\r\n          if (options.keyboard && $dropdown.$element) {\r\n            $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n            $dropdown.$element.off('focusout', $dropdown.$onFocusOut);\r\n          }\r\n\r\n          bodyEl.off('click', onBodyClick);\r\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\r\n          $timeout(function () {\r\n            hide();\r\n            if (returnFocus) {\r\n              $timeout(function () {\r\n                if (element && element[0]) {\r\n                  element[0].focus();\r\n                }\r\n              }, 0, false);\r\n            }\r\n          }, 200);\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function () {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick (evt) {\r\n          if (evt.target === element[0]) return undefined;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      compile: function (tElement, tAttrs) {\r\n\r\n        // Support for inlined template (next sibling)\r\n        // It must be fetched before compilation\r\n        if (!tAttrs.bsDropdown) {\r\n          var nextSibling = tElement[0].nextSibling;\r\n          while (nextSibling && nextSibling.nodeType !== 1) {\r\n            nextSibling = nextSibling.nextSibling;\r\n          }\r\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\r\n            tAttrs.template = nextSibling.outerHTML;\r\n            tAttrs.templateUrl = undefined;\r\n            nextSibling.parentNode.removeChild(nextSibling);\r\n          }\r\n        }\r\n\r\n        return function postLink (scope, element, attr) {\r\n\r\n          // Directive options\r\n          var options = {\r\n            scope: scope\r\n          };\r\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\r\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\r\n          });\r\n\r\n          // use string regex match boolean attr falsy values, leave truthy values be\r\n          var falseValueRegExp = /^(false|0|)$/i;\r\n          angular.forEach(['html', 'container'], function (key) {\r\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n          });\r\n\r\n          // bind functions from the attrs to the show and hide events\r\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n            if (angular.isDefined(attr[bsKey])) {\r\n              options[key] = scope.$eval(attr[bsKey]);\r\n            }\r\n          });\r\n\r\n          // Support scope as an object\r\n          if (attr.bsDropdown) {\r\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\r\n              scope.content = newValue;\r\n            }, true);\r\n          }\r\n\r\n          // Initialize dropdown\r\n          var dropdown = $dropdown(element, options);\r\n\r\n          // Visibility binding support\r\n          if (attr.bsShow) {\r\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n              if (!dropdown || !angular.isDefined(newValue)) return;\r\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n              if (newValue === true) {\r\n                dropdown.show();\r\n              } else {\r\n                dropdown.hide();\r\n              }\r\n            });\r\n          }\r\n\r\n          // Garbage collection\r\n          scope.$on('$destroy', function () {\r\n            if (dropdown) dropdown.destroy();\r\n            options = null;\r\n            dropdown = null;\r\n          });\r\n\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: datepicker\\datepicker_before.js\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      hasToday: false,\r\n      hasClear: false,\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right',\r\n      // The format that will be given to the screen reader values placed in the DOM.\r\n      screenReaderDateFormat: 'fullDate',\r\n      // Focuses the table element in the dropdown upon display of the picker.\r\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\r\n      focusOnOpen: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\r\n        // defaults and the configuration passed.\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // Add assistive technology helper attributes.\r\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\r\n\r\n        // View vars\r\n\r\n        // Initialize the datepicker view collection by passing a reference to the base object.\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        /*\r\n         * View mode for the date picker.\r\n         * 0: days\r\n         * 1: months\r\n         * 2: years\r\n         */\r\n        scope.$mode = options.startView;\r\n        // icon class override\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        // Show buttons at the bottom of the picker.\r\n        scope.$hasToday = options.hasToday;\r\n        scope.$hasClear = options.hasClear;\r\n        /*\r\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\r\n         * aria attributes which are linked via ids.\r\n         */\r\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\r\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\r\n        scope.keyboard = options.keyboard;\r\n        scope.focusOnOpen = options.focusOnOpen;\r\n\r\n        // labels\r\n        scope.$nextLabel = options.labelNext;\r\n        scope.$previousLabel = options.labelPrevious;\r\n\r\n        // This is the actual current picker view.\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Internal handlers\r\n\r\n        function handleOnKeyDown (evt, apply) {\r\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\r\n            return false;\r\n          }\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n              if (options.focusOnOpen) return true;\r\n            } else {\r\n              if (apply === undefined || apply) {\r\n                scope.$apply(function () {\r\n                  $datepicker.setMode(scope.$mode - 1);\r\n                });\r\n              } else {\r\n                $datepicker.setMode(scope.$mode - 1);\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        }\r\n\r\n        // Scope methods\r\n\r\n        /**\r\n         * Pass through from the scope to the provider for the selection of a date.\r\n         */\r\n        scope.$select = function (date, disabled) {\r\n          if (disabled) return;\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n        scope.$setToday = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(new Date());\r\n          } else {\r\n            $datepicker.select(new Date(), true);\r\n          }\r\n        };\r\n        scope.$clear = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(null);\r\n          } else {\r\n            $datepicker.select(null, true);\r\n          }\r\n        };\r\n        scope.$focused = function (dayInfo) {\r\n          scope.selectedDayId = dayInfo.id;\r\n          if (dayInfo.isNext && !scope.selected) {\r\n            if (scope.$mode) {\r\n              $datepicker.update(dayInfo.date);\r\n            } else {\r\n              scope.$select(dayInfo.date);\r\n            }\r\n          }\r\n        };\r\n        scope.$onKeyDown = function (evt, day) {\r\n          var continueHandling = handleOnKeyDown(evt, false);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n          }\r\n        };\r\n        scope.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inTable = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n              inTable = true;\r\n              break;\r\n            } else {\r\n              inTable = false;\r\n            }\r\n          }\r\n\r\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n          //\r\n\r\n          if (!inTable && !evt.relatedTarget) {\r\n            // hmm\r\n          } else if (!inTable) {\r\n            $datepicker.hide();\r\n          } else {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (angular.isDate(date)) {\r\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\r\n              controller.$dateValue = new Date(date);\r\n            }\r\n          } else {\r\n            controller.$dateValue = null;\r\n          }\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () {\r\n                $datepicker.hide(true);\r\n              });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {\r\n              year: date.getFullYear(),\r\n              month: date.getMonth(),\r\n              date: date.getDate()\r\n            });\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        /**\r\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\r\n         * rebuilt. The views are days, months, and years.\r\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\r\n         */\r\n        $datepicker.setMode = function setMode (mode) {\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          // The picker has been changed so the view needs to be built.\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        /**\r\n         * Builds the datepicker's view based on the picker that is currently set.\r\n         */\r\n        $datepicker.$build = function $build (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], function (day) {\r\n              updateSelected(day);\r\n              if (day.selected) scope.selected = day;\r\n            });\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {\r\n            year: targetDate.getUTCFullYear(),\r\n            month: targetDate.getUTCMonth(),\r\n            date: targetDate.getUTCDate()\r\n          });\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Handles the onKeyDown event from the element that this datepicker is bound.\r\n         * In the standard case this will be an input element. If the trigger is set\r\n         * to click and is bound to a button then it is likely we're servicing a 508\r\n         * type situation where the implementation will no longer uses. Focus will be\r\n         * given to the table.\r\n         */\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          var continueHandling = handleOnKeyDown(evt);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n            parentScope.$digest();\r\n          }\r\n        };\r\n\r\n        // $datepicker.$onFocusOut = function (evt) {\r\n        //   // find out if the related target's parents contain the datepicker's $element\r\n        //   var inTable = false;\r\n        //   var parent = angular.element(evt.relatedTarget);\r\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n        //     parent = parent.parent();\r\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n        //       inTable = true;\r\n        //       break;\r\n        //     } else {\r\n        //       inTable = false;\r\n        //     }\r\n        //   }\r\n\r\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n        //   //\r\n\r\n        //   if (!inTable && !evt.relatedTarget) {\r\n        //     // hmm\r\n        //   } else if (!inTable) {\r\n        //     $datepicker.hide();\r\n        //   } else {\r\n        //     evt.stopPropagation();\r\n        //     evt.preventDefault();\r\n        //   }\r\n        // };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n          el.focused = el.selected;\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        // The datepicker will override the init functionality of the tool\r\n        var _init = $datepicker.init;\r\n        /**\r\n         * Initialize the datepicker.\r\n         */\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\r\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\r\n        var _destroy = $datepicker.destroy;\r\n\r\n        /**\r\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\r\n         */\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be shown.\r\n        var _show = $datepicker.show;\r\n\r\n        /**\r\n         * Override for the tooltip's show function.\r\n         *\r\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\r\n         * Once shown it sets up the appropriate events.\r\n         */\r\n        $datepicker.show = function show () {\r\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n\r\n          // Call the \"overriden base\" function on the tooltip.\r\n          _show();\r\n\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n\r\n            // Update assistive technologies for view changes:\r\n            $datepicker.$element.attr('aria-hidden', 'false');\r\n            element.attr('aria-expanded', 'true');\r\n\r\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n            // If keyboard navigation is enabled (true by default).\r\n            if (options.keyboard) {\r\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\r\n              // Check to see if the table element should receive the focus when the picker is shown.\r\n              if (options.focusOnOpen) {\r\n                // Focus the table element.\r\n                // $datepicker.$element.find('table')[0].focus();\r\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\r\n              } else {\r\n                element.on('keydown', $datepicker.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be hidden.\r\n        var _hide = $datepicker.hide;\r\n\r\n        /**\r\n         * Overrid efor the tooltip's hide function.\r\n         *\r\n         * Updates attributes for assistive technologies and unbinds events.\r\n         */\r\n        $datepicker.hide = function (blur) {\r\n          // If the picker is already hidden don't do anything.\r\n          if (!$datepicker.$isShown) return;\r\n\r\n          // Update the attributes used by assisteive technologies\r\n          $datepicker.$element.attr('aria-hidden', 'true');\r\n          element.attr('aria-expanded', 'false');\r\n\r\n          // Unbind the mouse and touch events\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n          // If keyboard events were bound then unbind them.\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          if (options.focusOnOpen) {\r\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\r\n            element[0].focus();\r\n          }\r\n          // Call the tooltip's hide function.\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\r\n    return {\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        options = angular.extend({}, $datepicker.defaults, options);\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\r\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n\r\n          return date === null ? null : new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n      }\r\n    };\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLong = $dateFormatter.weekdays(lang);\r\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n\r\n        var weekDaysLabelsHtml = '';\r\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\r\n          var weekDayShortLabel = weekDaysShortLabels[i];\r\n          var weekDayLabel = weekDaysLongLabels[i];\r\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\r\n        }\r\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {\r\n          year: startDate.getFullYear(),\r\n          month: startDate.getMonth(),\r\n          date: startDate.getDate()\r\n        };\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {\r\n            month: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n              // in $datepicker.$selectPane, so picker would not update selected day display if\r\n              // user picks first day of the new month.\r\n              // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n            // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            var selectedDay;\r\n            var todayDay;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              // push the day information onto the collection\r\n              var dayItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: day,\r\n                value: day.getDate(),\r\n                isToday: day.toDateString() === today,\r\n                label: formatDate(day, this.format),\r\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\r\n                selected: picker.$date && this.isSelected(day),\r\n                muted: day.getMonth() !== viewDate.month,\r\n                disabled: this.isDisabled(day)\r\n              };\r\n\r\n              if (dayItem.selected) selectedDay = dayItem;\r\n              if (dayItem.isToday) todayDay = dayItem;\r\n\r\n              days.push(dayItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedDay) {\r\n                scope.selectedDayId = selectedDay.id;\r\n                if (todayDay) todayDay.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedDay.focused = true;\r\n                scope.selected = selectedDay;\r\n              } else if (todayDay) {\r\n                todayDay.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.isTodayDisabled = this.isDisabled(new Date());\r\n            scope.hasSelectedDate = picker.$date != null;\r\n            scope.$modeLabel = options.labelMonth;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\r\n              date.getMonth() === picker.$date.getMonth() &&\r\n              date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n            // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n            // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n            // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            var actualTime;\r\n\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date) {\r\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n                picker.$date = new Date();\r\n              } else {\r\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\r\n              }\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return false;\r\n            }\r\n\r\n            actualTime = picker.$date.getTime();\r\n\r\n            var newDate;\r\n\r\n            switch (evt.keyCode) {\r\n              // enter\r\n              case 13:\r\n                if (options.focusOnOpen) {\r\n                  picker.select(new Date(actualTime), true);\r\n                  return false;\r\n                }\r\n                break;\r\n                // pageup\r\n              case 33:\r\n                if (evt.altKey) { // move back a year\r\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move back a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\r\n                  }\r\n                }\r\n                break;\r\n\r\n                // pagedown\r\n              case 34:\r\n                if (evt.altKey) { // move forward a year\r\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move forward a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\r\n                  }\r\n                }\r\n\r\n                break;\r\n\r\n                // left arrow\r\n              case 37:\r\n                newDate = new Date(actualTime - 1 * 864e5);\r\n                break;\r\n\r\n                // up arrow\r\n              case 38:\r\n                newDate = new Date(actualTime - 7 * 864e5);\r\n                break;\r\n\r\n                // right arrow\r\n              case 39:\r\n                newDate = new Date(actualTime + 1 * 864e5);\r\n                break;\r\n\r\n                // down arrow\r\n              case 40:\r\n                newDate = new Date(actualTime + 7 * 864e5);\r\n                break;\r\n\r\n              default:\r\n                return false;\r\n            }\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n\r\n            if (evt && evt.stopPropagation) evt.stopPropagation();\r\n\r\n            return false;\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            var selectedMonth;\r\n            var thisMonth;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n\r\n              var monthItem = {\r\n                date: month,\r\n                label: formatDate(month, this.format),\r\n                selected: picker.$isSelected(month),\r\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\r\n                disabled: this.isDisabled(month)\r\n              };\r\n\r\n              if (monthItem.selected) selectedMonth = monthItem;\r\n              if (monthItem.isToday) thisMonth = monthItem;\r\n\r\n              months.push(monthItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedMonth) {\r\n                scope.selectedDayId = selectedMonth.id;\r\n                if (thisMonth) thisMonth.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedMonth.focused = true;\r\n                scope.selected = selectedMonth;\r\n              } else if (thisMonth) {\r\n                thisMonth.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modeLabel = options.labelYear;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\r\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 12\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            var selectedYear;\r\n            var thisYear;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n\r\n              var yearItem = {\r\n                date: year,\r\n                label: formatDate(year, this.format),\r\n                selected: picker.$isSelected(year),\r\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\r\n                disabled: this.isDisabled(year)\r\n              };\r\n\r\n              if (yearItem.selected) selectedYear = yearItem;\r\n              if (yearItem.isToday) thisYear = yearItem;\r\n\r\n              years.push(yearItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedYear) {\r\n                scope.selectedDayId = selectedYear.id;\r\n                if (thisYear) thisYear.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedYear.focused = true;\r\n                scope.selected = selectedYear;\r\n              } else if (thisYear) {\r\n                thisYear.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modelLabel = options.labelDays;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: datepicker\\datepicker.js\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      // The format that will be given to the screen reader values placed in the DOM.\n      screenReaderDateFormat: 'fullDate',\n      // Focuses the table element in the dropdown upon display of the picker.\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\n      focusOnOpen: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\n        // defaults and the configuration passed.\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // Add assistive technology helper attributes.\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\n\n        // View vars\n\n        // Initialize the datepicker view collection by passing a reference to the base object.\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        /*\n         * View mode for the date picker.\n         * 0: days\n         * 1: months\n         * 2: years\n         */\n        scope.$mode = options.startView;\n        // icon class override\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        // Show buttons at the bottom of the picker.\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        /*\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\n         * aria attributes which are linked via ids.\n         */\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\n        scope.keyboard = options.keyboard;\n        scope.focusOnOpen = options.focusOnOpen;\n\n        // labels\n        scope.$nextLabel = options.labelNext;\n        scope.$previousLabel = options.labelPrevious;\n\n        // This is the actual current picker view.\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Internal handlers\n\n        function handleOnKeyDown (evt, apply) {\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\n            return false;\n          }\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n              if (options.focusOnOpen) return true;\n            } else {\n              if (apply === undefined || apply) {\n                scope.$apply(function () {\n                  $datepicker.setMode(scope.$mode - 1);\n                });\n              } else {\n                $datepicker.setMode(scope.$mode - 1);\n              }\n            }\n            return false;\n          }\n\n          return true;\n        }\n\n        // Scope methods\n\n        /**\n         * Pass through from the scope to the provider for the selection of a date.\n         */\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n        scope.$focused = function (dayInfo) {\n          scope.selectedDayId = dayInfo.id;\n          if (dayInfo.isNext && !scope.selected) {\n            if (scope.$mode) {\n              $datepicker.update(dayInfo.date);\n            } else {\n              scope.$select(dayInfo.date);\n            }\n          }\n        };\n        scope.$onKeyDown = function (evt, day) {\n          var continueHandling = handleOnKeyDown(evt, false);\n\n          if (continueHandling) {\n            // Navigate with keyboard\n            $picker.onKeyDown(evt);\n          }\n        };\n        scope.$onFocusOut = function (evt) {\n          // find out if the related target's parents contain the datepicker's $element\n          var inTable = false;\n          var parent = angular.element(evt.relatedTarget);\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n            parent = parent.parent();\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\n              inTable = true;\n              break;\n            } else {\n              inTable = false;\n            }\n          }\n\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\n          //\n\n          if (!inTable && !evt.relatedTarget) {\n            // hmm\n          } else if (!inTable) {\n            $datepicker.hide();\n          } else {\n            evt.stopPropagation();\n            evt.preventDefault();\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () {\n                $datepicker.hide(true);\n              });\n            }\n          } else {\n            angular.extend(viewDate, {\n              year: date.getFullYear(),\n              month: date.getMonth(),\n              date: date.getDate()\n            });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        /**\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\n         * rebuilt. The views are days, months, and years.\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\n         */\n        $datepicker.setMode = function setMode (mode) {\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          // The picker has been changed so the view needs to be built.\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        /**\n         * Builds the datepicker's view based on the picker that is currently set.\n         */\n        $datepicker.$build = function $build (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], function (day) {\n              updateSelected(day);\n              if (day.selected) scope.selected = day;\n            });\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {\n            year: targetDate.getUTCFullYear(),\n            month: targetDate.getUTCMonth(),\n            date: targetDate.getUTCDate()\n          });\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        /**\n         * Handles the onKeyDown event from the element that this datepicker is bound.\n         * In the standard case this will be an input element. If the trigger is set\n         * to click and is bound to a button then it is likely we're servicing a 508\n         * type situation where the implementation will no longer uses. Focus will be\n         * given to the table.\n         */\n        $datepicker.$onKeyDown = function (evt) {\n          var continueHandling = handleOnKeyDown(evt);\n\n          if (continueHandling) {\n            // Navigate with keyboard\n            $picker.onKeyDown(evt);\n            parentScope.$digest();\n          }\n        };\n\n        // $datepicker.$onFocusOut = function (evt) {\n        //   // find out if the related target's parents contain the datepicker's $element\n        //   var inTable = false;\n        //   var parent = angular.element(evt.relatedTarget);\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n        //     parent = parent.parent();\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\n        //       inTable = true;\n        //       break;\n        //     } else {\n        //       inTable = false;\n        //     }\n        //   }\n\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\n        //   //\n\n        //   if (!inTable && !evt.relatedTarget) {\n        //     // hmm\n        //   } else if (!inTable) {\n        //     $datepicker.hide();\n        //   } else {\n        //     evt.stopPropagation();\n        //     evt.preventDefault();\n        //   }\n        // };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n          el.focused = el.selected;\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        // The datepicker will override the init functionality of the tool\n        var _init = $datepicker.init;\n        /**\n         * Initialize the datepicker.\n         */\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\n        var _destroy = $datepicker.destroy;\n\n        /**\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\n         */\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\n        // is to be shown.\n        var _show = $datepicker.show;\n\n        /**\n         * Override for the tooltip's show function.\n         *\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\n         * Once shown it sets up the appropriate events.\n         */\n        $datepicker.show = function show () {\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n\n          // Call the \"overriden base\" function on the tooltip.\n          _show();\n\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n\n            // Update assistive technologies for view changes:\n            $datepicker.$element.attr('aria-hidden', 'false');\n            element.attr('aria-expanded', 'true');\n\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\n            // If keyboard navigation is enabled (true by default).\n            if (options.keyboard) {\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\n              // Check to see if the table element should receive the focus when the picker is shown.\n              if (options.focusOnOpen) {\n                // Focus the table element.\n                // $datepicker.$element.find('table')[0].focus();\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\n              } else {\n                element.on('keydown', $datepicker.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\n        // is to be hidden.\n        var _hide = $datepicker.hide;\n\n        /**\n         * Overrid efor the tooltip's hide function.\n         *\n         * Updates attributes for assistive technologies and unbinds events.\n         */\n        $datepicker.hide = function (blur) {\n          // If the picker is already hidden don't do anything.\n          if (!$datepicker.$isShown) return;\n\n          // Update the attributes used by assisteive technologies\n          $datepicker.$element.attr('aria-hidden', 'true');\n          element.attr('aria-expanded', 'false');\n\n          // Unbind the mouse and touch events\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\n          // If keyboard events were bound then unbind them.\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\n          }\n          if (options.focusOnOpen) {\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\n            element[0].focus();\n          }\n          // Call the tooltip's hide function.\n          _hide(blur);\n        };\n\n        return $datepicker;\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\n    return {\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        options = angular.extend({}, $datepicker.defaults, options);\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              options[key] = dateParser.getDateForAttribute(key, newValue);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            options.dateFormat = newValue;\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n\n          return date === null ? null : new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n\n          return getDateFormattedString();\n        });\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n      }\n    };\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLong = $dateFormatter.weekdays(lang);\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n\n        var weekDaysLabelsHtml = '';\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\n          var weekDayShortLabel = weekDaysShortLabels[i];\n          var weekDayLabel = weekDaysLongLabels[i];\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\n        }\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {\n          year: startDate.getFullYear(),\n          month: startDate.getMonth(),\n          date: startDate.getDate()\n        };\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {\n            month: 1\n          },\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\n              // in $datepicker.$selectPane, so picker would not update selected day display if\n              // user picks first day of the new month.\n              // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n            // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            var selectedDay;\n            var todayDay;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              // push the day information onto the collection\n              var dayItem = {\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\n                date: day,\n                value: day.getDate(),\n                isToday: day.toDateString() === today,\n                label: formatDate(day, this.format),\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\n                selected: picker.$date && this.isSelected(day),\n                muted: day.getMonth() !== viewDate.month,\n                disabled: this.isDisabled(day)\n              };\n\n              if (dayItem.selected) selectedDay = dayItem;\n              if (dayItem.isToday) todayDay = dayItem;\n\n              days.push(dayItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedDay) {\n                scope.selectedDayId = selectedDay.id;\n                if (todayDay) todayDay.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedDay.focused = true;\n                scope.selected = selectedDay;\n              } else if (todayDay) {\n                todayDay.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            scope.hasSelectedDate = picker.$date != null;\n            scope.$modeLabel = options.labelMonth;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\n              date.getMonth() === picker.$date.getMonth() &&\n              date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n            // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n            // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n            // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            var actualTime;\n\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date) {\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\n                picker.$date = new Date();\n              } else {\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\n              }\n            }\n\n            if (!picker.$date) {\n              return false;\n            }\n\n            actualTime = picker.$date.getTime();\n\n            var newDate;\n\n            switch (evt.keyCode) {\n              // enter\n              case 13:\n                if (options.focusOnOpen) {\n                  picker.select(new Date(actualTime), true);\n                  return false;\n                }\n                break;\n                // pageup\n              case 33:\n                if (evt.altKey) { // move back a year\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\n                } else { // move back a month\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\n                  }\n                }\n                break;\n\n                // pagedown\n              case 34:\n                if (evt.altKey) { // move forward a year\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\n                } else { // move forward a month\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\n                  }\n                }\n\n                break;\n\n                // left arrow\n              case 37:\n                newDate = new Date(actualTime - 1 * 864e5);\n                break;\n\n                // up arrow\n              case 38:\n                newDate = new Date(actualTime - 7 * 864e5);\n                break;\n\n                // right arrow\n              case 39:\n                newDate = new Date(actualTime + 1 * 864e5);\n                break;\n\n                // down arrow\n              case 40:\n                newDate = new Date(actualTime + 7 * 864e5);\n                break;\n\n              default:\n                return false;\n            }\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n\n            if (evt && evt.stopPropagation) evt.stopPropagation();\n\n            return false;\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {\n            year: 1\n          },\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\n            var selectedMonth;\n            var thisMonth;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n\n              var monthItem = {\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\n                date: month,\n                label: formatDate(month, this.format),\n                selected: picker.$isSelected(month),\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\n                disabled: this.isDisabled(month)\n              };\n\n              if (monthItem.selected) selectedMonth = monthItem;\n              if (monthItem.isToday) thisMonth = monthItem;\n\n              months.push(monthItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedMonth) {\n                scope.selectedDayId = selectedMonth.id;\n                if (thisMonth) thisMonth.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedMonth.focused = true;\n                scope.selected = selectedMonth;\n              } else if (thisMonth) {\n                thisMonth.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.$modeLabel = options.labelYear;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date &&\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\n            }\n\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {\n            year: 12\n          },\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            var selectedYear;\n            var thisYear;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n\n              var yearItem = {\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\n                date: year,\n                label: formatDate(year, this.format),\n                selected: picker.$isSelected(year),\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\n                disabled: this.isDisabled(year)\n              };\n\n              if (yearItem.selected) selectedYear = yearItem;\n              if (yearItem.isToday) thisYear = yearItem;\n\n              years.push(yearItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedYear) {\n                scope.selectedDayId = selectedYear.id;\n                if (thisYear) thisYear.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedYear.focused = true;\n                scope.selected = selectedYear;\n              } else if (thisYear) {\n                thisYear.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.startYear = years[0].label;\n            scope.endYear = years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.$modelLabel = options.labelDays;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date &&\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\n            }\n\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\r\n\r\n// Source: collapse\\collapse.js\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function (element) {\r\n        self.$toggles.push(element);\r\n        element.attr('aria-expanded', 'false');\r\n      };\r\n      self.$registerTarget = function (element) {\r\n        self.$targets.push(element);\r\n\r\n        var i = 0;\r\n        if (self.$targets) {\r\n          for (i = 0; i < self.$targets.length; i++) {\r\n            self.$targets[i].attr('aria-hidden', 'true');\r\n          }\r\n          for (i = 0; i < self.$targets.$active.length; i++) {\r\n            if (self.$targets[self.$targets.$active[i]]) {\r\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\r\n            }\r\n            if (self.$toggles[self.$targets.$active[i]]) {\r\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      self.$unregisterToggle = function (element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function (element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        if (angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        } else if (!self.$options.disallowToggle && isActive(value)) {\r\n          deactivateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function () {\r\n        if (self.$options.allowMultiple) {\r\n          return self.$targets.$active;\r\n        }\r\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes (index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for (var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive (value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) !== -1;\r\n      }\r\n\r\n      function deactivateItem (value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\r\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem (value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\r\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[0]]) {\r\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\r\n          }\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n\r\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\r\n          }\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            } else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              } else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function () {\r\n    var KEY_CODES = {\r\n      ENTER: 13,\r\n      SPACE: 32\r\n    };\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        var actionEventHandler = function () {\r\n          if (!attrs.disabled) {\r\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n            bsCollapseCtrl.$setActive(index * 1);\r\n            scope.$apply();\r\n          }\r\n        };\r\n\r\n        element.on('click', actionEventHandler);\r\n        element.bind('keydown keypress', function (e) {\r\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\r\n            console.log('key handler handling');\r\n            actionEventHandler();\r\n            e.preventDefault();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function ($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if (bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          } else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: button\\button.js\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = !!controller.$viewValue;\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$viewValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: aside\\aside.js\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: alert\\alert.js\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true,\r\n\t  focusMeDisabled: false\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\t\t\r\n\t\t$alert.returnFocus = function() {\r\n\t\t\tfunction findFocusableElements() {\r\n\t\t\t\tvar containerEl = angular.element($alert.$element).closest('[ng-controller]');\r\n\t\t\t\t\r\n\t\t\t\treturn containerEl.find('a:not([disabled]),button:not([disabled]),input:not([disabled]),select:not([disabled]),[tabindex]:not([disabled]):not([tabindex=\"-1\"])').filter(function (i,el) {\r\n\t\t\t\t\treturn !angular.element(el).parentsUntil(containerEl, '[tabindex=\"-1\"]').length\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tfunction findNextFocusableElement() {\r\n\t\t\t\tif (document.activeElement) {\r\n\t\t\t\t\tvar focusable = findFocusableElements().toArray();\r\n\t\t\t\t\tif (focusable === undefined) return;\r\n\t\t\t\t\tvar index = focusable.indexOf(document.activeElement);\r\n\t\t\t\t\treturn focusable[index + 1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tangular.element(findNextFocusableElement()).focus();\r\n\r\n\r\n\t\t}\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\t\tif (options.focusMeDisabled) {\r\n          $alert.$scope.focusMeDisabled = options.focusMeDisabled;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: affix\\affix.js\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true,\r\n      setWidth: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = options.setWidth && !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element[0].style.position;\r\n          var initialTop = element[0].style.top;\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n            element.css('top', initialTop);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null) {\r\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window, $timeout) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix;\r\n        $timeout(function () { affix = $affix(element, options); });\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n\r\n// Source: module.js\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n\r\n})(window, document);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    var KEY_CODES = {\r\n      downArrow: 40,\r\n      enter: 13,\r\n      escape: 27,\r\n      upArrow: 38\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n        scope.id = options.id;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function isActive (index) {\r\n          return scope.$activeIndex === index ? true : undefined;\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        scope.$generateResultId = function (index) {\r\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          // If the key code isn't up arrow, down arrow, or enter return.\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n            // Navigate with keyboard\r\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } \r\n          else if ((evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex == 0) || (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex == scope.$matches.length - 1)) {\r\n            scope.$activeIndex = -1;\r\n            var ele = '#' + evt.currentTarget.id;\r\n            //position the cursor after the last letter of the selected item inside the control to allow the user to easily delete the selection if desired\r\n            angular.element(ele).val('').val(controller.$viewValue);\r\n            angular.element(ele).focus();\r\n          }\r\n          else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n            setAriaActiveDescendant();\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              if (options.id) {\r\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\r\n                $typeahead.$element.attr('id', options.id + '_listbox');\r\n                element.attr('aria-controls', options.id + '_listbox');\r\n\r\n                var assertDiv = document.getElementById(options.id + '_sr_text');\r\n                if (!assertDiv) {\r\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\r\n                }\r\n              }\r\n\r\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\r\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\r\n\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                //event for the element that we attach is added to event queue\r\n                //before pushing the same event more that once for the same element, event need to detach\r\n                //list item jumps happening in search list for this setted keydown off\r\n                if (element) element.off('keydown', $typeahead.$onKeyDown); \r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n\r\n          var assertDiv = document.getElementById(options.id + '_sr_text');\r\n          angular.element(assertDiv).remove();\r\n\r\n          setAriaActiveDescendant();\r\n\r\n          hide();\r\n        };\r\n\r\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Helper functions within this closure\r\n\r\n        function setAriaActiveDescendant (index) {\r\n          if (index === undefined || !scope.id) {\r\n            element.removeAttr('aria-activedescendant');\r\n          } else {\r\n            var resultId = scope.$generateResultId(index);\r\n            if (resultId) {\r\n              element.attr('aria-activedescendant', resultId);\r\n            } else {\r\n              element.removeAttr('aria-activedescendant');\r\n            }\r\n          }\r\n        }\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\r\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\r\n          element.attr('aria-autocomplete', 'list');\r\n        }\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          element.off('keydown');\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = options.resolve || {};\r\n    var locals = options.locals || {};\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template) {\r\n      resolve.$template = $q.when(template);\r\n    } else if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n    }\r\n\r\n    if (options.titleTemplate) {\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          findElement('[ng-bind=\"title\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if (!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function (locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory (element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        /* var scope = */\r\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        if (element && element[0] && element[0].tagName.toUpperCase() === 'BUTTON') {\r\n          element.attr('aria-haspopup', 'true');\r\n          element.attr('data-toggle', 'dropdown');\r\n          element.attr('aria-expanded', 'false');\r\n          element.attr('role', 'button');\r\n        }\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function (evt) {\r\n          if ((/(9)/.test(evt.keyCode) && !options.keyboard) || /27/.test(evt.keyCode)) {\r\n            $dropdown.hide(/27/.test(evt.keyCode));\r\n            return;\r\n          }\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if (!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function (el, i) {\r\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if (evt.keyCode === 38 && index > 0) index--;\r\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if (evt.keyCode === 40 && index === items.length - 1) index = 0;\r\n          else if (angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        $dropdown.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inMenu = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $dropdown.$element[0]) {\r\n              inMenu = true;\r\n              break;\r\n            } else {\r\n              inMenu = false;\r\n            }\r\n          }\r\n\r\n          if (!inMenu) {\r\n            $dropdown.hide();\r\n          } else {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Set assistive technology properties\r\n            element.attr('aria-expanded', 'true');\r\n            if ($dropdown.$element) {\r\n              $dropdown.$element.attr('aria-hidden', 'false');\r\n              $dropdown.$element.attr('role', 'menu');\r\n              $dropdown.$element.attr('tabindex', '-1');\r\n            }\r\n            if (options.keyboard && $dropdown.$element) {\r\n              $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n              $dropdown.$element.on('focusout', $dropdown.$onFocusOut);\r\n            }\r\n\r\n            bodyEl.on('click', onBodyClick);\r\n\r\n            if ($dropdown.$element) {\r\n              var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider)'));\r\n              items.attr('role', 'presentation');\r\n\r\n              angular.element($dropdown.$element[0].querySelectorAll('li.divider')).attr('role', 'seperator');\r\n\r\n              items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n              items.attr('role', 'menuitem');\r\n              if (items.length && options.keyboard) {\r\n                items[0].focus();\r\n              }\r\n            }\r\n          }, 0, false);\r\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function (returnFocus) {\r\n          if (!$dropdown.$isShown) return;\r\n\r\n          element.attr('aria-expanded', 'false');\r\n          $dropdown.$element.attr('aria-hidden', 'true');\r\n\r\n          if (options.keyboard && $dropdown.$element) {\r\n            $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n            $dropdown.$element.off('focusout', $dropdown.$onFocusOut);\r\n          }\r\n\r\n          bodyEl.off('click', onBodyClick);\r\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\r\n          $timeout(function () {\r\n            hide();\r\n            if (returnFocus) {\r\n              $timeout(function () {\r\n                if (element && element[0]) {\r\n                  element[0].focus();\r\n                }\r\n              }, 0, false);\r\n            }\r\n          }, 200);\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function () {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick (evt) {\r\n          if (evt.target === element[0]) return undefined;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      compile: function (tElement, tAttrs) {\r\n\r\n        // Support for inlined template (next sibling)\r\n        // It must be fetched before compilation\r\n        if (!tAttrs.bsDropdown) {\r\n          var nextSibling = tElement[0].nextSibling;\r\n          while (nextSibling && nextSibling.nodeType !== 1) {\r\n            nextSibling = nextSibling.nextSibling;\r\n          }\r\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\r\n            tAttrs.template = nextSibling.outerHTML;\r\n            tAttrs.templateUrl = undefined;\r\n            nextSibling.parentNode.removeChild(nextSibling);\r\n          }\r\n        }\r\n\r\n        return function postLink (scope, element, attr) {\r\n\r\n          // Directive options\r\n          var options = {\r\n            scope: scope\r\n          };\r\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\r\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\r\n          });\r\n\r\n          // use string regex match boolean attr falsy values, leave truthy values be\r\n          var falseValueRegExp = /^(false|0|)$/i;\r\n          angular.forEach(['html', 'container'], function (key) {\r\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n          });\r\n\r\n          // bind functions from the attrs to the show and hide events\r\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n            if (angular.isDefined(attr[bsKey])) {\r\n              options[key] = scope.$eval(attr[bsKey]);\r\n            }\r\n          });\r\n\r\n          // Support scope as an object\r\n          if (attr.bsDropdown) {\r\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\r\n              scope.content = newValue;\r\n            }, true);\r\n          }\r\n\r\n          // Initialize dropdown\r\n          var dropdown = $dropdown(element, options);\r\n\r\n          // Visibility binding support\r\n          if (attr.bsShow) {\r\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n              if (!dropdown || !angular.isDefined(newValue)) return;\r\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n              if (newValue === true) {\r\n                dropdown.show();\r\n              } else {\r\n                dropdown.hide();\r\n              }\r\n            });\r\n          }\r\n\r\n          // Garbage collection\r\n          scope.$on('$destroy', function () {\r\n            if (dropdown) dropdown.destroy();\r\n            options = null;\r\n            dropdown = null;\r\n          });\r\n\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      mouseDownPreventDefault: true,\r\n      mouseDownStopPropagation: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        // var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($tooltip);\r\n          }\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          if (tipElement !== null) {\r\n            // Support v1.2+ $animate\r\n            // https://github.com/angular/angular.js/issues/11713\r\n            if (angular.version.minor <= 2) {\r\n              $animate.leave(tipElement, leaveAnimateCallback);\r\n            } else {\r\n              $animate.leave(tipElement).then(leaveAnimateCallback);\r\n            }\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\r\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n              // element.on('blur', $tooltip.leave);\r\n            } else if (trigger !== 'manual') {\r\n              // Only bind up hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              }\r\n\t\t\t  //but do bind focus events for touch\r\n              else if (trigger === 'focus') {\r\n                element.on('focus', $tooltip.enter);\r\n                element.on('blur', $tooltip.leave);\r\n\t\t\t  }\r\n\t\t  \r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              // Remove previously defined hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              }\r\n\t\t\t  // Remove previously defined focus events\r\n              else if (trigger === 'focus') {\r\n                element.off('focus', $tooltip.enter);\r\n                element.off('blur', $tooltip.leave);\r\n\t\t\t  }\r\n\t\t\t  \r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) { // eslint-disable-line\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active',\r\n      isVertical: false\r\n    };\r\n    var _tabsHash = {};\r\n\r\n    var _addTabControl = function (key, control) {\r\n      if (!_tabsHash[key]) _tabsHash[key] = control;\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      $scope.$onClick = function $onClick (evt, pane, index) {\r\n        if (!pane.disabled) {\r\n          self.$setActive(pane.name || index);\r\n        }\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n      };\r\n\r\n      function navigatePane (index, toLeft) {\r\n        var newIndex = 0;\r\n\r\n        if (toLeft) {\r\n          // Moving to the left\r\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\r\n        } else {\r\n          // Moving to the right\r\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\r\n        }\r\n\r\n        if (self.$panes[newIndex].disabled) {\r\n          navigatePane(newIndex, toLeft);\r\n        } else {\r\n          self.$setActive(self.$panes[newIndex].name || newIndex);\r\n        }\r\n      }\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n\r\n        self.$panes.push(pane);\r\n\r\n        self.$panes.forEach(function (tabPane, index) {\r\n          // Set an id value for the pane so that it can be used in the template\r\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\r\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\r\n        });\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\r\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\r\n          // If space or enter was pressed\r\n          self.$setActive(name);\r\n\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n\r\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\r\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\r\n        }\r\n      };\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      $tab.addTabControl = _addTabControl;\r\n      $tab.tabsHash = _tabsHash;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\r\n        // tabs are available in the tab component\r\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\r\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\r\n        }\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          $timeout(function () {\r\n            // get li elements\r\n            var liElements = element.find('li');\r\n            for (var i = 0; i < liElements.length; i++) {\r\n              var iElement = angular.element(liElements[i]);\r\n              if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\r\n                // if li is active, set focus to it.\r\n                iElement.find('a')[0].focus();\r\n              }\r\n            }\r\n            // delay, for the class (.active) change to reflect in DOM.\r\n          }, 100);\r\n        });\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Set up the assistive attributes\r\n        element.attr('role', 'tabpanel');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n        // Save tab id into scope\r\n        scope.id = attrs.id;\r\n\r\n        scope.name = scope.name || scope.id;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // Once the push has occured when can then update the element with some properties.\r\n        // Update the aria-labelledby attribute\r\n\t\t// SS-11127 - removed aria-describedby from tab and tab-panel and utilized aria-labeledby on the tab-panel using the ID of the tab and not the ID of the tab link\r\n        if (scope.$describedBy !== undefined) {\r\n          element.attr('aria-labelledby', scope.$describedBy);\r\n        }\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n  \r\n  .directive('focusOn', function() {\r\n\t\treturn {\r\n\t\t\trestrict: 'A',\r\n\t\t\tlink: function(scope, elem, attr) {\r\n\t\t\t\tscope.$watch(attr.focusOn, function(newValue, oldValue) {\r\n\t\t\t\t\tnewValue !== oldValue && newValue && elem[0].focus();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok',\r\n      toggle: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              if (options.toggle) {\r\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\r\n              } else {\r\n                controller.$setViewValue(value);\r\n              }\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $select);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            var anchor;\r\n\r\n            if (evt.target.nodeName !== 'A') {\r\n              var anchorCandidate = targetEl.parent();\r\n              while (!anchor && anchorCandidate.length > 0) {\r\n                if (anchorCandidate[0].nodeName === 'A') {\r\n                  anchor = anchorCandidate;\r\n                }\r\n                anchorCandidate = anchorCandidate.parent();\r\n              }\r\n            }\r\n\r\n            if (anchor) {\r\n              angular.element(anchor).triggerHandler('click');\r\n            } else {\r\n              targetEl.triggerHandler('click');\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\r\n            if (newValue === false) {\r\n              popover.setEnabled(false);\r\n            } else {\r\n              popover.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true,\r\n      size: null,\r\n      zIndex: null,\r\n      containerElement: null\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      var layoutHideElement = angular.element('#layoutContainer');\r\n\r\n      var backdropCount = 0;\r\n      var dialogBaseZindex = 1050;\r\n      var backdropBaseZindex = 1040;\r\n\r\n      var validSizes = {\r\n        lg: 'modal-lg',\r\n        sm: 'modal-sm'\r\n      };\r\n\r\n      function ModalFactory (config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if (options.containerElement) {\r\n          layoutHideElement = angular.element(options.containerElement);\r\n        }\r\n        if (!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        if (options.zIndex) {\r\n          dialogBaseZindex = parseInt(options.zIndex, 10);\r\n          backdropBaseZindex = dialogBaseZindex - 10;\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        $modal.returnFocus = function () {\r\n\r\n        };\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function (key) {\r\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData;\r\n        var modalElement;\r\n        var modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({\r\n          position: 'fixed',\r\n          top: '0px',\r\n          left: '0px',\r\n          bottom: '0px',\r\n          right: '0px'\r\n        });\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function () {\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function () {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if (backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function () {\r\n          if ($modal.$isShown) return;\r\n\r\n          var parent;\r\n          var after;\r\n          if (angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if (modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\r\n\r\n          if (options.backdrop) {\r\n            // set z-index\r\n            modalElement.css({\r\n              'z-index': dialogBaseZindex + (backdropCount * 20)\r\n            });\r\n            backdropElement.css({\r\n              'z-index': backdropBaseZindex + (backdropCount * 20)\r\n            });\r\n\r\n            // increment number of backdrops\r\n            backdropCount++;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($modal);\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({\r\n            display: 'block'\r\n          }).addClass(options.placement);\r\n\r\n          // Options: customClass\r\n          if (options.customClass) {\r\n            modalElement.addClass(options.customClass);\r\n          }\r\n\r\n          // Options: size\r\n          if (options.size && validSizes[options.size]) {\r\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\r\n          }\r\n\r\n          // Options: animation\r\n          if (options.animation) {\r\n            if (options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function () {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n\r\n          layoutHideElement.attr('aria-hidden', 'true');\r\n\r\n          if (options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'false');\r\n\t\t  modalElement.attr('tabindex', '0');\r\n\t\t  modalElement.focus();\r\n\r\n\t\t  if(!modalElement.length || !angular.element(modalElement[0]).hasClass(\"modal\"))\r\n\t\t  {\r\n\t\t\tlayoutHideElement.attr('aria-hidden', 'false');\r\n\t\t\tunbindKeyboardEvents();\r\n\t\t  }\r\n        }\r\n\r\n        $modal.hide = function () {\r\n          if (!$modal.$isShown) return;\r\n\r\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'true');\r\n\r\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            // decrement number of backdrops\r\n            backdropCount--;\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($modal);\r\n          }\r\n          if (findElement('.modal').length <= 0) {\r\n            bodyElement.removeClass(options.prefixClass + '-open');\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n          }\r\n          if (options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        function findFocusableElements () {\r\n          // Add all elements we want to include in our selection\r\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\r\n          if (document.activeElement) {\r\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\r\n              function (element) {\r\n                // Check for visibility while always include the current activeElement\r\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\r\n              });\r\n\r\n            return focusable;\r\n          }\r\n        }\r\n\r\n        function findNextFocusableElement (inReverse) {\r\n          if (document.activeElement) {\r\n            var focusable = findFocusableElements();\r\n            if (focusable === undefined) return;\r\n            if (inReverse) {\r\n              focusable = Array.prototype.reverse.call(focusable);\r\n            }\r\n\r\n            var index = focusable.indexOf(document.activeElement);\r\n            return focusable[index + 1];\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function () {\r\n          if ($modal.$isShown) {\r\n            $modal.hide();\r\n          } else {\r\n            $modal.show();\r\n          }\r\n        };\r\n\r\n        $modal.focus = function () {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function (evt) {\r\n\r\n          // Escape was pressed on an open modal. Hide it.  Backspace key, nothing happen.\r\n          if ((evt.which === 8||evt.which === 27) && $modal.$isShown) {\r\n            if (evt.which === 27) {\r\n               $modal.hide();\r\n            }\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $modal.$onKeyDown = function (evt) {\r\n          if (options.keyboard) {\r\n            if (evt.keyCode === 8 && evt.target.tagName!=='TEXTAREA' && evt.target.tagName!=='INPUT') {\r\n                evt.preventDefault();\r\n            }\t\t\t\t\r\n\t\t\t  \r\n            if (evt.keyCode === 9) {\r\n\r\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\r\n              if (nextFocusable === undefined) {\r\n                if (evt.preventDefault) evt.preventDefault();\r\n                if (evt.stopPropagation) evt.stopPropagation();\r\n\r\n                var focusable = findFocusableElements();\r\n                if (evt.shiftKey) {\r\n                  focusable[focusable.length - 1].focus();\r\n                } else {\r\n                  focusable[0].focus();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n        function bindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n            modalElement.on('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n            modalElement.off('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        // Private helpers\r\n\r\n        function hideOnBackdropClick (evt) {\r\n          if (evt.target !== evt.currentTarget) return;\r\n          if (options.backdrop === 'static') {\r\n            $modal.focus();\r\n          } else {\r\n            $modal.hide();\r\n          }\r\n        }\r\n\r\n        function preventEventDefault (evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement () {\r\n          if ($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if (modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope,\r\n          element: element,\r\n          show: false\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Options: alias modalClass to customClass\r\n        if (options.modalClass) {\r\n          options.customClass = options.modalClass;\r\n        }\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsModal) {\r\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        if (options.keyboard) {\r\n          modal.returnFocus = function () {\r\n            element[0].focus();\r\n          };\r\n        }\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.ngFocusOut', [])\r\n  .directive('ngFocusOut', ['$parse', '$rootScope', function ($parse, $rootScope) {\r\n    return {\r\n      restrict: 'A',\r\n      compile: function ($element, attr) {\r\n        // NOTE:\r\n        // We expose the powerful `$event` object on the scope that provides access to the Window,\r\n        // etc. This is OK, because expressions are not sandboxed any more (and the expression\r\n        // sandbox was never meant to be a security feature anyway).\r\n        var fn = $parse(attr.ngFocusOut);\r\n\r\n        return function link (scope, element) {\r\n          function ngEventHandler (event) {\r\n            var callback = function () {\r\n              fn(scope, {\r\n                $event: event\r\n              });\r\n            };\r\n            if ($rootScope.$$phase) {\r\n              scope.$evalAsync(callback);\r\n            } else {\r\n              scope.$apply(callback);\r\n            }\r\n          }\r\n\r\n          // setup the handler\r\n          element.on('focusout', ngEventHandler);\r\n\r\n          scope.$on('$destroy', function () {\r\n            // tear down the handler\r\n            element.off('focusout', ngEventHandler);\r\n          });\r\n        };\r\n      }\r\n    };\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.focusElement', [])\r\n  .directive('focusElement', ['$timeout', '$parse', function ($timeout, $parse) {\r\n    return {\r\n      link: function (scope, element, attrs) {\r\n        scope.$watch(attrs.focusElement, function (value) {\r\n          if (value === true) {\r\n            $timeout(function () {\r\n              element[0].focus();\r\n            });\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          if (value.match(/Z/)) {\r\n            date = new Date(value.substr(1, value.length - 3));\r\n          } else {\r\n            date = new Date(value.substr(1, value.length - 2));\r\n          }\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    this.weekdays = function (lang) {\r\n      return $locale.DATETIME_FORMATS.DAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      hasToday: false,\r\n      hasClear: false,\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right',\r\n      // The format that will be given to the screen reader values placed in the DOM.\r\n      screenReaderDateFormat: 'fullDate',\r\n      // Focuses the table element in the dropdown upon display of the picker.\r\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\r\n      focusOnOpen: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\r\n        // defaults and the configuration passed.\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // Add assistive technology helper attributes.\r\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\r\n\r\n        // View vars\r\n\r\n        // Initialize the datepicker view collection by passing a reference to the base object.\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        /*\r\n         * View mode for the date picker.\r\n         * 0: days\r\n         * 1: months\r\n         * 2: years\r\n         */\r\n        scope.$mode = options.startView;\r\n        // icon class override\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        // Show buttons at the bottom of the picker.\r\n        scope.$hasToday = options.hasToday;\r\n        scope.$hasClear = options.hasClear;\r\n        /*\r\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\r\n         * aria attributes which are linked via ids.\r\n         */\r\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\r\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\r\n        scope.keyboard = options.keyboard;\r\n        scope.focusOnOpen = options.focusOnOpen;\r\n\r\n        // labels\r\n        scope.$nextLabel = options.labelNext;\r\n        scope.$previousLabel = options.labelPrevious;\r\n\r\n        // This is the actual current picker view.\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Internal handlers\r\n\r\n        function handleOnKeyDown (evt, apply) {\r\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\r\n            return false;\r\n          }\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n              if (options.focusOnOpen) return true;\r\n            } else {\r\n              if (apply === undefined || apply) {\r\n                scope.$apply(function () {\r\n                  $datepicker.setMode(scope.$mode - 1);\r\n                });\r\n              } else {\r\n                $datepicker.setMode(scope.$mode - 1);\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        }\r\n\r\n        // Scope methods\r\n\r\n        /**\r\n         * Pass through from the scope to the provider for the selection of a date.\r\n         */\r\n        scope.$select = function (date, disabled) {\r\n          if (disabled) return;\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n        scope.$setToday = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(new Date());\r\n          } else {\r\n            $datepicker.select(new Date(), true);\r\n          }\r\n        };\r\n        scope.$clear = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(null);\r\n          } else {\r\n            $datepicker.select(null, true);\r\n          }\r\n        };\r\n        scope.$focused = function (dayInfo) {\r\n          scope.selectedDayId = dayInfo.id;\r\n          if (dayInfo.isNext && !scope.selected) {\r\n            if (scope.$mode) {\r\n              $datepicker.update(dayInfo.date);\r\n            } else {\r\n              scope.$select(dayInfo.date);\r\n            }\r\n          }\r\n        };\r\n        scope.$onKeyDown = function (evt, day) {\r\n          var continueHandling = handleOnKeyDown(evt, false);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n          }\r\n        };\r\n        scope.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inTable = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n              inTable = true;\r\n              break;\r\n            } else {\r\n              inTable = false;\r\n            }\r\n          }\r\n\r\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n          //\r\n\r\n          if (!inTable && !evt.relatedTarget) {\r\n            // hmm\r\n          } else if (!inTable) {\r\n            $datepicker.hide();\r\n          } else {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (angular.isDate(date)) {\r\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\r\n              controller.$dateValue = new Date(date);\r\n            }\r\n          } else {\r\n            controller.$dateValue = null;\r\n          }\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () {\r\n                $datepicker.hide(true);\r\n              });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {\r\n              year: date.getFullYear(),\r\n              month: date.getMonth(),\r\n              date: date.getDate()\r\n            });\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        /**\r\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\r\n         * rebuilt. The views are days, months, and years.\r\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\r\n         */\r\n        $datepicker.setMode = function setMode (mode) {\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          // The picker has been changed so the view needs to be built.\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        /**\r\n         * Builds the datepicker's view based on the picker that is currently set.\r\n         */\r\n        $datepicker.$build = function $build (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], function (day) {\r\n              updateSelected(day);\r\n              if (day.selected) scope.selected = day;\r\n            });\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {\r\n            year: targetDate.getUTCFullYear(),\r\n            month: targetDate.getUTCMonth(),\r\n            date: targetDate.getUTCDate()\r\n          });\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Handles the onKeyDown event from the element that this datepicker is bound.\r\n         * In the standard case this will be an input element. If the trigger is set\r\n         * to click and is bound to a button then it is likely we're servicing a 508\r\n         * type situation where the implementation will no longer uses. Focus will be\r\n         * given to the table.\r\n         */\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          var continueHandling = handleOnKeyDown(evt);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n            parentScope.$digest();\r\n          }\r\n        };\r\n\r\n        // $datepicker.$onFocusOut = function (evt) {\r\n        //   // find out if the related target's parents contain the datepicker's $element\r\n        //   var inTable = false;\r\n        //   var parent = angular.element(evt.relatedTarget);\r\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n        //     parent = parent.parent();\r\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n        //       inTable = true;\r\n        //       break;\r\n        //     } else {\r\n        //       inTable = false;\r\n        //     }\r\n        //   }\r\n\r\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n        //   //\r\n\r\n        //   if (!inTable && !evt.relatedTarget) {\r\n        //     // hmm\r\n        //   } else if (!inTable) {\r\n        //     $datepicker.hide();\r\n        //   } else {\r\n        //     evt.stopPropagation();\r\n        //     evt.preventDefault();\r\n        //   }\r\n        // };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n          el.focused = el.selected;\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        // The datepicker will override the init functionality of the tool\r\n        var _init = $datepicker.init;\r\n        /**\r\n         * Initialize the datepicker.\r\n         */\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\r\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\r\n        var _destroy = $datepicker.destroy;\r\n\r\n        /**\r\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\r\n         */\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be shown.\r\n        var _show = $datepicker.show;\r\n\r\n        /**\r\n         * Override for the tooltip's show function.\r\n         *\r\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\r\n         * Once shown it sets up the appropriate events.\r\n         */\r\n        $datepicker.show = function show () {\r\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n\r\n          // Call the \"overriden base\" function on the tooltip.\r\n          _show();\r\n\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n\r\n            // Update assistive technologies for view changes:\r\n            $datepicker.$element.attr('aria-hidden', 'false');\r\n            element.attr('aria-expanded', 'true');\r\n\r\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n            // If keyboard navigation is enabled (true by default).\r\n            if (options.keyboard) {\r\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\r\n              // Check to see if the table element should receive the focus when the picker is shown.\r\n              if (options.focusOnOpen) {\r\n                // Focus the table element.\r\n                // $datepicker.$element.find('table')[0].focus();\r\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\r\n              } else {\r\n                element.on('keydown', $datepicker.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be hidden.\r\n        var _hide = $datepicker.hide;\r\n\r\n        /**\r\n         * Overrid efor the tooltip's hide function.\r\n         *\r\n         * Updates attributes for assistive technologies and unbinds events.\r\n         */\r\n        $datepicker.hide = function (blur) {\r\n          // If the picker is already hidden don't do anything.\r\n          if (!$datepicker.$isShown) return;\r\n\r\n          // Update the attributes used by assisteive technologies\r\n          $datepicker.$element.attr('aria-hidden', 'true');\r\n          element.attr('aria-expanded', 'false');\r\n\r\n          // Unbind the mouse and touch events\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n          // If keyboard events were bound then unbind them.\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          if (options.focusOnOpen) {\r\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\r\n            element[0].focus();\r\n          }\r\n          // Call the tooltip's hide function.\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\r\n    return {\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        options = angular.extend({}, $datepicker.defaults, options);\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\r\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n\r\n          return date === null ? null : new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n      }\r\n    };\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLong = $dateFormatter.weekdays(lang);\r\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n\r\n        var weekDaysLabelsHtml = '';\r\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\r\n          var weekDayShortLabel = weekDaysShortLabels[i];\r\n          var weekDayLabel = weekDaysLongLabels[i];\r\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\r\n        }\r\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {\r\n          year: startDate.getFullYear(),\r\n          month: startDate.getMonth(),\r\n          date: startDate.getDate()\r\n        };\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {\r\n            month: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n              // in $datepicker.$selectPane, so picker would not update selected day display if\r\n              // user picks first day of the new month.\r\n              // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n            // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            var selectedDay;\r\n            var todayDay;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              // push the day information onto the collection\r\n              var dayItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: day,\r\n                value: day.getDate(),\r\n                isToday: day.toDateString() === today,\r\n                label: formatDate(day, this.format),\r\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\r\n                selected: picker.$date && this.isSelected(day),\r\n                muted: day.getMonth() !== viewDate.month,\r\n                disabled: this.isDisabled(day)\r\n              };\r\n\r\n              if (dayItem.selected) selectedDay = dayItem;\r\n              if (dayItem.isToday) todayDay = dayItem;\r\n\r\n              days.push(dayItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedDay) {\r\n                scope.selectedDayId = selectedDay.id;\r\n                if (todayDay) todayDay.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedDay.focused = true;\r\n                scope.selected = selectedDay;\r\n              } else if (todayDay) {\r\n                todayDay.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.isTodayDisabled = this.isDisabled(new Date());\r\n            scope.hasSelectedDate = picker.$date != null;\r\n            scope.$modeLabel = options.labelMonth;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\r\n              date.getMonth() === picker.$date.getMonth() &&\r\n              date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n            // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n            // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n            // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            var actualTime;\r\n\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date) {\r\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n                picker.$date = new Date();\r\n              } else {\r\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\r\n              }\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return false;\r\n            }\r\n\r\n            actualTime = picker.$date.getTime();\r\n\r\n            var newDate;\r\n\r\n            switch (evt.keyCode) {\r\n              // enter\r\n              case 13:\r\n                if (options.focusOnOpen) {\r\n                  picker.select(new Date(actualTime), true);\r\n                  return false;\r\n                }\r\n                break;\r\n                // pageup\r\n              case 33:\r\n                if (evt.altKey) { // move back a year\r\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move back a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\r\n                  }\r\n                }\r\n                break;\r\n\r\n                // pagedown\r\n              case 34:\r\n                if (evt.altKey) { // move forward a year\r\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move forward a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\r\n                  }\r\n                }\r\n\r\n                break;\r\n\r\n                // left arrow\r\n              case 37:\r\n                newDate = new Date(actualTime - 1 * 864e5);\r\n                break;\r\n\r\n                // up arrow\r\n              case 38:\r\n                newDate = new Date(actualTime - 7 * 864e5);\r\n                break;\r\n\r\n                // right arrow\r\n              case 39:\r\n                newDate = new Date(actualTime + 1 * 864e5);\r\n                break;\r\n\r\n                // down arrow\r\n              case 40:\r\n                newDate = new Date(actualTime + 7 * 864e5);\r\n                break;\r\n\r\n              default:\r\n                return false;\r\n            }\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n\r\n            if (evt && evt.stopPropagation) evt.stopPropagation();\r\n\r\n            return false;\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            var selectedMonth;\r\n            var thisMonth;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n\r\n              var monthItem = {\r\n                date: month,\r\n                label: formatDate(month, this.format),\r\n                selected: picker.$isSelected(month),\r\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\r\n                disabled: this.isDisabled(month)\r\n              };\r\n\r\n              if (monthItem.selected) selectedMonth = monthItem;\r\n              if (monthItem.isToday) thisMonth = monthItem;\r\n\r\n              months.push(monthItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedMonth) {\r\n                scope.selectedDayId = selectedMonth.id;\r\n                if (thisMonth) thisMonth.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedMonth.focused = true;\r\n                scope.selected = selectedMonth;\r\n              } else if (thisMonth) {\r\n                thisMonth.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modeLabel = options.labelYear;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\r\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 12\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            var selectedYear;\r\n            var thisYear;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n\r\n              var yearItem = {\r\n                date: year,\r\n                label: formatDate(year, this.format),\r\n                selected: picker.$isSelected(year),\r\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\r\n                disabled: this.isDisabled(year)\r\n              };\r\n\r\n              if (yearItem.selected) selectedYear = yearItem;\r\n              if (yearItem.isToday) thisYear = yearItem;\r\n\r\n              years.push(yearItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedYear) {\r\n                scope.selectedDayId = selectedYear.id;\r\n                if (thisYear) thisYear.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedYear.focused = true;\r\n                scope.selected = selectedYear;\r\n              } else if (thisYear) {\r\n                thisYear.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modelLabel = options.labelDays;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      // The format that will be given to the screen reader values placed in the DOM.\n      screenReaderDateFormat: 'fullDate',\n      // Focuses the table element in the dropdown upon display of the picker.\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\n      focusOnOpen: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\n        // defaults and the configuration passed.\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // Add assistive technology helper attributes.\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\n\n        // View vars\n\n        // Initialize the datepicker view collection by passing a reference to the base object.\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        /*\n         * View mode for the date picker.\n         * 0: days\n         * 1: months\n         * 2: years\n         */\n        scope.$mode = options.startView;\n        // icon class override\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        // Show buttons at the bottom of the picker.\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        /*\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\n         * aria attributes which are linked via ids.\n         */\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\n        scope.keyboard = options.keyboard;\n        scope.focusOnOpen = options.focusOnOpen;\n\n        // labels\n        scope.$nextLabel = options.labelNext;\n        scope.$previousLabel = options.labelPrevious;\n\n        // This is the actual current picker view.\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Internal handlers\n\n        function handleOnKeyDown (evt, apply) {\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\n            return false;\n          }\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n              if (options.focusOnOpen) return true;\n            } else {\n              if (apply === undefined || apply) {\n                scope.$apply(function () {\n                  $datepicker.setMode(scope.$mode - 1);\n                });\n              } else {\n                $datepicker.setMode(scope.$mode - 1);\n              }\n            }\n            return false;\n          }\n\n          return true;\n        }\n\n        // Scope methods\n\n        /**\n         * Pass through from the scope to the provider for the selection of a date.\n         */\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n        scope.$focused = function (dayInfo) {\n          scope.selectedDayId = dayInfo.id;\n          if (dayInfo.isNext && !scope.selected) {\n            if (scope.$mode) {\n              $datepicker.update(dayInfo.date);\n            } else {\n              scope.$select(dayInfo.date);\n            }\n          }\n        };\n        scope.$onKeyDown = function (evt, day) {\n          var continueHandling = handleOnKeyDown(evt, false);\n\n          if (continueHandling) {\n            // Navigate with keyboard\n            $picker.onKeyDown(evt);\n          }\n        };\n        scope.$onFocusOut = function (evt) {\n          // find out if the related target's parents contain the datepicker's $element\n          var inTable = false;\n          var parent = angular.element(evt.relatedTarget);\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n            parent = parent.parent();\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\n              inTable = true;\n              break;\n            } else {\n              inTable = false;\n            }\n          }\n\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\n          //\n\n          if (!inTable && !evt.relatedTarget) {\n            // hmm\n          } else if (!inTable) {\n            $datepicker.hide();\n          } else {\n            evt.stopPropagation();\n            evt.preventDefault();\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () {\n                $datepicker.hide(true);\n              });\n            }\n          } else {\n            angular.extend(viewDate, {\n              year: date.getFullYear(),\n              month: date.getMonth(),\n              date: date.getDate()\n            });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        /**\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\n         * rebuilt. The views are days, months, and years.\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\n         */\n        $datepicker.setMode = function setMode (mode) {\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          // The picker has been changed so the view needs to be built.\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        /**\n         * Builds the datepicker's view based on the picker that is currently set.\n         */\n        $datepicker.$build = function $build (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], function (day) {\n              updateSelected(day);\n              if (day.selected) scope.selected = day;\n            });\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {\n            year: targetDate.getUTCFullYear(),\n            month: targetDate.getUTCMonth(),\n            date: targetDate.getUTCDate()\n          });\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        /**\n         * Handles the onKeyDown event from the element that this datepicker is bound.\n         * In the standard case this will be an input element. If the trigger is set\n         * to click and is bound to a button then it is likely we're servicing a 508\n         * type situation where the implementation will no longer uses. Focus will be\n         * given to the table.\n         */\n        $datepicker.$onKeyDown = function (evt) {\n          var continueHandling = handleOnKeyDown(evt);\n\n          if (continueHandling) {\n            // Navigate with keyboard\n            $picker.onKeyDown(evt);\n            parentScope.$digest();\n          }\n        };\n\n        // $datepicker.$onFocusOut = function (evt) {\n        //   // find out if the related target's parents contain the datepicker's $element\n        //   var inTable = false;\n        //   var parent = angular.element(evt.relatedTarget);\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n        //     parent = parent.parent();\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\n        //       inTable = true;\n        //       break;\n        //     } else {\n        //       inTable = false;\n        //     }\n        //   }\n\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\n        //   //\n\n        //   if (!inTable && !evt.relatedTarget) {\n        //     // hmm\n        //   } else if (!inTable) {\n        //     $datepicker.hide();\n        //   } else {\n        //     evt.stopPropagation();\n        //     evt.preventDefault();\n        //   }\n        // };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n          el.focused = el.selected;\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        // The datepicker will override the init functionality of the tool\n        var _init = $datepicker.init;\n        /**\n         * Initialize the datepicker.\n         */\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\n        var _destroy = $datepicker.destroy;\n\n        /**\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\n         */\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\n        // is to be shown.\n        var _show = $datepicker.show;\n\n        /**\n         * Override for the tooltip's show function.\n         *\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\n         * Once shown it sets up the appropriate events.\n         */\n        $datepicker.show = function show () {\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n\n          // Call the \"overriden base\" function on the tooltip.\n          _show();\n\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n\n            // Update assistive technologies for view changes:\n            $datepicker.$element.attr('aria-hidden', 'false');\n            element.attr('aria-expanded', 'true');\n\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\n            // If keyboard navigation is enabled (true by default).\n            if (options.keyboard) {\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\n              // Check to see if the table element should receive the focus when the picker is shown.\n              if (options.focusOnOpen) {\n                // Focus the table element.\n                // $datepicker.$element.find('table')[0].focus();\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\n              } else {\n                element.on('keydown', $datepicker.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\n        // is to be hidden.\n        var _hide = $datepicker.hide;\n\n        /**\n         * Overrid efor the tooltip's hide function.\n         *\n         * Updates attributes for assistive technologies and unbinds events.\n         */\n        $datepicker.hide = function (blur) {\n          // If the picker is already hidden don't do anything.\n          if (!$datepicker.$isShown) return;\n\n          // Update the attributes used by assisteive technologies\n          $datepicker.$element.attr('aria-hidden', 'true');\n          element.attr('aria-expanded', 'false');\n\n          // Unbind the mouse and touch events\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\n          // If keyboard events were bound then unbind them.\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\n          }\n          if (options.focusOnOpen) {\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\n            element[0].focus();\n          }\n          // Call the tooltip's hide function.\n          _hide(blur);\n        };\n\n        return $datepicker;\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\n    return {\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        options = angular.extend({}, $datepicker.defaults, options);\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              options[key] = dateParser.getDateForAttribute(key, newValue);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            options.dateFormat = newValue;\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n\n          return date === null ? null : new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n\n          return getDateFormattedString();\n        });\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n      }\n    };\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLong = $dateFormatter.weekdays(lang);\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n\n        var weekDaysLabelsHtml = '';\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\n          var weekDayShortLabel = weekDaysShortLabels[i];\n          var weekDayLabel = weekDaysLongLabels[i];\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\n        }\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {\n          year: startDate.getFullYear(),\n          month: startDate.getMonth(),\n          date: startDate.getDate()\n        };\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {\n            month: 1\n          },\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\n              // in $datepicker.$selectPane, so picker would not update selected day display if\n              // user picks first day of the new month.\n              // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n            // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            var selectedDay;\n            var todayDay;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              // push the day information onto the collection\n              var dayItem = {\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\n                date: day,\n                value: day.getDate(),\n                isToday: day.toDateString() === today,\n                label: formatDate(day, this.format),\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\n                selected: picker.$date && this.isSelected(day),\n                muted: day.getMonth() !== viewDate.month,\n                disabled: this.isDisabled(day)\n              };\n\n              if (dayItem.selected) selectedDay = dayItem;\n              if (dayItem.isToday) todayDay = dayItem;\n\n              days.push(dayItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedDay) {\n                scope.selectedDayId = selectedDay.id;\n                if (todayDay) todayDay.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedDay.focused = true;\n                scope.selected = selectedDay;\n              } else if (todayDay) {\n                todayDay.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            scope.hasSelectedDate = picker.$date != null;\n            scope.$modeLabel = options.labelMonth;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\n              date.getMonth() === picker.$date.getMonth() &&\n              date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n            // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n            // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n            // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            var actualTime;\n\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date) {\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\n                picker.$date = new Date();\n              } else {\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\n              }\n            }\n\n            if (!picker.$date) {\n              return false;\n            }\n\n            actualTime = picker.$date.getTime();\n\n            var newDate;\n\n            switch (evt.keyCode) {\n              // enter\n              case 13:\n                if (options.focusOnOpen) {\n                  picker.select(new Date(actualTime), true);\n                  return false;\n                }\n                break;\n                // pageup\n              case 33:\n                if (evt.altKey) { // move back a year\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\n                } else { // move back a month\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\n                  }\n                }\n                break;\n\n                // pagedown\n              case 34:\n                if (evt.altKey) { // move forward a year\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\n                } else { // move forward a month\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\n                  }\n                }\n\n                break;\n\n                // left arrow\n              case 37:\n                newDate = new Date(actualTime - 1 * 864e5);\n                break;\n\n                // up arrow\n              case 38:\n                newDate = new Date(actualTime - 7 * 864e5);\n                break;\n\n                // right arrow\n              case 39:\n                newDate = new Date(actualTime + 1 * 864e5);\n                break;\n\n                // down arrow\n              case 40:\n                newDate = new Date(actualTime + 7 * 864e5);\n                break;\n\n              default:\n                return false;\n            }\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n\n            if (evt && evt.stopPropagation) evt.stopPropagation();\n\n            return false;\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {\n            year: 1\n          },\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\n            var selectedMonth;\n            var thisMonth;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n\n              var monthItem = {\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\n                date: month,\n                label: formatDate(month, this.format),\n                selected: picker.$isSelected(month),\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\n                disabled: this.isDisabled(month)\n              };\n\n              if (monthItem.selected) selectedMonth = monthItem;\n              if (monthItem.isToday) thisMonth = monthItem;\n\n              months.push(monthItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedMonth) {\n                scope.selectedDayId = selectedMonth.id;\n                if (thisMonth) thisMonth.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedMonth.focused = true;\n                scope.selected = selectedMonth;\n              } else if (thisMonth) {\n                thisMonth.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.$modeLabel = options.labelYear;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date &&\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\n            }\n\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {\n            year: 12\n          },\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            var selectedYear;\n            var thisYear;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n\n              var yearItem = {\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\n                date: year,\n                label: formatDate(year, this.format),\n                selected: picker.$isSelected(year),\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\n                disabled: this.isDisabled(year)\n              };\n\n              if (yearItem.selected) selectedYear = yearItem;\n              if (yearItem.isToday) thisYear = yearItem;\n\n              years.push(yearItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedYear) {\n                scope.selectedDayId = selectedYear.id;\n                if (thisYear) thisYear.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedYear.focused = true;\n                scope.selected = selectedYear;\n              } else if (thisYear) {\n                thisYear.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.startYear = years[0].label;\n            scope.endYear = years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.$modelLabel = options.labelDays;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date &&\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\n            }\n\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function (element) {\r\n        self.$toggles.push(element);\r\n        element.attr('aria-expanded', 'false');\r\n      };\r\n      self.$registerTarget = function (element) {\r\n        self.$targets.push(element);\r\n\r\n        var i = 0;\r\n        if (self.$targets) {\r\n          for (i = 0; i < self.$targets.length; i++) {\r\n            self.$targets[i].attr('aria-hidden', 'true');\r\n          }\r\n          for (i = 0; i < self.$targets.$active.length; i++) {\r\n            if (self.$targets[self.$targets.$active[i]]) {\r\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\r\n            }\r\n            if (self.$toggles[self.$targets.$active[i]]) {\r\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      self.$unregisterToggle = function (element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function (element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        if (angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        } else if (!self.$options.disallowToggle && isActive(value)) {\r\n          deactivateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function () {\r\n        if (self.$options.allowMultiple) {\r\n          return self.$targets.$active;\r\n        }\r\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes (index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for (var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive (value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) !== -1;\r\n      }\r\n\r\n      function deactivateItem (value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\r\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem (value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\r\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[0]]) {\r\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\r\n          }\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n\r\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\r\n          }\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            } else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              } else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function () {\r\n    var KEY_CODES = {\r\n      ENTER: 13,\r\n      SPACE: 32\r\n    };\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        var actionEventHandler = function () {\r\n          if (!attrs.disabled) {\r\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n            bsCollapseCtrl.$setActive(index * 1);\r\n            scope.$apply();\r\n          }\r\n        };\r\n\r\n        element.on('click', actionEventHandler);\r\n        element.bind('keydown keypress', function (e) {\r\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\r\n            console.log('key handler handling');\r\n            actionEventHandler();\r\n            e.preventDefault();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function ($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if (bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          } else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = !!controller.$viewValue;\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$viewValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true,\r\n\t  focusMeDisabled: false\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n\t\t\r\n\t\t$alert.returnFocus = function() {\r\n\t\t\tfunction findFocusableElements() {\r\n\t\t\t\tvar containerEl = angular.element($alert.$element).closest('[ng-controller]');\r\n\t\t\t\t\r\n\t\t\t\treturn containerEl.find('a:not([disabled]),button:not([disabled]),input:not([disabled]),select:not([disabled]),[tabindex]:not([disabled]):not([tabindex=\"-1\"])').filter(function (i,el) {\r\n\t\t\t\t\treturn !angular.element(el).parentsUntil(containerEl, '[tabindex=\"-1\"]').length\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tfunction findNextFocusableElement() {\r\n\t\t\t\tif (document.activeElement) {\r\n\t\t\t\t\tvar focusable = findFocusableElements().toArray();\r\n\t\t\t\t\tif (focusable === undefined) return;\r\n\t\t\t\t\tvar index = focusable.indexOf(document.activeElement);\r\n\t\t\t\t\treturn focusable[index + 1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tangular.element(findNextFocusableElement()).focus();\r\n\r\n\r\n\t\t}\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n\t\tif (options.focusMeDisabled) {\r\n          $alert.$scope.focusMeDisabled = options.focusMeDisabled;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true,\r\n      setWidth: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = options.setWidth && !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element[0].style.position;\r\n          var initialTop = element[0].style.top;\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n            element.css('top', initialTop);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null) {\r\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window, $timeout) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix;\r\n        $timeout(function () { affix = $affix(element, options); });\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n"],"sourceRoot":"/source/"}