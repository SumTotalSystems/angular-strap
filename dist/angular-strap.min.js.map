{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/focus-out.js","helpers/focus-element.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","KEY_CODES","downArrow","enter","escape","upArrow","$typeahead","parentScope","id","$resetMatches","config","setAriaActiveDescendant","index","resultId","$generateResultId","attr","$$phase","$root","$activeIndex","$tooltip","$activate","$scope","$$postDigest","activate","$matches","select","$select","evt","$isActive","matches","safeDigest","update","$$rAF","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","$viewValue","$getIndex","$onMouseDown","preventDefault","stopPropagation","equals","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$isVisible","getElementById","ele","currentTarget","isUndefined","label","$$updateScrollTop","$digest","focus","show","$element","assertDiv","$timeout","on","append","$onKeyDown","ariaLabelledby","hide","off","onKeyUp","which","$isShown","onFocusKeyUp","$onFocusKeyUp","array","TypeaheadFactory","$filter","expression","directive","results","postLink","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$match","$watchCollection","values","watchOptions","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","toString","$on","destroy","target","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","$get","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","isTouch","unbindTriggerEvents","i","leave","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","tipScope","$destroy","$options","$promise","$new","$rootScope","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","$hide","setEnabled","isEnabled","toggle","compileData","tipContainer","init","bindTriggerEvents","isElement","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","nodeName","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","$window","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","self","newIndex","navigatePane","toLeft","$panes","$setActive","name","$activePaneChangeListeners","pane","$navClass","$activeClass","$onClick","tabPane","$labeledBy","$active","activeIndex","$remove","indexOf","splice","fn","$pane","$onKeyPress","e","charCode","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","liElements","find","iElement","attrs","bsActivePane","parsedBsActivePane","$parse","assign","render","$push","$describedBy","elem","focusOn","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$selectNone","$updateActiveIndex","a","b","$apply","isArray","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","li","liElement","pattern","path","RegExp","regexp","backdrop","size","zIndex","containerElement","bodyElement","layoutHideElement","backdropCount","backdropBaseZindex","ModalFactory","modalElement","$modal","defaultPrevented","findFocusableElements","focusableElements","focusable","findNextFocusableElement","call","inReverse","prototype","reverse","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","dialogBaseZindex","returnFocus","$show","bottom","destroyModalElement","z-index","customClass","validSizes","minor","backdropAnimation","bindBackdropEvents","nextFocusable","shiftKey","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","callback","$event","ngFocusOut","ngEventHandler","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","noop","toLowerCase","indexOfCaseInsensitive","len","str","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","weekdays","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","keydown","parentEl","items","eq","inMenu","relatedTarget","$onFocusOut","hasClass","webkitMatchesSelector","Element","mozMatchesSelector","msMatchesSelector","oMatchesSelector","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","screenReaderDateFormat","focusOnOpen","DatepickerFactory","$datepicker","pickerViews","datepickerViews","altKey","setMode","$mode","focused","$views","views","$iconLeft","$iconRight","$hasToday","dropdownId","$nextLabel","labelNext","$previousLabel","$picker","handleOnKeyDown","$toggleMode","$setToday","$clear","$focused","selectedDayId","dayInfo","isNext","continueHandling","onKeyDown","inTable","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","built","$updateSelected","updateSelected","build","isSelected","steps","getUTCFullYear","getUTCMonth","$selectPane","UTC","getUTCDate","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysShortLabels","weekDaysLongLabels","weekDaysLabelsHtml","weekDayLabel","concat","picker","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","days","selectedDay","todayDay","dayItem","isToday","screenReaderLabel","muted","defaultFirstDayTabIndex","showLabels","labels","isTodayDisabled","hasSelectedDate","$modeLabel","isDisabled","getDay","actualTime","months","selectedMonth","monthItem","thisMonthDate","thisMonth","lastDate","actualMonth","firstYear","years","selectedYear","yearItem","thisYear","startYear","endYear","$modelLabel","actualYear","setYear","Array","startCollapsed","allowMultiple","activeIndexes","$targets","deactivateItem","activateItem","$toggles","$collapse","$viewChangeListeners","$registerToggle","$registerTarget","$unregisterToggle","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","ENTER","SPACE","actionEventHandler","bsCollapseToggle","bind","log","action","$unregisterTarget","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","focusMeDisabled","$alert","containerEl","AlertFactory","toArray","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"CAOA,SCIAA,EAAAA,EAAAC,GDHE,YAsvGA,SE/qGFC,GAAAC,EAAAD,EAAAA,EAAAA,EAAAA,EAAAA,GFyvGI,QEhpGJE,GAAAC,EAAAA,GFipGM,MEhpGNC,SAAAC,SAAAC,GAAAA,GAAAA,iBAAAA,IFmpGI,QAASC,GAAcC,GACrB,MAAIC,GAAcD,GAAkBC,EAAcD,GGz0GxDE,EAAAF,GAAAG,EAAAC,IAAAJ,GAIAK,MAAAA,IACAC,KAAAA,SAAAR,GACAS,MAAAA,GAAAC,OHqvGIC,KE/qGJC,QAAAV,SAAAP,GACAkB,EAAAA,UAAAlB,UAAAkB,KAAAA,EAAAA,YACAC,QAAAC,KAAAA,oGACApB,EAAAqB,YAAAA,EAAAA,SACArB,EAAAsB,SAAAA,GAEA,IAAAC,GAAAA,EAAAvB,YAKAwB,EAAAC,EAAAJ,UAAAK,GACAR,EAAAS,EAAAD,WACAL,EAAAO,EAAAA,aF4qGUP,EE3qGVrB,EAAAqB,YACAA,EAAAQ,EAAAD,WF4qGUE,EAAoB9B,EAAQ8B,mBAAqBN,QAAQO,SACzDR,EAAmBvB,EAAQuB,gBE9pGrC,IAVAC,QAAAQ,QAAAX,EAAAC,SAAAA,EAAAA,GAEAf,QAAAoB,SAAAD,GACAL,EAAAY,GAAAA,EAAAC,IAAA3B,GAEAc,EAAAY,GAAAA,EAAA3B,OAAAP,KF2qGMyB,QAAQQ,OAAOX,EAASC,GEtqG9BtB,EACAqB,EAAAY,UAAAE,EAAAC,KAAAA,OAEA,CAAA,IAAAC,EFyqGQ,KAAM,IAAIC,OAAM,6CAFhBjB,GEtqGRkB,UAAAjC,EAAAP,GFyrGM,MElrGNC,GAAAwC,gBAEAnB,EAAAY,UAAAE,EAAAC,KAAAf,EAAAY,UAAA3B,EAAAN,EAAAwC,iBAAAA,KACArC,SAAAsC,GACA,GAAAJ,GAAAb,QAAApB,QAAAqC,EAAA,GAKA,OAJAF,GAAAG,oBAAAL,EAAA,IAAAM,WAAAN,WACAM,KAAAA,EAAA,IAGA3C,EAAAD,GAAAA,aFiqGUC,EAAQwC,kBE3pGlBnB,EAAAe,UAAAf,EAAAlB,KAAAkB,EAAAC,UAAAA,EAAAA,EAAAA,mBAAAA,KAAAA,SAAAA,GAEA,GAAAf,GAAAuB,QAAAA,QAAAR,EAAAW,IACAjC,EAAAuC,EAAA,sBAAAF,EAAA,IAAAM,WAAA,WAAAC,KAAAH,EAAA,GF6pGU,OE5pGVlC,GAAAA,aAAAsC,EAAAC,OAAAC,SF4pGiBV,EAAW,GAAGW,aErpG/Bb,EAAAC,IAAAf,GAAAlB,KAAA,SAAAmB,GFypGQ,GExpGRA,GAAAA,EAAAA,EAAAA,UACAlB,GAAAA,OACA6C,EAAA1C,EAAA2C,QAAAA,cAAAA,kBF0pGQ,IEtpGR9C,GAAAc,QAAAd,QAAA,SAAAwC,KAAArC,EAAA4C,QAAAC,WFupGYC,EEtpGZC,EAAAA,EFupGQ,QACEhC,OEtpGVE,EFupGUpB,QAASA,EACT6C,KErpGV,SAAAzB,GFupGY,GADAF,EEppGZlB,OAAA8C,EACA9C,EAAAmD,CAEA,GAAAnC,GAAAA,EAAAF,EAAAI,GAAA,EACA4B,IFopGgB1B,QAAQQ,OAAOsB,EAAWE,SAAUlC,EEhpGpD,IAAAmC,GAAAJ,QAAAK,SAAAC,GAAAA,EAAAA,GFmpGcvD,GAAQW,KAAK,0BAA2B0C,GACxCrD,EAAQmD,WAAWxC,KAAK,0BAA2B0C,GAC/CrC,IACF8B,EAAM9B,GAAgBqC,GAG1B,MAAOJ,GAAOO,MAAM,KAAMD,eAQlC,IAAInD,MAl0GNqD,ECIFC,SAAA,KAAA,QAAA,YAAA,WAAA,cAAA,kBDHEtC,QCIFuC,OAAA,4BAAA,yBAAA,wCAAAC,SAAA,aAAA,WDHI,GCIJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,YACAuB,YAAA,aACAC,UAAA,cACAC,YAAA,+BACAC,QAAA,QACAC,WAAAA,EACAC,UAAAA,EACAC,MAAAA,EDHMN,MAAO,ECMbC,UAAAM,EACAC,OAAAA,gBACAC,MAAA,EACAC,YAAA,EACAC,WAAA,GDJML,WAAW,GCSjBC,GDNMC,UCQNI,GDPMH,MCUN5E,GDTM6E,OCWNE,GDVMD,QCYNE,GDVIhE,MCYJkC,MAAA+B,UAAAA,aAAAA,WAAAA,QAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GDXM,QCaNC,GAAA9E,EAAAc,EAAAiE,GDsJQ,QAASC,GCuEjBC,GDtEU,GCuEVjF,IAAAuC,GAAAO,EAAA+B,GDrEiB,CACL,GAAIK,GAAWpC,EAAMqC,kBAAkBF,ECyEnDN,GDvEc3E,EAAQoF,KAAK,wBAAyBF,GC+EpDG,EAAAA,WAAAC,6BDnFYtF,GAAQuC,WAAW,yBApKvB,GCaRO,MACAA,EAAAyC,QAAAA,UAAApB,EAAAA,EDZQQ,GAAaa,EAASxF,EAASJ,ECcvCkD,IAAAA,GAAAgC,EAAAA,MAEAhC,EAAA2C,EAAAC,MDbQ5C,GCcRA,GAAA6C,EAAAA,GDbQ7C,ECcR6B,cAAAiB,WDbU9C,EAAM+C,YACN/C,EAAMyC,aAAe3F,EAAQuE,WAAa,EAAI,IAEhDrB,ECeRA,gBDdQA,ECeR6B,UAAAmB,SAAAb,GDdUnC,EAAM6C,aAAa,WACjBhB,EAAWiB,SAASX,MAGxBnC,EAAMiD,QAAU,SAASd,EAAOe,GCkBxClD,EAAAmD,aAAA,WACAtB,EAAAY,OAAAA,MDdQzC,ECoBRA,WAAAoD,WACA,MAAApD,GAAAyC,cDlBQzC,EAAMmD,UAAY,SAAkBhB,GCwB5CkB,MAAAA,GAAArD,eAAAA,GAAAA,EAAAA,GDrBQ6B,EAAWyB,OAAS,SAASF,GCyBrCvB,EAAAA,SAAAiB,EACA9C,EAAAyC,cAAAN,EAAAA,SDvBYnC,EAAMyC,aAAe3F,EAAQuE,WAAa,EAAI,IC2B1DgC,EAAAlB,GACAoB,EAAA/E,EAAAwB,kBDvBQ6B,EC0BR7D,SAAAwF,SAAAA,GACAxD,EAAAgC,aAAAA,GDxBQH,EC2BR4B,OAAA3G,SAAAH,GACA,GAAA+G,KAAApF,EAAA,CD1BU,GC2BVxB,GAAA6G,EAAAA,SAAAxB,GAAAN,KD1BU7D,GAAW4F,cAAcpF,GACzBR,EAAWwF,UC+BrB3B,EAAAA,gBACAC,GAAAZ,EAAAlD,UD7BUgC,EC8BVyD,MAAAzD,EAAA+C,YAAAc,UAAAA,EAAAA,EAAAA,GD7BcvF,QAAQoF,UAAU5G,EAAQ6G,WAAarF,QAAQwF,WAAWhH,EAAQ6G,WCgChF7G,EAAAkD,SAAA+C,EAAAc,EAAAvF,KD5BQuD,ECgCR7B,WAAAA,WD/BU,MAAKlD,GAAQoE,WAAclD,ECoCrCmE,EAAAnC,SAAA+C,QAAAc,QAAA1B,SAAAnE,EAAA+F,aAAA/F,EAAA+F,WAAAF,QAAA/G,EAAAoE,YAFA8C,EAAAA,SAAAH,QD7BQ7D,EAAMqC,kBAAoB,SAASF,GCkC3C,MAAAA,GAAAA,GAAAA,EAAAA,GAAAA,qBAAAA,EAAAA,GAGAN,EAAAoC,UAAAA,SAAAzF,GAEA0E,GAAAgB,EACAhB,KAAAiB,EAAAA,EAAAA,SAAAA,OAAAA,MDlCgB7F,QAAQ8F,OAAOpE,EAAM+C,SAASZ,GAAO3D,MAAOA,KCsC5D,MAAA2D,IDlCQN,ECoCRwC,aAAAC,SAAAC,GDnCUrB,ECoCVgB,iBDnCUhB,ECoCViB,mBDlCQtC,ECsCR2C,kBAAAC,SAAAA,EAAAJ,GDrCU,GCsCVtD,EAAAA,IAAA2D,EAAAC,EAAAtE,SAAAU,OAAA2D,CDrCY,GAAIJ,GCsChBE,EAAAA,SAAAI,GAEA7D,EAAA2D,EAAAA,UDtCgBF,EAAeF,EAAOC,UAAYD,EAAOO,aACzCJ,EAAgB1D,EAAU2D,UAC1BE,EAAe7D,EAAU2D,UAAY3D,EAAU8D,YCyC/DhD,IAAA4C,GAAAvB,EAAAA,EAEAnC,EAAA2D,UAAAxB,KAAA4B,IAAAA,EAAA/D,EAAA2D,UAAA3D,EAAA8D,cAGAhD,EAAAkD,IACA7B,EAAAgB,UAAAA,KDvCQrC,EC6CRA,WAAA7B,SAAAyC,GD5CU,GAAK,aC8CfqC,KAAAA,EAAAtD,SD9CU,CAKA,IC0CVxB,EAAAyC,cAAAA,EAAAA,UAAAA,EAAAA,OAAAA,KAAAA,EAAAA,eACAP,EAAAA,iBACA5D,EAAAA,mBAEA0B,EAAAyC,UAAAA,EAAAA,OAAAA,EAAAA,SAAAA,OACAP,EAAAA,OAAAA,EAAAlC,kBACA1B,IAAApB,EAAAA,UAAA8H,EAAAA,SAAAlI,EAAAiF,aAAArC,ED7CYM,EC8CZyC,eACAzC,EAAAA,EAAAyC,cACAnE,QAAA2G,QAAA/B,EAAAgC,eAAAnD,EAAAA,GAAAA,aAAAA,KAAAA,EAAAA,SAAAA,EAAAA,cAAAA,WAEAzD,IAAApB,EAAAA,UAAAsE,EAAAxD,WAAA+F,EAAAA,aAAAA,EAAAA,SAAAA,OAAAA,EACAzF,EAAAA,eD9CY4D,EC+CZiD,EAAAnF,cACAA,QAAAyC,QAAAA,EAAAuC,eAAAlI,EAAAiF,GAAA,aAAArC,KAAAM,EAAA+C,SAAA/C,EAAAyC,cAAA2C,WACAlD,IAAAA,EAAAA,UAAAA,EAAAA,SAAAA,IAAAA,EAAAA,cAAAA,EAAAA,UAAAA,EAAAA,WAAAA,EAAAA,eAAAA,EAAAA,SAAAA,OAAAA,EAAAA,CD9CYlC,EAAMyC,aAAe,ECkDjCZ,IAAAA,GAAAwD,IAAAA,EAAAA,cAAAxD,EACA7B,SAAAsF,QAAAA,GAAAA,IAAAA,IAAAA,IAAAA,EAAAA,YDhDYhH,QAAQpB,QAAQ+H,GAAKM,YCqDjC1D,SAAAA,YAAA2D,EAAAA,gBACA3D,EAAAA,aAAA,EACA2D,IDlDU3D,GCsDVA,kBAAAA,EAAA4D,SAAA,GAAAzF,EAAAyC,cDrDUzC,ECsDVsF,WDpDQ,IAAIE,GCuDZtI,EAAAsI,IDtDQ3D,GCwDR2D,KAAAE,WDvDUF,IACAG,ECwDV9D,WDvDY,GAAIA,EAAW4D,SAAU,CACvB,GAAI3I,EAAQiF,GAAI,CC2D9BF,EAAA4D,SAAAnD,KAAA,KAAAxF,EAAAiF,GAAAjF,YAEA+E,EAAAA,KAAA4D,gBAAA3I,EAAA+E,GAAAA,WACA,IAAA/E,GAAAkE,EAAAgE,eAAAlI,EAAAiF,GAAA,WAIA7E,IACA2E,EAAA3E,SAAA0I,SAAAC,OAAAhE,YAAAiE,EAAAA,GAAAA,2KAGAjE,EAAA4D,SAAAnD,KAAA,kBAAAxF,EAAAiJ,gBD7DclE,EAAW4D,SAASG,GAAG,YAAa/D,EAAWoC,cCgE7D+B,EAAAnE,WACAmE,GAAA9I,EAAA+I,IAAA,UAAApE,EAAAiE,YACAjE,GAAA4D,EAAA5D,GAAAA,UAAA4D,EAAAK,eD5Da,GAAG,GAER,IC+DRjE,GAAAA,EAAAiB,ID9DQjB,GAAWmE,KAAO,WCiE1BN,EAAAA,UAAAV,EAAAA,SAAAlI,IAAAiF,YAAAF,EAAAoC,cACA3F,EAAApB,UAEAgF,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YD/DepF,EAAQuE,YCoEvB6E,EAAArE,SAAAA,GAEA,IAAAqB,GAAAiD,EAAA3E,eAAAK,EAAAA,GAAAuE,WDlEU9H,SCmEVuD,QAAAmE,GAAAA,SDlEU9D,IACA8D,ICsEVK,GAAAxE,QACAA,GAAAyE,SAAAA,SAAApD,GACAA,EAAAiD,QAAA3E,EAAAG,QAAAE,EAAAuE,WACAvE,EAAAmE,OACA9C,EAAAiB,mBAMAjC,GAAAA,aDpDQ,OAlBAL,GCuERM,cAAAvF,SAAAmF,GACA7E,EAAAA,QAAAuC,EAAAkC,SDtEYE,ECuEZmE,OACA9C,EAAAd,oBDxDeP,ECqFf,QAAAwB,GAAAkD,GACAvG,EAAAuG,SAAAjI,EAAAwF,OAAAyC,EAAAtJ,MAAAsF,SAAAvC,EAAAsF,UDhFM,MADAkB,GCmFNC,SAAA/I,EDlFa8I,MAERrF,OCmFL,iBAAAoF,UAAAG,SAAApF,GDlFI,MAAO,UAASiF,EAAOG,EAAYpF,GACjC,MCqFNqF,IAAArI,QAAAwF,WAAAyC,EAAAtJ,MAEAS,EAAAmE,KAAAA,SAAAnE,GAEA,MAAA+I,GAAA,UAAAG,EAAAF,EAAApF,KAGAmF,EAAAI,UAAA7G,EAAA9C,EAAAoF,ODrFOqE,UC6FP7J,eAAAA,UAAAA,SAAAA,KAAAA,aAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GD5FI,GAAIY,GC6FRsC,EAAAA,QD5FI,QACE8G,SC6FNvI,MD5FMwI,QC6FNzI,UD5FMyB,KAAM,SAAkBC,EAAO9C,EAASoF,EAAMtE,GCgGpDd,EAAA8J,IAAAA,SACA1I,IAAAA,IACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAA,YAAAI,QAAAA,UAAAA,WAAAA,OAAAA,YAAAA,SAAAA,QAAAA,YAAAA,eAAAA,aAAAA,aAAAA,aAAAA,KAAAA,cAAAA,cAAAA,kBAAAA,SAAAA,GACAsI,QAAAvD,UAAA/E,EAAAuI,MAAAC,EAAAA,GAAAxI,EAAAyI,KD/FQ,ICiGRtK,GAAAkD,eDhGQ1B,SAAQC,SAAU,OAAQ,YAAa,YAAa,UAAY,SAASI,GACnEL,QAAQoF,UAAUpB,EAAK3D,KAASqI,EAAiBK,KAAK/E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KCuG/FL,QAAA6C,SAAA7C,eAAAxB,SAAAqE,eAAAA,SAAAzD,YAAAyD,SAAAA,GACA,GAAAC,GAAAtE,KAAAsE,EAAAA,OAAA1D,GAAAA,cAAA0D,EAAAA,MAAAA,EACAE,SAAAA,UAAAxE,EAAAwE,MAEAgG,EAAAA,GAAAhF,EAAAgF,MAAAA,EAAAA,OAGApK,EAAAoE,KAAAgG,iBAAApK,EAAAoE,KAAAA,eAAAA,MDrGQ,IAAIH,GAAS7C,QAAQoF,UAAU5G,EAAQqE,QAAUrE,EAAQqE,OAASzD,EAASyD,OCuGnFC,EAAAkG,EAAAA,OAAA5J,EAAA0D,MACAmG,EAAAA,EAAAC,YAAAF,EAAAA,WAGAG,EAAA5F,EAAAA,SAEAV,KAEAjE,GAAA,MAAAiE,EAAA,cDzGcG,IAAYgG,GAAa,IAAMhG,IC+G7CF,IAAAsG,GAAAH,cAAAI,ED5GQ,IC6GR3H,GAAA4H,EAAAF,GAEAH,EAAAA,EAAAvH,EAAAhC,EAAAf,ED1GQ,IAHKC,EC8GbuK,KAAAnE,sBAAAuE,EAAAA,aD7GU3K,EC8GVc,KAAAA,oBAAAwF,QD5GY1G,EAAQgL,aAAc,CACxB,GAAIJ,GAAiBH,EAAcI,OAAO,GAAGhI,QAAQ,OAAQ,IAAIA,QAAQ,UAAW,IAAIM,MCiHlGD,GAAA+H,iBAAAC,EAAAC,SAAAC,EAAAA,GAEAlI,EAAAmI,SAAAF,EAAAA,GAAAA,KAAAA,SAAAA,GACAV,EAAAa,OAAAA,GAIApK,EAAAqK,cDhHQrI,ECoHR+H,OAAAF,EAAAhE,QAAAzC,SAAAyG,EAAAA,GDnHU7H,ECoHVyH,YAAAI,EDnHUN,ECqHV/D,SAAAA,EAAAA,GAAAA,KAAAA,SAAAA,GDpHY,MAAI1G,GAAQuL,aAAeR,EAAOhE,QAAUoE,EAASpE,OAAS,MAC5D7F,GAAW4F,cAAc5F,EAAW+F,WAAWuE,UAAU,EAAGtK,EAAW+F,WAAWF,OAAS,KC6HzG0E,EAAAA,OAAAnH,IAAAyG,EAAAA,EAAAT,MAAA,EAAAhG,IACAqG,EAAAc,OAAAA,ODzHYvK,GAAWwF,eAGfxF,EAAWwK,YAAYC,KAAK,SAASC,GC8H7C,GAAAH,GAAAhB,EAAAgB,aAAAG,ED5HU,OAAIH,GCgId/E,EAGAlF,QAAApB,UAAAwL,IAAA,gBAAAA,GD/HmBA,ECkInBC,KD9HQ3K,ECgIRQ,QAAAmK,WACA,GAAAC,EAAA1L,SAAA2L,EAAAA,YACA,MAAA3L,GAAA4L,IAAAC,GAEA7L,IAAAA,GAAA8L,EAAAA,UAAAJ,EAAAK,aD/HcN,EAAqB,KAAVxG,EAAesF,EAAU7E,OAAOG,SAASZ,GAAOiD,MAAQpH,EAAW+F,UCmI5F/D,GAAA1B,QAAAkC,SAAAmI,GAAApB,EAAAgB,aAAAI,GAAAA,CACAzL,IAAAA,GAAAyL,EAAAA,EAAAO,WAAAvJ,QAAA,iBAAA,IAAA,GACA8H,EAAAA,EAAAA,GAAAA,eACA3K,EAAAA,EAAA,GAAAiM,YACAtB,GAAAA,IAAA3K,EAAAyE,aAAA,EAAA/C,EAAAA,EAAAyB,QDjIU/C,EAAQ,GAAG8L,kBAAkBJ,EAAIK,IAEnCjJ,EAAMmJ,IAAI,WAAY,WACpBjM,EAAQ+I,IAAI,WInTtB1I,GAAAkK,EAAA2B,UAIA1L,EAAAI,KACAH,EAAA,YJsTEW,QIjTF+K,OAAA,0BAAA,sBAAA,sCAAAvI,SAAA,WAAA,WJkTI,GIjTJwI,GAAAxL,KAAAJ,UACAb,UAAAA,UACAQ,YAAA,GACAkM,YAAAA,UACA1I,YAAA,UACAG,WAAA,EACAtB,QAAA,EACA8F,UAAA,MACAgE,YAAA,2BACAC,SAAA,GACAxI,eAAA,EACAyI,QAAAA,cACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,MAAAA,GJkTML,KIjTNM,GJkTM9I,MIjTN+I,EJkTMN,WAAW,EACXC,WAAW,EI/SjB7L,yBAAA,EAEA+L,0BAAA,EACAC,UACAC,SAAAzL,OAEA0L,QAAAC,GJiTInM,MI3SJoM,MAAAC,UAAAzH,aAAA0H,cAAArM,KAAAjB,iBAAAA,QAAAA,WAAAA,OAAAA,aAAAA,QAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GJ+SM,QIzSNA,GAAAuN,EAAAxG,GJgcQ,QIzORyG,KACAC,EAAAA,MAAAA,EAAA5N,YAAA,QAAA+F,GACApE,QAAAxB,UAAAmE,EAAAnE,SAAAkJ,QAAAlC,WAAAhH,EAAA0N,SACA1N,EAAA4F,OAAAA,GJkRQ,QIrNR+H,KAQA/H,GJ8MU1C,EAAMyD,MAAM3G,EAAQH,YAAc,QAAS+F,GIlNrDgI,QAAAA,UAAAA,EAAAA,SAAAA,QAAAA,WAAAA,EAAAA,SJoNY5N,EAAQ6N,OAAOjI,GIhN3BA,IAAAkI,EAAA1H,CACA,GAAAA,GAAA,UAAApG,EAAA+D,QAAAqC,MAAAgB,GAAAA,GAAAA,MACAwG,MJkSQ,QIvLRxN,KJwLU,GAAI2N,GIvLdjF,EAAA/E,QAAAwJ,MAAA,IJwLU/L,SAAQC,QIvLlBsC,EAAAA,SAAAA,GACA,UAAA3D,GAAAwE,gBAAAgB,EJwLcxF,EIvLdA,GAAA0I,EAAAlD,EAAAA,QJwLmC,WAAZ7B,IACJiK,EI/KnBC,UAAAA,IACAF,EAAAA,GAAA/N,QAAA+D,EAAAwJ,OACAnN,EAAA2N,GAAAA,OAAAhH,EAAAmH,SJ8KgB9N,EAAQ0I,GAAe,UAAZ/E,EAAsB,aAAe,QAAS6B,EAAShB,OAClExE,EAAQ0I,GAAe,UAAZ/E,EAAsB,aAAe,OAAQ6B,EAASuI,WAQzE,QIjLRF,KJmLU,IAAK,GADDF,GIjLd5E,EAAApF,QAAAwJ,MAAA,KACAnN,EAAAA,EAAA2D,OAAAmK,KAAA,CJkLY,GAAInK,GIjLhBA,EAAAA,EACA,WAAA3D,GAAAwE,gBAAAgB,EJkLcxF,EIjLdA,IAAA+I,EAAAvD,EAAAA,QJkLmC,WAAZ7B,IACJiK,EIzKnBI,UAAAA,IACApO,EAAA+D,IAAAA,QAAA6B,EAAAhB,OACAyJ,EAAAvF,IAAA,OAAAlD,EAAA0I,SJwKgBlO,EAAQ+I,IAAgB,UAAZpF,EAAsB,aAAe,QAAS6B,EAAShB,OACnExE,EAAQ+I,IAAgB,UAAZpF,EAAsB,aAAe,OAAQ6B,EAASuI,UInKlF,QAAAI,KACA,UAAAvO,EAAA+D,QACAsK,EAAAlF,GAAAA,QAAAvD,EAAAA,UAEAxF,EAAA+I,GAAAA,QAAAvD,EAAAA,eAIA,QAAA4I,KACAC,UAAAzO,EAAAyO,QAGA5F,EAAAM,IAAA,QAAAvD,EAAA0I,UAKAI,EAAA5F,IAAA,QAAAlD,EAAAsD,eAMA,QAAAyF,KACA9F,EAAA2F,WACAH,EAAAlF,GAAAA,QAAAyF,GACAF,EAAAvF,GAAAA,QAAAvD,EAAAA,MACA4I,GAAA,GJoKa,GAAG,GIhKhB,QAAAI,KACAC,IJmKYR,EAAWlF,IAAI,QAASyF,GI9JpCF,EAAAI,IAAAA,QAAAnG,EAAAA,MACAA,GAAA3I,GJkKQ,QI7JR+O,GAAAC,GACAH,EAAAI,kBJ+JQ,QIxJRC,GAAAA,GJyJUvG,EAAWA,GAAa3I,EAAQuM,QAAUnM,CIrJpD,IAAA6O,GAAAE,EAAAA,GAEAF,EAAAA,SAAAzN,EAAAA,QAAA2N,EAAAJ,EAAAA,wBAAAK,IJwJU,KAAK,GAAIF,KAAKH,GACZE,EAAKC,GAAKH,EAAOG,EIvJ7B,QAAAG,EAAAF,QAAAG,EAAA9N,QAAAQ,UAAAiN,GAAAM,MAAAA,EAAAC,MAAAC,EAAAA,KACAC,OAAAA,EAAAA,OAAAA,EAAAA,MACA,IAAAC,GAAAA,GAAAR,IAAAA,EAAAC,KAAAA,GAAAG,EAAAC,OAAAC,GAEAC,GJgKYA,OAAQE,EAASC,EAASC,gBAAgBlI,WAAaiI,EAASE,KAAKnI,UAAYe,EAASqH,KAAK,cAAgB,GI5J3HR,EAAAA,GACAL,MAAA5B,EAAAf,gBAAAyD,YAEAb,OAAA7B,EAAA2C,aACA,IJ8JU,OI7JVV,SAAAA,UAAAA,EAAAA,EAAAA,EAAAA,GJ+JQ,QI7JRF,GAAAa,EAAAhB,EAAAA,EAAAA,GJ8JU,GAAIK,GI5JdjC,EAAAf,EAAAe,MAAA,IJ8JU,QAAQA,EAAM,II7JxB,IAAA,QACAiC,GACAH,IAAAc,EAAAd,IAAAc,EAAAf,OAAAA,EAAAA,EAAAA,EACAE,KAAAa,EAAAb,KAAAa,EAAAhB,MAEA,MACA,KAAA,SACAK,GACAH,IAAAc,EAAAd,IAAAc,EAAAf,OACAE,KAAAa,EAAAb,KAAAc,EAAAA,MAAAA,EAAAA,EAAAA,EAEA,MACA,KAAA,OACAZ,GACAH,IAAAc,EAAAd,IAAAgB,EAAAA,OAAAA,EAAAA,EAAAA,EACAf,KAAAa,EAAAb,KAAAa,EAEA,MAGA,SACAX,GJgKcH,IAAKc,EAASd,IAAMgB,EI5JlC9C,KAAA4C,EAAAb,KAAA/B,EAAA4B,MAAA,EAAAiB,EAAA,GJiKU,II7JV7C,EAAA,GJ8JY,MAAOiC,EAET,II9JVF,QAAAE,EAAAA,IAAAW,WAAAA,EAAAb,GJ+JY,OI9JZ/B,EAAA,IJ+Ja,IAAK,OI9JlBiC,EAAAF,KAAAa,EAAAb,IACA,MJiKa,KI/Jb,QACAE,EAAAjC,KAAA4C,EAAAb,KAAAa,EAAAhB,MAAAiB,MAKAZ,IAAAW,SAAAd,EAAAc,IAAAd,UAAAA,EAAAA,GJiKY,OIhKZ9B,EAAA,IJiKa,IAAK,MIhKlBiC,EAAAH,IAAAc,EAAAd,IAAAgB,EAAAF,EAAAf,MACA,MJmKa,KAAK,SI/JlBI,EAAAA,IAAAA,EAAAA,IAUA,MAAAc,GJ+JQ,QI3JRC,GAAAD,EAAAA,GAEAd,GAAAA,GAAAH,EAAAA,GACAG,EAAAF,EAAAE,YAIAD,EAAAiB,EAAAA,aACAC,EAAAC,SAAAC,EAAAA,IAAAA,EAAAA,cAAAA,IACAtC,EAAAuC,SAAAA,EAAAA,IAAAA,EAAAA,eAAAA,GJwJcL,OIvJdlB,KAAAsB,EAAAtB,GJwJckB,MIvJdjB,KAAAqB,EAAArB,GJwJUE,EIvJVqB,IAAArB,EAAAH,IAAAyB,EJwJUtB,EAAOF,KAAOE,EAAOF,KAAOgB,EAC5Bf,EAAWiB,UAAUO,EAAKvP,QAAQQ,QAChCyO,MIvJZjB,SAAAmB,GAGAP,EAAAA,KACAC,IAAAA,KAAAA,MAAAU,EAAAC,KAAAA,KAEAxE,KAAAA,KAAAA,MAAAmE,EAAAN,MAAAA,KACAb,MAAAH,OAOAG,GAAAyB,EAEA,IAAAC,GAAAH,EAAAI,YACA3B,EAAA0B,EAAA5B,YAKAC,IAJA,QJ+Ic/C,GI/Id6D,IAAAjB,IACAI,EAAAH,IAAAA,EAAAA,IAAAA,EAAAA,IAGAE,8CAAAC,KAAAA,GAAAD,CAEA,GAAA2B,GAAAD,EAAAzE,EAAAgD,EAAAY,EAAAC,EAUA,IATAa,EAAAE,KACA5B,EAAA6B,MAAAA,EAAAD,KAGAE,EAAAA,KAAAD,EAAAA,IJ8IU9B,EAAWiB,UAAUO,EAAKvB,GIzIpC,wBAAAyB,KAAAzE,GAAA2D,CACA,GAAAe,GAAAA,aAAAA,KAAAA,GAAA7B,EAAA+B,EAAA,EAAAF,EAAA5B,KAAAH,EAAAiB,EAAA,EAAAc,EAAA7B,IAAAD,EAAAiB,EAAAf,EAAA8B,EAAA,cAAA,cJ6IYE,GAAaD,EAAYN,EAAIQ,GAAsBH,KAGvD,QI5IRI,GAAA1C,EAAAlJ,EAAA6L,EAAAA,GAEA,GAAAP,IACA7B,IAAAqC,EACApC,KAAAqC,EJ6IU,KI3IVT,EAAA7B,UAAAmC,MAAAA,EJ4IU,IAAII,GI3IdD,EAAAA,UAAAH,EAAAA,SAAAA,SAAAA,EACAN,EAAAM,EAAAnC,EAAAmC,UJ4IU,IAAI,aAAajH,KAAKiC,GAAY,CAChC,GAAIkF,GI3IhBvB,EAAAd,IAAAuC,EAAAJ,EAAA9B,OACAmC,EAAA1B,EAAAb,IAAAsC,EAAAA,EAAAA,OAAAA,CACAE,GAAAA,EAAAF,IACAV,EAAAW,IAAAA,EAAAL,IAAAA,EACAlC,EAAAkC,EAAAK,IAAAA,EAAAA,SJ4IcX,EI3Id7B,IAAAyC,EAAAN,IAAAA,EAAApC,OAAAuC,OJ6IiB,CACL,GAAIE,GAAiB1B,EAASb,KAAOsC,EIzIjDE,EAAAZ,EAAAA,KAAAA,EAAAA,CJ2IgBW,GAAiBL,EAAmBlC,KIxIpD4B,EAAAI,KAAAA,EAAAS,KAAAC,EACAzP,EAAAiP,EAAAX,QAEAoB,EAAArB,KAAAoB,EAAA1C,KAAAkC,EAAAO,MAAAA,GAMAvE,MAAAA,GJuIQ,QIpIRxN,GAAA4M,EAAAmF,EAAAC,GJqIU,GIpIVrD,GAAAA,EAAAA,yBAAAA,EAAAA,GJqIUsD,GAAOrB,IAAIoB,EAAe,OAAS,MAAO,IAAM,EAAId,EAAQa,GAAa,KAAKnB,IAAIoB,EAAe,MAAQ,OAAQ,IAEnH,QInIRzD,KJoIUf,aAAa0E,GACTtM,EAAS0D,UAA2B,OAAf+E,IIjInC8D,EAAAvF,WACAuF,IJoIgBnS,EAAQkE,UIhIxBmK,KJoIc8D,IACFA,EAASC,WI/HrBD,EAAAvM,MAMAyI,IAEAnL,EAAAuC,SJ4HY4I,EAAazI,EAAS+C,SAAW,MA5gBrC,GI1SRD,MAAAQ,EAAAqE,EAAA8E,SAAA7Q,QAAAQ,UAAApB,EAAAuE,GJ4SYkI,EI5SZzH,EAAA0M,SAAAhF,EAAArM,QAAAjB,GJ6SYkD,EAAQ0C,EAASE,OAAS9F,EAAQkD,OAASlD,EAAQkD,MAAMqP,QAAUC,EAAWD,MIvS1F3M,IAAAA,EAAA6M,OAAAzS,QAAAI,SAAAoF,EAAArB,OAAA,CAGA,GAAAnE,GAAA0M,EAAAvI,MAAAoJ,MAAA,KAAAmF,IAAAC,WACAzP,GAAAwJ,MAAAkG,EAAAC,OAAA7S,GJuSY0I,KAAM6E,EAAM,GInSxBrK,KAAA4P,EAAAA,IACA5P,EAAA6C,GJsSQH,EAAS6M,IAAMzS,EAAQiF,IAAM7E,EAAQoF,KAAK,OAAS,GAC/CxF,EAAQ0M,QInSpBxJ,EAAA6P,MAAAH,EAAAC,YAAA7S,EAAA0M,QJsSQxJ,EIpSR0C,YAAAsD,SAAAA,GJqSUhG,EAAM6C,aAAa,WACjBH,EAASoN,WAAWC,MAGxB/P,EIpSR0C,MAAA8C,WJqSUxF,EAAM6C,aAAa,WACjBH,EAASsD,UAGbhG,EIpSR0C,MAAAsN,WJqSUhQ,EAAM6C,aAAa,WACjBH,EAAS8C,UI9RrBxF,EAAAuK,QAAAA,WAGAvK,EAAAiQ,aAAAA,WACA9E,EAAAA,YAGAhB,EAAAlN,SAAA+C,EAAAnC,UAAAA,CJgSQ,II/RRoS,GACAvN,EJgSYuN,EI7RZvN,EAGAwN,EACApT,CJ6RQqN,GI5RR3E,KAAA1I,SAAAmE,GJ6RUgP,EI5RVnT,EJ6RU4F,EAASyN,SAEXzN,EIrRR5F,KAAAiE,WACAmP,EAAAA,OAAAhT,QAAAA,SAAAA,EAAAA,SJsRYJ,EIrRZmE,OACAiP,KAAAA,EAAApT,MJsRckJ,KIrRdlJ,EAAAA,QAKAsT,SAAAA,EAAAA,UAGAF,EAAA7G,EACAA,QAAA/K,UAAA+R,EAAAvT,WJkRYoT,EAAepT,EAAQiE,UI9QnCjE,EAAAiE,YACAf,EAAA6C,EAAA/F,EAAAiE,YJiRUqP,IACItT,EI/QduM,SJgRYvM,EI/QZ4F,OAAA8C,QAAAA,UAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,EAAAA,SJiRc1I,EAAQ0I,MACVxF,EAAM6C,aAAa,WACO,UAApB/F,EAAQ+D,QI5Q1B6B,EAAA0G,GAAA7D,QAMAmF,EAAAA,UJ8QQhI,EIpQR6H,QAAA,WACAQ,IJqQUL,IACA1K,EAAMkP,YAERxM,EInQR6H,MAAAA,WAKA7H,MJ+PU4H,cInQVrJ,GJoQUsJ,EAAa,KIhQvB7H,EAAA8C,OAAA1I,EAAAmE,MAAAuE,UAIAwJ,EAAA1Q,WAAAoF,WACA4M,OAAAxT,GAAA4F,EAAAA,QJiQa5F,EAAQmE,MAAMuE,OIrQ3B1I,EAAA6M,QJuQQjH,EIhQR6N,KAAAA,WACA,GAAAzT,EAAAiE,YAAA2B,EAAA0D,SAAA,CJiQUpG,EIhQVwQ,MAAAN,EAAAA,YAAAA,eAAAA,GACA5R,QAAA4R,UAAAO,EAAAA,eAAAnS,QAAAwF,WAAAhH,EAAAwT,eJiQYxT,EIhQZyT,aAAArT,EJkQU,IIhQVqT,GJiQcA,CACAzT,GIhQdiE,WACAyP,EAAAN,EJkQcK,EIjQdA,EAAArT,GAAAA,UJiQsBoB,QAAQpB,QAAQgT,EAAa,GAAGO,WI1PtD/N,OAKAyJ,EAAA,KAAAC,EAAAlP,GAAAwT,GAAAhG,IJ8PUuE,EI9PV0B,EAAA/N,OAAAyM,OJ+PUlE,EAAazI,EAAS+C,SAAWwK,EAAYlQ,KAAKkP,EAAU,SAAS2B,EAAe5Q,MI5P9FmL,EAAArO,KAEAqP,IAAArP,UAEAsP,KAAAtP,UAKA6Q,MAAA4C,OACAA,QAAAA,QJwPYI,WIvPZ,WJyPc7T,EAAQa,WAAWwN,EAAW0F,SAAS/T,EAAQa,WIrP7D+E,EAAA0D,MAAAA,EAAAA,SAAAtJ,EAAAc,YAAA,IAAAd,EAAA2M,MACApG,EAAArD,aAAAA,EAAAA,SAAAA,EAAAA,aAGA0C,EAKA6N,EAAAjS,MAAAwS,GJkPYN,EIhPZO,QAAA5F,GJkPUzI,EAAS0D,SAAWpG,EAAMoG,UAAW,EI/O/C/C,EAAArD,GAEAuD,EAAAyN,kBAEA1S,QAAA6M,QAAAA,OAAAuC,EJ+OYuD,EI/OZN,MAAAxF,EAAAqF,EAAAD,EAAAW,GAGAD,EAAAnU,MAAAkE,EAAAwP,EAAAD,GAAAtT,KAAAiU,GJgPU7N,EI9OVX,GJ+OUa,EAAM,WI7OhB2H,GAAAA,EAAAA,KJ+OcyF,WAAY,YI3O1B7T,EAAA4M,WACA6B,UAAAA,EAAAA,SJ8OgB7I,EAAS6C,QIzOzB2F,OAGApO,EAAA0N,WJ4OYe,MASJ7I,EIzOR6H,MAAAA,WJ4OU,MAFAD,cIzOVtE,GJ0OUuE,EAAa,MIxOvBzN,EAAAmE,OAAA+E,EAAAA,MAAAA,UAKAgJ,EAAApE,WAAAA,WACA,QAAAlI,GAEAA,EAAAA,QAEA5F,EAAAwB,MAAAoF,OJgOmBhB,EAASsD,OAQpB,IAAImL,GInOZA,CJqOQzO,GIjORkI,KAAAO,SAAAA,GAEAA,EAAAA,WJiOUnL,EI9NV1B,MAAAA,EAAAwS,YAAA,eAAApO,GACAuO,QAAAA,UAAA9F,EAAAA,eAAAV,QAAAA,WAAAA,EAAAA,eJ+NY3N,EI9NZsU,aAAA1O,GJgOUyO,EAAQE,EACRzG,EAAaO,EI5NvB/E,OAAA1D,IACAW,QAAArD,QAAAA,OAAAA,EAGAlD,EAAAkE,MAAAA,EAAAmK,GJ6Nc8F,EAAShG,MAAME,GAAYlO,KAAKwN,IAGpC/H,EAAS0D,SAAWpG,EAAMoG,UAAW,EACrC/C,EAAWrD,GIxNrBlD,EAAA2N,UAAAA,OAAAA,GACAzK,IAEAlD,EAAA6N,WAAAjI,OAAAA,GJ0NY+I,MAeJ/I,EIpNRA,OAAAhB,SAAAA,GJqNcwB,GACFA,EAAIgB,iBIjNhBiH,EAAA/E,SJoNY1D,EAASuI,QIhNrBnO,EAAA6M,SJqNQjH,EIjNR5F,MAAAgN,WJkNUqB,EAAW,GAAG5F,SAEhB7C,EI9MRyI,WAAA,SAAA4E,GAGAjT,EAAAwM,UAAAxM,GJ8MQ4F,EI5MR4O,YAAAC,SAAAlK,GAEAvK,EAAAwU,SAAAxH,GJ6MQpH,EAASsO,gBAAkB,WIvMnC7F,GAAAA,EAAAA,CAIA,GAAAqG,GAAAA,EAAA5F,UACA6F,EAAAtG,eACAuG,EAAAvG,EAAAA,KAAA2B,EAGApK,KAGA4G,EAAAgI,EAAA3R,QAAA4R,EAAA,KAAA7T,EAAA4L,WJmMU6B,EIjMVwG,SAAAA,EAAA/F,UJkMU,IIhMV4F,GAAAI,IACAtI,EAAAA,EAAAsI,KAAAA,eJiMcF,EIhMdvG,EAAAyG,KAAAA,eJkMU,IADAlP,EIhMV4G,UAAAsI,EAAAA,UAAAjS,EAAA7C,EAAAgN,SAAAC,UAAAjN,EAAAgN,UJiMcwH,EAAW,CI9LzB,GAAAM,GAAAA,EACAtI,EAAAA,EAAA5G,EAAA6L,UJgMgB,UI/LhBlH,KAAAuK,IAAAA,EAAAJ,OAAA7D,EAAA8D,EAAAE,OACArI,EAAAA,EAAA3J,QAAA,SAAA,OJgMuB,MAAM0H,KAAKuK,IAAsBJ,EAAgBrF,IAAMuF,EAAYC,EAAiBxF,MI7L3GhB,EAAA0G,EAAAD,QAAAA,MAAAf,WAIAiB,OAAAA,KAAAC,IAAAzI,EAAAkI,KAAAA,EAAAC,EAAAC,KACAM,EAAAF,EAAAA,QAAAxI,OAAAA,SJ6LuB,QAAQjC,KAAKuK,IAAsBJ,EAAgB7D,MAAQ8D,EAAWE,EAAiB1F,QI1L9GvJ,EAAA0I,EAAAzL,QAAAuD,QAAAA,SAEAR,EAAAsD,YAAAA,GAAAA,SAAAA,GJ6LU,GAAI8L,GAAcC,EAAoBzI,EAAWkI,EAAiBC,EAAUC,EAC5EM,GAAeF,EAAaxI,KAE9B5G,EI1LRQ,SAAA,SAAAA,GACAmO,KAAAnU,EAAAA,OAAAmU,EAAAA,WACAnO,EAAAiB,OJ2LYjB,EAAIiB,oBAGRzB,EIzLR5F,cAAA8M,SAAAA,GAAA1F,KAAAhB,EAAAgB,QJ2LYhH,EAAQ,GAAGmU,OI1LvBnO,EAAApG,oBJ8LQ4F,EI5LRA,yBAAA,SAAAQ,GACAhG,EAAA0M,yBJ6LY1G,EAAIgB,iBAEFpH,EAAQ+M,0BACV3G,EAAIiB,kBIvLhB0G,EAAAA,SACAvM,EAAAC,GAAAA,OJ2LYrB,EIzLZA,GAAA0I,QJ2OQ,IAAI0F,IAAyB,CAuM7B,OAAO5I,GAET,QAASW,GAAWrD,GInH1B2G,EAAAA,SAAA3G,EAAAwC,OAAAxC,EAAAwC,MAAAD,SAAAvC,EAAAsF,UAGAwB,QAAAA,GAAAmL,EAAA/U,GACA8C,MAAA1B,SAAApB,SAAAA,GAAAyP,GAAAuF,iBAAAD,IJtaM,GI3SNE,GAAAzP,6BAAA1C,KAAAlD,EAAAkD,UAAAqP,WAGAvE,EAAA7J,eAAAxC,GAAAA,UAAAwC,EACAuK,EAAAnB,QAAAvN,QAAAmE,EAAA0L,SJk0BM,OIlHNyF,OJoHKzL,UIlHL3G,aAAAA,UAAAA,YAAAA,OAAAA,SAAAA,WAAAA,QAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GJmHI,OACE8G,SInHNvI,MJoHMyB,OInHN,EJoHMD,KAAM,SAAkBC,EAAO9C,EAASoF,EAAM+P,GIhHpD,GAAArL,GACA1I,GACA0B,MAAA1B,EJmHQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,gBAAiB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,oBAAqB,OAAQ,cAAe,MAAQ,SAASI,GACtNL,QAAQoF,UAAUpB,EAAK3D,MAAO7B,EAAQ6B,GAAO2D,EAAK3D,KAExD,II/GRqI,GAAArI,eJgHQL,SI/GRA,SAAAoF,OAAApB,aAAA,SAAA3D,GACA7B,QAAA6B,UAAAqB,EAAAsS,KAAArL,EAAAA,KAAAA,EAAAA,MJgHYnK,EAAQ6B,IAAO,KI1G3BL,QAAAA,SAAAoF,eAAA6O,SAAA,eAAA,UAAA,SAAA5T,GACA,GAAAqI,GAAAA,KAAAA,EAAAK,OAAAkL,GAAAA,cAAA5T,EAAAyI,MAAA,EACAtK,SAAAuM,UAAA/G,EAAA2E,MJ8GYnK,EI7GZ6B,GAAAqB,EAAAsS,MAAAhQ,EAAA2E,MJgHQ,IAAIsL,GAAarV,EAAQoF,KAAK,cIzGtChE,SAAAkU,UAAAA,KACAxS,EAAAqH,KAAAkL,GJ2GYzV,EAAQuM,QAAS,EItG7BvM,EAAAwB,OAAAoF,GAGA1D,EAAA1B,eAAA4J,WJyGUlI,EIxGVuD,MAAA,IJ0GQjB,EAAKmQ,SAAS,QAAS,SAASxK,GAC9B,GAAI3J,QAAQoF,UAAUuE,KAAcjI,EAAMwS,eAAe,SAAU,CACjE,GAAItK,GAAWlI,EAAMwJ,KACrBxJ,GAAMwJ,MAAQkG,EAAKC,YAAY1H,GItG3CwK,QAAA/O,UAAAwE,IACAD,EAAAA,WACAjC,GAAAA,EAAAA,uBJ4GQ1D,EIrGRmQ,SAAAnU,WAAA2J,SAAAA,GACA3J,GAAAQ,EAAAkB,UJsGYoS,EIrGZpM,SAGA1D,EAAAhE,WJsGU0B,EIrGVuD,OAAAjB,EAAAoQ,UAAA,SAAAzK,EAAAC,GACA5J,QAAA8T,SAAAA,GJsGc9T,QAAQQ,OAAOkB,EAAOiI,GInGpCjI,EAAAwJ,MAAAvB,EAIA3F,QAAAqQ,UAAAzK,IACAlI,EAAA+H,WACAqK,GAAA9T,EAAAoF,sBJsGa,GAEDpB,EInGZ8P,QJoGUpS,EAAM+H,OAAOzF,EAAKqQ,OAAQ,SAAS1K,EAAUC,GACtCkK,GAAY9T,QAAQoF,UAAUuE,KAC/B3J,QAAQG,SAASwJ,KAAWA,IAAaA,EAAS2K,MAAM,wBIhGxEtQ,KAAA,EACAtC,EAAA+H,OAGAqK,EAAA9T,UJoGYgE,EIhGZ8P,WJiGUpS,EAAM+H,OAAOzF,EAAKqH,UAAW,SAAS1B,EAAUC,GACzCkK,GAAY9T,QAAQoF,UAAUuE,KAC/B3J,QAAQG,SAASwJ,KAAWA,IAAaA,EAAS2K,MAAM,0BI7FxEtQ,KAAA,EACAtC,EAAA+H,YAAA+B,GAEAsI,EAAAS,YAAA5K,MAQAjI,EAAAmJ,UACAnJ,EAAAoS,OAAAA,EAAAA,SAAAhJ,SAAAA,GACAtM,GAAAwB,QAAAoF,UAAAuE,IACAmK,EAAAS,YAAA5K,KJ6FQmK,EAAU1P,EAASxF,EAASJ,GAC5BkD,EAAMmJ,IAAI,WAAY,WKn9B9B5L,GAAA6U,EAAAhJ,UAIA1L,EAAAI,KACAH,EAAA,YLs9BEW,QK/8BFuC,OAAA,6BAAA,oCAAA,uCAAA,2BAAAC,SAAA,cAAA,WLg9BI,GK/8BJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,OACAuB,YAAA,aAEA6R,UAAA,cACAC,YAAA,iCACAC,QAAAA,QACAC,WAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAC,EACAzP,SAAA,OACA0P,WAAA,YACAC,SAAAA,KACAC,gBAAA,KACAC,WAAAA,EACAC,UAAAL,EAAAA,GACAM,UAAAN,EAAAA,GACAO,OAAAA,EL+8BMN,SAAU,EK58BhBzV,WAAA,EAEA2V,WAAAtB,EACAuB,cAAA,EACAC,OAAAjW,iCL68BMkW,SK58BNlW,mCL68BMmW,cAAe,QAEjB/V,MK18BJoM,MAAA4J,UAAApR,YAAAxF,aAAA4B,OAAApB,iBAAAuE,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GLg9BM,QKz8BN8R,GAAAC,EAAAA,EAAAC,GAcA,QAAAC,GAAAA,GACAC,GAAAA,GAAAC,IAAAC,EAAAA,UACAC,OAAAA,IAAAF,MAAAA,KAAAC,MAAAA,EAAAA,UAAAE,GAAAA,GLirCQ,QKt5BRC,GAAAxR,EAAAA,GLu5BU,GAAIyR,GKt5BdC,EAAAxX,CLu5BU,IKt5BVA,EAAA,GAAA8L,gBAAA0L,CLu5BY,GAAIF,GKt5BhBlW,EAAA6G,GAAAA,iBACAjI,GAAAyX,UAAA9L,GACA3L,EAAA0X,UAAA7L,YAAA0L,GLu5BYD,EAASK,QAAQ,YAAaJ,GAC9BD,EAASxR,aKp5BrB8R,GAAAA,GAAAA,kBACA5X,EAAA,GAAAqI,kBAAAA,EAAAA,GLs5BqBjH,QAAQ6G,YAAYjI,EAAQ,GAAG2L,kBKj5BpDkM,EAAAjB,GAAAA,eAAA3D,EACA2D,EAAA3D,GAAAA,aAAAsE,GLq5BQ,QKl5BRvX,KLm5BUA,EKl5BV,GAAAqI,QL2oBQ,GAAIuO,GAAcpR,EAASxF,EAASoB,QAAQQ,UAAWpB,EAAUuE,IKv8BzEH,EAAAkT,EAAAC,MAEAnY,EAAAgX,EAAAhX,SACAkD,EAAA8T,EAAAoB,OLw8BYC,EAAOrY,EAAQqY,KKn8B3BC,EAAAA,SAAAC,EAAApB,EAAAhB,GACA,MAAAqC,GAAAxY,WAAA4W,EAAAsB,EAAAA,EAAA/B,IAMAsC,EAAAC,EACAC,EAAArB,EAAAsB,aAAAA,EAAAA,GAAAA,OAAAA,GAAAA,MLq8BYtB,EAAYpW,EAAW2X,YAAcL,EKl8BjDrB,GAEAE,KAAAyB,EAAAC,WACAvB,SAAAwB,EAAAD,WAAAC,GACAC,OAAAC,EAAAH,aACAN,OAAAU,EAAAJ,aACAJ,YAAAS,EAAAL,mBAGA7V,EAAAmW,EAAAxC,kBAAAA,EAAAA,WAAAA,GACA3T,EAAAlD,EAAA8W,YAAAA,GAIA5T,EAAA6V,EAAA1T,cAAAA,GACA2R,EAAA9Q,EAAAb,cAAAA,GL+7BY8T,EAAgBJ,EAAeI,cAAchC,GK77BzDjU,EAAAoW,EAAA5X,YAAA2D,GACA2R,EAAAA,EAAAtV,OAAA2D,EL+7BQnC,GAAMmW,QAAUrZ,EAAQ6W,OK77BhC3T,EAAAqW,UAAAA,EAAAzC,SL+7BQ5T,EK97BR8T,QAAAwC,SAAAA,EAAAjB,GL+7BUvB,EAAY9Q,OAAOqS,EAAMlT,IAE3BnC,EK17BR1B,WAAAiY,SAAAlB,EAAAhI,GL27BUyG,EK17BVA,WAAAuB,EAAAA,IL47BQrV,EK17BRmU,gBAAAE,SAAAA,GL27BUP,EK17BVuB,eAAAmB,IL47BQ1C,EK17BR2B,OAAAJ,SAAAK,GL27BcpX,QAAQiY,OAAOlB,KAAUhI,MAAMgI,EAAKoB,YKz7BlD3C,EAAA4C,MAAAA,EL27BYpY,QK17BZQ,OAAAgV,GACAA,KAAAA,EAAA4C,WL27BcX,OAAQV,EAAKmB,aACbjB,OAAQF,EAAKG,aKx7B3B1B,YAAA9Q,EAAA0S,oBAGA1X,EAAA2X,ULy7BsB7B,EAAY6C,UKt7BlC7C,EAAAyC,UL07BQzC,EKr7BR9V,OAAAwF,SAAAA,EAAAA,EAAAA,KACA1G,EAAAqW,YAAAyD,MAAA5Y,EAAA2X,WAAAc,cACA9Q,EAAAgQ,WAAA,UAAA7Y,EAAAwY,YAAA,GAAAuB,MAAA,GAAAA,MAAA,KAAA,EAAA,ILu7BevY,QAAQiY,OAAOlB,KAAOA,EAAO,GAAIwB,MAAKxB,IAC7B,IAAVlT,EAAanE,EAAW2X,WAAWmB,SAASzB,EAAKhB,YAAgC,IAAVlS,EAAanE,EAAW2X,WAAWoB,WAAW1B,EAAKmB,cAAkC,IAAVrU,GAAanE,EAAW2X,WAAWqB,WAAW3B,EAAKG,cACzMxX,EAAW4F,cAActF,QAAQ2Y,KAAKjZ,EAAW2X,aKn7B3D7B,EAAAwC,UACAxZ,EAAAkB,YAAA2X,GACAhQ,EAAA,WLq7BcmO,EAAY9N,MAAK,MAIvB8N,EKp7BR9V,eAAAwF,SAAAA,GLq7BU,GAAKxF,EAAW2X,aAActI,MAAMrP,EAAW2X,WAAWc,WAA1D,CK76BV,GAAAS,IAAAA,GAAAA,EAAA1J,YAAA1Q,UACAkB,GAAAmZ,WAAAA,SAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IACAnZ,EAAAmW,cAAAA,QAAAA,KAAAA,EAAAA,aACAnW,EAAAwF,YLk7BQsQ,EKh7BRrL,OAAAA,WLi7BU,GKh7BV4M,GAGA+B,EAFAhS,EAAA4O,EAAAA,SAAA4B,SAAAA,EAAAA,OAAAA,EAAAA,IACAjN,ILk7BU,KAAKqC,EAAI,EAAGA,EAAIlO,EAAQ+G,OAAQmH,IAC9BmJ,EAAO,GAAI0C,MAAK,KAAM,EAAG,EAAG3C,EAASC,MAAQ+C,EAAWlM,GAAKlO,EAAQyW,UK/6BjF4D,EAAAE,MACAtB,KAAAA,EACA3Q,MAAA4O,EAAAlX,EAAA+G,GACAkS,SAAAjC,EAAAwD,OAAApD,EAAA6B,YAAAmB,EAAAlM,GACAqM,SAAA5O,EAAAA,YAAAA,EAAAA,ILm7BU,IK/6BV2O,GADAzO,ILk7BU,KAAKqC,EAAI,EAAGA,EAAIlO,EAAQ+G,OAAQmH,IAC9B+K,EAAS,GAAIc,MAAK,KAAM,EAAG,EAAG,EAAG3C,EAAS6B,QAAUmB,EAAWlM,GAAKlO,EAAQ0W,YK/6BxF6D,EAAAE,MACAhC,KAAAA,EACAnQ,MAAA4O,EAAAlX,EAAA+G,GACA0R,SAAAzB,EAAAwD,OAAAxD,EAAAyB,YAAA2B,EAAAA,GACAK,SAAA9O,EAAAA,YAAAA,EAAAA,ILm7BU,IK/6BV2O,GADAzO,ILk7BU,KAAKqC,EAAI,EAAGA,EAAIlO,EAAQ+G,OAAQmH,IAC9BuK,EAAS,GAAIsB,MAAK,KAAM,EAAG,EAAG,EAAG,EAAG3C,EAASqB,QAAU2B,EAAWlM,GAAKlO,EAAQ2W,YK96B3F8D,EAAAC,MACAnC,KAAAE,EACAnQ,MAAA8Q,EAAAX,EAAAU,GACAuB,SAAA/O,EAAA4O,OAAArM,EAAAA,YAAAA,EAAAA,GLg7BcoM,SK/6BdtD,EAAA2D,YAAAlC,EAAA,ILk7BU,IAAIiC,KK96BdxX,KAAAA,EAAAwX,EAAAA,EAAAA,EAAAA,OAAAA,IACAtB,EACAlW,EAAA0X,MAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,KAEA1X,EAAA8V,MAAAA,EAAAA,GAAAA,EAAAA,IAIAhC,GAAAA,KAAA6D,EACA3X,EAAA8T,YAAAwD,EL+6BUtX,EK76BV0X,OAAArD,EL86BUrU,EAAM4X,MK76BhBzV,EAAAmV,OAAAH,EAAAD,GAAA7B,MAAAhB,WAAA,GL86BUrU,EK76BV8V,cAAAU,EL86BU1C,EK76BV3R,UAAA,GL+6BQ2R,EAAY6D,YAAc,SAAStC,EAAMlT,GACvC,MAAK2R,GAAYwD,MAAwC,IAAVnV,EK36BzD2R,EAAA2D,aAAA3D,EAAA3R,MAAAA,WACA0V,IAAAA,EACA1V,EAAAqU,eAAA1C,EAAAwD,MAAAd,aACAnB,IAAAwC,EACAxC,EAAAlT,eAAA2R,EAAAwD,MAAA9B,aADAqC,QLw6ByC,GAQjC/D,EK56BR+D,YAAApB,SAAAA,EAAAvC,GL66BU,GAAI2D,EAQJ,OKn7BVA,KAAA1V,EL66BY0V,EAAexC,EAAKoB,UAA8B,IAAlBvC,EAAS6B,OAAiC,IAAlB7B,EAASqB,OK16B7E,IAAAuC,EACAD,EAAAhE,EAAAA,UAAA,KAAAK,EAAAC,KAAA,IAAAD,EAAAqB,OACAwC,IAAAjE,IL46BY+D,EK36BZxC,EAAAoB,UAAA,KAAAvC,EAAAC,KAAA,IAAAD,EAAA6B,QL66BiB8B,EAAiC,EAAlB/a,EAAQsW,SAAeyE,EAAiC,EAAlB/a,EAAQuW,SKx6B9ES,EAAAA,aAAAiE,SAAAvZ,EAAA2D,GACA2R,WAAAkE,EAAAA,cACAlE,EAAAkE,eAAA3D,EAAAA,GAEAP,EAAAkE,WAAAxC,EAAAA,IL66BQ1B,EK16BRiE,eAAA,SAAAvZ,EAAA2D,GL26BU,GK16BV6V,GAAAjB,GAAAA,MAAAM,EAAA7J,OAAA1Q,GL26Bcqa,EK16BdhV,EAAAA,WACA6V,EAAAhB,EAAAO,aL26BcA,EAAUS,EAAQxC,YKz6BhCxS,KAAA8Q,EL26BYkE,EAAQlB,SAASK,EAAQ3J,SAAS1Q,EAAQyW,SAAU,IAAM/U,GKx6BtE4X,IAAAA,EACA4B,EAAAC,WAAAA,EAAAA,SAAAA,EAAAA,WAAAA,IAAAA,GACA,IAAA9V,GACA8V,EAAAA,WAAApB,EAAArJ,SAAA0G,EAAAC,WAAArX,IAAAA,GL26BUgX,EKz6BVmE,OAAAA,EAAA5D,GAAAA,IL26BQP,EKz6BRsC,WAAA,SAAA5X,EAAA2D,GL06BU,GKz6BV8V,EACAnZ,KAAAR,GL06BY2Z,EKz6BZA,GAAAA,MAAAzB,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,QL06BYlY,QAAQQ,OAAOoV,GACbC,KKz6Bd8D,EAAA5D,cAEAH,IAAApV,GL06BYmZ,EKz6BZA,GAAAA,MAAAzC,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAAAA,WAAAA,EAAAA,QL06BYlX,QAAQQ,OAAOoV,GACb6B,OAAQkC,EAAWzB,gBAEF,IAAVrU,IKv6BrB2R,EAAA7P,GAAAA,MAAAA,KAAA,EAAA,EAAAf,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAAAA,YAEA5E,QAAA+K,OAAA6O,GACA/T,OAAAA,EAAAA,gBL06BU2P,EKt6BVqE,ULw6BQrE,EAAY7P,aAAe,SAASf,GAGlC,GKx6BV,UAAAiV,EAAAA,OAAAC,SAAAA,eAAAlV,EAAAgB,iBLu6BUhB,EAAIiB,kBACA2G,EAAS,CKp6BvBgJ,GAAAA,GAAAhO,QAAA5I,QAAAgG,EAAAA,OACAA,YAAAiV,EAAA,GAAAD,SAAA7Q,gBACAnD,EAAAA,EAAAA,UAIAiU,EAAArT,eAAA,WLs6BQgP,EAAYhO,WAAa,SAAS5C,GKh6B1C,GAAA8U,mBAAAlE,KAAAA,EAAAA,WAAAwD,EAAAA,WAAAA,EAAAA,OAAA,CAGA,GAFApU,EAAAiU,iBACAjU,EAAAmV,kBACAL,KAAAX,EAAAA,QAEA,WADAvD,GAAAwE,MAAAA,EAGA,IAAAC,GAAAA,GAAA1B,MAAA/C,EAAAwD,OACAkB,EAAAA,EAAAnE,WACAoE,EAAAvC,EAAAA,EAAAwB,GAAA7T,OAGA2U,EAAAA,EAAAhC,aACA8B,EAAAxT,EAAAsQ,EAAAA,GAAAA,OLg6BcmC,EAAUS,EAAQxC,aK35BhCkD,EAAA1E,EAAAqE,EAAAA,GAAAA,OACAM,EAAA,EACAzV,EAAA4B,UAAA6T,KAAAzV,EAAA4B,SACA5B,EAAA4B,EAAA6T,EAAA7T,EAAA,EAAA4S,CACAkB,KACAxD,KAAAyD,EAAAA,QAAAzD,EAAAA,EAAAc,EAAAd,EAAAA,EAAAA,EAAAc,EAAAA,KAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GL85BU,IK55BV8B,IAAAb,EAAAA,GAEAkB,EAAAA,CACA,MAAAK,EAAAA,UAAAL,EAAAA,IACAjD,KL25BclS,EK35Bd4B,UAAAsQ,EAAA,EL45BU,IK35BV4C,GAAAW,IAAA5B,GAAAvJ,EAEA8K,EAAAN,IAAAM,IAAAtC,GAAAnS,IAAAA,GAAAA,CACAwU,KAAAK,GL25BYV,EK15BZlB,SAAA8B,EAAAD,EAAAnL,SAAA1Q,EAAAyW,SAAA,KACAyE,EAAAhB,EAAAO,EAAAoB,GAAA7b,OAEAgc,GAAA9E,EAAAA,IACAqE,IAAAK,GL05BYV,EKz5BZjB,WAAA8B,EAAAF,EAAAnL,SAAA1Q,EAAA0W,WAAA,KACA8E,EAAAE,EAAA1E,EAAAwC,GAAAA,OACAoC,GAAAL,EAAAE,EAAAA,IL05BqBK,GKx5BrB9E,EAAAA,WAAAkE,EAAA5C,EAAAA,SAAAtY,EAAA2W,WAAA,KACAsF,EAAAL,EAAAV,EAAAU,GAAA7U,OACA/B,GAAAwD,EAAAA,EAAAA,EAAAA,EAAAA,IL05BqBuT,IKr5BrBE,GAAAA,EAAAlV,iBACA6U,GAAA7U,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,ILw5BUiQ,EKt5BVU,OAAAtX,EAAA8b,GAAAA,GLu5BUD,EKt5BVpE,EAAA,GAAA+D,EAAA,ILu5BU5W,EKt5BV8S,WL06BQ,IKl5BR1X,GAAA4P,EAAAqD,ILm5BQ2D,GKl5BRxR,KAAA,WLm5BU,MKl5BVpF,IAAAJ,EAAAgY,WLm5BY5X,EAAQ4P,KAAK,OAAQ,YKj5BjCiI,GAAAA,IAAAA,qBAAAA,eAGAkE,IACAnF,EAAA1K,KAAAA,OAAA,QACAlM,EAAAiV,KAAAA,WAAAW,QACA5V,EAAA+I,GAAAA,QAAA6O,QAEAmE,MAGA,IAAAC,GAAApF,EAAAtO,OACAsO,GAAAtO,QAAA,WACA2M,GAAAjV,EAAAoF,WACA4W,EAAAA,IAAAA,QAAAA,GLk5BUD,IAEF,IAAIC,GK94BZhc,EAAAA,IL+4BQ4W,GAAYtO,KAAO,YK74B3BsF,GAAA5N,EAAAoF,KAAA,aAAApF,EAAAoF,KAAA,cL+4BU4W,IK54BVvT,EAAAwT,WACArF,EAAArO,UAAA4L,EAAAA,SAAAA,GAAAA,EAAAA,aAAAA,YAAAA,EAAAA,cACAyC,EAAAA,UACAA,GAAArO,EAAAA,GAAAqO,UAAArO,EAAAqF,aAEA,GAAA5N,IL+4BQ,IK74BRic,GAAA9H,EAAAA,IAkBAc,OL43BQ2B,GAAY9N,KAAO,SAASqL,GK34BpCyC,EAAAA,WL64BcA,EAAYrO,UAAUqO,EAAYrO,SAASQ,IAAI6E,EAAU,aAAe,YAAagJ,EAAY7P,cKz4B/G8P,EAAAA,UACAA,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YAOApN,EAAA0K,KAGAc,EL6kBM,GK18BNA,GAAArQ,6BAAA9B,KAAAA,EAAAA,UAAAA,WACA8K,EAAAhO,eAAAqS,GAAAA,UAAAA,CAgYApI,OA/XArJ,GAAAoW,OAEApW,EAAAyX,KAAArY,EAAAqY,oBA4XArO,EAAApJ,SAAAA,EACAqJ,MLq4BKJ,UKj4BL7J,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GLk4BI,GAAIY,GKj4BRsC,EAAAA,SLk4BQmS,EAAW,6BAA6B9K,KAAK+R,EAAQC,UAAUC,UACnE,QACExS,SKj4BNxI,MLk4BMyI,QAAS,UACThH,KK/3BNiH,SAAAA,EAAA9J,EAAAoF,EAAAtE,GLo7BQ,QK/2BRA,GAAAub,GAEA,GAAAC,QAAAA,OAAAC,GAAA,CL+2BU,GK92BVC,GAAArM,MAAAvQ,EAAAsW,UAAA,GAAAyD,MAAA4C,EAAAhD,WAAAkD,YAAA,KAAA,EAAA,IAAA7c,EAAAsW,QL+2BcmG,EAAalM,MAAMvQ,EAAQuW,UAAY,GAAIwD,MAAK4C,EAAWhD,WAAWkD,YAAY,KAAM,EAAG,IAAM7c,EAAQuW,QK72BvHrV,EAAA2X,GAAA8D,CL+2BUzb,GAAW4b,aAAa,OAAQJ,GK32B1Cxb,EAAA6b,aAAAC,MAAAJ,GAEA1b,EAAAqX,aAAAA,MAAAA,GAEA0E,IL62BU/b,EAAW2X,WAAa8D,IA+C1B,QAASO,KACP,OAAQhc,EAAW2X,YAActI,MAAMrP,EAAW2X,WAAWc,WAAa,GAAKzC,EAAWhW,EAAW2X,WAAY7Y,EAAQkW,YK9+BnI1U,GAAAA,IACA0B,MAAA1B,ELi4BQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,WAAY,OAAQ,YAAa,YAAa,WAAY,aAAc,WAAY,kBAAmB,YAAa,WAAY,aAAc,aAAc,SAAU,gBAAiB,SAAU,WAAY,eAAgB,KAAM,cAAe,cAAe,eAAiB,SAASI,GAC9YL,QAAQoF,UAAUpB,EAAK3D,MAAO7B,EAAQ6B,GAAO2D,EAAK3D,KAExD,IK73BRqI,GAAArI,eL83BQL,SK73BRA,SAAAoF,OAAApB,YAAA,YAAA,YAAA,gBAAA,SAAA3D,GACA7B,QAAA6B,UAAAqB,EAAAsS,KAAArL,EAAAA,KAAAA,EAAAA,ML83BYnK,EAAQ6B,IAAO,KKx3B3BL,QAAA2b,SAAAnG,eAAA5W,SAAAc,eAAAlB,UAAAA,SAAAA,GACAA,GAAAA,GAAAmd,KAAA9K,EAAAA,OAAAA,GAAAA,cAAAA,EAAAA,MAAAA,EAEAgG,SAAArY,UAAAqY,EAAAA,MACAnB,EAAAA,GAAAhU,EAAAsS,MAAA+C,EAAApB,OAKA3R,IAAAxF,EAAAgW,WAAApV,EAAAoV,aAAAhW,EAAAkW,WAAA,QLy3BQ,IKx3BRhT,GAAAsC,EAAApF,EAAA+K,EAAAC,ELy3BQpL,GKx3BRmd,EAAAA,QLy3BQ,IKx3BR9E,GAAA7W,EAAAG,KACAuV,EAAA/L,SAAAoN,EAAApB,EAAAhB,GLy3BU,MKx3BVgH,GAAAzU,WAAAA,EAAAA,EAAAA,EAAAA,GL03BYlD,GKx3BZ2X,QLy3BUja,EAAM+H,OAAOzF,EAAKqQ,OAAQ,SAAS1K,EAAUC,GACtC+R,GAAe3b,QAAQoF,UAAUuE,KAClC3J,QAAQG,SAASwJ,KAAWA,IAAaA,EAAS2K,MAAM,2BKr3BxEsH,KAAAC,EACAlG,EAAAnX,OLw3Bcmd,EAAWjU,SAIjB,IAAIkU,GKn3BZ/K,GLo3BU8E,OKn3BVnX,EAAAmd,WLo3BU9E,KKn3BViF,GLq3BQ9b,SAAQC,SAAU,UAAW,WAAa,SAASI,GAC7CL,QAAQoF,UAAUpB,EAAK3D,KKh3BrCqB,EAAA+H,SAAAC,EAAAA,SAAAC,GAEAgS,EAAA3W,SAAAtF,GAAA2X,EAAAA,oBAAAA,EAAAA,GACAtI,MAAA4M,EAAA9K,SAAAxQ,KAAAsb,EAAAvD,SAEA0D,EAAAA,EAAAX,gBLm3BQzZ,EK/2BRwZ,OAAAA,EAAAE,QAAAA,SAAAH,EAAAA,GACAvb,EAAA4b,OAAAA,EAAAjE,cACA3X,GL63BQA,EKv2BRyb,SAAAA,QAAAA,SAAAA,GLw2BU,GKv2BVzb,ELw2BU,KKr2BV+b,EAEAK,MLo2BYpc,GAAW4b,aAAa,QAAQ,GKp2B5CQ,ILu2BU,IKp2BV/E,GAAA6E,QAAAG,OAAAA,GAAAZ,EAAA3c,EAAAmW,MAAA8G,EAAA/b,EAAA2X,WLq2BU,QKp2BV8D,GAAAzF,MAAAqB,EAAAnC,YLq2BYlV,EAAW4b,aAAa,QAAQ,GKn2B5CM,ILs2BUE,EKp2BV3D,GACA1D,WLo2BcjW,EKp2BdA,UACAuY,EAAAA,EAAAoB,qBAAAgD,EAAA3c,EAAAmW,UAAA,GACAe,EAAAjB,EAAAA,EAAAG,iBAAApW,EAAAkW,cLs2BUqC,EAAO6E,EAAWG,qBAAqBrc,EAAW2X,WAAY7Y,EAAQmW,UAAU,GKn2B1FoC,WAAAvY,EAAA+Z,SLq2BmBxB,EAAKoB,UKj2BxB,SAAAjO,EAAAA,SAEA6M,EAAAA,UAAAA,IACA3M,QAAApK,EAAA6G,SACAmV,EAAAA,cAEAjF,GAAA3M,MAAAA,OLm2BQ1K,EKj2BRkc,YAAAK,KAAA7R,SAAAA,GLk2BU,GAAI2M,EAaJ,OAXEA,GKl2BZA,QAAAlQ,YAAAuD,IAAA,OAAAA,EACA4R,IACAhc,QAAAoK,OAAAA,GLk2BmBA,EK91BnBwR,WAAAvE,EAAAA,SACAqE,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,iBLg2B0C,SAArBld,EAAQiW,SK51B7BvP,GAAAA,MAAA,IAAAA,GL+1BmB,GAAIqT,MAAKnO,GKz1B5B1K,EAAAA,WAAA2X,EAAAtI,qBAAAsI,EAAAc,EAAAA,UL41BiBuD,MAEThc,EKz1BRic,QAAAA,WACAnd,EAAAA,IAAAkd,ML81BQha,EAAMmJ,IAAI,WAAY,WM76C9B5L,GAAA0c,EAAA7Q,UAIA1L,EAAAI,KACAH,EAAA,YNg7CEW,QAAQf,OAAO,yBAA0BuD,SAAS,OAAQ,WM16C5D,GAAA0Z,GAAAA,KAAAA,UAEA7c,UAAA8c,UACApd,SAAAmd,mBN26CME,SAAU,WMx6ChBC,YAAA3c,SACAkQ,YAAApQ,GAIAQ,KACAmc,EAAA/W,SAAAkX,EAAAjc,GNw6CW6b,EAAU7b,KAAM6b,EAAU7b,GAAOkc,IMn6C5Cvc,EAAAC,KAAAP,WAAA,SAAA4E,EAAAjE,EAAAA,EAAAA,GNw7CM,QM55CNmc,GAAAC,EAAA3D,GN65CQ,GM55CR4D,GAAAD,CAEAD,GN25CYG,EM35CZC,EAAAC,EAAAL,EAAAI,EAAAH,OAAAK,OAAAL,EAAAA,EAAAA,EN85CqB5Y,EAAQ,GAAK2Y,EAAKI,OAAOrX,OAAS,EAAI1B,EAAQ,EMr5CnEkZ,EAAAA,OAAAA,GAAAA,SAEAP,EAAAC,EAAAO,GAEA1Y,EAAAA,WAAAuY,EAAAG,OAAAF,GAAAA,MAAAL,GN03CM,GMr6CND,GAAAxc,INs6CMwc,GAAK3L,SAAW7Q,QAAQ2Y,KAAKvZ,GMl6CnCkF,QAAA2Y,SAAAA,YAAApM,WAAAuL,cAAAA,KAAAA,cAAAA,SAAAA,GACA9X,QAAA4Y,UAAAV,EAAA3L,MAAAwL,EAAAA,SAAAA,GAAAA,EAAAA,KNq6CM,IMl6CN3T,GAAA,eNm6CM1I,SMl6CNwc,SAAAK,cAAAhZ,SAAAA,GNm6CY7D,QAAQoF,UAAUkX,EAAOjc,KAASqI,EAAiBK,KAAKuT,EAAOjc,MAAOmc,EAAK3L,SAASxQ,IAAO,KAEjGiE,EMj6CNuB,UAAAA,EAAAA,SAAAA,SNk6CMvB,EAAO4Y,aAAeV,EAAK3L,SAASwL,YM/5C1C/X,EAAA6Y,SAAAT,SAAAC,EAAAA,EAAAA,GACAF,EAAAA,UAEAD,EAAAG,WAAAK,EAAAF,MAAAjZ,GNi6CQe,EAAIgB,iBACJhB,EM75CR6X,mBN46CMD,EMp5CNA,OAAAvc,EAAAA,UNq5CMuc,EMn5CNY,2BAAAvM,EAAAA,wBNo5CM2L,EMn5CNY,MAAAC,SAAAA,GNo5CYrd,QAAQ6G,YAAY2V,EAAKI,OAAOU,UAClChZ,EAAOuY,WAAWG,EAAKF,MAAQ,GMh5CzCN,EAAA3Y,OAAA2Y,KAAAI,GACAJ,EAAAxW,OAAAA,QAAA4W,SAAAU,EAAAA,GACAF,EAAAG,aAAAA,EAAAA,SAAAA,KAAAA,EAAAA,EAAAA,EAAAA,SAAAA,GAAAA,SAAAA,EACAH,EAAApd,WAAAgG,EAAAA,SAAAvC,KAAAnF,EAAAA,EAAAke,EAAA3L,SAAApN,GAAA,SAAAI,EAAA,QNq5CM2Y,EAAKgB,QMl5CXxX,SAAAA,GNm5CQ,GAEIuX,GAFA1Z,EMl5CZ2Y,EAAAI,OAAAa,QAAAT,GACAO,EAAAA,EAAAf,OAAAI,OAMAW,GAFAf,QAAAkB,SAAA7Z,GAEA0Z,EAAAA,OAAArM,IAAA,SAAA8L,GAGAO,MAAAA,GAAAA,ON84CaE,QM74Cb5Z,GN+4CwB2Y,EAAKI,OAAOU,QAE5Bd,EM34CRA,OAAAK,OAAAL,EAAAI,GACAW,EN24CY1Z,EM14CZ2Y,IN44CmB3Y,IAAU0Z,GAAeA,IAAgBf,EAAKI,OAAOrX,QAC9DgY,IMx4CVf,GAAAc,GAAApd,EAAAA,EAAAA,OAAAA,OACAsc,EAAAO,WAAAA,EAAAA,OAAAA,GAAAD,MAAAa,GN44CUnB,EAAKK,cAGTL,EMz4CNK,WAAAD,EAAAU,WAAAM,SAAApB,GN04CQA,EAAKI,OAAOU,QAAUpd,EMv4C9Bsc,EAAAqB,2BAAAA,QAAA,SAAAC,GACAH,ON24CMnB,EMt4CNsB,UAAAjY,EAAAA,UAAAA,SAAAA,EAAAA,GNu4CQ,MMr4CR2W,GAAAA,OAAA3L,UAAAjB,EAAAA,MAAApJ,EAAAA,OAAA8W,UAAAS,GNu4CMvB,EAAKqB,YMp4CXhN,EAAAA,YAAAjB,SAAApJ,EAAAA,EAAA3C,GAEAA,KAAA6Y,EAAAA,SAAA,KAAAlW,EAAAA,UAAA,KAAAuX,EAAAA,SAAA,KAAAD,EAAAC,UNo4CUvB,EAAKK,WAAWC,GAChBgB,EAAElY,iBACFkY,EAAEjY,mBMj4CZ2W,EAAA3L,SAAAjB,YAAA,KAAAkO,EAAAtX,SAAA,KAAAsX,EAAAC,UAAA,KAAAD,EAAAtX,SAAA,KAAAsX,EAAAC,UAEA3e,EAAAA,SAAAA,YAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,UAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,UACA4e,EAAAte,EAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,UAFAse,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,WNw4CIxe,MAAKoM,KAAO,WM93ChBvD,GAAAA,KAOA3G,OALAsc,GAAA5e,SAAA4e,EAEAA,EAAAte,WAAAA,EACA+I,EAAAA,cAAA0T,EACA8B,EAAAA,SAAA/B,EACA8B,KN+3CK3V,UM73CL9J,UAAA,UAAAyF,WAAAA,OAAAA,SAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GN83CI,GM73CJ5E,GAAA4E,EAAAjF,QN83CI,QM53CJ0C,SAAA,WAAA8G,UN83CM0V,YM53CNC,EN63CMxc,OM53CNyc,EN63CMze,YMz3CN0e,SAAA,WAAAA,SAAA9f,WAAA0f,EAAAte,YN03CMnB,YMz3CN8f,SAAAA,EAAAD,GN03CQ,MAAOpa,GAAKjF,UAAYK,EAASL,UAEnC0C,KMp3CN0c,SAAApB,EAAAA,EAAAA,EAAAuB,GNq3CQ,GMp3CRJ,GAAA5Y,EAAA6Y,GNq3CYA,EAAaG,EAAY,EAwB7B,IMz4CRpU,KAAAgU,EAAAA,QAAA/T,EAAAiU,SAAAhU,GNm3CU4T,EMj3CVG,cAAAtB,EAAAzS,OAAAA,GNm3CY8T,IACFC,EAAWpB,2BAA2B5S,KAAK,WM/2CrDgU,EAAApB,cAAAA,EAAA5S,OAAAmT,WNk3CUY,EM/2CVK,YAAA3f,KAAA4f,SAAApU,GNi3CY,MMh3CZ+T,GAAAzR,WAAA6R,GACAE,KNk3CQN,EAAWpB,2BAA2B5S,KAAK,WACzC9C,EAAS,WAEP,IAAK,GM92CjBkX,GAAA3f,EAAA4f,KAAA,MN82CqB9R,EAAI,EAAGA,EAAI6R,EAAWhZ,OAAQmH,IAAK,CM32CxDgS,GAAAC,GAAAA,QAAA/f,QAAA2f,EAAA7R,GAGAkS,GAAAA,SAAAC,EAAAH,SAAAC,cAGAR,EAAApB,KAAAA,KAAAA,GAAAA,UAKArb,ONw2CYgd,EMt2CZC,aAAA,CNu2CU,GAAIC,GAAqBC,EAAOH,EAAMC,aACtCR,GAAWpB,2BAA2B5S,KAAK,WACzCyU,EAAmBE,OAAOpd,EAAOyc,EAAWvB,OAAOU,WMh2C/D5b,EAAA+H,OAAAiV,EAAAC,aAAA,SAAAhV,EAAAC,GACAnB,EAAAoU,WAAAlT,KACA,SNs2COtB,UM51CPrE,UAAA,UAAA,WAAA,OAAA,SAAA8W,EAAAnI,EAAAvB,GN61CI,OACE3I,SM11CNyC,YAAAmG,WN21CM3P,OAAO,EACPD,KMx1CNC,SAAAob,EAAAA,EAAAA,EAAAA,GAuCAiC,QAAAA,KNy0CU,GAAIlb,GAAQsa,EAAWvB,OAAOa,QAAQ/b,EACtCiR,GAASwL,EAAWtZ,UAAUnD,EAAOmC,GAAS,WAAa,eAAejF,EAASuf,EAAWtN,SAASwL,aM/2CjH3a,GAAAA,GAAA+B,EAAAA,EAEA/B,GAAAob,SAAApb,YAGA9C,EAAAuf,KAAAA,OAAAtN,YNq1CQ6N,EMp1CR9f,SAAA2T,QAAA4L,SAAAtN,EAAAxR,GNq1CUqC,EAAMwJ,MAAQkG,EAAKC,YAAY1H,KAEjCjI,EMn1CRA,KAAAoX,EAAApX,KNo1CQA,EAAM+B,GAAKib,EAAMjb,GMh1CzB0a,EAAAA,KAAAa,EAAAtd,MAAAA,EAAAA,GAKAA,EAAAud,SAAAA,WACArgB,EAAAoF,SAAAma,EAAAtN,SAAAnP,WAIAA,EAAAmJ,SAAA,WAAA,SAAAlB,EAAAC,GACAuU,EAAAA,SAAAX,EAAA9b,MAAAA,KAGAyc,EAAAY,MAAAA,GACArd,EAAAmC,eAAA+Y,GAEAjK,EAAAA,KAAAwL,kBAAAzc,EAAAmC,cAGAsa,EAAAA,IAAAA,WAAApB,WACAgC,EAAAA,QAAAA,KAUAZ,EAAApB,2BAAA5S,KAAA,WACA3B,MAEA9G,SNu0CO2G,UAAU,UAAW,WACxB,OACEG,SAAU,IACV/G,KAAM,SAASC,EAAOwd,EAAMlb,GAC1BtC,EAAM+H,OAAOzF,EAAKmb,QAAS,SAASxV,EAAUC,GOznDtD3K,IAAA2K,GAAAD,GAIAvK,EAAAA,GAAAI,cP6nDEQ,QOvnDFuC,OAAA,yBAAA,yBAAA,wCAAAC,SAAA,UAAA,WPwnDI,GOvnDJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,SACAuB,YAAA,UACAyc,UAAA,cACAC,YAAAA,yBACAC,QAAA,QACAC,WAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,gBAAA,EACAC,MAAAA,EACAnO,UAAA;APwnDM8N,YAAa,gCOrnDnBhgB,QAAAoM,MAGA8T,SAAA7L,OACA8L,UAAAnT,EAEAoT,cAAAE,WPonDMD,cOlnDNlb,yBPmnDM+M,QOhnDNlT,EPknDIgB,MO/mDJoM,MAAAlK,UAAA4C,YAAAA,aAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GPknDM,QO9mDN5C,GAAAyC,EAAAA,EAAAA,GP+mDQ,GAAIQ,MO7mDZjD,EAAAyC,QAAAA,UAAA/E,EAAAuE,EP+mDQgB,GAAUP,EAASxF,EAASJ,EO7mDpCkD,IAAAA,GAAAqe,EAAAvhB,MACAkD,GAAAse,YACAte,EAAAue,SACAve,EAAAwe,gBAGAxe,EAAA2C,aAAA,GP+mDQ3C,EO7mDRiD,YAAAH,EAAAX,SP8mDQnC,EAAMse,oBAAsBxhB,EAAQ6gB,gBAAkB7gB,EAAQ4gB,SAC9D1d,EAAMue,eAAiBzhB,EAAQqhB,cO3mDvCne,EAAAiD,SAAAnG,EAAAqF,QP6mDQnC,EO5mDRA,UAAA6C,EAAAmb,SP6mDQhe,EO5mDRiD,UAAAD,SAAAb,GP6mDUnC,EAAM6C,aAAa,WACjBI,EAAQH,SAASX,MAGrBnC,EAAMiD,QAAU,SAASd,EAAOe,GOzmDxClD,EAAAmD,aAAA,WACAF,EAAAA,OAAAE,MP6mDQnD,EOzmDR+E,WAAAiG,WP0mDU,MOzmDVhL,GAAAmD,cP2mDQnD,EAAMmD,UAAY,SAAShB,GACzB,MAAOc,GAAQE,UAAUhB,IOtmDnCnC,EAAAye,WAAAA,WACA,IAAA,GAAAzT,GAAA,EAAAA,EAAAhL,EAAA+C,SAAAc,OAAAmH,IACAhL,EAAAmD,UAAA6H,IACAhL,EAAAiD,QAAA+H,IAOA/H,EAAAA,YAAA,WACAjD,IAAAA,GAAA+C,GAAAA,EAAAA,EAAAK,EAAAA,SAAAA,OAAAA,IACAH,EAAAyb,UAAAA,IPsmDc1e,EAAMiD,QAAQ+H,IAIpB/H,EOpmDRjD,OAAAyC,SAAAuZ,GPqmDUhc,EAAM+C,SOpmDhBK,EPqmDUH,EOpmDVjD,sBPsmDQiD,EOpmDRnG,SAAA8gB,SAAAnb,GAUAzC,MAVAlD,GAAA6hB,UPsmDgB1b,EAAQE,UAAUhB,GACpBnC,EOtmDdyC,aAAAuZ,OAAAhc,EAAAyC,aAAAsZ,QAAA5Z,GAAA,GPwmDcnC,EAAMyC,aAAagG,KAAKtG,GAEtBrF,EAAQ8gB,MAAM5d,EAAMyC,aAAamb,KAAK,SAASe,EAAGC,GOpmDlE3b,MAAAD,GAAA4b,KPwmDY5e,EAAMyC,aAAeN,EOrmDjC0c,EAAApc,cPymDQQ,EOvmDRnG,OAAA4gB,SAAAvb,GPwmDU,KOvmDVnE,QAAAA,YAAA4F,IAAAnB,EAAAzC,GAAAyC,GAAAzC,EAAAmC,SAAAA,QPumDU,CAGA,GAAI3D,GAAQwB,EAAM+C,SAASZ,GAAO3D,KAClCwB,GOvmDV6e,OAAA7e,WPwmDYiD,EAAQH,SAASX,GACbrF,EOvmDhB4gB,SACA1f,EAAAlB,cAAAkD,EAAAyC,aAAA+M,IAAA,SAAArN,GACAnE,MAAAA,SAAA4F,YAAAA,EAAApF,SAAAR,IACA,KPymDuBgC,EAAM+C,SAASZ,GAAO3D,UAG3B1B,EAAQkT,OOpmD1BvM,EAAA3G,cAAAH,IAAAqB,EAAAmE,YAAAc,EAAAA,GAEAnG,EAAA6G,cAAAxB,GPumDcc,EAAQ+C,UAGZhG,EOlmDV1B,MAAAA,EAAAwgB,YAAA3W,UAAAA,EAAAhG,EAAAc,GACAjD,QAAAyC,UAAAA,EAAAzE,WAAAmK,QAAAqH,WAAAhR,EAAAA,WPmmDY1B,EOlmDZ6G,SAAAV,EAAAe,EAAAxF,KPqmDQyE,EOlmDRjD,mBAAAyC,WPmmDc3F,EAAQ4gB,SACNpf,QOlmDhBwgB,QAAA9gB,EAAAmK,aACAnI,EAAA1B,aAAAN,EAAAmK,YAAAA,IAAAnI,SAAA+C,GACA/C,MAAAyC,GAAAA,UAAAQ,KPqmDcjD,EAAMyC,gBO9lDpBsC,QAAAA,UAAA/G,EAAAmK,cAAAnI,EAAA+C,SAAAc,OACA7D,EAAAlD,aAAAoE,EAAAlD,UAAAA,EAAAmK,aPmmDcnI,EAAMyC,aAAe,IAI3BQ,EO/lDRnG,WAAA4gB,WPgmDU,MO/lDV5gB,GAAAkD,WAAAyC,EPkmDiBzC,EAAM+C,SAASc,QAAU7F,EAAW+F,WAAWF,QAAU/G,EAAQoE,UAF/DlB,EAAM+C,SAASc,QAI1BZ,EO9lDRd,UAAAA,SAAAA,GACA,MAAArF,GAAAqF,SACA3D,KAAAF,EAAA8F,aAAArB,QAAAZ,GAEAA,EAAAA,eAAAA,GAGAc,EAAAgB,UAAAA,SAAAzF,GAEA0E,GAAAgB,EACAhB,KAAAiB,EAAAA,EAAAA,SAAAA,OAAAA,MAEA2G,QAAA1G,OAAApE,EAAA+C,SAAAZ,GAAA3D,MAAAA,KP6lDU,MO3lDVugB,IP6lDQ9b,EO1lDRgB,aAAA+a,SAAA7G,GP6lDU,GAFAjV,EO1lDVgB,iBP2lDUhB,EAAIiB,kBACA2G,EO1lDdiU,CP2lDY,GOzlDZC,GPylDgB7G,EAAW7Z,QAAQpB,QAAQgG,EAAImG,OAEnC,IAA4B,MAAxBnG,EAAImG,OAAO6O,SOvlD3B,IPwlDc,GAAI8G,GAAkB7G,EAAS3H,UOxlD7CuO,GAAAC,EAAAnb,OAAA,GACAuU,MAAA9Z,EAAAygB,GAAA3G,WP0lDkB2G,EOzlDlBC,GP2lDgBA,EAAkBA,EAAgBxO,QOrlDlD1K,GACAxH,QAAApB,QAAAmK,GAAAnE,eAAA,SAGAA,EAAAgB,eAAAA,WP2lDQjB,EOrlDR6C,WAAAE,SAAAA,GPslDU,MAAK,eAAeqB,KAAKnE,EAAI4B,UOllDvC4Y,IAAAxa,EAAApG,UACAoG,EAAAgB,iBPolDYhB,EAAIiB,mBO/kDhBrH,EAAAgI,UAAArC,IAAAS,EAAAlD,QAIAsF,EAAAA,OPglDexI,EAAQ4gB,UAA6B,KAAhBxa,EAAI4B,SAAkC,IAAhB5B,EAAI4B,aO1kD9DhI,EAAAif,WP8kDgC,KAAhB7Y,EAAI4B,SAAkB9E,EAAMyC,aAAe,EAAGzC,EAAMyC,eAAyC,KAAhBS,EAAI4B,SAAkB9E,EAAMyC,aAAe,EAAGzC,EAAMyC,aAAezC,EAAM+C,SAASc,OAAS,EAA4B,KAAhBX,EAAI4B,SAAkB9E,EAAMyC,aAAezC,EAAM+C,SAASc,OAAS,EAAG7D,EAAMyC,eAAyBnE,QAAQ6G,YAAYnF,EAAMyC,gBAAezC,EAAMyC,aAAe,GO3kDvWQ,EAAAgc,YALAC,EAAAlc,OAAAhD,EAAAyC,ePokDU,QAgBFQ,EO5kDRkc,MAAAA,WP6kDU,GO5kDV9V,GAAAA,EAAA9D,UAAAA,SP6kDU,OAAO6Z,GAAGrD,QAAQ,SAAW,GAAKqD,EAAGrD,QAAQ,YAAc,GAAKqD,EAAGrD,QAAQ,SAAW,GOvkDhG9Y,EAAAiW,iBAAA1T,SAAAA,GACA,OAAAvC,EAAA,GAAAoc,cAAAC,UACApG,EAAAA,iBACAkD,EAAAtf,2BACAmG,EAAAA,OAAAwC,SP4kDQ,IOvkDRxC,GAAAwC,EAAAA,IPwkDQxC,GOvkDRnG,KAAAA,WPwkDUoc,IACIpc,EAAQ4gB,UACVza,EOvkDZwC,SAAAoL,SAAA,mBAGAlL,EAAAwT,WACAlW,EAAA+C,SAAAJ,GAAAkF,EAAA,aAAA,YAAA7H,EAAAgB,cACAnH,EAAA4gB,UACA1d,EAAAyC,GAAAA,UAAAQ,EAAA6C,aAEA7C,GAAAA,GPwkDQ,IOtkDR/F,GAAA+I,EAAAD,IAoBA,OPmjDQ/C,GAAQ+C,KAAO,YOrkDvBmT,EAAAuE,UAAApf,QAAA6G,YAAAnH,EAAAmK,ePukDYnI,EAAMyC,aAAe,IAEvBQ,EAAQwC,SAASQ,IAAI6E,EAAU,aAAe,YAAa7H,EAAQgB,cOlkD7Ema,EAAA1gB,UACAR,EAAAkhB,IAAAA,UAAAA,EAAAA,YAMAzX,GAAA,IAIA1D,EPg3CM,GO9mDNjD,GAAA+C,6BAAAA,KAAAA,EAAAA,UAAAA,WACA+H,EAAA4S,eAAAtE,GAAAzM,UAAAwF,CAgQApS,OADAgH,GAAArJ,SAAAA,EACA0gB,MP+jDKzX,UO5jDL3G,YAAAA,UAAAA,SAAAA,KAAAA,UAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GP6jDI,GAAItC,GO7jDRogB,EAAApgB,QP8jDI,QACEoJ,SO9jDNvI,MP+jDMwI,QO9jDNzI,UP+jDMyB,KAAM,SAAkBC,EAAO9C,EAASoF,EAAMtE,GO3jDpD,GAAAgJ,IACA1I,MAAAC,EACAuf,YAAApa,EAAApB,YP8jDQhE,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,WAAY,OAAQ,YAAa,cAAe,iBAAkB,YAAa,gBAAiB,UAAW,WAAY,gBAAiB,YAAa,KAAM,OAAQ,YAAa,cAAe,cAAe,UAAY,SAASI,GACtVL,QAAQoF,UAAUpB,EAAK3D,MAAO7B,EAAQ6B,GAAO2D,EAAK3D,KAExD,IO1jDRqI,GAAArI,eP2jDQL,SO1jDRA,SAAAoF,OAAApB,YAAA,iBAAA,QAAA,SAAA3D,GACA7B,QAAA6B,UAAAqB,EAAAsS,KAAArL,EAAAA,KAAAA,EAAAA,MP2jDYnK,EAAQ6B,IAAO,KOpjD3BL,QAAAA,SAAAoF,eAAA6b,SAAA,eAAA,SAAA,YAAA,SAAA5gB,GACA,GAAAqI,GAAAA,KAAAA,EAAAK,OAAAkY,GAAAA,cAAA5gB,EAAAyI,MAAA,EACAtK,SAAA4gB,UAAApb,EAAA2E,MPwjDYnK,EOvjDZ6B,GAAAqB,EAAAsS,MAAAhQ,EAAA2E,MP0jDQ,IAAIsY,GAAeriB,EAAQoF,KAAK,gBOziDxC,IAXApF,QAAAwG,UAAAwU,KACAsH,EAAAtiB,KAAAA,GACAsiB,EAAA9R,UAAA,EAEA8R,EAAAjP,SAAArT,GAOAJ,WAAAkG,EAAAA,GAAAC,SAAA/F,cAAAJ,CAEA,GAAAkG,GAAAkc,CACAhiB,GAAAwQ,IAAA+R,UAAAA,QPijDUviB,EAAUoB,QAAQpB,QAAQ,gFO7iDpCsiB,EAAA9X,MAAAA,GPgjDQ,GO7iDRH,GAAAa,EAAApK,EAAAA,WAEAgF,EAAAM,EAAAuE,EAAAA,EAAAA,EACA7J,GAAAA,SP6iDUd,EAAQ,GAAGuiB,iBAAiB,OAAQzc,EAAOic,iBOxiDrDjf,IAAAA,GAAAgI,EAAAL,OAAAM,GAAAA,QAAAC,OAAAA,IAAAA,MP2iDQlI,GOziDRgD,OAAA0b,EAAAA,SAAAA,EAAAA,GACA1gB,EAAAwF,SAAAA,EAAAA,GAAAA,KAAAA,SAAAA,GACAR,EAAAM,OAAAuE,GAGA7J,EAAAwF,cAGA,GPuiDQxD,EOtiDRlD,OAAAA,EAAA4gB,QAAApf,SAAAwgB,EAAA9gB,GPuiDUgF,EOtiDV2F,qBPuiDU3K,EOtiDVmE,YPuiDW,GACHnE,EOtiDRmD,QAAA7C,WPuiDU,GOtiDVqK,GACAA,CPuiDc7L,GOtiDd4gB,UAAApf,QAAAwgB,QAAA9gB,EAAAmK,cPuiDYQ,EOtiDZA,EAAA+W,YAAAlQ,IAAA,SAAAhR,GPwiDc,MADA2D,GAAQa,EAAOgB,UAAUxF,GOriDvC,KAAA2D,EAAAa,EAAAJ,OAAAG,SAAAZ,GAAAiD,OAAA,IACAjD,OAAAa,QAAAgB,WPwiDc2E,EOviDdA,EAAAxG,QAAArF,EAAAkG,WAAAD,EAAAZ,WPuiDyBwG,EAAS9E,OAAS,KAAO/G,EAAQohB,eAAiBxgB,EAASwgB,eAE3DvV,EAAS+W,KAAK,QOliDvCvd,EAAA3D,EAAAA,UAAAqF,EAAAsE,aPsiDYQ,EAAqB,KAAVxG,EAAea,EAAOJ,OAAOG,SAASZ,GAAOiD,OAAQ,GOjiD5EpF,EAAAN,MAAAiJ,GAAA7L,EAAAghB,cAAAhhB,EAAA+gB,WAAAngB,EAAAmgB,aAEA/gB,EAAA4gB,WACA1a,EAAA2c,SAAA,SAAAnhB,GPoiDY,OAAQA,GAA0B,IAAjBA,EAAMqF,SAG3B7D,EAAMmJ,IAAI,WAAY,WQ37D9B5L,GAAAyF,EAAAoG,UAKAwW,EAAA9hB,KAEAJ,EAAAI,YR47DEQ,QQt7DF4L,OAAAA,4BAAA,kCAAA,sCAAA2V,SAAAvQ,aAAAjD,WRu7DI,GQr7DJuT,GAAAE,KAAAxhB,WACAZ,EAAAY,KAAAA,UACAyhB,SAAAC,IAIAC,SAAA/H,IRm7DM5L,OQl7DN,IRo7DIxO,MQj7DJoM,MAAAgW,UAAAA,YAAAje,aAAAA,aAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GRq7DM,QQ/6DNke,GAAAC,EAAAA,GACA,MAAAC,GAAAD,GAAAA,UAAAljB,EAAA,GAAAJ,SAAAiF,gBAAAA,EAAAA,cRi7DM,QQ76DN6d,GAAAU,GR86DQ,GQ76DRxjB,GAAA8iB,QAAAS,UAAAA,EAAAA,ER86DavjB,GAAQI,UAASJ,EAAQI,QAAU8iB,EQ36DhD,IAAAO,GAAAA,EAAAA,EAAAA,QAAAA,QAGAC,EAAAA,EAAAA,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,SAAAA,EAAAA,EACA,IAAAC,EAAAA,GAEA,MADAd,GAAAe,GAAAA,UACAC,EAAAA,EAEA,IACAC,GAEAC,EAOAhjB,EAGAijB,EACAC,EACAb,EACAL,EACAK,EAjBAa,KAKAtc,EAAAA,EAAAA,oBAEA6b,IA+JAxgB,OR+wDQwgB,GQl6DRM,KAAAA,WACAL,KAAAA,QAAAA,EACAC,EAAAA,EAAAnR,KAAAA,cAAAxS,EAAAijB,UACAc,EAAAA,EAAAA,KAAAA,cAAAA,EAAAA,UAGAV,EAAAE,GAAAA,QAAAviB,KAAAmjB,4BRi6DUnB,EQh6DVO,GAAAA,SAAAE,GRi6DUJ,EAASva,GAAG,SAAUob,GACtBH,EAAwBd,EAASjiB,KAAKojB,aAAcpkB,EAAQijB,UQ75DtEQ,EAAAjR,EAAAnG,IAAA,qBAAA0X,GAGA/iB,EAAAwiB,EAAAA,IAAAA,wBAAAA,GACAO,IACAR,IR65DYT,EAAMS,GAAYE,IAGtBA,EQ15DRta,QAAA,WACAua,KAAAA,UACAC,KAAAA,QAAAA,IR65DUN,EAASla,IAAI,QAASnI,KAAKmjB,4BAC3BnB,EAAS7Z,IAAI,SAAU8a,GQx5DjCR,EAAAY,IAAAA,SAAAA,GAGAX,IAGA9b,IAGAoc,SAGApc,GAAAA,KRo5DQ6b,EQ/4DRvV,cAAA2V,WRg5DU,GQ/4DVA,EAAAxb,OR+4DU,CAGA,GAFAT,GQ/4DVkc,EAAAD,EAAAA,YAAAR,EAAArT,KAAA,eAAA,ERg5DUgU,EQ/4DVpc,KAAAic,IAAAA,EAAA3V,YAAAoW,EAAAtU,KAAA,iBACApI,EAAAic,EAAAjc,GAAAA,WAAAic,IAAAA,EAAA,GAAAtX,OACA,MAAAkX,GAAAc,iBAAAV,EAAA3V,GRi5DU,KAAK,GAAIA,GAAI2V,EAAe9c,OAAQmH,KQ54D9CuV,IAAAA,QAAAU,YAAAA,EAAAjW,GAAAzG,YAAA,OAAAoc,EAAA3V,GAAAzG,WAGA+c,IAAAH,EAAAnW,GAAA3B,UR44DgB3E,EAAYic,EAAe3V,GAAGzG,WQv4D9Cgc,EAAAc,EAAAA,IAAA3c,EAAAxH,EAAAA,EAAAA,GAAAA,WACA,MAAA0jB,GAAAS,iBAAAV,EAAA3V,MR24DQuV,EQx4DRlB,2BAAA,WRy4DUiC,WQx4DVpJ,EAAAmH,cAAAkC,IR04DQhB,EAAWc,iBAAmB,SAASnkB,GACrC,GAAI0jB,EAAc,CAChB,GAAIvB,GAAgBkB,EAAWiB,mBAAmBZ,EQv4D9DA,KACA1jB,EAAA2T,OAAAgB,YAAA,UACAqG,EAAAhb,EAAAqkB,OAAArJ,OAAAhb,EAAAqkB,EAAA/Q,OAAAA,SAAAA,SAAA,OACAtT,EAAAsT,OAAAA,SAAAK,SAAAgB,YAAA,WAKA+O,EAAAF,EAAAvf,ORw4DUjE,EQv4DVqkB,OAAAlY,SAAAA,UACA6O,EAAAhb,EAAAqkB,OAAA,OAAArJ,EAAAhb,EAAAqkB,OAAA/Q,SAAAA,SAAA,ORw4DYtT,EAAQqkB,OAAO/Q,SAASA,SAASK,SAAS,WAG9C0P,EQn4DRkB,mBAAA9U,SAAA+U,GRo4DU,MQn4DVC,GAAApd,OAAAkd,SAAAA,GACA,MAAA3kB,GAAAA,SAAA6kB,IRo4Da,IAELpB,EQj4DRhU,aAAAhI,WRk4DUjG,QQh4DVC,QAAAmiB,EAAA9B,SAAAA,GACA,GAAA6C,GAAAld,EAAAA,cAAAA,EAAAA,ORi4DYod,GAAepd,UAAYkd,EAAgBpV,EAAWC,OAAOmV,GAAetV,IAAM,KQ93D9F4U,EAAAA,QAAAA,OAAAA,EAAAA,YAAAA,EAAAA,WAAAA,EAAAA,EAAAA,UAIAR,EAAAqB,EAAAvY,OAAAA,SAAAkY,GACAb,MAAAjY,QAAAiY,EAAAA,YAAArX,KAAAA,SAAAA,EAAAA,GAAAkY,MAAAA,GAAAA,UAAAA,EAAAA,YRi4DUR,KAEFR,EQ/3DRsB,aAAAA,SAAAA,EAAAA,GACAnB,EAAAA,MACArX,OAAAqX,ERg4DYa,OQ/3DZM,KRk4DQtB,EAAWuB,eAAiB,SAASzY,EAAQkY,GAE3C,IAAK,GQh4Dfb,GRg4DmB1V,EAAI0V,EAAgB7c,OAAQmH,KQ73D/CuV,GAAAA,EAAAvV,GAAA3B,SAAA2B,GAAAA,EAAAA,GAAAA,SAAAA,EAAAA,CACA0V,EAAAA,CR+3Dc,OAGJA,EAAgB1E,OAAO6F,EAAU,IAEnCtB,EAAWzd,SAAW,SAASkI,GQp3DvCrE,EAAAqE,GAAA6F,SAAA,WAGA/J,EAAAqJ,OACAoQ,ERovDM,GQ/6DNT,GAAAhjB,QAAAwB,QAAAQ,GACAsiB,EAAAtkB,QAAAI,QAAAJ,EAAAI,KAAA8iB,oBACAA,EAAAI,QAAAlI,QAAApb,EAAAI,SAAA2P,KR+iEM,OQp3DN7M,ORs3DK2G,UQr3DLrI,eAAA,aAAA,WAAAK,aAAAA,aAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GRs3DI,OACEmI,SAAU,MACV/G,KQp3DNgiB,SAAAxB,EAAAzjB,EAAAA,GACAilB,GAAAA,IAEA/hB,MAAAmJ,ERq3DQ7K,SQn3DRyjB,SAAAD,SAAAA,UAAAzY,SAAAnM,GACA6kB,QAAA3Y,UAAAA,EAAAA,MAAAA,EAAAA,GAAAA,EAAAA,KRq3DQ,IQn3DRtM,GAAAyjB,EAAAzjB,ERo3DQilB,GQn3DRA,aAAAjlB,EAAAuM,OAAAnM,GRo3DQ8C,EAAMmJ,IAAI,WAAY,WAChB4Y,IACFA,EAAUD,eAAehlB,EAAQuM,OAAQnM,GQ72DrDyJ,EAAAyC,WAGAtC,EAAA,KACA/I,EAAA,YRi3DO4I,UQ72DPqb,mBAAA,aAAA1f,WAAA,aAAA0f,aAAA,SAAA1S,EAAAyQ,EAAA1T,EAAAkU,GR82DI,OACEzZ,SAAU,IACV/I,QAAS,SAAkBb,EAASoF,GAClC,GAAIjC,GAAWnD,EAAQ,GAAGgV,iBAAiB,eSzmEnD5T,SAAAf,QAAA8C,EAAA,SAAA4hB,GAIAvkB,GAAAA,GAAAA,QAAAA,QAAAA,EACAC,GAAA6S,SAAAlO,KAAA,eAAA,IAAAA,KAAA,cAAA0f,EAAA1f,KAAA,gBT4mEEhE,QSpmEFzB,OAAAA,0BAAA,2BAAAiE,SAAA,WAAA,WTqmEI,GSpmEJxB,GAAAA,KAAA5B,UACAmD,UAAA,UACAG,YAAA,GACAtB,WAAA,EACA8J,QAAA,EACA0Y,UAAA,QACAjhB,YAAA,2BACAyI,iBAAA,ETqmEM7I,QAAS,QSlmEf/C,UAAAoM,EAEAxK,MAAA,ETmmEM8J,MShmEN1M,GTimEMolB,QS/lENC,GTgmEMlhB,MS7lENnE,ET8lEM4M,WS7lENyY,ET+lEIrkB,MS5lEJoM,MAAAiY,WAAAA,SAAAA,GT6lEM,QAASC,GAAellB,EAAS+E,GSzlEvC,GAAAnF,GAAAslB,QAAAA,UAAAA,EAAAA,GT2lEYD,EAAWzf,EAASxF,EAASJ,EShlEzCgK,OALAH,GAAAub,UAEAG,EAAAA,OAAAA,QAAAjJ,EAAAiJ,SAGAvb,EAEA/G,MAAAqiB,OTslEKzb,USllEL7J,aAAAA,UAAAA,OAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GTmlEI,GAAIulB,GSnlERriB,EAAAA,uBAAAA,EAAAA,UTolEI,QACE8G,SSplENvI,MTqlEMyB,OSplEN,ETqlEMD,KAAM,SAAkBC,EAAO9C,EAASoF,GSjlE9C,GAAA0E,GACA1I,GACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,kBAAAI,YAAAA,YAAAA,QAAAA,UAAAA,OAAAA,YAAAA,cAAAA,YAAAA,KAAAA,cAAAA,cAAAA,aAAAA,SAAAA,GACAsI,QAAAvD,UAAA/E,EAAAuI,MAAAC,EAAAA,GAAAxI,EAAAyI,KTklEQ,IShlERtK,GAAAkD,eTilEQ1B,SAAQC,SAAU,OAAQ,YAAa,aAAe,SAASI,GACzDL,QAAQoF,UAAUpB,EAAK3D,KAASqI,EAAiBK,KAAK/E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KS5kE/FL,QAAAA,SAAAoF,eAAA6O,SAAA,eAAA,UAAA,SAAA5T,GACA,GAAAqI,GAAAA,KAAAA,EAAAK,OAAAkL,GAAAA,cAAA5T,EAAAyI,MAAA,EACAtK,SAAAuM,UAAA/G,EAAA2E,MT+kEYnK,ES9kEZ6B,GAAAqB,EAAAsS,MAAAhQ,EAAA2E,MTilEQ,IAAIsL,GAAarV,EAAQoF,KAAK,cS3kEtChE,SAAAC,UAAAgU,KACAjQ,EAAA+E,KAAAkL,GACAjQ,EAAAmQ,QAAA9T,ET8kEY7B,ES5kEZwB,OAAAoF,GT+kEQpF,QAAQC,SAAU,QAAS,WAAa,SAASI,GAC3C2D,EAAK3D,IACP2D,EAAKmQ,SAAS9T,EAAK,SAASsJ,EAAUC,GACpClI,EAAMrB,GAAO+Q,EAAKC,YAAY1H,GAC1B3J,QAAQoF,UAAUwE,ISzkEpC5F,EAAA,WACAyF,GAAAua,EAAAtR,wBAMA1O,EAAAhE,WT2kEU0B,ES1kEVqiB,OAAAA,EAAAA,UAAA,SAAApa,EAAAC,GACA5J,QAAAikB,SAAAA,GT2kEcjkB,QAAQQ,OAAOkB,EAAOiI,GSxkEpCjI,EAAAkiB,QAAAja,EAIA3F,QAAAqQ,UAAAzK,IACAlI,EAAA,WACAuiB,GAAAjkB,EAAAoF,sBT2kEa,GAEDpB,ESxkEZigB,QTykEUviB,EAAM+H,OAAOzF,EAAKqQ,OAAQ,SAAS1K,EAAUC,GACtCqa,GAAYjkB,QAAQoF,UAAUuE,KAC/B3J,QAAQG,SAASwJ,KAAWA,IAAaA,EAAS2K,MAAM,wBSrkExEtQ,KAAA,EACAtC,EAAA+H,OAEAwa,EAAAjkB,UT0kEYgE,EStkEZigB,WTukEUviB,EAAM+H,OAAOzF,EAAKqH,UAAW,SAAS1B,GAC/Bsa,GAAYjkB,QAAQoF,UAAUuE,KAC/B3J,QAAQG,SAASwJ,KAAWA,IAAaA,EAAS2K,MAAM,0BSnkExEtQ,KAAA,EACAtC,EAAA+H,YAAA+B,GAEAyY,EAAA1P,YAAA5K,MAQAjI,EAAAmJ,UACAnJ,EAAAuiB,OAAAA,EAAAA,SAAAnZ,SAAAA,GACAtM,GAAAwB,QAAAoF,UAAAuE,IACAsa,EAAA1P,YAAA5K,KTmkEQsa,EAAUJ,EAASjlB,EAASJ,GAC5BkD,EAAMmJ,IAAI,WAAY,WUnuE9B5L,GAAAglB,EAAAnZ,UAIA1L,EAAAI,KACA6c,EAAA,YVsuEErc,QUhuEFf,OAAA,4BAAAuD,SAAA,UAAA,WViuEI,GUjuEJpD,GAAAA,KAAAA,UVkuEMid,YAAa,SACb6H,UAAW,mBU9tEjB7b,QAAAA,EAIA7I,MAAAoM,KAAA,WACApD,OACA/G,SAAArC,MVguEKiJ,UU3tELrI,YAAAoF,UAAA/E,YAAAA,UAAAA,SAAAA,EAAAA,EAAAA,GV4tEI,GAAIjB,GAAW+kB,EAAQ/kB,QACvB,QACEoJ,SUxtEN,IVytEM/G,KUvtEN,SAAAmI,EAAAA,EAAAA,EAAAA,GVwtEQ,GUttERpL,GAAA+f,QAAA3f,KAAAQ,EVutEQY,SUrtERA,QAAAC,OAAAse,KAAAA,GAAA6F,SAAAA,GAEApkB,QAAAqkB,UAAArkB,EAAApB,MAAAwlB,EAAAA,GAAAA,EAAAA,MVstEQ1iB,EUptER+H,OAAAjL,WVqtEU,MUptEV8lB,GAAAC,QVqtEW,SAAS5a,EAAUC,GACpB,GUptEV2U,GAAA3f,EAAA4lB,GAAAF,iBAAA,MAAA9lB,EAAA0lB,UAAA,IVqtEUlkB,SUntEVykB,QAAA1b,EAAAY,SAAAya,GVotEY,GUntEZC,GAAA9R,QAAA/T,QAAA6d,GVotEgBiI,EUntEhBD,EAAArgB,KAAAxF,EAAA0lB,WAAA7iB,QAAA,IAAA,MACAgjB,GAAA9Q,SVotEc+Q,EAAU,IAAMA,EAAU,IAE5B,IAAIG,GAAS,GAAID,QAAOF,EAAS,IAC7BG,GAAO1b,KAAKY,GACd0a,EAAU9R,SAAS/T,EAAQ6d,aW3wEzCpd,EAAAsU,YAAA/U,EAAA6d,sBXoxEErc,QW1wEFgL,OAAA,wBAAA,sBAAA,sCAAAxI,SAAA,SAAA,WX2wEI,GW1wEJjE,GAAAiB,KAAAJ,UACAL,UAAA,UACAiC,kBAAA,UACAyB,YAAA,GACA7D,YAAA,QACA8lB,YAAA,QACAhiB,UAAA,MACAtB,YAAA,uBACA8F,SAAA,GACAyd,iBAAA,EACAC,WAAA,EACAC,QAAAA,KX2wEMH,UAAU,EWxwEhBllB,UAAAoM,EAEAxK,MAAAnB,EACAiH,MAAA6c,EACAY,KAAAG,KAEAF,OAAAG,KAEAF,iBAAAG,KXwwEIxlB,MWtwEJoM,MAAAqZ,UAAAA,aAAA,cAAA,WAAA,WAAA,OAAA,aAAA,SAAAnK,EAAA9J,EAAAlF,EAAA6G,EAAAtL,EAAA+J,EAAArD,GXkxEM,QAASmX,GAAavhB,GAyIpB,QWlsERwhB,KACAzjB,EAAAyjB,MAAAA,EAAA5f,YAAAvF,QAAApB,GACAmmB,QAAAA,UAAA/gB,EAAAkI,SAAAlM,QAAAwF,WAAAhH,EAAA0N,SACAa,EAAAA,OAAAA,GXosEUoY,EAAanhB,KAAK,cAAe,SWhsE3CohB,EAAAphB,KAAA,WAAA,KACAmhB,EAAArd,QAEApG,EAAAlD,QAAAH,QAAAA,QAAA8mB,EAAAC,IAAAC,SAAAA,WACAN,EAAA/gB,KAAA,cAAA,SXisEY+I,KA2BJ,QWtrERgY,KXurEUrjB,EAAMyD,MAAM3G,EAAQH,YAAc,QAAS+mB,GWrrErD5mB,QAAAa,UAAAA,EAAAgN,SAAArM,QAAAwF,WAAAhH,EAAA6N,SACAyY,EAAAA,OAAAvR,GXwrEcxS,EAAY,UAAUwE,QAAU,IWprE9Cuf,EAAAQ,YAAAA,EAAAA,YAAAA,SAEAP,EAAAQ,KAAA,cAAA,UAEA/mB,EAAAgnB,WXqrEYV,EWlrEZlmB,YAAA+Q,EAAArQ,YAAAkQ,SAAAA,EAAA5Q,WXqrEQ,QAAS0mB,KACP,GAAIC,GAAoB,mHW/qElC,IAAAlX,EAAAoX,cAAAA,CACA,GAAApX,GAAA0S,MAAAA,UAAAle,OAAA6iB,KAAAP,EAAA,GAAAvR,iBAAA2R,GAAA,SAAA3mB,GACA,MAAA4mB,GAAAF,YAAAA,GAAAA,EAAAA,aAAAA,GAAAA,IAAAA,EAAAA,eAEA,OAAAK,IXmrEQ,QW/qER9hB,GAAAwK,GXgrEU,GW/qEVA,EAAAmX,cAAA,CXgrEY,GAAIA,GAAYF,GAChB,IAAIE,IAAclnB,EAAW,MW7qEzCoT,KACA0T,EAAAtd,MAAA8d,UAAAC,QAAAH,KAAAF,GXgrEY,IAAI3hB,GW9qEhB2hB,EAAA/H,QAAApP,EAAA0S,cACAqE,OAAAle,GAAAA,EAAAA,IAqDA,QAAA4e,KACAtnB,EAAAkmB,WACAS,EAAAxd,GAAAA,QAAAoe,GACAC,EAAAre,GAAAA,QAAAoe,GACAC,EAAAre,GAAAA,QAAAse,IAIA,QAAArZ,KACApO,EAAAkE,WACAyiB,EAAA7d,IAAA,QAAA8d,GACAD,EAAAxd,IAAA,QAAAyd,GXkqEYY,EAAgBre,IAAI,QAASse,IAGjC,QWhqERznB,KACA2mB,EAAAA,WACAA,EAAAxd,GAAAA,QAAAyd,EAAAA,UXiqEYD,EAAa7d,GAAG,UAAW8d,EAAO5d,aAGtC,QW7pER5C,KACApG,EAAAkmB,WACAU,EAAAne,IAAAA,QAAAA,EAAAA,UX8pEYke,EW7pEZxd,IAAA,UAAAyd,EAAA5d,aXgqEQ,QAASue,GAAoBnhB,GW3pErCA,EAAAqhB,SAAAA,EAAAA,gBACArgB,WAAAA,EAAAA,SX6pEYwf,EAAOne,QWzpEnBme,EAAAA,QX8pEQ,QAASa,GAAoBrhB,GWxpErCA,EAAAshB,iBX2pEQ,QWzpERA,KX0pEcd,EAAOtd,UAA6B,OAAjBqd,IWvpEjCW,IACAX,KX0pEce,IACFA,EAAWtV,WWtpEvBsV,EAAAd,MAMAD,IAEAzjB,EAAAA,SXmpEYyjB,EAAeC,EAAOje,SAAW,MWniF7C,GAAAie,MACA5mB,EAAAiE,EAAAA,SAAAzC,QAAAQ,UAAApB,EAAAuE,GXgwEYkI,EAAUuZ,EAAOtU,SAAWhF,EAAYrM,QAAQjB,GW7vE5DA,EAAAomB,EAAAA,OAAApmB,EAAAkD,OAAAlD,EAAAkD,MAAAqP,QAAAC,EAAAD,MACAoV,GAAAA,mBACAlB,EAAAA,QAAAkB,QAAAA,EAAAtB,mBAMAO,EAAA5mB,SAAAiF,EAAAjF,YAEA4mB,EAAAgB,UAAA,QAMA5nB,EAAAA,SXsvEU2nB,EAAmBjX,SAAS1Q,EAAQomB,OAAQ,IWlvEtDljB,EAAAykB,EAAA,IXqvEQf,EWnvERA,IAAA1d,EAAAA,IAAAA,EAAAA,SAAAA,EAAAA,QAAAA,KAAAA,OAAAA,GXovEQ0d,EAAOgB,YAAc,aACrBnmB,GAAU,QAAS,WAAa,SAASI,GWlvEjDgmB,EAAAhmB,KAAAqB,EAAArB,GAAA+Q,EAAAC,YAAA7S,EAAA6B,OXqvEQqB,EWnvER0jB,MAAAle,WXovEUxF,EAAM6C,aAAa,WACjB6gB,EAAO1d,UAGXhG,EWnvER0jB,MAAA1T,WXovEUhQ,EAAM6C,aAAa,WACjB6gB,EAAOle,UW7uEnBxF,EAAAyjB,QAAAA,WACAzjB,EAAAwkB,aAAAA,WACAF,EAAAA,YXmvEQZ,EWhvERtd,SAAApG,EAAAoG,UAAA,CXivEQ,IWhvERgG,GACAwY,EACAjX,EXivEY2W,EAAkBhmB,QAAQpB,QAAQ,eAAiBJ,EAAQc,YAAc,eAiQ7E,OWh/ERuM,GAAAuD,KACAuC,SAAAA,QACAyT,IAAAA,MXivEUtX,KAAM,MW9uEhBsX,OAAAvT,MAGAxC,MAAA7Q,QX+uEQqN,EW7uERuZ,KAAAle,SAAAA,GX8uEUyK,EAAcpS,EACd6lB,EAAOvT,SWzuEjBuT,EAAAta,KAAAA,WAGAyb,EAAAA,MAGA7kB,EAAAskB,aAAA,WACAA,EAAAA,UX2uEQZ,EAAOta,QAAU,WWnuEzBsa,IACAA,IAEAY,EAAA9T,SACA8T,EAAA/T,MXquEUvQ,EWnuEVwQ,YXquEQkT,EAAOle,KWnuEf,WXouEU,IWnuEVke,EAAA5mB,SXmuEU,CACA,GWnuEV0T,GACAD,CX4vEU,IAxBIjS,QWnuEd+R,UAAAvT,EAAAiE,YXouEYyP,EWnuEZA,EAAAzP,UXouEYwP,EWnuEZA,EAAAzT,UAAAI,GAAAA,UAAAA,QAAAA,QAAAA,EAAAA,UAAAA,GAAAA,WAAAA,MXquEgBJ,EAAQiE,WWhuExB0iB,EAAAA,EAAAoB,EAAAA,WAIAL,EAAAA,EAAAd,IAAA9gB,EAAAyM,GAAAA,UAAAA,QAAAA,QAAAA,EAAAA,GAAAA,WAAAA,OAIAvS,EAAAkmB,KAEAS,EAAAA,EAAA/V,SAGA4W,GAAA5W,IX4tEU8W,EW3tEVM,EAAAvB,OAAAA,OX4tEUE,EAAeC,EAAOje,SAAWwK,EAAYlQ,KAAKykB,EAAY,SAAS5T,EAAe5Q,MWxtEhGsjB,EAAAA,WX0tEYG,EAAa/V,KWvtEzB1N,UAAAyD,EAAA,GAAA9G,IX0tEY2nB,EAAgB5W,KWvtE5BpP,UAAAoF,EAAApF,GAAAgS,IX0tEYgT,MWptEZ5S,EAAAA,MAAA5T,EAAAH,YAAA,eAAA+mB,GAAAC,iBXstEU,CWjtEVF,QAAAA,UAAA5S,EAAA/T,eAAAioB,QAAAA,WAAAA,EAAAA,eXqtEYjoB,EAAQwT,aAAaoT,GAEvBD,EWltEVvmB,KXmtEYwT,QAAS,UW/sErBG,SAAAlT,EAAAA,WACAb,EAAAA,aXitEY2mB,EWhtEZa,SAAAzT,EAAA/T,aAEA2mB,EAAAA,MAAA5S,EAAA/T,EAAAa,OXitEYW,QAAQpB,QAAQmC,EAAY,gBAAiBokB,EAAa,KAAK5S,SAASmU,EAAWloB,EAAQmmB,OW7sEvGhS,EAAAvP,YXgtEgB5E,EAAQkmB,UW3sExB1kB,EAAA2mB,SAAAnoB,EAAAooB,mBX8sEYzB,EW5sEZ5S,SAAA/T,EAAAa,YX8sEcb,EAAQkmB,UW1sEtBU,EAAAtd,MAAAA,EAAAA,EAAA,MAIAmG,QAAAkX,QAAAA,OAAA,EACApB,EAAAA,MAAAA,EAAA7R,EAAAD,EAAAW,GX2sEYD,EAASvP,MAAM+hB,EAAcjT,EAAQD,GAAOtT,KAAKiU,GWrsE7DmS,EAAAA,SAAA/gB,EAAA8D,UAAA,EAEA/C,EAAAvG,EXusEU,IWtsEVsmB,GAAAA,EAAAvS,EXusEUwR,GAAsB,WWnsEhC8C,EAAAA,UXssEU/B,EAAYvS,SAAS/T,EAAQc,YAAc,SWlsErDylB,EAAAnS,KAAAA,cAAAA,QACAlR,EAAAlD,WACAsmB,EAAA1f,SAAA5G,EAAA0N,YAAAlM,SAAAwF,EAAAhH,WXqsEUqoB,IWjsEV1B,OXitEQC,EAAO1d,KAAO,WW9rEtByd,EAAAA,WAEAC,EAAAA,MAAAgB,EAAAA,YAAAhB,eAAAgB,GAAAf,mBXisEcrlB,QW3rEdoF,UAAA5G,EAAAsU,eAAA9S,QAAAwF,WAAAhH,EAAAsU,eACAH,EAAAA,aAAAwS,GAGAA,EAAAT,KAAAA,cAAA,QAEAM,EAAAA,aAAAA,kBAAAA,GAAAA,aAAAA,EAAAA,cACArS,QAAAhG,QAAAqZ,OAAAA,EX0rEYrT,EAAShG,MAAMwY,EAAchZ,GWvrEzCpH,EAAArD,MAAAA,GAAAA,KAAAA,GAIAqL,EAAAA,WXwrEYiY,IWrrEZrS,EAAAxG,MAAAA,IAEAiZ,EAAAplB,SAAAoF,EAAA5G,UAAA6N,EXurEUtH,EWtrEVsH,GXurEUyZ,IWrrEV/Y,OA4CAqY,EAAAne,OAAA,WACAke,EAAAA,SX8qEYC,EAAO1d,OWtqEnB0d,EAAAvd,QX2qEQud,EAAOne,MAAQ,WACbke,EWxqEVtf,GAAAA,SX0qEQuf,EAAOtY,SAAW,SAASlI,GWtqEnC,IAAA4C,EAAAA,OAAA5C,KAAAA,EAAAA,QAAAA,EAAAA,WACAlC,KAAAlE,EAAAA,OACA4mB,EAAA5e,OXyqEY5B,EAAIiB,oBAGRuf,EWrqER5d,WAAAsf,SAAAxoB,GXsqEU,GAAIE,EWrqEdoG,WACAiB,IAAAjB,EAAAA,SAAAiB,aAAAA,EAAAjB,OAAAiB,SAAAA,UAAAA,EAAAA,OAAAA,SXsqEcjB,EWpqEdgB,iBAEA4f,IXoqEgB5gB,EWpqEhB4gB,SAAAA,CXqqEc,GAAIsB,GWpqElBrB,EAAA7gB,EAAAmiB,SXqqEc,IWpqEdvB,IAAAve,EAAAA,CXqqEoBrC,EAAIgB,gBAAgBhB,EAAIgB,iBACxBhB,EAAIiB,iBAAiBjB,EAAIiB,iBAC7B,IAAI2f,GAAYF,GACZ1gB,GAAImiB,SACNvB,EAAUA,EAAUjgB,OAAS,GAAG0B,QWjqElDzI,EAAAkmB,GAAAA,WX4tEeU,EAET,QAASrgB,GAAWrD,GW1oE1B2G,EAAAA,SAAA3G,EAAAwC,OAAAxC,EAAAwC,MAAAD,SAAAvC,EAAAsF,UAGAwB,QAAAA,GAAAmL,EAAA/U,GACA8C,MAAA1B,SAAApB,SAAAA,GAAAyP,GAAAuF,iBAAAD,IApbA,GAAA+S,GAAAA,QAAAA,QACAM,EAAAlM,EAAAiJ,uBAAAjJ,EAAAkI,WACAiE,EAAAjnB,QAAApB,QAAAkc,EAAAzM,SAAAE,MXswEUwW,EAAoB/kB,QAAQpB,QAAQ,oBWnwE9ComB,EAAAE,EAEAiB,EAAAf,KAGAH,EAAApU,KAEA6V,GACAM,GAAAtlB,WAEAulB,GAAAzoB,WXijFM,OWxoENA,OX0oEK6J,UWxoELzJ,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GXyoEI,OACE4J,SAAU,MACV9G,OWxoEN1B,EXyoEMyB,KWxoEN,SAAA2D,EAAA/E,EAAA7B,EAAA6B,GXyoEQ,GAAI7B,IWroEZkD,MAAAlD,EACAA,QAAAioB,EXuoEUvf,MAAM,EWloEhBlH,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAAI,kBAAAA,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,YAAAA,oBAAAA,KAAAA,cAAAA,cAAAA,cAAAA,aAAAA,OAAAA,UAAAA,SAAAA,GACAL,QAAAoF,UAAApB,EAAA3D,MAAAA,EAAAqI,GAAAA,EAAAK,MAIA/I,EAAAC,aACAzB,EAAAmK,YAAAtI,EAAA6mB,WXooEQ,IWloER1oB,GAAAkD,eXmoEQ1B,SAAQC,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASI,GACpEL,QAAQoF,UAAUpB,EAAK3D,KAASqI,EAAiBK,KAAK/E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KAEvFL,QWhoERgE,SAAA,eAAA,SAAA,eAAA,UAAA,SAAA3D,GXioEU,GWhoEV2D,GAAAmQ,KAAA9T,EAAAuI,OAAAe,GAAAA,cAAAC,EAAAA,MAAAA,EACAlI,SAAArB,UAAAgR,EAAAA,MXioEY7S,EAAQ6B,GAAOqB,EAAMsS,MAAMhQ,EAAK2E,OW3nE5C3I,QAAAgE,SAAA,QAAA,WAAA,SAAA3D,GACAqB,EAAA+H,IACAzF,EAAAhE,SAAAkC,EAAAA,SAAAyH,EAAAC,GACA5J,EAAAA,GAAAQ,EAAAkB,YAAAiI,OXkoEY3F,EW9nEZmjB,SX+nEUzlB,EAAM+H,OAAOzF,EAAKmjB,QAAS,SAASxd,EAAUC,GW3nExDwd,QAAAhC,SAAA5mB,GAEAA,QAAAkE,OAAAA,EAAAiH,GAEA/K,EAAAglB,QAAA3c,IX6nEa,EWrnEbvF,IAAAA,GAAA0jB,EAAA5mB,EACAA,GAAA4oB,WACA5oB,EAAAA,YAAA,WACA4oB,EAAA,GAAAngB,UX0nEQrI,EAAQ0I,GAAGtD,EAAKzB,SAAW,QAAS6kB,EAAM1V,QAC1ChQ,EAAMmJ,IAAI,WAAY,WYxpF9B2H,GAAAA,EAAAmU,UACA3mB,EAAA,KAIA+jB,EAAAA,YZ2pFM/jB,QY9oFNwS,QAAAmU,MAAA,GAAA3mB,QAAAwS,QAAA6U,IAAA,IZ+oFIrnB,QY9oFJsnB,OAAAA,MAAAA,QAAA7jB,SAAAA,UAAAA,WAAAA,SAAAA,EAAAA,GZ+oFM,GAAIsgB,GAAwBjJ,EAAQiJ,uBAAyBjJ,EAAQyM,6BAA+BzM,EAAQ0M,yBY5oFlHF,EAAA3J,EAAAA,sBAAAA,EAAAA,4BAAAA,EAAAA,yBAAAA,EAAAA,kCACA8J,IAAApgB,EACAqgB,EAAAD,EAAA,SAAA9J,GZ8oFQ,GY7oFRtW,GAAAA,EAAAsgB,EZ8oFQ,OAAO,YACLL,EAAqB7jB,KYzoF/B,SAAAikB,GZ4oFQ,GAAIC,GAAQtgB,EAASsW,EAAI,OAAO,EAChC,OAAO,Ya5qFf1e,EAAA2oB,OAAAD,IAQAnoB,ObwqFMkoB,GAAIG,UAAYJ,EaxqFtB7b,Kb4qFE5L,QarqFFf,OAAAT,0CAAAmF,SAAAA,gBAAAA,WbsqFI,GarqFJuF,GAAAA,KAAA4e,UbsqFMrD,OanqFNnQ,+KbqqFI9U,ManqFJoM,MAAAmc,SAAAA,KAAAA,SAAAA,EAAAA,GboqFM,QalqFNC,GAAAA,EAAAA,GbosFQ,Qa1pFR9nB,GAAAwB,EAAA5B,Gb2pFU,Ma1pFVyJ,GAAA2H,IAAA,SAAAoD,EAAAzQ,Gb2pFY,Ga3pFZ3D,GAAA2D,EAAAiD,IAIAoC,Ob0pFYpJ,GAAOioB,GAAazT,EACpBxN,EAAQmhB,EAAUvmB,EAAO5B,GACzBI,EAAQgoB,EAAQxmB,EAAO5B,Ia3pFnCgH,MAAAoC,Eb8pFchJ,MAAOA,Ea1pFrBioB,MAAAA,KAnDA,GAAAC,MAEAF,EAAAA,QAAAA,UAAAA,EAAAA,EACAhf,GAAAY,UAEAZ,IAAAA,GACAA,EACA+e,EACAF,EACAC,EACAI,EACAF,CChCA1f,OdisFQU,GahqFR2V,KAAAvK,WbiqFUpL,EAAcG,OAASiL,EAAQtQ,EAAKsQ,MAAM9V,EAAQimB,Qa9pF5Dvb,EAAAY,EAAAA,EAAA,IAAAwK,EAAA5S,IACAqmB,EAAArnB,EAAAoJ,IAAApI,EAAAA,GbgqFUsmB,Ea9pFVhoB,EAAAwgB,Gb+pFU4H,Ea9pFV7e,EAAAA,EAAAA,IAAAA,Ib+pFU2e,EAAUrJ,EAAOvK,EAAM,GAAKA,EAAM,GAAKyT,GACvCje,Ea9pFVZ,EAAA4e,EAAAA,KbgqFQ5e,EAAcY,SAAW,SAASpI,EAAOhC,GACvC,MAAOiB,GAAGD,KAAKoJ,EAASpI,EAAOhC,IAAaf,KAAK,SAAS4K,GAKxD,MajqFZL,SAAAe,QAAAA,KACAvI,MAEAwH,EAAA+e,QAAAvmB,EAAAA,OAAAA,EAAAA,EAAAA,Mb8pFmBwH,EAAc4e,WAGzB5e,Ea1pFRpJ,aAAAA,SAAAA,Gb2pFU,Ga1pFV4B,Kb4pFU,OADAA,Ga1pFVxB,GAAAA,EACAJ,EAAAioB,IC7DA7e,EAAA2I,OACArJ,Ed0uFM,McpuFNmV,OduuFE3d,QAAQf,OcnuFVopB,wCAAAhgB,UAAA,cAAA,SAAA,aAAA,SAAAwW,EAAA7N,GdouFI,OACExI,ScnuFN8f,IdouFM7oB,QAAS,SAAS0H,EAAUnD,GAC1B,GAAI2Z,GAAKkB,EAAO7a,EAAKukB,WACrB,OcnuFR,UAAAtkB,EAAArF,GdouFU,QcnuFV8C,GAAA2mB,GdouFY,GAAIA,GcnuFhB,WACA3mB,EAAAA,GdouFgB4mB,OAAQjb,Ic7tFxBxC,GAAA5G,QAEArF,EAAA+I,WAAA0gB,GdiuFc3mB,EAAM6e,OAAO8H,GAGjBzpB,EAAQ0I,GAAG,WAAYkhB,GelwFjCvpB,EAAAA,IAAA,WAAA,WAEAL,EAAA+I,IAAA,WAAA6gB,WfwwFExoB,QAAQf,OAAO,0CAA2CoJ,UAAU,gBAAkB,WAAY,SAAU,SAAShB,EAAUwX,GAC7H,OACEpd,KAAM,SAASC,EAAO9C,EAAS8f,GAC7Bhd,EAAM+H,OAAOiV,EAAMlI,aAAc,SAAStW,GACpCA,KAAU,GACZmH,EAAS,WgB/wFrBpI,EAAA,GAAAgI,iBhBuxFEjH,QgBhwFFpB,OAAAA,wCAAA6pB,QAAA,aAAA,WhB+1FI,QgB7sFJC,GAAAC,GhB8sFM,GAAIA,GAAa/pB,EAAQgqB,cgBpsF/Bhb,EAAAhP,EAAAA,cAAAiqB,CACA,IAAA3oB,EAAAtB,EAAA4Q,aAAAA,MAAAA,GAAAA,eACA,MAAAqZ,IAAAjP,EAAA8O,EAAA,SAAA,WAAA/K,EAAAvO,IAAAsZ,EAAA,aACAxoB,EAAAkP,EAAAsZ,YhBusFM,OgBrsFNxoB,IAAAtB,EAAA0P,gBhBgmFI,GgBhwFJpO,MhBiwFQ0Z,EgBhwFRkP,EAAAA,SAAAC,SAAAnqB,EAAAke,GhBiwFM,MgBhwFN5c,GAAA4oB,UAAAC,EAAAnqB,SAAA4P,gBAAAA,EAAAA,chBu3FI,OArHAmP,GAAGvO,IgBhwFPlP,SAAAtB,EAAA4P,EAAAA,GhBiwFM,GAAItO,EAQJ,OANEA,GgBjwFRtB,EAAAoqB,ahBiwFgBpqB,EAAQqqB,aAAaza,GgBxvFrCsa,EAAAC,iBACAG,EAAAtqB,iBAAA4O,GAAAA,GAEA5O,EAAAuqB,MAAA3a,GAEAZ,KAAAsb,EAAAtb,WAAAhP,IAAA4Q,EAAAA,GhB2vFImO,EAAG3P,OgBzvFPkb,SAAApb,GhB0vFM,GAAIob,GAAUtqB,EAAQ4O,wBAClBmb,EAAa/pB,EAAQgqB,agB/uF/BjL,QACAhQ,MAAAyb,EAAAA,OAAAA,EAAAA,YACAxb,OAAAyb,EAAAA,QAAAA,EAAAA,aACAxb,IAAAyb,EAAAA,KAAAA,EAAAA,aAAAA,EAAAA,gBAAAA,YAAAA,EAAAA,gBAAAA,WAAAA,GACAxb,KAAAyb,EAAAA,MAAAA,EAAAA,aAAAA,EAAAA,gBAAAA,aAAAA,EAAAA,gBAAAA,YAAAA,KhBmvFI5L,EgBhvFJ3O,UAAAwa,SAAAA,EAAAA,EAAAA,GACA,GAAA7a,GACA8a,EACAta,EAGAR,EACA/P,EhB+uFU8qB,EgB5uFVC,EACAL,EAAAla,EAAAA,IAAAxQ,EAAA,YACA8qB,EAAA/L,QAAA/e,QAAAA,GACA4qB,IAKAA,YAAAA,IACAJ,EAAAA,MAAAzL,SAAAhP,YhB2uFMgb,EgBzuFNP,EAAAA,OAAAA,GhB0uFME,EgBzuFN3L,EAAAvO,IAAAxQ,EAAA,OhB0uFM8qB,EgBzuFNvY,EAAAA,IAAAA,EAAAmY,QhB0uFME,GgBzuFNE,aAAAvY,GAAA,UAAAxC,KAAA2a,EAAAI,GAAAjM,QAAA,QAAA,GhB0uFU+L,GgBvuFVJ,EAAA5jB,EAAAA,SAAAhH,GACAA,EAAAA,EAAAknB,IhByuFQ2D,EAAUD,EAAYtb,OgBruF9BqB,EAAAtB,WAAAA,IAAA8b,EhBwuFQN,EAAUlY,WAAWuY,IAAe,GgBruF5Cva,QAAArB,WAAAA,KhBwuFQtP,EAAUA,EAAQknB,KAAK9mB,EAAS8N,EAAGid,IgBpuF3CjE,OAAAlnB,EAAAyQ,MhBuuFQE,EgBtuFRtB,IAAArP,EAAAqP,IAAA8b,EAAA9b,IAAA0b,GAEA,OAAA1b,EAAAsB,OhBuuFQA,EgBtuFRrB,KAAAqB,EAAArB,KAAA6b,EAAA7b,KAAAub,GhBwuFU,SAAW7qB,GACbA,EAAQyQ,MAAMyW,KAAK+D,EAASta,GgB5tFpCsa,EAAAG,KAAA/b,IAAAsB,EAAAtB,IAAA,KAAAC,KAAAqB,EAAArB,KAAA,QhBouFI6P,EgB/tFJhP,SAAA/P,SAAAA,GhBguFM,GgBptFNirB,GACAD,EAVA5b,GhB8tFQH,IgB5tFR,EAGAgc,KAAAA,EA4BA,OhBksF0C,UAAhClM,EAAGvO,IAAIxQ,EAAS,YgBrtF1BgrB,EAAAA,EAAA/b,yBhBwtFQgc,EAAiBC,EAAoBlrB,GgBntF7CoP,EAAA2P,EAAA3P,OAAApP,GACA+O,EAAA/O,EAAA+Q,UACA/B,EAAA4B,EAAAA,OAAAA,IAEA1B,EAAAA,KAAA8b,EAAAA,IAAAA,EAAAxa,kBAAA,GhBqtFQwa,EAAiB9b,MAAQ6P,EAAGvO,IAAIya,EAAgB,mBAAmB,KgB1sF3Elc,MAAAgb,EAAA/pB,YACAgP,OAAA8a,EAAAA,aACA7a,IAAA+L,EAAA8O,IAAAA,EAAA7a,IAAA8P,EAAAvO,IAAAuZ,EAAAra,aAAAA,GACAR,KAAA4a,EAAAA,KAAAA,EAAAA,KAAAA,EAAAtZ,IAAAxQ,EAAAwQ,cAAAsZ,KhBytFI/K,EgBrsFJ/P,OAAA1N,SAAAA,EAAAA,GhBssFM,GAAIA,GAAQtB,EAAQ4Q,YAMpB,OgBlsFN7B,GACAzN,GAAAA,EAAAtB,IAAAA,EAAA+Q,aAAAA,GAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,GAEAzP,GAAAyd,EAAAvO,IAAAxQ,EAAA,cAAA,GAAA+e,EAAAvO,IAAAxQ,EAAA,iBAAA,GAAA+e,EAAAvO,IAAAxQ,EAAA,kBAAA,GAAA+e,EAAAvO,IAAAxQ,EAAA,qBAAA,GAEAsB,GhB+rFIyd,EgB7rFJhQ,MAAAzN,SAAAA,EAAAA,GhB8rFM,GAAIA,GAAQtB,EAAQ+Q,WiBl4F1B,ODuMAkZ,GhB6rFQ3oB,GAASyd,EAAGvO,IAAIxQ,EAAS,cAAc,GAAQ+e,EAAGvO,IAAIxQ,EAAS,eAAe,GiBt4FtFsB,GAAAyd,EAAAoM,IAAAA,EAAAC,eAAAA,GAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,mBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,oBAAAA,GAEA9pB,GAEAyd,IjB04FE3d,QiBx4FFf,OAAAyR,sCAAA+X,QAAA,YAAA,WAAA,SAAAphB,GjBy4FI,MiBx4FJA,UAAAugB,EAAAlX,EAAAA,GjBy4FM,GAAIA,GAAU,IACd,OiBx4FNA,YjBy4FQ,GiBx4FRA,GAAAlR,KACAyqB,EAAAD,UACAD,EAAA3nB,IAAA6nB,CAkBA,OjBu3FYvZ,IACFrJ,EiBx4FVugB,OAAAlX,GjB04FQA,EiBx4FRtO,EAAA8nB,WjBy4FUxZ,EAAU,KiBv4FpBA,GjBy4FYqZ,EAAK3nB,MAAM8nB,EAASD,IiBj4FhCxB,GAAA,GACA0B,GACAzZ,EAAAA,MAAAwZ,EAAAD,GAEAvZ,OjBs4FO+X,QiBn4FP/X,YAAA,WAAA,SAAArJ,GjBo4FI,MiBn4FJ,UAAA7I,EAAA4rB,EAAAA,GjBo4FM,GAAI1Z,GiBn4FVtO,IjBq4FM,OADK5D,KAASA,MiBl4FpBkS,WjBo4FQ,GiBn4FRA,GAAAlR,KACAyqB,EAAAzrB,SjBo4FakS,KACClS,EAAQ4rB,WAAY,GACtBL,EiBn4FZM,MAAAH,EAAAD,GjBq4FUvZ,EAAUrJ,EAAS,WACjBqJ,EAAU,KACNlS,EAAQ8rB,YAAa,GkBt7FrCrrB,EAAAmD,MAAA8nB,EAAAD,IAOAM,GAAA,SlBu7FEvqB,QkBl7FFR,OAAAyZ,wCAAAzW,SAAA,eAAA,kBAAA,SAAAgoB,GlBm7FI,QkBl7FJC,KlBm7FMjrB,KAAK+qB,KAAO,KkBh7FlBG,KAAAA,MAAA9E,EAAApmB,KAAAirB,IAAAA,ElBm7FMjrB,KAAKqZ,MAAQ,EkBl7FnB6R,KAAAA,QAAA9E,EAAApmB,KAAAyZ,QAAA/Y,ElBq7FMV,KAAKirB,aAAe,EAwCtB,QkB37FJE,MlB47FI,QkB37FJ1iB,GAAA2iB,GlB47FM,OkB57FN7b,MAAArC,WAAAA,KAAAA,SAAAA,GlB87FI,QAASme,GAAuB5iB,EAAO/H,GkBz7F3C,IAAAd,GAHA0rB,GAAA7iB,EAAA1C,OlB87FUwlB,EAAM7qB,EAAM0K,WAAWggB,ckB37FjCxrB,EAAAI,EAAAJ,EAAAI,EAAAJ,IACAuW,GAAAA,EAAAjJ,GAAAke,gBAAAG,EACAC,MAAAte,EAKA,OAAAue,GlBw4FIP,EkBt7FJ3R,UAAA7Y,gBAAAA,SAAAA,GlBu7FMV,KAAKirB,aAAevqB,GAEtBwqB,EkBx7FJ7R,UAAA3Y,WAAAA,SAAAA,GlBy7FMV,KAAKyZ,QAAU/Y,GAEjBwqB,EkB17FJlrB,UAAAqZ,WAAAA,SAAAA,GlB27FMrZ,KAAKuZ,QAAU7Y,GAEjBwqB,EkB57FJQ,UAAAhrB,SAAAA,SAAAA,GlB67FMV,KAAKqZ,MAAQ3Y,GAEfwqB,EkB97FJS,UAAAjrB,SAAAA,WlB+7FM,MAAOV,MAAKqZ,OAEd6R,EkBh8FJH,UAAArqB,QAAAA,SAAAA,GlBi8FMV,KAAK0rB,IAAMhrB,GAEbwqB,EkBj8FJH,UAAAa,SAAAA,SAAAA,GACA5rB,KAAA2rB,MAAAjrB,GlBm8FIwqB,EkBj8FJ7R,UAAA3Y,YAAA6V,SAAAA,GACAvW,KAAAuZ,KAAAA,GlBm8FI2R,EkBj8FJD,UAAAA,SAAArT,SAAAA,GAaA,MAZA5X,MAAA+qB,KAAA/qB,EAAAA,clBk8FMA,KAAK2rB,MAAQjrB,EAAMmrB,WkB/7FzBX,KAAAA,IAAA9E,EAAAA,UACApmB,KAAAqZ,MAAAN,EAAA/Y,WlBi8FMA,KAAKuZ,QAAU7Y,EAAMgY,akB97F3B1Y,KAAA8rB,QAAAZ,EAAA9E,aAEApmB,KAAAirB,aAAAE,EAAAA,kBAGAY,MlB87FIb,EAAU9E,UAAU4F,OAAS,WkB17FjC,MAAAX,IAAAA,MAAAA,KAAAA,KAAAA,KAAA5iB,MAAA/H,KAAAA,IAAAA,KAAAA,MAAAA,KAAAA,QAAAA,KAAAA,QAAAA,KAAAA,clB67FI,IkB37FJorB,GAAAprB,EAAA0K,UAkBAxL,EAAAyc,KAAAA,UlBy7FMlG,OkBt7FN8V,YlBu7FMT,QkBt7FNU,ElBw7FIlsB,MAAKoM,MkBt7FTpN,UAAAwsB,aAAA,SAAAW,EAAAC,GlBu7FM,GkBt7FNC,GAAA,SAAAloB,GlBskGQ,QkBv5FRmoB,GAAAnW,GACA,GAAAoW,GAAAA,EAAAC,EACA,OAAAC,GAAAC,GlBy5FQ,QkBt5FRlsB,GAAA2V,GlBu5FU,GkBt5FVwW,GAAAC,EAAAzW,GACA0W,EAAAC,EAAAD,QAAAA,MAAAA,QlBu5FcP,EkBt5Fd,kBAEAC,EAAAC,EAAAzmB,MAAAmH,GlBs5Fcuf,EkBr5FdlgB,OAAAkgB,KAAAA,GlBs5FcM,IAWJ,OAVAvsB,SAAQC,QAAQ8rB,EAAa,SAASM,GkBp5FhDE,GAAAA,EAAAF,GlBs5FcA,EAAOC,EAAuBD,OAE9B,KAAK,GAAI3f,GAAI,EAAGA,EAAIuf,EAAa1mB,OAAQmH,IkBl5FvD2f,EAAAG,EAAAA,MAAAA,EAAAC,IAAAA,KAAAA,KAAAA,EAAAA,IAaAF,GAAAH,KAAAA,KlB24FiBG,EAAenL,KAAK,IAE7B,QkBx4FRqL,GAAAA,GlBy4FU,MAAOA,GAAKprB,QAAQ,MAAO,UAAUA,QAAQ,KAAM,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,OAAQ,SAEtO,QkBv4FR4qB,GAAAC,GACA,MAAAQ,SAAAC,KAAAA,GlBy4FQ,QkBr4FRD,GAAAD,GlBs4FU,MAAOA,GAAKprB,QAAQ,WAAY,MAElC,QAASurB,GAAoBD,GkBh4FrC,IAAA,GAFAV,GAAAY,OAAAlX,KAAAA,GACA+W,EAAAI,EACAC,EAAAA,EAAAA,EAAAA,EAAAL,OAAAA,IlBo4FYA,EAAKA,EAAG3gB,MAAM,KAAOW,EAAI,KAAK0U,KAAK,IAAMqK,EAAUQ,EAAavf,IAAM,IkBh4FlF,OAAAuf,IAAAA,QAAAA,IAAAe,EAAAd,KAAAT,MlBo4FQ,QkBl4FRwB,GAAAA,GACA,GAAAC,GAAAA,EAAAA,EACA,OAAAC,GAAAA,GlBo4FQ,QkBl4FRC,GAAAA,GlB04FU,IkBv4FV,GAEAD,GACAE,EAEAD,ElBg4FcC,EkBr4FdpB,EAAAgB,OAAAK,KAAAA,GACAJ,EAAAD,GAAAA,QAAA,cAAA,KAOAG,KlB+3FqE,QAAnDH,EAAcK,EAAYC,KAAKZ,KkB53FjD9Q,EAAAhK,EAAAA,GACAsb,EAAAtR,EAAAA,GlB83FYwR,EAAgBG,EAASL,GkB13FrCC,EAAAnC,KAAAA,ElB63FU,OAAOmC,GAzMT,GkBj4FRvR,GACA4R,EAtDAC,EAAA1C,QAAAxqB,UAAApB,EAAAuE,GACAgqB,KACAC,GACAC,IAAA,WACAC,GAAAtvB,aACA6hB,EAAA7hB,EAAAwsB,OAAA,cAAA,mBACA+C,GAAAA,aACAC,EAAAA,EAAArC,OAAAsC,cAAAC,mBACAC,GAAA,mBACAC,EAAA5vB,EAAAwsB,OAAA,iBAAA,oBACAqD,GAAAA,oBACAC,EAAAA,EAAA3C,OAAAsC,eAAAM,iBACAC,EAAAA,QACAC,KAAAjwB,EAAAwsB,iBAAA0D,IAAAtN,KAAA,KACAuN,IAAAA,EAAAV,iBAAAC,SAAA9M,KAAA,KACAwN,GAAA,yBACAC,EAAArwB,EAAAwsB,OAAA,yBAAA,2BlBu7FUqD,KAAM1C,EAAQsC,iBAAiBa,MAAM1N,KAAK,KkBp7FpDkN,IAAAd,EAAAA,iBAAAA,WAAAA,KAAAA,KACA9B,GAAAA,gBACAphB,EAAAA,EAAAoO,OAAAA,eAAAA,iBACAqW,KAAAzD,gCACAO,GAAAP,WACAoC,EAAApC,EAAA7S,OAAAA,wBAAAA,kBAEAmV,GACAC,IAAAvC,EAAA9S,gBACAsV,GAAAxC,EAAA9S,WACAuV,EAAAA,EAAApD,WACAqD,GAAAA,EAAArD,WACAwD,EAAAA,EAAA7C,WACA8C,GAAA9C,EAAA0D,SACA3O,EAAAiL,EAAA9S,SlBs7FUqV,GkBt7FVvC,EAAAzS,SlBu7FUiV,EkBv7FVxC,EAAA9rB,SlBw7FUuuB,KAAMpD,EkBv7FhB0D,IAAAA,ElBy7FUF,GkBz7FV7C,EAAA9rB,QlB07FU4uB,EAAG9C,EAAM0D,QkBz7FnBV,EAAAA,SAAApuB,GAAA,GAAA2Y,GAAAoW,KAAAA,WAAApE,ElB47FY,OAAOrrB,MAAKgZ,SAAStY,EAAMoU,MAAM,OAASuE,EAAQ,GAAKA,IAEzDwV,KkB77FV,SAAAY,GlB87FY,MAAOzvB,MAAKyvB,SAASpE,EAAuBc,EAAQsC,iBAAiBa,MAAO5uB,KAE9EouB,IkB/7FV,SAAAW,GlBg8FY,MAAOzvB,MAAKyvB,SAASpE,EAAuBc,EAAQsC,iBAAiBM,WAAYruB,KkB97F7F0uB,GAAA,SAAA1uB,GAAA,MAAAV,MAAA6b,SAAAA,EAAAnb,EAAA,IACA2uB,EAAA,SAAA3uB,GAAA,MAAAV,MAAAU,SAAA,EAAAA,EAAAqF,IlBq8FUopB,KAAMrD,EAAMjQ,YkBj8FtBuT,GAAAM,SAAAA,GACAzB,MAAAA,MAAAA,YAAAA,IAAAA,EAAAA,IAGA5R,EAAAA,SAAAsT,GACAD,MAAAE,KAAAA,EAAAA,GAAAD,IAAAtT,EAAAA,OAAAsT,KAAAA,YAAAA,IAAAA,EAAAA,GAAAA,KAAAA,YAAAA,EAAAA,ICnHA,OnByjGQtT,GkBh8FRqT,KAAAnmB,WlBi8FU8S,EAAYsT,QAAUxD,EAAQsC,iBAAiBzvB,EAAQmX,SAAWnX,EAAQmX,OkB97FpFkG,EAAAA,EAAAA,EAAAwT,SAEA5B,EAAA9X,EAAAgW,EAAAsC,UlBg8FQpS,EkB97FRyT,QAAA3Z,SAAAyZ,GACA,MAAAG,SAAAA,OAAA5Z,IAAAkX,MAAAA,EAAAlX,WACA7Q,EAAAA,KAAAwqB,IlBg8FQzT,EkB77FR9E,MAAAsY,SAAAtgB,EAAAsgB,EAAAlX,EAAAxD,GACAgB,IAAAjJ,EAAA5H,EAAAS,iBAAAoQ,IAAAA,GACA3V,QAAAuvB,OAAA7iB,KAAA6iB,EAAAA,EAAAxY,EAAAjS,GAAA+W,EAAAsT,QAAAxa,GlB87FU,IAAI2a,GAAc3Z,EAASyZ,EAAgBzZ,GAAUuZ,EkB37F/DxV,EAAA8R,EAAAA,EAAAA,GAAAA,EAGAtc,EAAA6H,EAAAwW,KAAA7T,ElB27FU,KkB17FV5U,EAAA,OAAA,CAGA,KAAA,GlBw7FciS,GAAOsY,IAAatgB,MAAMsgB,EAASlX,YAAa,GAAIuS,IAAY8E,SAASH,IAAY,GAAI3E,IAAY8E,SAAS,GAAIjX,MAAK,KAAM,EAAG,EAAG,IkBx7FjJmB,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,IlB07FgB6V,EAAa7iB,IAAI6iB,EAAa7iB,GAAGgZ,KAAK3O,EAAMjS,EAAQ4H,EAAI,GkBt7FxE,IAAAqK,GAAAA,EAAAA,QAEA,OAAA7W,UAAAA,EAAAgrB,IAAA,MAAAxR,EAAA+V,WACAC,EAEAhW,GlBy7FQmC,EkBv7FR9E,oBAAA4Y,SAAAzvB,EAAAqF,GlBw7FU,GAAIwR,EACJ,IkBv7FV,UAAAA,EAAA7W,ClBw7FY,GAAIwvB,GAAQ,GAAInX,KAChBxB,GkBv7FZ,GAAAwU,MAAAA,EAAArrB,cAAAwvB,EAAArE,WAAAqE,EAAAD,WAAA,YAAApvB,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,YAAAA,EAAA,EAAA,QAGA0W,GAFA/W,QAAAkP,SAAAhP,IAAAA,EAAAoU,MAAA,UlBw7FgBpU,EkBv7FhBF,MAAAA,KACAK,GAAAA,MAAAH,EAAAyvB,OAAA3a,EAAAA,EAAAA,OAAAA,IAEA,GAAAuD,MAAArY,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,IAGA6W,EAAAA,GlBu7FmB,GAAIwB,MAAKrJ,SAAShP,EAAO,KkBp7F5C0vB,QAAAA,SAAAA,IAAA1vB,IAAAA,EAAAG,OACAsW,YAAAA,IAAAA,EAAAA,KAAAA,EAAAA,GAGA,GAAA4B,MAAAA,ElBs7FU,OkBp7FV5B,IlBs7FQkF,EkBp7FR+T,oBAAA1vB,SAAAmb,EAAAA,GlBq7FU,GAAI1E,EkB75Fd,OlB+5FYA,GkBr7FZtW,QAAAsW,GACA,GAAA4B,OAAA8C,YAAA,KAAA,EAAA,GACAQ,QAAAA,SAAA3b,IAAAqY,EAAAjE,MAAA,UlBq7FmB,GAAIiE,MAAKrY,EAAMyvB,OAAO,EAAGzvB,EAAMqF,OAAS,IAAI8V,YAAY,KAAM,EAAG,GkBl7FpF1E,EAAAA,GlBo7FmB,GAAI4B,MAAKrJ,SAAShP,EAAO,KAAKmb,YAAY,KAAM,EAAG,GkBx6FtEwU,QAAAA,SAAAA,IAAA9Y,IAAA7W,EAAA6W,OACA,YAAAA,IAAA/B,EAAAA,KAAAA,EAAAA,GlB26FmB6G,EAAYI,MAAM/b,EAAO,GAAIqY,MAAK,KAAM,EAAG,EAAG,KkB95FjEsD,EAAAE,qBAAA,SAAAhF,GACA,MAAAA,IAIAA,EAAApC,SAAAA,EAAAA,WAAA,GAAAoC,EAAAhB,WAAA,EAAA,GACAgB,GAJA,MlBu6FQ8E,EAAYE,qBAAuB,SAAShF,EAAMpC,EAAUmb,GkBh6FpE,MAAA/Y,IAYA2V,GAAAI,QAAAA,IACA/V,EAAA6V,GAAAA,MAAAA,EAAAA,WlBy5FY7V,EAAK0B,WAAW1B,EAAKmB,cAAgB4X,EAAO,GAAK,GAAK/Y,EAAKgZ,sBkBr5FvE5D,GlBi5FmB,MmBhoGnB3sB,EAAAwwB,OACArE,EAKAnsB,OAAAywB,QnBosGEjwB,QmBhsGFkwB,OAAAA,2CAAArZ,QAAAA,kBAAAA,UAAAA,aAAAA,SAAAA,EAAAA,GnB6sGI,QmB1rGJsZ,GAAAzb,GnB2rGM,MAAO,wCAAwC6Y,KAAK5X,GAAQ7M,MAAM,GAbpEtJ,KmBhsGJwwB,iBAAA/B,WnBisGM,MAAOtC,GAAQloB,IAEjBjE,KmB/rGJywB,kBAAAhC,SAAAS,EAAAA,GnBgsGM,MAAO/C,GAAQsC,iBAAiBtY,IAAWA,GAE7CnW,KmB9rGJ0wB,cAAA,SAAArZ,GnB+rGM,MAAO8U,GAAQsC,iBAAiBC,UAElC1uB,KmB5rGJ4wB,SAAAD,SAAAzb,GnB6rGM,MAAOiX,GAAQsC,iBAAiBS,KAKlClvB,KmBxrGJ8X,YAAA6Y,SAAAzb,GnByrGM,MAAOyb,GAAgBzb,GAAY,IAErClV,KmBtrGJkY,cAAAyY,SAAAzb,GnBurGM,MAAOyb,GAAgBzb,GAAY,IAErClV,KmBprGJmY,cAAAwY,SAAAzb,GnBqrGM,MAAOyb,GAAgBzb,GAAY,IAErClV,KmBlrGJgY,cAAA2Y,SAAAzb,GnBmrGM,MAAOyb,GAAgBzb,GAAY,IAErClV,KmBjrGJoY,YAAAgU,SAAAjW,GnBkrGM,QAASwa,EAAgBzb,GAAY,IE7uG3C1U,KAAAA,OAAA,SAAA0U,GAGA,QAAArS,EAAA1B,GAAAP,IF+uGIZ,KEhrGJkW,WAAA3W,SAAAgY,EAAApB,EAAAnX,EAAAA,GFirGM,MEhrGNmB,GAAAoX,EAAApB,EAAAhB,OFmrGE3U,QAAQf,OAAO,0BAA2BoxB,QAAQ,cAAehuB,GAwFjErC,QGv0GFuC,OAAA,2BAAA,2BAAAC,SAAA,YAAA,WHw0GI,GGv0GJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,WACAuB,YAAA,WHw0GMqI,UAAW,cGr0GjBxL,YAAA,6BAEA+C,QAAAmf,QACAjf,WAAA6tB,EAEA5tB,UAAA6tB,EHq0GMnvB,MGn0GNovB,EHo0GM7tB,MGj0GNnE,EHm0GIgB,MG/zGJgxB,MAAAA,UAAA5xB,aAAAJ,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GHk0GM,QG9zGNI,GAAAA,EAAA+E,GH66GQ,QAAS8sB,GAAY7rB,GG7wG7ByD,MAAAA,GAAA0C,SAAAnM,EAAA,GAAAN,EAEAsG,EAAAmG,SAAAnM,EAAA,IAAA4xB,EAAA9oB,OH6pGQ,GG9zGR9I,MACAA,EAAAoF,QAAAxD,UAAApB,EAAAuE,EH+zGQ6sB,GAAUlsB,OAAS9F,EAAQkD,OAASlD,EAAQkD,MAAMqP,QAAUC,EAAWD,OGzzG/EnS,EAAA8xB,EAAA9xB,EAAAgG,EH2zGQ,IG1zGR+rB,GAAA5nB,EAAAvC,QACA5B,IAAAgB,EAAAA,IAAAA,WAAAA,EAAAA,GAAAA,QAAAA,gBH2zGUhH,EG1zGViH,KAAAA,gBAAAA,QH2zGUjH,EG1zGVgyB,KAAAA,cAAAhyB,YH2zGUA,EG1zGViyB,KAAA,gBAAA5pB,UH4zGQrI,EAAQ8xB,QAAQ,SAAS9rB,GGtzGjC4rB,GAAAA,MAAAhpB,KAAAA,EAAAA,SAAA,CACA5C,EAAAgB,iBACA4qB,EAAAA,iBACA,IAAAI,GAAA5wB,QAAApB,QAAA4xB,EAAArpB,SAAA,GAAAyM,iBAAA,sBHwzGYgd,GAAMC,GAAG,GAAG,GAAG5pB,WAGnBupB,EGvzGR3qB,WAAAA,SAAAA,GAGA,GAAA+qB,MAAAA,KAAA5wB,EAAAA,WAAAwwB,EAAArpB,UAAAyM,KAAAA,KAAAA,EAAAA,SAEA,WADA4c,GAAAjrB,KAAAA,KAAAwD,KAAAnE,EAAA4B,SHwzGU,IGrzGV,UAAA8pB,KAAAA,EAAAA,SHqzGU,CACA1rB,EAAIgB,iBGlzGdhB,EAAAA,iBAIAgsB,IAAAA,GAAA/sB,QAAAoD,QAAAA,EAAAA,SAAAA,GAAAA,iBAAAA,sBHizGU,IAAK2pB,EAAMrrB,OAAX,CG7yGVirB,GAAAA,EAEAxwB,SAAA8wB,QAAAF,EAAA,SAAA3iB,EAAAvB,GACAwF,GAAAtT,EAAAmyB,KAAAA,EAAAA,YAAAA,EAAAA,KAEA7e,KAAAA,EAAAA,SAAAA,EAAAA,EAAAA,IAAAA,KAAAA,EAAAA,SAAAA,EAAAA,EAAAA,OAAAA,EAAAA,IAAAA,KAAAA,EAAAA,SAAAA,IAAAA,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,QAAAA,YAAAA,KAAAA,EAAAA,GH8yGU0e,EG7yGV1e,GAAAA,GAAAA,GAAA5T,WH+yGQkyB,EG7yGRQ,YAAA,SAAApsB,GHgzGU,IAFA,GAAIksB,IG7yGd,EACAA,EAAA9wB,QAAApB,QAAAgG,EAAAmsB,eH8yGiB7e,IAAW5T,GAAa4T,EAAO3M,QAAU2M,EAAO,KAAO4I,EAAQzM,SAASE,MAAM,CG1yG/F,GH2yGY2D,EAASA,EAAOA,SG3yG5B4e,IAAAxyB,GAAA4T,EAAA,KAAAse,EAAArpB,SAAA,GAAA,CACAqpB,GAAA9oB,CH6yGc,OG1yGd9C,GAAAiB,EAMAqB,GAKAG,EAAAA,iBAEAzI,EAAAA,mBANA4xB,EAAAtpB,OH+yGQ,IAAIA,GGtyGZspB,EAAArpB,IHuyGQqpB,GAAUtpB,KAAO,WACfA,IACAG,EGryGVmpB,WHgzGY,GAVA5xB,EGryGZ4xB,KAAArpB,gBAAA,QHsyGgBqpB,EAAUrpB,WGnyG1Bua,EAAAva,SAAAspB,KAAAA,cAAAA,SAEAD,EAAAA,SAAArpB,KAAA,OAAA,SAGAypB,EAAA5sB,UAAAwsB,EAAArpB,WAEAnH,EAAApB,SAAA4xB,GAAAA,UAAArpB,EAAAyM,YAEAgd,EAAA5wB,SAAApB,GAAAA,WAAAuI,EAAA6pB,cHkyGYtP,EGhyGZkP,GAAAA,QAAArrB,GAIAvF,EAAAC,SAAA2wB,CH8xGc,GG7xGd5wB,GAAApB,QAAAsB,QAAA8D,EAAAmD,SAAA,GAAAyM,iBAAA,oBH8xGcgd,GAAM5sB,KAAK,OAAQ,QACnBhE,QAAQpB,QAAQ4xB,EAAUrpB,SAAS,GAAGyM,iBAAiB,eAAe5P,KAAK,OAAQ,aACnF4sB,EAAQ5wB,QAAQpB,QAAQ4xB,EAAUrpB,SAAS,GAAGyM,iBAAiB,uBG5xG7Egd,EAAA5sB,KAAA,OAAA,YACA2sB,EAAAM,QAAAzyB,EAAAkE,UH8xGgB1C,QAAQC,QAAQ2wB,EAAO,SAAS1wB,EAAOG,GG3xGvDqH,QAAA8oB,QAAA9oB,GAAAA,KAAAA,WAAAA,UAKA8oB,GAAAA,GAEAhyB,EAAAkE,SAAAA,aAAAyE,EAAAoL,SAAA,QH4xGQ,IG1xGRie,GAAAA,EAAArpB,IH2xGQqpB,GAAU9oB,KAAO,SAAS0e,GGxxGlC1E,EAAA5Z,WACAlJ,EAAA+xB,KAAAM,gBAAA,SACA5pB,EAAAF,SAAAnD,KAAA,cAAA,QACA0D,EAAAA,UAAAA,EAAAA,WACA8oB,EAAApK,SAAAze,IAAA,UAAA6oB,EAAAhpB,YH0xGYgpB,EGzxGZnpB,SAAAM,IAAA,WAAA6oB,EAAAQ,cH2xGUtP,EAAO/Z,IGzxGjB/I,QAAAqI,GH0xGc0pB,EAASM,SAAS,aAAaN,EAASpd,YAAY,QACxDlM,EGzxGV;AH0xGYK,IGxxGZ0e,GH0xGc/e,EAAS,WGvxGvByD,GAAA0lB,EAAA1lB,IACAA,EAAAA,GAAA7D,SAEA6D,GAAAA,IAKA,MHuxGQ,IGrxGRA,GAAAC,EAAAnM,OAiBA8C,OHqwGQ8uB,GAAU1lB,QAAU,WGnxG5B4W,EAAA8O,IAAAA,QAAAA,GHqxGU1lB,KGvwGV0lB,EHwpGM,GG/zGN9O,GAAAiP,QAAA/xB,QAAAsT,EAAAA,SAAAA,MAEAoe,EAAA1xB,QAAAgnB,UAAA0K,iBAAAznB,QAAAA,UAAAqoB,uBAAAC,QAAAvL,UAAAwL,oBAAAD,QAAAvL,UAAAyL,mBAAAF,QAAAvL,UAAA0L,gBHo7GM,OG1wGNC,OH4wGKlpB,UG1wGL,cAAAmpB,UAAAA,OAAAC,YAAA,SAAA3W,EAAA1J,EAAAof,GH2wGI,OACEhoB,SAAU,MACV9G,OG1wGN,EH2wGMjC,QG1wGN8xB,SAAAxyB,EAAAyyB,GH2wGQ,IG1wGRD,EAAAhzB,WAAAA,CH4wGU,IADA,GG1wGVizB,GAAAE,EAAAC,GAAAA,YH2wGiBH,GAAwC,IAAzBA,EAAYC,UAChCD,EAAcA,EAAYA,WGrwGtChzB,IAAAA,EAAAA,UAAAA,MAAAA,KAAAA,QAAAA,kBAAAA,IACAkD,EAAAA,SAAAA,EAAAA,UHwwGY6vB,EAAOhzB,YAAcD,EGtwGjC0B,EAAAC,WAAA0xB,YAAAH,IH0wGQ,MGrwGR9oB,UAAAhH,EAAA9C,EAAAoF,GACAhE,GAAAA,IACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAAI,YAAAA,QAAAA,UAAAA,WAAAA,OAAAA,YAAAA,KAAAA,aAAAA,SAAAA,GACAsI,QAAAvD,UAAA/E,EAAAuI,MAAAC,EAAAA,GAAAxI,EAAAyI,KHqwGU,IGnwGVtK,GAAAkD,eHowGU1B,SAAQC,SAAU,OAAQ,aAAe,SAASI,GAC5CL,QAAQoF,UAAUpB,EAAK3D,KAASqI,EAAiBK,KAAK/E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KAEvFL,QGjwGVyJ,SAAAzF,eAAA,SAAA2F,eAAAC,UAAAA,SAAAA,GHkwGY,GGjwGZlI,GAAAkiB,KAAAja,EAAAA,OAAAA,GAAAA,cAAAA,EAAAA,MAAAA,EACA3J,SAAAoF,UAAApB,EAAA2E,MHkwGcnK,EAAQ6B,GAAOqB,EAAMsS,MAAMhQ,EAAK2E,OG1vG9CjH,EAAA+H,YH8vGY/H,EG7vGZ+H,OAAAmoB,EAAAA,WAAAxsB,SAAAuE,EAAAC,GACAlI,EAAA1B,QAAAG,IACA,EH+vGU,IAAIyxB,GG7vGdpB,EAAA5xB,EAAAJ,EH8vGcwF,GG7vGd4tB,QH8vGYlwB,EAAM+H,OAAOzF,EAAKqQ,OAAQ,SAAS1K,EAAUC,GACtCgoB,GAAa5xB,QAAQoF,UAAUuE,KAChC3J,QAAQG,SAASwJ,KAAWA,IAAaA,EAAS2K,MAAM,yBG1vG1EzJ,KAAA,EACA+mB,EAAAA,OAEAA,EAAAlqB,UH+vGUhG,EAAMmJ,IAAI,WAAY,WAChB+mB,GAAUA,EAAS9mB,UoB3gHnC7L,EAAA,KAGAG,EAAAI,apBghHEQ,QoBxgHFyC,OAAA,6BAAA,oCAAA,uCAAA,sCAAA,oCAAA,2BAAAD,SAAA,cAAA,WpBygHI,GoBxgHJE,GAAAlD,KAAAJ,UACAgC,UAAA,UACAuB,YAAA,aAEA6R,UAAA,cACAqd,YAAA,iCACAC,QAAAA,QACAnd,WAAA,EACAod,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAC,SAAAA,OACAC,WAAAA,YACAC,SAAAA,KACAxd,gBAAA,KACAyd,UAAAtd,KACAud,YAAAvd,MACAwd,WAAA,OACAC,iBAAA,YACAC,gBAAA,OACAC,cAAAA,EACAC,WAAA,EACAC,UAAA7d,EAAAA,GACA8d,UAAA9d,EAAAA,GACA+d,UAAA,EAEAC,QAAAA,EAGAC,UAAAA,EpBqgHMN,mBAAoB,GoBlgH1BnzB,UAAAoM,EAEAinB,UAAAhf,EACAif,SAAAtmB,mCACAumB,UAAA3zB,oCAEA4zB,uBAAAE,WpBkgHMD,aoB9/GNE,EpBggHI3zB,MoB9/GJoM,MAAApN,UAAA20B,YAAAtiB,aAAAA,OAAAA,iBAAAA,kBAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GpBkgHM,QoBx/GNuiB,GAAAC,EAAAF,EAAAA,GpB8gHQ,QoBl+GRzxB,GAAAkD,EAAAxC,GpBm+GU,KoBl+GV+wB,yBAAApqB,KAAAnE,EAAA4B,UAAA,yBAAAuC,KAAAnE,EAAA4B,UAAA5B,EAAAmiB,UAAA,yBAAAhe,KAAAnE,EAAA4B,UAAA5B,EAAA0uB,QpBm+GY,OoBl+GZ90B,CpBs+GU,IAFAoG,EoBl+GVgB,iBpBm+GUhB,EAAIiB,kBoBj+Gd0tB,KpBk+Gc3uB,EoBl+GduuB,QAAAI,CpBm+GY,GAAK7xB,EAAM8xB,MAILpxB,IAAU9D,GAAa8D,EoBj+GzCV,EAAA6e,OAAA,WpBm+GkB4S,EAAYI,QAAQ7xB,EAAM8xB,MAAQ,KoBx9GpD7uB,EAAA4uB,QAAAxc,EAAA+B,MAAAA,OpBo9Gc,IADAqa,EoBl+GdzrB,MAAA,GACAyrB,EAAAA,YAAAzxB,OAAA8xB,CpB4+GY,QAAO,EoBz9GnBL,OAAAA,EAgPA,QAAA1c,GAAA5E,GAIAshB,EAAAA,SAAAthB,EAAAwH,YAAApL,EAAA8I,MACA9I,EAAAwlB,QAAA5f,EAAArV,SpBo4GQ,QoBl4GRI,KpBm4GUA,EoBl4GV,GAAAqI,QA/TAksB,GAAAA,GAAAO,EAAAN,EAAAO,QAAAA,UAAAA,EAAAA,IACA/d,EAAAwd,EAAAA,MAOA1xB,EAAAlD,EAAAg0B,SAEA9wB,EAAAkyB,EAAAp1B,MACAkD,GAAAmyB,YAAAr1B,EAAAu0B,WAAAA,EAAAA,SAEArxB,EAAAoyB,KAAAA,gBAAAlB,SAAAA,KAAAA,gBAAAA,OACAlxB,IAAAA,GAAAlD,EAAAq0B,EAKAnxB,GAAAlD,OAAAiF,EAAAkwB,KACAjyB,IAAAA,GAAAqyB,EAAAtwB,QACA/B,GAAAgB,MAAAA,EAAAlE,UACAkD,EAAAuxB,UAAAA,EAAAz0B,SAGAkD,EAAAsyB,WAAAx1B,EAAAy1B,UACAvyB,EAAAwyB,UAAAA,EAAA11B,SAGAkD,EAAAyyB,UAAAhB,EAAAO,SAIAhyB,EAAA+B,GAAAmB,OAAAwvB,EAAAA,IAAAhyB,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EpBs+GQV,EoBr+GRqyB,WAAAhrB,OAAAvK,EAAAiF,IAAA+C,EAAAA,KACAlI,EAAAE,EAAAiF,GAAAsF,YAAAvC,EpBq+GQ9E,EoBn+GRgB,SAAAlE,EAAAkE,SpBo+GQhB,EAAMuxB,YAAcz0B,EAAQy0B,YAC5BvxB,EoBn+GRkE,WAAAA,EAAAA,UpBo+GQlE,EoBn+GRmE,eAAAA,EAAAA,apBo+GQ,IoBl+GRsuB,GAAA3tB,EAAAktB,OAAAhyB,EAAA8xB,MA+BA9xB,GAAA2yB,QAAAA,SAAAtd,EAAA+B,GACAqa,GpB49GUA,EAAYzuB,OAAOqS,IAErBrV,EoB39GRlD,YAAAqW,SAAA3U,GpB49GUizB,EoB39GVA,YAAAjzB,IpB69GQwB,EAAM2yB,YoB39Gd,WpB49GUlB,EoB39GVA,SAAAzxB,EAAA6W,MAAA,GAAA4a,EAAAO,OAAAnuB,SpB69GQ7D,EAAM4yB,UAAY,WoB19G1BC,EAAAA,WACApB,EAAAte,QAAAA,GACAse,EAAAI,OAAAA,GAAAhb,QpB69GY4a,EoB39GZzuB,OAAA,GAAA6T,OAAA,IpB89GQ7W,EAAM6yB,OAAS,WoB19GvBC,EAAAA,WACA9yB,EAAA+yB,QAAAC,GACAvB,EAAAwB,OAAAA,OpB69GYxB,EoB39GZA,OAAAnuB,MAAA0vB,IpB89GQhzB,EAAM8yB,SAAW,SAASE,GACxBhzB,EAAM+yB,cAAgBC,EAAQjxB,GAC1BixB,EAAQC,SAAWjzB,EAAM2I,WoB19GvC7C,EAAAA,MACAotB,EAAAA,OAAAR,EAAAA,MAIAD,EAAAU,QAAAA,EAAAjwB,QpB69GQlD,EoBx9GRozB,WAAA,SAAAlwB,EAAAsmB,GACA,GAAAhZ,GAAAtT,EAAAmyB,GAAAA,EACA6D,IACA1iB,EAAAA,UAAAA,IpB29GQxQ,EoBx9GRsvB,YAAA,SAAApsB,GpB29GU,IAFA,GAAIkwB,IoBx9Gd,EACAA,EAAAA,QAAAl2B,QAAAgG,EAAAmsB,epBy9GiB7e,IAAW5T,GAAa4T,EAAO3M,QAAU2M,EAAO,KAAO4I,EAAQzM,SAASE,MAAM,CoBl9G/F,GpBm9GY2D,EAASA,EAAOA,SoBn9G5B4iB,IAAAlwB,GAAAmsB,EAAA,KAEAoC,EAAA2B,SAAA,GAAA,CACA3B,GAAAzrB,CpBm9Gc,OoBh9Gd9C,GAAAgB,GAMAutB,GAAAnuB,EAAA+rB,iBAAAha,GAIAod,EAAAA,kBpB+8GYvvB,EAAIgB,kBoBj9GhButB,EAAAlb,SAQAkb,EAAA4B,OAAAA,SAAAA,GACAv2B,QAAAw2B,OAAAA,KAAAC,MAAAA,EAAAA,aACA9B,EAAAna,MAAAtX,EACA1B,EAAAC,OAAAA,KAAAyB,EAAAgL,IpB88GUymB,EAAY/a,QAAO,IAErB+a,EoB18GRnzB,oBAAA,SAAAi1B,GpB28GUz2B,EoB18GVwB,mBAAAN,CpB28GU,KoB18GVA,GAAAA,GAAAA,EAAA2X,EAAAA,EAAAA,KAAA9R,OAAAwR,EAAAA,EAAAA,IpB28GY/W,QAAQC,QAAQyB,EAAMwX,KAAKxM,GAAIymB,EAAY+B,iBAG/C/B,EAAYzuB,OAAS,SAASqS,EAAMuB,GoBz8G5CtY,QAAAwzB,OAAAA,KACA9zB,QAAA4F,OAAAA,EAAAtF,aAAA+W,MAAAA,EAAAA,WAAAA,cACArX,EAAAwF,WAAAA,GAAAA,MAAAA,IpB68GYxF,EoB18GZyzB,WAAA,MpB48GezxB,EAAM8xB,OAASlb,GAClB5Y,EoB18GZ4F,cAAAtF,QAAA2Y,KAAA5B,IACA/W,EAAAQ,UACA+pB,EAAAxT,YAAAqU,GACAD,EAAApU,WACAA,EAAA0Y,MAAAA,OpB88GYzvB,QAAQQ,OAAOoV,GACb2U,KAAMxT,EAAKqU,coBn8GzB+H,MAAAI,EAAAA,WACA7xB,KAAA8xB,EAAA2B,YAGAhC,EAAA/a,QAAAA,EAAAA,MAAAA,GpBo8GY+a,EAAY/a,WAGhB+a,EoB57GRiC,QAAA,SAAAC,GACAlB,EAAAA,MAAAzO,EpB67GUyO,EAAUhB,EAAYO,OAAOhyB,EAAM8xB,OoB17G7CL,EAAAmC,UpB67GQnC,EoB37GRlzB,OAAAyB,SAAA0zB,GACAG,KAAAA,GAAArK,EAAAA,QACAkK,KAAA/qB,GAAA3I,EAAA2I,QpB47GU8pB,EAAQqB,MAAM9P,KAAKyO,IAErBhB,EAAYmC,gBAAkB,WoBz7GtCnC,IAAAA,GAAAA,GAAA9Z,EAAAA,EAAAA,EAAAH,KAAA3T,OAAAwR,EAAAA,EAAAA,IACA/W,QAAAm0B,QAAAsB,EAAAA,KAAA1e,GAAAA,SAAAA,GpB27Gcwe,EAAerK,GoBx7G7BiI,EAAA+B,WAAAA,EAAA7qB,SAAA4D,MpB67GQklB,EoBx7GRuC,YAAAA,SAAAA,GAIA,MAAA/b,GAAAA,WAAApB,IpBu7GQ4a,EoBr7GRxZ,eAAAgc,SAAAA,GpBs7GU1nB,EoBr7GVkd,SAAAxR,EAAAic,WAAAA,EAAAA,OpBu7GQzC,EAAY0C,YAAc,SAAS31B,GoBp7G3CizB,GAAAA,GAAA/a,EAAAA,MpBs7GcuB,EAAa,GAAIpB,MAAKA,KAAKud,IAAIlgB,EAAS2U,MAAQmL,EAAMnL,MAAQ,GAAKrqB,EAAO0V,EAASuV,OAASuK,EAAMvK,OAAS,GAAKjrB,EAAO,GoBn7GrIizB,SAAAA,OAAAxtB,GAEAf,KAAAgB,EAAAA,iBACAhB,MAAAiB,EAAAA,cAEAkR,KAAAvK,EAAAupB,epBo7GU5C,EoBl7GVtZ,UpBo7GQsZ,EAAYxtB,aAAe,SAASf,GAGlC,GAFAA,EoBl7GViV,iBpBm7GUjV,EAAIiB,kBACA2G,EAAS,CoBz6GvB2mB,GAAAA,GAAA3rB,QAAA5I,QAAAgG,EAAAA,OACAA,YAAAgwB,EAAAA,GAAAA,SAAAR,gBAEAQ,EAAAA,EAAA1iB,UAGA1O,EAAAA,eAAAwD,WAiCAmsB,EAAAoC,WAAAtnB,SAAAA,GACAA,GAAA5D,GAAA8oB,EAAAllB,EACAwlB,KpB24GYU,EAAQU,UAAUjwB,GoBx4G9BpB,EAAAgT,WpBm5GQ,IoBl4GR5X,GAAA4P,EAAAqD,IpBm4GQshB,GoBl4GRnvB,KAAA,WpBm4GU,MoBl4GVpF,IAAAJ,EAAAgY,WpBm4GY5X,EAAQ4P,KAAK,OAAQ,YoBj4GjCiI,GAAAA,IAAAA,qBAAAA,eAKAkE,IAKAwY,EAAAroB,KAAAA,OAAA,QACAlM,EAAAiV,KAAAA,WAAAW,QACA5V,EAAA+I,GAAAA,QAAA6O,QAEAmE,MAMA,IAAAC,GAAAuY,EAAAjsB,OAQAisB,GAAAjsB,QAAA,WAEA2M,GAAAjV,EAAAoF,WAGA4W,EAAAA,IAAAA,QAAAA,GpB+2GUD,IAEF,IoBv2GR/b,GAAAoF,EAAAkD,IpBw2GQisB,GoBr2GRA,KAAAhsB,YAGAqF,GAAA9J,EAAAsB,KAAA,aAAApF,EAAAoF,KAAA,cpBo2GU4W,IACAvT,EoB71GVzI,WpB81GiBu0B,EAAYrrB,WACjBqrB,EAAYhsB,SAASnD,KAAK,cAAe,SACzCpF,EoB71GZoF,KAAA,gBAAA,QpB81GYmvB,EAAYhsB,SAASG,GAAGkF,EAAU,aAAe,YAAa2mB,EAAYxtB,coBx1GtFkV,EAAAsY,WAOAA,EAAAzrB,aAEAyrB,EAAAA,GAAArrB,UAAAqrB,EAAA3rB,eAOA2rB,GAAAA,IpBg1GQ,IoB50GRv0B,GAAA+I,EAAAD,IA0BA,OpBmzGQyrB,GoB50GRA,KAAAhsB,SAAAQ,GpB60GewrB,EAAYrrB,WoB30G3BqrB,EAAAF,SAAAA,KAAA,cAAA,QpB60GUr0B,EoB30GVA,KAAAqI,gBAAAA,SpB40GUksB,EAAYhsB,SAASQ,IAAI6E,EAAU,aAAe,YAAa2mB,EAAYxtB,coBz0GrFkV,EAAA9H,WpB20GYnU,EAAQ+I,IAAI,UAAWwrB,EAAY3rB,YoBx0G/C2rB,EAAAA,SAAAA,IAAAA,UAAAA,EAAAA,aAGAD,EAAAA,aACAt0B,EAAAs0B,GAAAA,QAMA7qB,EAAA0K,KAKAogB,EpB+jGM,GoB9/GNtf,GAAAsf,6BAAA7uB,KAAAA,EAAAA,UAAAA,WACAkI,EAAAgmB,eAAAh0B,GAAAg0B,UAAAh0B,CAicAiD,OA9bA7C,GAAAoF,OAAA5E,EAAAyX,KAAAU,EAAAyY,oBA6bAvnB,EAAArJ,SAAAA,EACA8zB,MpBm0GK7qB,UoB/zGL3G,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GpBg0GI,GAAImS,GAAW,6BAA6B9K,KAAK+R,EAAQC,UAAUC,UACnE,QACExS,SoB/zGNxI,MpBg0GMyI,QAAS,UACThH,KoB7zGNiH,SAAAA,EAAA9J,EAAAoF,EAAAtE,GpBw3GQ,QoBtyGRs2B,GAAAC,GpBuyGU,MoBryGVC,IAAAC,EAAA5wB,OACA6wB,EADA,KpBizGQ,QoBpyGR12B,GAAAub,GAEA,GAAAC,QAAAxb,OAAAA,GAAA,CpBoyGU,GAAI0b,GAAarM,MAAMqnB,EAAWvlB,SAASyhB,UAAY+D,EAAWle,WAAaie,EAAWvlB,SAASyhB,QoBhyG7G5yB,EAAA6b,MAAAC,EAAA3K,SAAA4K,UAAAA,EAAAA,WAAAA,EAAAA,SAAAA,QAEA1E,EAAAA,GAAAA,CAEArX,GAAA+b,aAAA,OAAAP,GpBgyGUxb,EoB/xGVA,aAAA4b,MAAAF,GpBgyGU1b,EoB5xGV4b,aAAA,MAAAL,GpB6xGcC,IAASxb,EAAW2X,WAAagf,IAmDvC,QAASC,KACP,OAAQ52B,EAAW2X,YAActI,MAAMrP,EAAW2X,WAAWc,WAAa,GAAKzC,EAAWhW,EAAW2X,WAAY7Y,EAAQszB,YoBh8GnI9xB,GAAAA,IACA0B,MAAA1B,EpB+zGQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,YAAa,WAAY,aAAc,WAAY,kBAAmB,YAAa,eAAgB,YAAa,YAAa,YAAa,OAAQ,YAAa,UAAW,WAAY,YAAa,qBAAsB,KAAM,cAAe,cAAe,WAAY,WAAY,cAAe,YAAa,gBAAiB,aAAc,YAAa,aAAe,SAASI,GAC7fL,QAAQoF,UAAUpB,EAAK3D,MAAO7B,EAAQ6B,GAAO2D,EAAK3D,KAExD,IoB3zGRqI,GAAArI,epB4zGQL,SoB3zGRA,SAAAoF,OAAApB,YAAA,YAAA,YAAA,WAAA,WAAA,eAAA,SAAA3D,GACA7B,QAAA6B,UAAAqB,EAAAsS,KAAArL,EAAAA,KAAAA,EAAAA,MpB4zGYnK,EAAQ6B,IAAO,KoBtzG3B7B,QAAAA,SAAA43B,eAAAvlB,SAAAA,eAAAA,UAAAA,SAAAA,GAEA,GAAAgD,GAAAA,KAAArV,EAAAgW,OAAAA,GAAAhW,cAAAszB,EAAAA,MAAA,EAEAjb,SAAArY,UAAAqY,EAAAA,MAEAnB,EAAAA,GAAAhU,EAAAsS,MAAA+C,EAAApB,MAIA,IAAAiG,GAAAC,EAAAA,EAAAA,EAAAA,EpBszGQrd,GoBrzGRA,EAAAszB,SACAjb,GAAAA,EAAAA,YAAAA,EAAAA,WAAAA,apBszGQ,IoBrzGRmU,GAAAxsB,EAAA6zB,KpBszGY3c,EAAa,SAASqB,EAAMpB,GoBlzGxC,MAAAtB,GAAAqB,WAAAqB,EAAApB,EAAAkB,IAEA+E,EAAAwa,GpBozGUzgB,OoBnzGV3V,EAAAG,WpBozGU0W,KoBnzGVlN,EpBozGUqhB,OoBnzGVoL,EAAAlvB,cpBqzGYlD,GoBnzGZoyB,QpBozGU10B,EAAM+H,OAAOzF,EAAKqQ,OAAQ,SAAS1K,EAAUC,GACtCwsB,GAAep2B,QAAQoF,UAAUuE,KAClC3J,QAAQG,SAASwJ,KAAWA,IAAaA,EAAS2K,MAAM,2BoBhzGxErU,KAAA,EAEAD,EAAAoF,OAGAgxB,EAAAvlB,UpBmzGQ7Q,QAAQC,SAAU,UAAW,WAAa,SAASI,GAC7CL,QAAQoF,UAAUpB,EAAK3D,KoB3yGrCL,EAAAA,SAAAoF,EAAApB,SAAA8tB,GACA9tB,EAAA6M,SAAAxQ,GAAAub,EAAAjS,oBAAAA,EAAAA,GACAysB,MAAAvlB,EAAAihB,SAAAnoB,KAAAA,EAAAA,QAAAA,GpB6yGc4sB,EAA0B72B,EAAW2X,gBoBtyGnDrX,QAAAoF,UAAApB,EAAA8tB,aAIA9tB,EAAAmQ,SAAA8hB,aAAAC,SAAAA,GACAE,EAAAF,SAAAA,WAAAvsB,IAIAjI,EAAA1B,OAAAoF,EAAAA,QAAAoxB,SAAAA,EAAA5sB,GACAlI,EAAA+H,OAAA+sB,EAAAA,cpBuyGW,GAKCx2B,QAAQoF,UAAUpB,EAAKwyB,gBACzB90B,EAAM+H,OAAOzF,EAAKwyB,cAAe,SAASL,EAAgBH,GoBnyGpEG,EAAAI,EAAAF,GACAL,EAAA/d,EAAA+d,GACA5a,GACAH,EAAAA,oBAAApK,KpBkzGQnR,EoB5xGR22B,SAAAA,QAAAA,SAAAA,GpB6xGU,GoB5xGV32B,EpB6xGU,KoB1xGV+b,EAEA8a,MpByxGY72B,GAAW4b,aAAa,QAAQ,GoBzxG5Cib,IpB4xGU,IoBzxGVxf,GAAA6E,EAAAG,MAAAA,EAAAsa,EAAA73B,WpB0xGU,QoBzxGV63B,GAAA3gB,MAAAqB,EAAAgb,epB0xGYryB,GAAW4b,aAAa,QAAQ,IAGlCib,EoBzxGVpe,GACA0Z,WpByxGcrzB,EoBzxGdA,UACAuY,EAAAA,EAAAoB,qBAAAke,EAAA73B,EAAAmW,UAAA,GACAe,EAAAmc,EAAAA,EAAAE,iBAAAvzB,EAAAszB,cpB2xGU/a,EAAO6E,EAAWG,qBAAqBrc,EAAW2X,WAAY7Y,EAAQmW,UAAU,GoBxxG1FoC,WAAAvY,EAAA+Z,SpB0xGmBxB,EAAKoB,UoBtxGxB,SAAAjO,EAAAA,SAEA6M,EAAAA,UAAAA,IACA3M,QAAApK,EAAA6G,SACAmV,EAAAA,cAEAjF,GAAA3M,MAAAA,OpBwxGQ1K,EoBtxGRkc,YAAAK,KAAA7R,SAAAA,GpBuxGU,GAAI2M,EAiBJ,OAfEA,GoBvxGZA,QAAAlQ,YAAAuD,IAAA,OAAAA,EACA4R,IACAhc,QAAAoK,OAAAA,GpBuxGmBA,EoB/wGnB,WAAA5L,EAAAmW,SACAjV,EAAA2X,MAAAN,EAAAA,KAAAA,EAAAA,iBACA,SAAAvY,EAAAqzB,SACAnyB,GAAA2X,MAAAuE,IAAAvE,GAEAif,GAAAA,MAAAA,GAIA,QAAA52B,EAAAwF,SAEAtG,EAAA03B,WAAAA,EAGA52B,EAAA42B,WAAAA,EAAAA,qBAAAA,EAAAA,EAAAA,UpB8wGiBA,MAET52B,EoB1wGR02B,QAAAA,WACA53B,EAAAA,IAAA83B,MASAjuB,EAAAA,IAAA,WAAA,WACA+tB,GAAAA,EAAAtrB,UACArC,EAAA,KACAhH,EAAA8G,YpB0wGOF,UoBrwGPpI,uBAAA,cAAA,cAAA,iBAAA,SAAAkzB,EAAAtX,EAAAtE,GpBswGI,OACE9O,QAAS,UACThH,KoBpwGNjD,SAAAgC,EAAA2yB,EAAAA,EAAA/zB,GpBkyGQ,QoB5vGRM,GAAAub,GAEA,GAAAC,QAAAxb,OAAAA,GAAA,CpB4vGU,GAAI0b,GAAarM,MAAMvQ,EAAQ8zB,UAAY+D,EAAWle,WAAa3Z,EAAQ8zB,QoBxvGrF5yB,EAAA6b,MAAAC,EAAA+W,UAAA9W,EAAAA,WAAAA,EAAAA,QAEA1E,EAAAA,GAAAA,CAEArX,GAAA+b,aAAA,OAAAP,GpBwvGUxb,EoBvvGVA,aAAA4b,MAAAF,GpBwvGU1b,EoBpvGV4b,aAAA,MAAAL,GpBqvGcC,IAASxb,EAAW2X,WAAagf,IoB5qG/C,QAAAI,KACA,OAAAlxB,EAAA8R,YAAAtI,MAAArP,EAAA2X,WAAAc,WAAA,GAAAzC,EAAAhW,EAAA2X,WAAA7Y,EAAAszB,YA7HA,GAAAjb,IAEAnV,MAAAgU,EpBowGQ1V,SAAQC,SAAU,WAAY,aAAc,WAAY,kBAAmB,YAAa,eAAgB,QAAU,SAASI,GoBhwGnIub,QAAAA,UAAAC,EAAAA,MAAAA,EAAAA,GAAAA,EAAAA,MpBmwGQrd,EoBjwGRqY,QAAAA,UAAAA,EAAAA,SAAAA,EpBkwGQ,IoBjwGRmU,GAAAxsB,EAAA6zB,KpBkwGY3c,EAAa,SAASqB,EAAMpB,GoB9vGxC3V,MAAAC,GAAAyV,WAAAqB,EAAApB,EAAAkB,IAEA7S,EAAAmQ,GpBgwGUwB,OoB/vGVnX,EAAA6B,WpBgwGUwW,KoB/vGV0f,EpBgwGUvL,OAAQxsB,EAAQ6zB,cAElBryB,SAAQC,SAAU,UAAW,WAAa,SAASI,GoB5vG3DL,QAAAoF,UAAApB,EAAA8tB,KACA9tB,EAAAmQ,SAAA9T,EAAA,SAAAsJ,GACAnL,EAAAszB,GAAAA,EAAAnoB,oBAAAA,EAAAA,GpB8vGc4sB,EAA0B72B,EAAW2X,gBoBxvGnDrX,QAAAob,UAAArM,EAAAvQ,aACAwF,EAAAiX,SAAAA,aAAAzc,SAAA+zB,GACA/zB,EAAA0c,WAAAE,IpBywGQ1b,EoBpvGR22B,SAAAA,QAAAA,SAAAA,GpBqvGU,GoBpvGV32B,EpBqvGU,KoBlvGV+b,EAEA8a,MpBivGY72B,GAAW4b,aAAa,QAAQ,GoBjvG5Cib,IpBovGU,IoBjvGVxf,GAAA6E,EAAAG,MAAAA,EAAAsa,EAAA73B,WpBkvGU,QoBjvGV63B,GAAA3gB,MAAAqB,EAAAgb,epBkvGYryB,GAAW4b,aAAa,QAAQ,IAGlCib,EoBjvGVpe,GACA0Z,WpBivGcrzB,EoBjvGdA,UACAuY,EAAAA,EAAAoB,qBAAAke,EAAA73B,EAAAmW,UAAA,GACAe,EAAAmc,EAAAA,EAAAE,iBAAAvzB,EAAAszB,cpBmvGU/a,EAAO6E,EAAWG,qBAAqBrc,EAAW2X,WAAY7Y,EAAQmW,UAAU,GoB/uG1F,WAAAnW,EAAAuY,SpBivGmBA,EAAKoB,UoB7uGxB,SAAAjO,EAAAA,SAEA6M,EAAAA,UAAAA,IACA3M,QAAApK,EAAA6G,SACAmV,EAAAA,cAEA5R,OAAA2M,EAAA3M,KAAAA,GAAAA,MAAAA,OpB+uGQ1K,EoB7uGRkc,YAAAK,KAAA7R,SAAAA,GpB8uGU,GAAI2M,EoBltGdvU,OpBotGYuU,GoB9uGZA,QAAAlQ,YAAAuD,IAAA,OAAAA,EACA4R,IACAhc,QAAAoK,OAAAA,GpB8uGmBA,EoBtuGnB,WAAA5L,EAAAmW,SACAjV,EAAA2X,MAAAN,EAAAA,KAAAA,EAAAA,iBACA,SAAAvY,EAAAqzB,SACAnyB,GAAA2X,MAAAuE,IAAAvE,GAGAif,GAAAA,MAAAA,GAGAA,QAAA93B,EAAA83B,SACA52B,EAAAA,WAAA2X,EpBuuGY3X,EAAW2X,WAAauE,EAAWG,qBAAqBhF,EAAMvY,EAAQmW,UoBjuGlF2hB,WpB0uGO9zB,SAAS,kBAAmB,WoBztGnC,QAAAk0B,GAAAC,EAAAjJ,GpB4tGM,IoB3tGN,GAAA+I,MpB2tGaG,EAAIrxB,OAAS,GoBxtG1B/F,EAAAoM,KAAAgrB,EAAAlZ,OAAA,EAAAiH,GpB2tGM,OoBvtGNjjB,GpBytGI,QoBttGJmV,GAAAA,EAAArY,GpButGM,OoBttGNkX,EAAAA,EAAAA,GAAAgY,EpBwtGIluB,KAAKoM,MAAS,iBAAkB,cAAe,OAAQ,SAAS2L,EAAgBsE,EAAazK,GAC3F,MoBttGNwK,UAAAA,GAoBA,IAAAhG,GAnBAD,GAAAnX,EAAAszB,OACAjb,EAAAA,EAAAA,SACAmU,EAAAxsB,EAAA6zB,KpButGY3c,EAAa,SAASqB,EAAMpB,GoBptGxC,MAAAkhB,GAAAtf,WAAA2Y,EAAAA,EAAArZ,IAEAigB,EAAAA,GACAnhB,OAAAohB,EAAAA,WAEAlgB,KAAAmgB,EACAhM,OAAAte,EAAAA,eAEAmqB,EAAAI,EAAAF,cAAArqB,GACAsqB,EAAAA,EAAA5G,SAAAvZ,GpBqtGYigB,EAAsBD,EAAY/tB,MAAMtK,EAAQk0B,WAAWwE,OAAOL,EAAY/tB,MAAM,EAAGtK,EAAQk0B,YoBntG3GsE,EAAA5lB,EAAA4lB,MAAAA,EAAAA,WAAAA,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,YAEAlhB,EAAAkD,GACApD,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CACA2U,GAAAA,GAAAa,EAAAA,GACAD,EAAAE,EAAAA,EACAtU,IAAA0Y,2EAAAA,EAAAA,kBAAAA,EAAAA,KAAAA,EAAAA,eAGAuH,EAAArD,EAAAA,YAAAA,EpBmtGQ,IoBltGRhe,GAAAnX,EAAAwzB,QAAAA,EAAAA,UAAAA,EAAAA,oBAAAA,YAAAA,EAAAA,WAAAA,GAAAA,OACAjmB,GACA2pB,KAAAA,EAAAA,cpBmtGUvK,MoBltGVA,EAAAE,WpBmtGUtU,KAAMjB,EAAU2Z,WoBhtG1BkE,IpBmtGUhe,OoBltGV3V,EAAAQ,UpBmtGUuL,MoBltGVwe,EpBmtGUmL,OACEvK,MoBltGZpU,GpBotGU/R,OoBltGVmyB,SAAA/e,EAAAA,IpBmtGiB5Y,KoBltGjB61B,OAAA5F,GAAAA,EAAA7Z,gBAAAmB,EAAA0Y,MAAA1Y,EAAAsU,aAAAzV,EAAAuV,OAKAvV,QAAAA,OAAAmB,GACAogB,KAAA7B,EAAAA,MAAAA,cpB+sGgBnK,MAAOgM,EAAOne,MAAMqS,WACpBtU,KAAMogB,EAAOne,MAAMyW,YoB5sGnC0H,EAAAC,WACAC,EAAAA,YAAAD,EAAAA,MAAArH,IAAAA,EAAAA,aACAna,EAAA0hB,KAAAH,EAAA5e,MAAA6e,UACAD,EAAAI,oBpBitGU/B,MoB7sGVgC,WACA,GAAAtM,GAAAA,GAAAA,MAAAA,EAAAA,KAAAA,EAAAA,MAAAA,GACAuM,EAAAA,EAAAA,oBACAC,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,SAAAA,EAAAA,UAAAA,IACAH,EAAAD,EAAAvH,oBACA7E,EAAAtP,EAAAiU,qBAAAtX,GAAAA,MAAA+e,EAAAlM,UAAAkM,cAEAC,KAAAI,IAAAA,EAAAA,GAAAA,OAAAA,EAAAA,KAAAA,EAAAA,IpBitGY,KoB5sGZ7wB,GAHAiQ,GACA7W,EACA03B,EAHAn0B,KAIAqD,EAAA4O,EAAAA,GAAAA,EAAAwV,IAAA1rB,CpB6sGc0rB,EoB5sGd2M,EAAAA,qBAAAtgB,GAAAA,MAAAA,EAAA0Y,cAAAzxB,EAAAw0B,WAAAA,EAAAA,UAAAA,GpB6sGc,IoB5sGd3oB,IACAytB,GAAAzM,OAAAyM,EAAAzM,IAAAzV,EAAAuV,KAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EACArS,KAAAA,EpB6sGgB5Y,MAAOgrB,EAAIuE,UoB1sG3BmI,QAAAD,EAAAttB,iBAAAotB,EACA3wB,MAAA6wB,EAAAC,EAAAF,KAAAA,QAEAF,kBAAAG,EAAAA,EAAAA,EAAAA,kBAAAA,EAAAA,yBpB2sGgBttB,SAAU8sB,EAAOne,OAASxZ,KAAKi2B,WAAWvK,GoBxsG1DxpB,MAAA2I,EAAAA,aAAAuL,EAAAuV,MAEA4M,SAAAA,KAAAA,WAAA7M,GAGAuM,GAAAA,WAAAA,EAAAE,GACAj2B,EAAA+yB,UAAAA,EAAAgD,GpBwsGcD,EoBvsGdrtB,KAAAutB,GpBysGYh2B,EoBtsGZA,SAAA2I,IpBusGY,IAAI0tB,IoBtsGhB,CACAL,GAAAA,cpBusGkBD,GoBrsGlBM,EAAAA,cAAAA,EAAAt0B,GpBusGoBi0B,IAAUA,EAASjE,SAAU,GACjCgE,EAAYhE,SAAU,EoBpsGtC/xB,EAAAwJ,SAAAwK,GACAsiB,EACAt2B,EAAAu2B,SAAAjB,EAEAe,GAAA,GAGAr2B,EAAAw2B,MAAAA,EAAA14B,EAAAhB,EAAA+Z,kBACA7W,EAAAy2B,YAAAA,EACAz2B,EAAA02B,OAAAA,EACA54B,EAAA61B,KAAAtpB,EAAAyrB,EAAAh4B,KAAAuM,OpBssGgBgsB,IoBpsGhBtC,EAAAA,KAAA,GAAA,GAAA1e,QAAAA,GpBusGYrV,EAAMw2B,gBAAkB14B,KAAK64B,WAAW,GAAI9f,OoBlsGxD8f,EAAAA,gBAAAthB,MAAAA,EAAAA,MACArV,EAAAiV,WAAAwB,EAAAA,WAGA3Y,KAAAmX,OAAAnY,GpBmsGUi3B,WoB7rGVj3B,SAAAw2B,GpB8rGY,MoB7rGZmC,GAAAzqB,OAAAlO,EAAAA,gBAAAw2B,EAAAzvB,MAAAmH,eAAAqK,EAAAsU,aAAA8L,EAAAne,MAAAqS,YAAAtU,EAAA0Y,YAAA0H,EAAAne,MAAAyW,WpB+rGU4I,WoB7rGV,SAAAthB,GpB8rGY,GAAIJ,GAAOI,EAAKoB,SAChB,IAAIxB,EAAOnY,EAAQ8zB,SAAW3b,EAAOnY,EAAQ+zB,QAAS,OAAO,CAC7D,IAA0D,KAAtD/zB,EAAQm0B,mBAAmBlV,QAAQ1G,EAAKuhB,UAAkB,OAAO,CoB3rGjF,IAAA95B,EAAAw2B,mBpB6rGc,IAAK,GAAItoB,GAAI,EAAGA,EAAIlO,EAAQw2B,mBAAmBzvB,OAAQmH,IoB3rGrEmoB,GAAAA,GAAAr2B,EAAAoG,mBAAAA,GAAAA,OAAAA,GAAAA,EAAAA,mBAAAA,GAAAA,IACA2zB,OAAAA,CpBgsGY,QAAO,GAET1D,UAAW,SAASjwB,GAClB,GAAI2zB,EAQJ,IoB7rGZ/5B,EAAAwa,UAAAxa,EAAAy0B,cAAAkE,EAAAne,QACAhZ,QAAApB,QAAAgG,EAAAmG,QAAAyT,KAAA,QAAAyS,SAAA,apBurGgBkG,EAAOne,MAAQ,GAAIT,MoBlrGnCmB,EAAAA,MAAAA,EAAAA,MAAAA,QAAAA,QAAAA,EAAAA,QAAAA,KAAAA,cAAAA,KAAAA,EAAAA,0BAKAyd,EAAA34B,MpBmrGc,OoBlrGd24B,CpBorGYoB,GAAapB,EAAOne,MAAMb,SAC1B,IoBlrGZuB,EpBmrGY,QAAQ9U,EAAI4B,SoBjrGxB,IAAA,IACA,GAAA5B,EAAA0uB,YpBorGgB,MoBnrGhB5Z,GAAAA,OAAAnB,GAAAA,MAAA4e,IAAA/L,IACA,CpBorGc,MAED,KAAK,IACAxmB,EAAI0uB,OoBjrGtB5Z,EAAA,GAAAnB,MAAA4e,EAAAne,MAAAoS,cAAA,EAAA+L,EAAAne,MAAAqS,WAAA8L,EAAAne,MAAAyW,YAGA/V,EAAA,GAAAnB,MAAA4e,EAAAne,MAAAoS,cAAA+L,EAAAne,MAAAqS,WAAA,EAAA8L,EAAAne,MAAAyW,WACA7qB,EAAA0uB,WAAA6D,EAAAne,MAAAqS,WAAA,IACA3R,EAAA,GAAAnB,MAAA4e,EAAAne,MAAAoS,cAAA+L,EAAAA,MAAAne,WAAAqS,IpBorGc,MAED,KAAK,IACAzmB,EAAI0uB,OoB/qGtB5Z,EAAA,GAAAnB,MAAA4e,EAAAne,MAAAoS,cAAA,EAAA+L,EAAAne,MAAAqS,WAAA8L,EAAAne,MAAAyW,YAGA/V,EAAA,GAAAnB,MAAA4e,EAAAne,MAAAoS,cAAA+L,EAAAne,MAAAqS,WAAA,EAAA8L,EAAAne,MAAAyW,WACA/V,EAAAnB,WAAAggB,EAAAvf,MAAAqS,WAAA,IACA3R,EAAA,GAAAnB,MAAA4e,EAAAne,MAAAoS,cAAA+L,EAAAne,MAAAqS,WAAA,EAAA,IAIA3R,MpBgrGa,KAAK,IoB5qGlBA,EAAA,GAAAnB,MAAAggB,EAAA,MACA7e,MpB+qGa,KAAK,IoB3qGlBA,EAAA,GAAAnB,MAAAggB,EAAA,OACA7e,MpB8qGa,KAAK,IoB3qGlBA,EAAA,GAAAnB,MAAAggB,EAAA,MACA,MAGA,KAAA/4B,IAEAka,EAAA9U,GAAAiB,MAAAA,EAAAjB,OAEA,MpB2qGa,SoBxqGbkY,OAAA,EAIAyN,MAFA/qB,MAAA64B,WAAA3e,IAAAyd,EAAAzyB,OAAAgV,GAAA,GACAgc,GAAAA,EAAAA,iBAAAA,EAAAA,mBACA,KpB4qGU5Y,KoBzqGV,QpB0qGUnH,OoBzqGV3V,EAAAQ,YpB0qGUuL,MoBzqGVwe,EpB0qGUmL,OACEnL,KoBzqGZxT,GpB2qGU/R,OoBzqGVmyB,SAAA/e,EAAAA,GpB0qGiB5Y,KoBzqGjB61B,OAAAhK,EAAAA,gBAAAF,EAAAZ,KpBgrGuBxT,EAAKsU,aAAezV,EAASuV,QoBxqGpDqK,QAAAh1B,OAAAoV,GAEA4iB,MAAAA,EAAAA,MAAAA,WACArN,KAAAA,EAAAA,MAAAA,YAEAgM,EAAAsB,oBAZAz4B,QAAAQ,OAAAoV,GACAuV,KAAAA,EAAAgM,MAAAne,cACAjC,MAAAogB,EAAAne,MAAAyW,WpB0qGgB1Y,KAAMogB,EAAOne,MAAMyW,YAErB0H,EAAO/e,WASXod,MoBxqGVrK,WpB8qGY,IoBvqGZyM,GAJAn0B,GAEAqD,EACAuD,EAJAmuB,KAEAzhB,EAAAoU,GAAAA,OAAAA,GAAAA,OAAAA,eAAAA,GAAAA,OAAAA,WAAAA,GAGAyM,EAAAzM,EAAAC,GAAAD,EAAAC,IAAAA,CpBwqGcD,EoBvqGdrS,GAAAtZ,MAAA64B,EAAAA,KAAAlN,EAAAA,EpBwqGc,IAAIuN,IoBrqGlBj1B,GAAA4G,OAAAquB,EAAAruB,IAAAouB,EAAAA,KAAAC,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EACA3hB,KAAA2hB,EAEAF,MAAAruB,EAAAuuB,EAAAA,KAAAA,QpBsqGgBruB,SAAU8sB,EAAO9d,YAAY8R,GoBnqG7CzpB,QAAA2I,EAAA+gB,gBAAAuN,EAAAvN,eAAAD,EAAAE,aAAAsN,EAAAtN,WAEA0M,SAAAA,KAAAA,WAAA5M,GAGAsN,GAAAA,WAAAA,EAAAC,GACAh3B,EAAA+yB,UAAAA,EAAAgE,GpBmqGcD,EoBlqGdI,KAAAA,GpBoqGYl3B,EoBjqGZA,SAAA2I,IpBkqGY,IAAI0tB,IoBjqGhB,CACAa,GAAAA,cpBkqGkBH,GoBhqGlBV,EAAAA,cAAAA,EAAAt0B,GpBkqGoBm1B,IAAWA,EAAUnF,SAAU,GACnCgF,EAAchF,SAAU,EoB/pGxC/xB,EAAAwJ,SAAAwK,GACAsiB,EACAt2B,EAAAqK,SAAAysB,EAEA92B,GAAA,GAGAlC,EAAA61B,MAAA3f,EAAAyV,EAAA3sB,EAAA4zB,iBpBiqGY1wB,EAAMs2B,YAAa,EoB/pG/BvC,EAAAA,KAAA1pB,EAAAgL,EAAAA,KAAAA,OACAghB,IpBiqGcr2B,EAAMwX,KAAK,GAAG,GAAGyb,QAAS,GoB9pGxCjzB,EAAAm3B,WAAAr6B,EAAAuY,UACAvX,KAAA61B,OAAAwD,GAEAhE,WAAA,SAAAjwB,GAGA,MAAApG,GAAAkE,OAAAA,EACAlE,gBAAAy0B,EACAkE,MAAAne,eACApa,EAAAgG,aAAA4Z,EAAAxF,MAAAiY,YpB6pGUoH,WAAY,SAASthB,GoBzpG/B,GAAA8hB,IAAA7f,GAAAT,MAAAxB,EAAAqU,cAAArU,EAAAsU,WAAA,EAAA,EpB2pGY,OoB1pGZwN,GAAAr6B,EAAA8zB,SAAAvb,EAAAoB,UAAA3Z,EAAA+zB,SpB4pGUsC,UoB1pGViE,SAAA3B,GpB8pGY,GoB7pGZzd,EAAAA,UAAAyd,EAAAne,cAAAA,EAAAA,OAAAA,QAAAA,QAAAA,EAAAA,QAAAA,KAAAA,QAAAA,SAAAA,eAEAme,EAAA3wB,MAAAA,GAAA+R,OAAAmB,GAAAA,OAAAuV,eAAA6J,GAAAvgB,OAAA8S,WACA7kB,IpB0pGiB2wB,EAAOne,MAAZ,CoBjpGZrD,GAAAA,GAAAuc,EAAAA,MAAAA,WACAnmB,EAAA,GAAAwM,MAAA4e,EAAAne,MACA0c,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,SAAAA,EAAAA,SAAAA,EAAAA,GACAnL,EAAA0I,aAAA,KAAAruB,EAAA4B,QAAA2wB,EAAAzyB,OAAA,GAAA6T,MAAA4e,EAAAne,QAAAxZ,KAAA64B,WAAA3e,IAAAyd,EAAAzyB,OAAAgV,GAAA,OpBupGUoD,KoBppGV,OpBqpGUnH,OoBppGV3V,EAAAQ,WpBqpGUuL,MoBppGVwe,EpBqpGUmL,OACEnL,KoBppGZxT,IpBspGU/R,OoBppGVmyB,SAAA/e,EAAAA,IpBqpGiB5Y,KoBppGjB61B,OAAAjK,GAAAA,SAAAxV,EAAAA,cAAA,GAAA,MAAA1G,SAAA0G,EAAA2U,KAAA,GAAA,KACAvqB,QAAAQ,OAAAoV,GACA2U,KAAA4M,EAAAne,MAAAoS,cACAD,MAAAgM,EAAAne,MAAAqS,WACAtU,KAAAogB,EAAAne,MAAAyW,YAEA0H,EAAA7B,UpBqpGuBve,EAAKqU,gBAAkBxV,EAAS2U,OACzCvqB,QAAQQ,OAAOoV,GoBnpG7B4f,KAAA2B,EAAAne,MAAAoS,cACA2N,MAAAA,EAAAnjB,MAAAA,WACAojB,KAAAA,EAAAA,MAAAA,YAEA7B,EAAA8B,oBpBupGUzD,MoBppGVjL,WpB0pGY,IoBnpGZqN,GAHA7gB,GACAjQ,EACAuD,EAJA0uB,EAAAG,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,KAAAA,OACAz1B,KAIAm0B,EAAArN,EAAAa,GAAAb,EAAAa,IAAAA,CpBopGcb,EoBnpGdzR,GAAAA,MAAAtZ,EAAA+qB,EAAAA,EAAAA,EpBopGc,IAAI2O,IoBjpGlBz1B,GAAA4G,OAAA6uB,EAAA7uB,IAAA4uB,EAAAA,KAAAC,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EACAniB,KAAAmiB,EAEAF,MAAA7uB,EAAA+uB,EAAAA,KAAAA,QpBkpGgB7uB,SAAU8sB,EAAO9d,YAAYkR,GoB/oG7C7oB,QAAA2I,EAAA+gB,iBAAA,GAAA7S,OAAA6S,cAEA2M,SAAAA,KAAAA,WAAAxN,GAGA0O,GAAAA,WAAAA,EAAAC,GACAx3B,EAAA+yB,UAAAA,EAAAwE,GpB+oGcD,EoB9oGdG,KAAAA,GpBgpGYz3B,EoB7oGZA,SAAA2I,IpB8oGY,IAAI0tB,IoB7oGhB,CACAoB,GAAAA,cpB8oGkBF,GoB5oGlBlB,EAAAA,cAAAA,EAAAt0B,GpB8oGoB01B,IAAUA,EAAS1F,SAAU,GACjCwF,EAAaxF,SAAU,EoB3oGvC/xB,EAAAwJ,SAAA+tB,GACAG,EACA13B,EAAA23B,SAAAL,EAEAt3B,GAAAlC,GpB+oGYkC,EAAMwJ,MAAQ8tB,EAAM,GAAGlyB,MAAQ,IAAMkyB,EAAMA,EAAMzzB,OAAS,GAAGuB,MoB3oGzEpF,EAAA43B,UAAAA,EAAA96B,GAAAA,MACAgB,EAAA61B,QAAA2D,EAAAA,EAAAzzB,OAAA,GAAAuB,MpB6oGYpF,EAAMs2B,YAAa,EoB3oG/BvC,EAAAA,KAAA1pB,EAAAgL,EAAAA,KAAAA,OACAghB,IpB6oGcr2B,EAAMwX,KAAK,GAAG,GAAGyb,QAAS,GoB1oGxCjzB,EAAAm3B,YAAAtgB,EAAAxB,UACAvX,KAAA61B,OAAAwD,GAEAhE,WAAA,SAAAjwB,GAGA,MAAApG,GAAAkE,OAAAA,EACAlE,gBAAAy0B,EACAkE,MAAAne,epB0oGUqf,WAAY,SAASthB,GoBroG/B,GAAA8hB,IAAA7f,GAAAT,MAAAxB,EAAAqU,cAAA,EAAA,EAAA,EpBuoGY,OoBtoGZyN,GAAAr6B,EAAA8zB,SAAAvb,EAAAoB,UAAA3Z,EAAA+zB,SpBwoGUsC,UoBtoGV0E,SAAApC,GpB0oGY,GoBzoGZzd,EAAAA,UAAAyd,EAAAne,cAAAA,EAAAA,OAAAA,QAAAA,QAAAA,EAAAA,QAAAA,KAAAA,QAAAA,SAAAA,eAEAme,EAAA3wB,MAAAA,GAAA+R,OAAAmB,GAAAA,OAAA8f,cAAAD,EAAA,IpBuoGiBpC,EAAOne,MAAZ,CoB7nGZ2a,GAAAA,GAAAlB,EAAAgH,MAAA7T,cACAhQ,EAAAA,GAAAA,MAAAA,EAAAA,MpBioGgC,MAAhBhR,EAAI4B,QAAgBkT,EAAQ8f,QAAQD,EAAa,GAA6B,KAAhB30B,EAAI4B,QAAgBkT,EAAQ8f,QAAQD,EAAa,GAA6B,KAAhB30B,EAAI4B,QAAgBkT,EAAQ8f,QAAQD,EAAa,GAA6B,KAAhB30B,EAAI4B,SAAgBkT,EAAQ8f,QAAQD,EAAa,GAC1O/5B,KAAK64B,WAAW3e,IAAUyd,EAAOzyB,OAAOgV,GAAS,MqB/5IlE1Z,QAIAZ,MAAAA,EAAAA,QAAAA,MAAAA,UAAAA,MAAAA,KAAAA,EAAAA,EAAAA,SAAAA,EACAC,SAAAuW,QrBo6IE5V,QAAQf,OAAO,8BAA+BuD,SAAS,YAAa,WqB75ItE,GAAA9C,GAAAA,KAAAF,UACAH,UAAAG,cAGAgd,gBAAAxc,EACAA,YAAAC,KrB65IMy5B,gBqB55INt0B,ErB65IMu0B,eAAe,GqBx5IrB35B,EAAAC,KAAAP,WAAA,SAAA4E,EAAA6C,EAAAmV,GrBg+IM,QqBn4INsd,GAAAC,GrBq4IQ,IAAK,GADDD,GAAgBpd,EAAKqd,SAASvc,QACzB5Q,EAAI,EAAGA,EAAIktB,EAAcr0B,OAAQmH,IACpC7I,EAAQ+1B,EAAcltB,KqBj4IpCktB,EAAA15B,GAAAA,EAAAA,GAAAA,GAEA05B,EAAAnc,KAAAvd,EAAAA,SAAAqF,SrBm4IYq0B,EAAcltB,GAAK8P,EAAKqd,SAASt0B,OAAS,GAIhD,QqBj4INs0B,GAAArd,GrBk4IQ,GqBj4IRA,GAAAA,EAAAqd,SAAAvc,OrBk4IQ,OqBj4IR,KAAAuc,EAAAvc,QAAAI,GrBm4IM,QAASoc,GAAe55B,GqB/3I9B,GAAA2D,GAAAk2B,EAAAA,SAAA75B,QAAAA,QAAAA,EACA2Q,MAAAhN,IAEA2Y,EAAAA,SAAAqd,EAAArd,SAAAqd,QAAAvc,IAAAtZ,KAAA1F,cAAA,QrBg4IUke,EqB/3IVA,SAAAqd,EAAArd,SAAAqd,QAAAvc,IAAAtZ,KAAA,gBAAA,SrBg4IUwY,EAAKqd,SAASvc,QAAQI,OAAO7Z,EAAO,IAGxC,QAASk2B,GAAa75B,GqB93I5Bsc,EAAAqd,SAAAvc,gBrBg4Icd,EAAKqd,SAASrd,EAAKqd,SAASvc,QAAQ,MAAQhf,GqB73I1Dke,EAAAqd,SAAAvc,EAAAA,SAAAG,QAAAvd,IAAAA,KAAA,cAAA,QAGAsc,EAAAqd,SAAArd,EAAAqd,SAAAvc,QAAAd,KACAA,EAAAqd,SAAArd,EAAAqd,SAAAvc,QAAAd,IAAAA,KAAAqd,gBAAAt0B,SAEAiX,EAAAA,SAAAwd,QAAAxd,OAAAqd,EAAAvc,IrB+3IqD,KAAzCd,EAAKqd,SAASvc,QAAQG,QAAQvd,KAChCsc,EAAKqd,SAASvc,QAAQnT,KAAKjK,GACvBsc,EAAKqd,SAASrd,EAAKqd,SAASvc,QAAQd,EAAKqd,SAASvc,QAAQ/X,OAAS,MAAQjH,GAC7Eke,EAAKqd,SAASrd,EAAKqd,SAASvc,QAAQd,EAAKqd,SAASvc,QAAQ/X,OAAS,IAAIvB,KAAK,cAAe,SqBz3IvGi2B,EAAAA,SAAAA,EAAAA,SAAAA,QAAAA,EAAAA,SAAAA,QAAAA,OAAAA,MAAAA,GACAA,EAAA76B,SAAAA,EAAAA,SAAAA,QAAAA,EAAAA,SAAAA,QAAAA,OAAAA,IAAAA,KAAAA,gBAAAA,SrB+wIM,GqB15INod,GAAAxc,IrB25IMwc,GqB15INA,SAAA3L,QAAAxQ,KAAAjB,GrB25IMY,QAAQC,SAAU,YAAa,iBAAkB,cAAe,iBAAkB,iBAAmB,SAASI,GACxGL,QAAQoF,UAAUkX,EAAOjc,MAAOmc,EAAK3L,SAASxQ,GAAOic,EAAOjc,KqBv5IxEmc,IAAAA,GAAAqd,eAEArd,SAAA0d,SAAAA,iBAAAA,iBAAAA,iBAAAA,SAAAA,GAEAC,QAAAA,UAAA7d,EAAAjc,KAAAzB,EAAAA,KAAAA,EAAAA,MACA4d,EAAAwd,SAAA7vB,IAAAvL,KAGA4d,EAAA4d,YrBw5IM5d,EqBv5INA,YrBw5IMA,EqBt5IN0d,wBrBu5IM1d,EqBt5IN2d,gBAAA,SAAAv7B,GrBu5IQ4d,EqBt5IRwd,SAAAttB,KAAA8P,GrBu5IQ5d,EqBt5IR4d,KAAAqd,gBAAA,UrBw5IMrd,EqBt5IN4d,gBAAA5d,SAAAqd,GrBu5IQrd,EqBt5IRqd,SAAAA,KAAAA,ErBu5IQ,IAAIntB,GqBt5IZ8P,CrBu5IQ,IAAIA,EAAKqd,SAAU,CACjB,IqBt5IVntB,EAAA8P,EAAAwd,EAAAA,EAAAxd,SAAAqd,OAAAvc,IrBu5IYd,EqBt5IZA,SAAAwd,GAAAxd,KAAAqd,cAAAvc,OrBw5IU,KAAK5Q,EAAI,EAAGA,EAAI8P,EAAKqd,SAASvc,QAAQ/X,OAAQmH,IACxC8P,EAAKqd,SAASrd,EAAKqd,SAASvc,QAAQ5Q,KACtC8P,EAAKqd,SAASrd,EAAKqd,SAASvc,QAAQ5Q,IAAI1I,KAAK,cAAe,SqBn5I1EH,EAAA2Y,SAAAwd,EAAAvc,SAAA7e,QAAAA,KAEAo7B,EAAAA,SAAAtc,EAAA7Z,SAAAyZ,QAAA5Q,IAAA1I,KAAA,gBAAA,UrBy5IMwY,EqBj5IN6d,kBAAAV,SAAAA,GrBk5IQ,GqBh5IRG,GAAAA,EAAAl7B,SAAAA,QAAAA,ErBi5IQ4d,GAAKwd,SAAStc,OAAO7Z,EAAO,IAE9B2Y,EqB74INA,kBAAA0d,SAAAj6B,GrB84IQ,GqB74IR0d,GAAAA,EAAAA,SAAAA,QAAAA,ErB84IQnB,GAAKqd,SAASnc,OAAO7Z,EAAO,GACxB2Y,EAAK3L,SAAS8oB,eqB14I1Bnd,EAAAc,GAEAgd,EAAAp6B,GrB44IQsc,EqB34IRA,qBAAAtc,QAAAA,SAAAA,GrB44IUyd,OAGJnB,EqB34INud,SAAAA,QAAA75B,EAAAA,SAAAA,mBAAAA,GrB44IMsc,EAAKK,WAAavY,EAAOuY,WAAa,SAAS3c,GqBz4IrDsc,QAAA0d,QAAAA,GACAvc,EAAAA,SAAAA,QAAAA,GrB24IoBnB,EAAK3L,SAAS0pB,gBAAkBC,EAASt6B,GACnD45B,EAAe55B,GqBv4IzB65B,EAAAlpB,GrB24IQ2L,EAAK0d,qBAAqBj6B,QAAQ,SAAS0d,GqBx4InDA,OrB44IMnB,EqBt4INie,eAAAje,WACA,MAAAA,GAAA9P,SAAAA,cACA7I,EAAA+1B,SAAAA,QrBw4IgD,IAAjCpd,EAAKqd,SAASvc,QAAQ/X,OAAeiX,EAAKqd,SAASvc,QAAQ,GAAK,IqBz0I/E9d,MAAAoM,KAAA,WACAnD,GAAAA,KrB03IM,OqBz3IN/I,GAAAA,SAAAN,EACAqC,EAAA/B,WAAA6I,EAEA2V,KrBw3IK7V,UqBr3IL6V,cAAA,UAAA,WAAA,YAAA,SAAApD,EAAAnI,EAAAsnB,GrBs3II,OACExxB,SqBn3INyV,WAAA5Y,crBo3IM5F,YAAc,SAAU,WAAY,SAAUu6B,EAAUv6B,YACxD+B,KqBj3INyc,SAAAhU,EAAAC,EAAAuU,EAAAtU,GrBk3IQ,GqBh3IR8T,GAAAsC,EAAApW,GrBi3IYswB,EqB92IZ7d,EAAAzS,ErB+2IY8T,KACFwc,EqB92IVd,qBAAAc,KAAAD,WrB+2IYvc,EqB72IZle,cAAA45B,EAAAa,oBrB+2IUvc,EqB32IVwc,YAAA7d,KAAAA,SAAAzS,GrB42IY,GAAIpK,QAAQwgB,QAAQpW,GAClBswB,EqB32Idd,WAAAA,OACAc,CrB42Ic,GAAId,GAAgBc,EAAeD,gBAC/Bz6B,SAAQwgB,QAAQoZ,GqB12IlCxvB,KAAAA,EAAAA,QAAAA,EAAAA,IrB42IkBswB,EAAe7d,WAAwB,EAAbzS,GAEnBwvB,IAA+B,EAAbxvB,GAC3BswB,EAAe7d,WAAwB,EAAbzS,GqBn2I1CuwB,MAAAvwB,WAKA3I,UAAA,mBAAA7C,WrBu2II,GqBp2IJsE,IrBq2IMy3B,MqBl2IN/7B,GrBm2IMg8B,MqBh2INF,GrBk2II,QACEjyB,SAAW,YAAa,eACxBhH,KqB71INo5B,SAAAA,EAAAj8B,EAAA8f,EAAAJ,GrB81IQ,GqB71IRoc,GAAA5hB,EAAA,ErB81IQla,GqB71IRiF,KAAAA,cAAAi3B,YrB81IQJ,EqB71IRA,gBAAA72B,GrB81IQnC,EqB71IRA,IAAA6e,WAAAA,WrB81IUma,EAAeL,kBAAkBz7B,IqB11I3CA,IAAAA,GAAAi8B,WACAj8B,IAAAA,EAAAka,SAAA,CACA,GAAAjR,GAAAA,EAAA3E,kBAAA,uBAAA2E,EAAAA,iBAAA6W,EAAAoc,iBAAAJ,EAAAV,SAAAvc,QAAA7e,EACAe,GAAAkd,WAAA,EAAAhZ,GACAg3B,EAAAA,UrB+1IQj8B,GAAQ0I,GAAG,QAASuzB,GACpBj8B,EAAQm8B,KAAK,mBAAoB,SAASjd,IACpCA,EAAEjW,QAAU3E,EAAUy3B,OAAS7c,EAAEjW,QAAU3E,EAAU03B,SqBx1InEvyB,QAAA2yB,IAAA,wBAEAH,IACApyB,EAAAA,wBrB61IKJ,UqBj1ILzJ,oBAAA87B,WAAA7pB,SAAAxR,GrBk1II,OACEoJ,SqB/0INiyB,YAAAN,erBg1IM34B,KqB70INC,SAAAA,EAAA9C,EAAA8f,EAAAJ,GrBu1IQ,QAASS,KACP,GAAIlb,GqB50IdA,EAAAmC,SAAAyX,QAAA7e,GACAq8B,EAAAP,EAAAD,iBrB60IcQ,EAAS,aqB10IvBtoB,SAAAsoB,QAAAr8B,GrB40I0C,KAA1BoH,EAAOyX,QAAQ5Z,KqBz0I/B62B,EAAAR,YrB40IqBr2B,IAAUmC,IqBz0I/B+Y,EAAAA,YrB40IUpM,EAASsoB,GAAQr8B,EAAS87B,EAAe7pB,SAASwL,aApBpD,GqB70IRqe,GAAAQ,EAAAA,ErB80IQt8B,GAAQ2T,SAAS,YqB30IzBmoB,EAAA3b,SAAAA,WACAngB,EAAAiF,SAAA62B,EAAAb,SAAApc,WrB80IQid,EqB50IRN,gBAAAx7B,GrB60IQ8C,EqB50IR1B,IAAAA,WAAAgG,WrB60IU00B,EqB50IVjd,kBAAA7e,KCpSAoB,EAAAk6B,qBAAA/vB,KAEA3H,WAEApD,MAEA+7B,StBgoJEn7B,QsB5nJFZ,OAAAA,4BAAAA,SAAAA,UAAAA,WtB6nJI,GAAIA,GAAWI,KAAKJ,UAClBid,YAAa,SsBznJnBhU,YAAA,QtB4nJI7I,MsBznJJgJ,KAAA,WACAC,OACAhJ,SAAAL,MtB4nJKiJ,UsBznJLtG,kBAAA6R,WtB0nJI,OACEpL,SsBznJNkb,ItB0nJMjb,QsBznJNib,UtB0nJMjkB,QsBznJNikB,SAAA9kB,EAAA8K,GtB0nJQ9K,EAAQoF,KAAK,cAAe,WAC5BpF,EAAQuC,WAAW,WACnB,IAAIY,GAAWnD,EAAQ,GAAGgV,iBAAiB,yBsBpnJnDvL,SAAApI,QAAA8B,EAAA,SAAA4hB,GAEAvkB,GAAAA,GAAAg8B,QAAAh8B,QAAAA,EACAi8B,GAAAA,KAAAA,cAAA,IAEA3X,EAAA1f,KAAA,WAAAA,EAAA0F,QAAA,IAAAga,EAAA1f,KAAA,gBtBunJKqE,UsBlnJL7J,cAAAY,UAAAA,QAAAA,SAAAA,EAAAA,GtBmnJI,GsBhnJJA,GAAAk8B,EAAA18B,SACAy8B,EAAAC,oBtBinJI,QACE9yB,SsB/mJN6yB,ItBgnJM5yB,QsB/mJN8yB,UtBgnJM95B,KAAM,SAAkBC,EAAO9C,EAASoF,EAAMtE,GsB9mJpD,GAAA87B,GAAAA,EACAH,EAAAG,UAAAH,EAAAA,GAAAtyB,SACAyyB,EAAA95B,EAAAsC,EAAAw3B,SAAAA,EtBgnJYD,EAAYv7B,QAAQoF,UAAUpB,EAAKu3B,WAAav3B,EAAKu3B,WAAY,CsB5mJ7EE,GAAAA,KAAAF,EAAAA,aACAA,EAAAE,EAAAA,MAAAz3B,EAAAu3B,WtB+mJQ,IsB5mJRC,GAAA/f,QAAA8f,UAAAC,EAAAA,YAAAA,EAAAA,YAAAA,CtB6mJYH,GAAoBtyB,KAAK/E,EAAKw3B,csB1mJ1C97B,EAAAwK,EAAAA,MAAAC,EAAAqxB,YtB6mJQ,IAAIC,GAAuC,iBAAdF,IAAiD,iBAAfC,EAC3DC,KsBvmJZ/7B,EAAAwF,SAAAiF,KAAA,SAAAsR,GAEA,MAAA+e,GAAA96B,EAAA+F,ItBymJU/F,EsBvmJV47B,YAAAnxB,KAAAuxB,SAAAlB,GACAzZ,MAAAA,SAAA4a,OAAAA,EAAAtf,MAKAzd,EAAAm8B,QAAAI,WACAz5B,GAAAA,KAAAhC,EAAA+F,UtBsmJUR,GsBpmJV,WACAvF,IAAA4F,EAAAA,GAAAA,QAAAyb,GtBqmJYA,EAAc4a,YAAYn9B,EAAQ6d,YAAame,MAGnD57B,EAAQm8B,KAAKv8B,EAAQ28B,YAAa,WAChCz5B,EAAM6e,OAAO,WACN+a,GsB9lJjBjzB,EAAA/C,eAAAyb,EAAAkQ,SAAA,WAGAzoB,EAAAtD,mBtBmmJOmD,UsB9lJPtG,eAAA,WtB+lJI,OACEyG,SsB9lJNxI,ItB+lJMyI,QsB9lJNzI,UtB+lJMP,QAAS,SAAkBb,EAASoF,GAClCpF,EAAQoF,KAAK,cAAe,WAC5BpF,EAAQuC,WAAW,WsBzlJ3BkH,IAAAA,GAAAzJ,EAAA,GAAAgV,iBAAA,sBAEAxU,SAAAA,QAAAg8B,EAAAh8B,SAAAA,GACAi8B,QAAAA,QAAAA,GAAAr3B,KAAA,WAAA,IAEAhE,QAAApB,QAAA+kB,GAAA3f,KAAA,WAAAA,EAAA0F,etB4lJKrB,UsBvlJL7J,WAAAY,UAAAA,QAAAA,SAAAA,EAAAA,GtBwlJI,GsBrlJJA,GAAAk8B,EAAA18B,SACAy8B,EAAAC,oBtBslJI,QACE9yB,SsBplJN2L,ItBqlJM1L,QsBplJN,UtBqlJMhH,KsBplJNvB,SAAA8T,EAAA4nB,EAAAA,EAAAA,GtBqlJQ,GsBjlJRl8B,GtBilJYlB,EsBplJZY,EACAc,EAAA07B,UAAAA,EAAAA,GAAAA,StBqlJY7a,EAAgBua,EAAU18B,EAAQsT,SAAWtT,CAEjDoF,GAAKmQ,SAAS,QAAS,SAASynB,GsB/kJxC17B,EAFAgF,iBAAAA,IAAAm2B,EAAAtyB,KAAA6yB,GAEApB,EAAAx6B,MAAAA,GAEAs7B,EtBmlJU57B,EAAWwF,YsB7kJrBtG,EAAAm8B,QAAAI,WACAz5B,GAAAA,GAAA1B,QAAA8F,OAAApG,EAAA+F,WAAAvF,EtBglJU+E,GsB9kJVvF,WACAA,IAAAwF,EAAAA,GAAAA,QAAAA,GtB+kJY6b,EAAc4a,YAAYn9B,EAAQ6d,YAAame,MAGnD57B,EAAQm8B,KAAKv8B,EAAQ28B,YAAa,WAChCz5B,EAAM6e,OAAO,WuBpvJvBthB,EAAAqG,cAAApF,GAIAd,EAAAI,mBvBwvJEQ,QuBlvJFgB,OAAAA,wBAAA,yBAAAwB,SAAA,SAAA,WvBmvJI,GuBlvJJC,GAAAjD,KAAAJ,UACAR,UAAA,0BACA8lB,YAAA,QACAhiB,YAAA,QACAtB,UAAA,QACA8F,YAAA,uBvBmvJMlG,iBAAiB,EuBhvJvBxB,WAAAoM,EAEAhN,QAAAi9B,KvBivJMnX,UuB/uJNoX,EvBgvJMp5B,UuB7uJNlE,EvB8uJM4C,MuB5uJN06B,EvB6uJM50B,MuB3uJN,EvB6uJI1H,MuBzuJJoM,MAAAiwB,SAAAA,SAAAA,GvB0uJM,QAASA,GAAal4B,GuBpuJ5B0E,GAAAA,MAEA7J,EAAAwB,QAAAQ,UAAApB,EAAAuE,EAEAjC,OADA8G,GAAA4c,EAAA5mB,GvBuuJM,MuBnuJNA,OvBquJK6J,UuBruJLzJ,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GvBsuJI,OACE4J,SAAU,MACV9G,OuBvuJN1B,EvBwuJMyB,KuBvuJN,SAAA2D,EAAA/E,EAAA7B,EAAA6B,GvBwuJQ,GAAI7B,IuBpuJZkD,MAAAgH,EACA1I,QAAAC,EACAiH,MAAAlH,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,kBAAAI,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,aAAAA,SAAAA,GACAsI,QAAAvD,UAAA/E,EAAAuI,MAAAC,EAAAA,GAAAxI,EAAAyI,KvBquJQ,IuBnuJRtK,GAAAkD,evBouJQ1B,SAAQC,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASI,GACpEL,QAAQoF,UAAUpB,EAAK3D,KAASqI,EAAiBK,KAAK/E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KAEvFL,QuBjuJRgE,SAAA,eAAA,SAAA,eAAA,UAAA,SAAA3D,GvBkuJU,GuBjuJV2D,GAAAmQ,KAAA9T,EAAAuI,OAAAe,GAAAA,cAAAC,EAAAA,MAAAA,EACAlI,SAAArB,UAAAgR,EAAAA,MvBkuJY7S,EAAQ6B,GAAOqB,EAAMsS,MAAMhQ,EAAK2E,OuB5tJ5C3I,QAAAgE,SAAA,QAAA,WAAA,SAAA3D,GACAqB,EAAA+H,IACAzF,EAAAhE,SAAAkC,EAAAA,SAAAyH,EAAAC,GACA5J,EAAAA,GAAAQ,EAAAkB,YAAAiI,OvBmuJY3F,EuB/tJZ+3B,SvBguJUr6B,EAAM+H,OAAOzF,EAAK+3B,QAAS,SAASpyB,EAAUC,GuB5tJxDoyB,QAAAF,SAAAt9B,GAGAI,QAAAoF,OAAAzB,EAAAoH,GAIAqyB,EAAAA,QAAAlxB,IAEAkxB,EvB2tJQ,IAAIA,GAAQF,EAAOt9B,EACnBI,GAAQ0I,GAAGtD,EAAKzB,SAAW,QAASy5B,EAAMtqB,QAC1ChQ,EAAMmJ,IAAI,WAAY,WwB3zJ9B5L,GAAA+8B,EAAAlxB,UAIA1L,EAAAI,KACAH,EAAA,YxB8zJEW,QwBzzJFyC,OAAA,wBAAA,yBAAAD,SAAA,SAAA,WxB0zJI,GwBzzJJ5D,GAAAY,KAAAJ,UACAslB,UAAA,UACAhiB,YAAA,QACAwE,YAAA,QAEA+0B,UAAA,KACA9wB,YAAA,uBACA+wB,WAAAA,EACAC,QAAAA,KxByzJMzX,UAAU,EwBtzJhBllB,UAAAoM,EAEA1E,MAAA,ExBuzJM+0B,UwBrzJNG,ExBszJMjxB,MwBnzJN3M,ExBozJM09B,awBlzJN9W,ExBmzJM+W,iBwBlzJN/V,ExBozJI5mB,MAAKoM,MwBlzJTywB,SAAAA,WAAAz9B,SAAAw9B,EAAAj1B,GxBmzJM,QwBlzJNm1B,GAAAD,GxBmzJQ,GAAID,MACA59B,EAAUwB,QAAQQ,UAAWpB,EAAUuE,EAC3Cy4B,GAAShX,EAAO5mB,GAChB49B,EwBjzJRhW,YAAAX,WxBkzJU,QwBjzJVpX,KxBkzJY,GwBjzJZguB,GAAA/W,QAAAA,QAAAA,EAAAA,UAAAiX,QAAAA,kBxBkzJY,OwBjzJZ/W,GAAAA,KAAAlnB,yIAAAuE,OAAA,SAAA6J,EAAAuB,GACA,OAAApK,QAAA2hB,QAAA/H,GAAAA,aAAAsD,EAAAA,mBAAAA,SxBozJU,QAAS0E,KwBhzJnBzlB,GAAAA,EAAApB,cAAA6mB,CxBkzJc,GAAID,GAAYF,IAAwBiX,SwB9yJtDH,IAAA93B,IAAA43B,EAAA19B,MACAA,IAAAA,GAAAgnB,EAAA/H,QAAApP,EAAA0S,cACAqb,OAAA93B,GAAA9F,EAAA2M,IAGAixB,QAAA93B,QAAA63B,KAAAA,SAIAC,EAAAl1B,OAAAk1B,cAAAl1B,EAAAA,YACA1I,EAAAy9B,OACAG,EAAAl1B,OAAAiE,KAAA3M,EAAA2M,MAEA9D,EAAAA,kBxB8yJU+0B,EwB7yJVA,OAAA10B,gBAAAA,EAAAA,gBxB+yJQ,IAAIR,GAAOk1B,EAAOl1B,IwB5xJ1BxF,OxB6xJYlD,GAAQy9B,WwB3yJpBG,EAAAA,KAAAA,WxB6yJYl1B,IwBzyJZG,EAAAi1B,WxB2yJcF,EAAO10B,QwBryJrB,IAAAlJ,EAAAy9B,YAIAG,ExBuyJM,MwBnyJN59B,OxBqyJK6J,UwBryJLzJ,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GxBsyJI,OACE4J,SAAU,MACV9G,OwBvyJN1B,ExBwyJMyB,KwBvyJN,SAAA2D,EAAA/E,EAAA7B,EAAA6B,GxBwyJQ,GAAI7B,IwBpyJZkD,MAAAgH,EACA1I,QAAAC,EACAiH,MAAAlH,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAAI,WAAAA,OAAAA,YAAAA,YAAAA,WAAAA,eAAAA,SAAAA,GACAsI,QAAAvD,UAAA/E,EAAAuI,MAAAC,EAAAA,GAAAxI,EAAAyI,KxBqyJQ,IwBnyJRtK,GAAAkD,exBoyJQ1B,SAAQC,SAAU,WAAY,OAAQ,YAAa,eAAiB,SAASI,GACvEL,QAAQoF,UAAUpB,EAAK3D,KAASqI,EAAiBK,KAAK/E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KAEvFL,QwBhyJRkL,SAAA,eAAA,SAAA,eAAA,UAAA,SAAA7K,GxBiyJU,GAAIsI,GAAQ,KAAOtI,EAAIuI,OAAO,GAAGC,cAAgBxI,EAAIyI,MAAM,EwB7xJrE9I,SAAAC,UAAA+D,EAAA2E,MACAnK,EAAA6B,GAAAqB,EAAAsS,MAAAhQ,EAAA2E,OxBiyJajH,EAAMwS,eAAe,WACxBxS,EAAMwJ,MAAQ,IwB1xJxBlL,QAAAgE,SAAA,QAAA,UAAA,QAAA,SAAA3D,GACAqB,EAAA+H,IACAzF,EAAAhE,SAAAkC,EAAAA,SAAAyH,EAAAC,GACA5J,EAAAA,GAAAQ,EAAAkB,YAAAiI,OxBgyJY3F,EwB5xJZw4B,SxB6xJU96B,EAAM+H,OAAOzF,EAAKw4B,QAAS,SAAS7yB,EAAUC,GwBzxJxD6yB,QAAAL,SAAA59B,GAGAI,QAAAoF,OAAAzB,EAAAoH,GAIA8yB,EAAAA,QAAA3xB,IAEA2xB,ExBwxJQ,IAAIA,GAAQL,EAAO59B,EACnBI,GAAQ0I,GAAGtD,EAAKzB,SAAW,QAASk6B,EAAM/qB,QAC1ChQ,EAAMmJ,IAAI,WAAY,WyB56J9B5L,GAAAw9B,EAAA3xB,UAIA1L,EAAAI,KACAyG,EAAA,YzB+6JEjG,QyBx6JF0hB,OAAAA,wBAAArT,oCAAAE,oCAAAA,SAAAA,SAAAA,WzBy6JI,GyBx6JJnP,GAAAoiB,KAAAxhB,UAEAiG,UAAAy2B,OzBw6JMC,cyBt6JNC,EzBu6JMC,UyBp6JNr+B,EzBs6JIgB,MyBl6JJoM,MAAAkxB,UAAA,WAAA,aAAA,SAAAhiB,EAAA2G,EAAA1T,GzBq6JM,QyBl6JNgvB,GAAAA,EAAAp5B,GzB0hKQ,QyBt3JRq5B,GAAAC,EAAAtuB,EAAAd,GzBu3JU,GyBt3JVzH,GAAA82B,IzBu3JcC,EAAeC,GyBr3J7B,OAAAn3B,IAAAG,EzBu3JmB,MyBp3JnB82B,OAAAA,EACArjB,EAAAojB,GAAAniB,EAAAA,IAAAuiB,SAAAxjB,SzBs3JsC,OAAjByjB,GAAyB3uB,EAASd,IAAM0vB,EAAgBC,GAAmBL,EAAeG,EyBn3J/GF,SzBs3JiB,SyBj3JjB,QAAAR,KzBo3JU,MAAO/iB,GAAS,KAAOiB,EAAUA,EAAQuiB,YAAcxjB,EAAS,GAAGzT,UAErE,QAASg3B,KyB52JjB/0B,MAAAwR,GAAA,KAAAiB,EAAAA,EAAAzM,SAAAE,KAAA4uB,aAAAriB,EAAAzT,GAAAA,aA5LA,GAAApB,MACAq3B,EAAAA,QAAA98B,UAAApB,EAAAuE,GACA85B,EAAAj/B,EAAAuM,OACA2yB,EAAA,+BAEAxrB,GAAAtT,EAEAJ,EAAAkqB,EACAqU,EAAArU,EACAziB,EAAAyG,EzBi6JY4wB,EyBh6JZprB,EzBi6JYurB,EAAU,KACVC,EyBh6JZ,KACAxrB,EAAAlS,EAAApB,QzBi6JQ,IAAIJ,EAAQkqB,aACV,GAAIlqB,EAAQkqB,aAAapU,MAAM,SyB95JzCsoB,IAAA/qB,GAAAA,GAAA,EAAAnF,EAAA,EAAAlO,EAAAkqB,aAAA,EAAAhc,IAEAlN,EAAAm+B,EAAAA,aAKA9jB,GAAAvS,QAAA1I,QAAAikB,EAAAA,aAwKApa,OzBuvJQm0B,GyBz5JR/Z,KAAAA,WACArjB,KAAAmjB,gBzB05JUoa,EAAmBhvB,EAAWC,OAAOpP,EAAQ,IAAIiP,IAAM2vB,EyBt5JjEZ,EAAA9xB,EAAA+xB,WAAAj+B,EAAA,GAAAuqB,MAAAxb,MAGAkM,EAAAlS,GAAAA,SAAAnI,KAAAA,eACAqa,EAAAlS,GAAAA,QAAAnI,KAAAA,4BACAgiB,EAAA7Z,GAAAA,SAAAnI,KAAAA,oBzBs5JUA,KAAKqjB,gByBl5Jf+Z,KAAAja,8BzBq5JQia,EAAO9xB,QAAU,WyB74JzB8xB,EAAA/Z,IAAAA,SAAArjB,KAAAqjB,eAGAhJ,EAAAzT,IAAAA,QAAA82B,KAAAA,4BACA1b,EAAA7S,IAAAA,SAAAZ,KAAAC,qBzB84JQ4uB,EyB14JRgB,2BAAAF,WAGA1a,WAAAya,EAAAG,cAAA,IzB04JQhB,EyBv4JRgB,cAAA,WzBw4JU,GyBv4JVF,GAAAR,IACAvuB,EAAAkuB,EAAA7uB,OAAApP,EAAA,IACAA,EAAAmP,EAAAH,OAAAhP,EAAA,IzBw4Jcg/B,EAAQZ,EAAsBU,EAAO/uB,EAAU4uB,EyBt4J7DE,KAAAd,IzBw4JUc,EyBv4JV7+B,EACAwQ,QAAAxQ,GzBw4JY8+B,EAAQ,KACJb,GyBt4JhBj+B,EAAAJ,IAAAq/B,QAAAA,IzBy4JgBr/B,EyBv4JhBm+B,eAGAe,EAAA/uB,IAAAA,WAAAvI,EAAAA,aAAAA,GAAAA,YzBs4JcxH,EAAQwQ,IAAI,MAAO,MyBn4JjC,WAAAxQ,GAEA8+B,EzBo4JgBl/B,EAAQq/B,cyBp4JxB,EAAAlB,EAAAA,aAEAvtB,EAAAvB,IAAArP,EzBu4JgBq+B,GyBp4JhBa,EAAAtuB,IAAA,QAAA,IAEAxQ,EAAAwQ,ezBs4JcxQ,EAAQwQ,IAAI,WAAY5Q,EAAQkqB,aAAe,GAAK,YyBp4JlE9pB,EAAAJ,IAAAm+B,MAAAA,EAAAjU,aAAA,GAAAhH,EAAA,GAAAlS,aAAA8tB,EAAAC,EAAAR,EAAA,SzBw4JYW,EAAQ,KACJb,GyBl4JhBj+B,EAAA2U,IAAAA,QAAAupB,EAAAvqB,GAAA5C,YAAAiuB,MAIAE,EAAAA,eACAlB,EAAAe,IAAAA,WAAAA,SACAf,EAAA/Z,IAAAA,MAAAA,EAAAA,QAIA+Z,EAAAe,YAAAA,GAAAprB,SAAA,SAAA,WAAAqrB,EAAA,IAAAA,EAAA,OzBk4JQhB,EyBh4JRmB,UAAAn/B,WAEAg+B,EAAAp+B,gBzBg4JUo+B,EyB/3JVh+B,iBzBi4JQg+B,EAAOoB,mBAAqBvc,EAASmb,EAAOkB,UAAW,IACvDlB,EyB93JRp+B,cAAAyH,WzB+3JU,GyB93JVg4B,GAAAh4B,EAAA,GAAAkjB,MAAAxa,SACAnQ,EAAAyH,EAAA,GAAAkjB,MAAAtb,GzB+3JcrP,GAAQm+B,eyB73JtB/9B,EAAAJ,IAAAyH,WAAAqO,EAAAoU,aAAA,GAAA,YzB+3JY9pB,EyB93JZ4+B,IAAAA,MAAAA,KzBg4Jch/B,EyB93JdyH,YACA,SzB83JgBzH,EyB93JhByH,YzB+3JczH,EyB93JdyH,UAAA8H,MzBg4JgBvP,EyB93JhByH,UAAAqO,MAAA,cACArO,EAAA,GAAAzH,EAAAyH,UzBg4JgBA,EADEzH,EAAQkqB,aACE3a,EAAWC,OAAOkE,EAAO,IAAIrE,IAA0B,EAApBrP,EAAQyH,UyB33JvEyiB,EAAAA,OAAAlqB,EAAA8+B,IAAAA,IAAAhpB,EAAAlF,IAAAxQ,EAAA,GAAA,aAAA,GAAA,EAAAJ,EAAAyH,WAIAq3B,EAAAA,EAAAA,EAAA9+B,WAKAA,EAAAm+B,eAEA/9B,EADAA,EAAA8pB,cAAAuV,EAAAA,aAAAA,MAAAA,aACAb,KAAAW,EAAAA,OAAAA,EAAAA,IAAAA,IAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,aAAAA,EzB43JoD,EAAvBv/B,EAAQ8+B,cyBp3JrCH,EAAAA,eAEAv+B,EAAAwH,IAAAA,WAAAH,GACArH,EAAAwQ,IAAA,MAAA2uB,KA+BAv1B,EAAAA,OACAo0B,EzB+tJM,GyBl6JNlb,GAAAmb,QAAAj+B,QAAAkc,EAAAzM,SAAAE,MACAiT,EAAAgc,QAAAA,QAAA1iB,EzBgjKM,OyB32JNtc,OzB62JK6J,UyB72JL0C,WAAAmzB,SAAAA,UAAA/2B,WAAAnH,SAAApB,EAAAkc,EAAAA;AzB82JI,OACEtS,SyB92JNvI,MzB+2JMwI,QyB92JNzI,kBzB+2JMyB,KyB92JN,SAAApB,EAAAA,EAAAA,EAAAA,GzB+2JQ,GyB92JR7B,IzB+2JUkD,MyB92JVA,EzB+2JUqJ,OyB92JVvM,EAAA2/B,EAAAA,SAAAA,QAAAA,QAAAA,GzBg3JQn+B,SAAQC,SAAU,YAAa,eAAgB,eAAgB,cAAe,eAAgB,YAAc,SAASI,GyB52J7H,GAAAu9B,QAAAA,UAAAA,EAAAA,IAAAA,CACAv2B,GAAAA,GAAArD,EAAA3D,EAAAu9B,SAAAhB,KAAAh+B,KAAAJ,GAAAA,GzB+2JgB,SAASuK,KAAKo1B,KAASA,GAAS,GyB92JhDz8B,EAAArB,GAAA89B,IzBk3JQ,IyB/2JRP,EzBg3JQv2B,GAAS,WACPu2B,EAAQhB,EAAOh+B,EAASJ,KyBz2JlC6J,EAAAA,IAAA,WAAA,WACAu1B,GAAAA,EAAA9yB,UACApL,EAAA,KACAF,EAAA2H,YCzPAnH,UAAA,gBAAA,W1ByrOG8oB,OA/kEGppB,YAAc,WAAY,SAASyH,GACjC3H,KAAK2H,SAAWA,OAItBnH,QAAQf,OAAO,kBAAoB,uBAAwB,uBAAwB,uBAAwB,wBAAyB,wBAAyB,4BAA6B,4BAA6B,wBAAyB,yBAA0B,yBAA0B,0BAA2B,2BAA4B,2BAA4B,uBAAwB,qBAAsB,6BACpa6pB,OAAQza","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\r\n'use strict';\r\n\r\n// Source: typeahead\\typeahead.js\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    var KEY_CODES = {\r\n      downArrow: 40,\r\n      enter: 13,\r\n      escape: 27,\r\n      upArrow: 38\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n        scope.id = options.id;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function isActive (index) {\r\n          return scope.$activeIndex === index ? true : undefined;\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        scope.$generateResultId = function (index) {\r\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          // If the key code isn't up arrow, down arrow, or enter return.\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n            // Navigate with keyboard\r\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if ((evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex === 0) || (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex === scope.$matches.length - 1)) {\r\n            scope.$activeIndex = -1;\r\n            var ele = '#' + evt.currentTarget.id;\r\n            // position the cursor after the last letter of the selected item inside the control to allow the user to easily delete the selection if desired\r\n            angular.element(ele).val('').val(controller.$viewValue);\r\n            angular.element(ele).focus();\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n            setAriaActiveDescendant();\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              if (options.id) {\r\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\r\n                $typeahead.$element.attr('id', options.id + '_listbox');\r\n                element.attr('aria-controls', options.id + '_listbox');\r\n\r\n                var assertDiv = document.getElementById(options.id + '_sr_text');\r\n                if (!assertDiv) {\r\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\r\n                }\r\n              }\r\n\r\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\r\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\r\n\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                // event for the element that we attach is added to event queue\r\n                // before pushing the same event more that once for the same element, event need to detach\r\n                // list item jumps happening in search list for this setted keydown off\r\n                if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n\r\n          var assertDiv = document.getElementById(options.id + '_sr_text');\r\n          angular.element(assertDiv).remove();\r\n\r\n          setAriaActiveDescendant();\r\n\r\n          hide();\r\n        };\r\n\r\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Helper functions within this closure\r\n\r\n        function setAriaActiveDescendant (index) {\r\n          if (index === undefined || !scope.id) {\r\n            element.removeAttr('aria-activedescendant');\r\n          } else {\r\n            var resultId = scope.$generateResultId(index);\r\n            if (resultId) {\r\n              element.attr('aria-activedescendant', resultId);\r\n            } else {\r\n              element.removeAttr('aria-activedescendant');\r\n            }\r\n          }\r\n        }\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\r\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\r\n          element.attr('aria-autocomplete', 'list');\r\n        }\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          element.off('keydown');\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tooltip\\tooltip.js\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      mouseDownPreventDefault: true,\r\n      mouseDownStopPropagation: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        // var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($tooltip);\r\n          }\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          if (tipElement !== null) {\r\n            // Support v1.2+ $animate\r\n            // https://github.com/angular/angular.js/issues/11713\r\n            if (angular.version.minor <= 2) {\r\n              $animate.leave(tipElement, leaveAnimateCallback);\r\n            } else {\r\n              $animate.leave(tipElement).then(leaveAnimateCallback);\r\n            }\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\r\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n              // element.on('blur', $tooltip.leave);\r\n            } else if (trigger !== 'manual') {\r\n              // Only bind up hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              } else if (trigger === 'focus') { // but do bind focus events for touch\r\n                element.on('focus', $tooltip.enter);\r\n                element.on('blur', $tooltip.leave);\r\n              }\r\n\r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              // Remove previously defined hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              } else if (trigger === 'focus') { // Remove previously defined focus events\r\n                element.off('focus', $tooltip.enter);\r\n                element.off('blur', $tooltip.leave);\r\n              }\r\n\r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) { // eslint-disable-line\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: timepicker\\timepicker.js\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tab\\tab.js\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active',\r\n      isVertical: false\r\n    };\r\n    var _tabsHash = {};\r\n\r\n    var _addTabControl = function (key, control) {\r\n      if (!_tabsHash[key]) _tabsHash[key] = control;\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      $scope.$onClick = function $onClick (evt, pane, index) {\r\n        if (!pane.disabled) {\r\n          self.$setActive(pane.name || index);\r\n        }\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n      };\r\n\r\n      function navigatePane (index, toLeft) {\r\n        var newIndex = 0;\r\n\r\n        if (toLeft) {\r\n          // Moving to the left\r\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\r\n        } else {\r\n          // Moving to the right\r\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\r\n        }\r\n\r\n        if (self.$panes[newIndex].disabled) {\r\n          navigatePane(newIndex, toLeft);\r\n        } else {\r\n          self.$setActive(self.$panes[newIndex].name || newIndex);\r\n        }\r\n      }\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n\r\n        self.$panes.push(pane);\r\n\r\n        self.$panes.forEach(function (tabPane, index) {\r\n          // Set an id value for the pane so that it can be used in the template\r\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\r\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\r\n        });\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\r\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\r\n          // If space or enter was pressed\r\n          self.$setActive(name);\r\n\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n\r\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\r\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\r\n        }\r\n      };\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      $tab.addTabControl = _addTabControl;\r\n      $tab.tabsHash = _tabsHash;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\r\n        // tabs are available in the tab component\r\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\r\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\r\n        }\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          $timeout(function () {\r\n            // get li elements\r\n            var liElements = element.find('li');\r\n            for (var i = 0; i < liElements.length; i++) {\r\n              var iElement = angular.element(liElements[i]);\r\n              if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\r\n                // if li is active, set focus to it.\r\n                iElement.find('a')[0].focus();\r\n              }\r\n            }\r\n            // delay, for the class (.active) change to reflect in DOM.\r\n          }, 100);\r\n        });\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Set up the assistive attributes\r\n        element.attr('role', 'tabpanel');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n        // Save tab id into scope\r\n        scope.id = attrs.id;\r\n\r\n        scope.name = scope.name || scope.id;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // Once the push has occured when can then update the element with some properties.\r\n        // Update the aria-labelledby attribute\r\n\t\t// SS-11127 - removed aria-describedby from tab and tab-panel and utilized aria-labeledby on the tab-panel using the ID of the tab and not the ID of the tab link\r\n        if (scope.$describedBy !== undefined) {\r\n          element.attr('aria-labelledby', scope.$describedBy);\r\n        }\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('focusOn', function () {\r\n    return {\r\n      restrict: 'A',\r\n      link: function (scope, elem, attr) {\r\n        scope.$watch(attr.focusOn, function (newValue, oldValue) {\r\n          if (newValue !== oldValue && newValue) {\r\n            elem[0].focus();\r\n          }\r\n        });\r\n      }\r\n    };\r\n  });\r\n\r\n// Source: select\\select.js\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok',\r\n      toggle: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              if (options.toggle) {\r\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\r\n              } else {\r\n                controller.$setViewValue(value);\r\n              }\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $select);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            var anchor;\r\n\r\n            if (evt.target.nodeName !== 'A') {\r\n              var anchorCandidate = targetEl.parent();\r\n              while (!anchor && anchorCandidate.length > 0) {\r\n                if (anchorCandidate[0].nodeName === 'A') {\r\n                  anchor = anchorCandidate;\r\n                }\r\n                anchorCandidate = anchorCandidate.parent();\r\n              }\r\n            }\r\n\r\n            if (anchor) {\r\n              angular.element(anchor).triggerHandler('click');\r\n            } else {\r\n              targetEl.triggerHandler('click');\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: scrollspy\\scrollspy.js\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: popover\\popover.js\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\r\n            if (newValue === false) {\r\n              popover.setEnabled(false);\r\n            } else {\r\n              popover.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: navbar\\navbar.js\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: modal\\modal.js\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true,\r\n      size: null,\r\n      zIndex: null,\r\n      containerElement: null\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      var layoutHideElement = angular.element('#layoutContainer');\r\n\r\n      var backdropCount = 0;\r\n      var dialogBaseZindex = 1050;\r\n      var backdropBaseZindex = 1040;\r\n\r\n      var validSizes = {\r\n        lg: 'modal-lg',\r\n        sm: 'modal-sm'\r\n      };\r\n\r\n      function ModalFactory (config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if (options.containerElement) {\r\n          layoutHideElement = angular.element(options.containerElement);\r\n        }\r\n        if (!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        if (options.zIndex) {\r\n          dialogBaseZindex = parseInt(options.zIndex, 10);\r\n          backdropBaseZindex = dialogBaseZindex - 10;\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        $modal.returnFocus = function () {\r\n\r\n        };\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function (key) {\r\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData;\r\n        var modalElement;\r\n        var modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({\r\n          position: 'fixed',\r\n          top: '0px',\r\n          left: '0px',\r\n          bottom: '0px',\r\n          right: '0px'\r\n        });\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function () {\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function () {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if (backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function () {\r\n          if ($modal.$isShown) return;\r\n\r\n          var parent;\r\n          var after;\r\n          if (angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if (modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\r\n\r\n          if (options.backdrop) {\r\n            // set z-index\r\n            modalElement.css({\r\n              'z-index': dialogBaseZindex + (backdropCount * 20)\r\n            });\r\n            backdropElement.css({\r\n              'z-index': backdropBaseZindex + (backdropCount * 20)\r\n            });\r\n\r\n            // increment number of backdrops\r\n            backdropCount++;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($modal);\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({\r\n            display: 'block'\r\n          }).addClass(options.placement);\r\n\r\n          // Options: customClass\r\n          if (options.customClass) {\r\n            modalElement.addClass(options.customClass);\r\n          }\r\n\r\n          // Options: size\r\n          if (options.size && validSizes[options.size]) {\r\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\r\n          }\r\n\r\n          // Options: animation\r\n          if (options.animation) {\r\n            if (options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function () {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n\r\n          layoutHideElement.attr('aria-hidden', 'true');\r\n\r\n          if (options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'false');\r\n          modalElement.attr('tabindex', '0');\r\n          modalElement.focus();\r\n          if (!modalElement.length || !angular.element(modalElement[0]).hasClass('modal')) {\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n            unbindKeyboardEvents();\r\n          }\r\n        }\r\n\r\n        $modal.hide = function () {\r\n          if (!$modal.$isShown) return;\r\n\r\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'true');\r\n\r\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            // decrement number of backdrops\r\n            backdropCount--;\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($modal);\r\n          }\r\n          if (findElement('.modal').length <= 0) {\r\n            bodyElement.removeClass(options.prefixClass + '-open');\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n          }\r\n          if (options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        function findFocusableElements () {\r\n          // Add all elements we want to include in our selection\r\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\r\n          if (document.activeElement) {\r\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\r\n              function (element) {\r\n                // Check for visibility while always include the current activeElement\r\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\r\n              });\r\n\r\n            return focusable;\r\n          }\r\n        }\r\n\r\n        function findNextFocusableElement (inReverse) {\r\n          if (document.activeElement) {\r\n            var focusable = findFocusableElements();\r\n            if (focusable === undefined) return;\r\n            if (inReverse) {\r\n              focusable = Array.prototype.reverse.call(focusable);\r\n            }\r\n\r\n            var index = focusable.indexOf(document.activeElement);\r\n            return focusable[index + 1];\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function () {\r\n          if ($modal.$isShown) {\r\n            $modal.hide();\r\n          } else {\r\n            $modal.show();\r\n          }\r\n        };\r\n\r\n        $modal.focus = function () {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function (evt) {\r\n\r\n          // Escape was pressed on an open modal. Hide it.  Backspace key, nothing happen.\r\n          if ((evt.which === 8 || evt.which === 27) && $modal.$isShown) {\r\n            if (evt.which === 27) {\r\n              $modal.hide();\r\n            }\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $modal.$onKeyDown = function (evt) {\r\n          if (options.keyboard) {\r\n            if (evt.keyCode === 8 && evt.target.tagName !== 'TEXTAREA' && evt.target.tagName !== 'INPUT') {\r\n              evt.preventDefault();\r\n            }\r\n\r\n            if (evt.keyCode === 9) {\r\n\r\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\r\n              if (nextFocusable === undefined) {\r\n                if (evt.preventDefault) evt.preventDefault();\r\n                if (evt.stopPropagation) evt.stopPropagation();\r\n\r\n                var focusable = findFocusableElements();\r\n                if (evt.shiftKey) {\r\n                  focusable[focusable.length - 1].focus();\r\n                } else {\r\n                  focusable[0].focus();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n        function bindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n            modalElement.on('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n            modalElement.off('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        // Private helpers\r\n\r\n        function hideOnBackdropClick (evt) {\r\n          if (evt.target !== evt.currentTarget) return;\r\n          if (options.backdrop === 'static') {\r\n            $modal.focus();\r\n          } else {\r\n            $modal.hide();\r\n          }\r\n        }\r\n\r\n        function preventEventDefault (evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement () {\r\n          if ($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if (modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope,\r\n          element: element,\r\n          show: false\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Options: alias modalClass to customClass\r\n        if (options.modalClass) {\r\n          options.customClass = options.modalClass;\r\n        }\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsModal) {\r\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        if (options.keyboard) {\r\n          modal.returnFocus = function () {\r\n            element[0].focus();\r\n          };\r\n        }\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\raf.js\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n\r\n// Source: helpers\\parse-options.js\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\focus-out.js\r\nangular.module('mgcrea.ngStrap.helpers.ngFocusOut', [])\r\n  .directive('ngFocusOut', ['$parse', '$rootScope', function ($parse, $rootScope) {\r\n    return {\r\n      restrict: 'A',\r\n      compile: function ($element, attr) {\r\n        // NOTE:\r\n        // We expose the powerful `$event` object on the scope that provides access to the Window,\r\n        // etc. This is OK, because expressions are not sandboxed any more (and the expression\r\n        // sandbox was never meant to be a security feature anyway).\r\n        var fn = $parse(attr.ngFocusOut);\r\n\r\n        return function link (scope, element) {\r\n          function ngEventHandler (event) {\r\n            var callback = function () {\r\n              fn(scope, {\r\n                $event: event\r\n              });\r\n            };\r\n            if ($rootScope.$$phase) {\r\n              scope.$evalAsync(callback);\r\n            } else {\r\n              scope.$apply(callback);\r\n            }\r\n          }\r\n\r\n          // setup the handler\r\n          element.on('focusout', ngEventHandler);\r\n\r\n          scope.$on('$destroy', function () {\r\n            // tear down the handler\r\n            element.off('focusout', ngEventHandler);\r\n          });\r\n        };\r\n      }\r\n    };\r\n  }]);\r\n\r\n// Source: helpers\\focus-element.js\r\nangular.module('mgcrea.ngStrap.helpers.focusElement', [])\r\n  .directive('focusElement', ['$timeout', '$parse', function ($timeout, $parse) {\r\n    return {\r\n      link: function (scope, element, attrs) {\r\n        scope.$watch(attrs.focusElement, function (value) {\r\n          if (value === true) {\r\n            $timeout(function () {\r\n              element[0].focus();\r\n            });\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n\r\n// Source: helpers\\dimensions.js\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n\r\n// Source: helpers\\debounce.js\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n\r\n// Source: helpers\\date-parser.js\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          if (value.match(/Z/)) {\r\n            date = new Date(value.substr(1, value.length - 3));\r\n          } else {\r\n            date = new Date(value.substr(1, value.length - 2));\r\n          }\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n\r\n// Source: helpers\\date-formatter.js\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    this.weekdays = function (lang) {\r\n      return $locale.DATETIME_FORMATS.DAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\compiler.js\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = options.resolve || {};\r\n    var locals = options.locals || {};\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template) {\r\n      resolve.$template = $q.when(template);\r\n    } else if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n    }\r\n\r\n    if (options.titleTemplate) {\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          findElement('[ng-bind=\"title\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if (!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function (locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n\r\n// Source: dropdown\\dropdown.js\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory (element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        /* var scope = */\r\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        if (element && element[0] && element[0].tagName.toUpperCase() === 'BUTTON') {\r\n          element.attr('aria-haspopup', 'true');\r\n          element.attr('data-toggle', 'dropdown');\r\n          element.attr('aria-expanded', 'false');\r\n          // element.attr('role', 'button'); As the element is a <button> there is no need for this attribute\r\n        }\r\n\r\n        // Dropdown menu items that are natively focusable need a tabindex of -1, but the user still needs to tab into the drodpwn menu\r\n        // This event serves to enable the user to tab into the drodpown menu\r\n        element.keydown(function(evt){\r\n          if(/(9)/.test(evt.keyCode)){\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n            var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n            items.eq(0)[0].focus();\r\n          }\r\n        })\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function (evt) {\r\n          if ((/(9)/.test(evt.keyCode) && !options.keyboard) || /27/.test(evt.keyCode)) {\r\n            $dropdown.hide(/27/.test(evt.keyCode));\r\n            return;\r\n          }\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if (!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function (el, i) {\r\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if (evt.keyCode === 38 && index > 0) index--;\r\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if (evt.keyCode === 40 && index === items.length - 1) index = 0;\r\n          else if (angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        $dropdown.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inMenu = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $dropdown.$element[0]) {\r\n              inMenu = true;\r\n              break;\r\n            } else {\r\n              inMenu = false;\r\n            }\r\n          }\r\n\r\n          if (!inMenu) {\r\n            $dropdown.hide();\r\n          } else {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Set assistive technology properties\r\n            element.attr('aria-expanded', 'true');\r\n            if ($dropdown.$element) {\r\n              $dropdown.$element.attr('aria-hidden', 'false');\r\n              $dropdown.$element.attr('role', 'menu');\r\n              // $dropdown.$element.attr('tabindex', '-1'); <ul> element should have no tabindex per SS-9603\r\n            }\r\n            if (options.keyboard && $dropdown.$element) {\r\n              $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n              $dropdown.$element.on('focusout', $dropdown.$onFocusOut);\r\n            }\r\n\r\n            bodyEl.on('click', onBodyClick);\r\n\r\n            if ($dropdown.$element) {\r\n              var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider)'));\r\n              // <li> should have role=\"none\" as per SS-9603\r\n              items.attr('role', 'none');\r\n\r\n              angular.element($dropdown.$element[0].querySelectorAll('li.divider')).attr('role', 'seperator');\r\n\r\n              items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n              items.attr('role', 'menuitem');\r\n              if (items.length && options.keyboard) {\r\n                // items[0].focus(); Removing initial focus as user must tab into the menu per SS-9603\r\n\r\n                //Dropdown menu items that are natively focusable need to have a tabindex of -1 per SS-9603\r\n                angular.forEach(items, function (value, key) {\r\n                  angular.element(value).attr('tabindex', '-1');\r\n                });\r\n              }\r\n            }\r\n          }, 0, false);\r\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function (returnFocus) {\r\n          if (!$dropdown.$isShown) return;\r\n\r\n          element.attr('aria-expanded', 'false');\r\n          $dropdown.$element.attr('aria-hidden', 'true');\r\n\r\n          if (options.keyboard && $dropdown.$element) {\r\n            $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n            $dropdown.$element.off('focusout', $dropdown.$onFocusOut);\r\n          }\r\n\r\n          bodyEl.off('click', onBodyClick);\r\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\r\n          $timeout(function () {\r\n            hide();\r\n            if (returnFocus) {\r\n              $timeout(function () {\r\n                if (element && element[0]) {\r\n                  element[0].focus();\r\n                }\r\n              }, 0, false);\r\n            }\r\n          }, 200);\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function () {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick (evt) {\r\n          if (evt.target === element[0]) return undefined;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      compile: function (tElement, tAttrs) {\r\n\r\n        // Support for inlined template (next sibling)\r\n        // It must be fetched before compilation\r\n        if (!tAttrs.bsDropdown) {\r\n          var nextSibling = tElement[0].nextSibling;\r\n          while (nextSibling && nextSibling.nodeType !== 1) {\r\n            nextSibling = nextSibling.nextSibling;\r\n          }\r\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\r\n            tAttrs.template = nextSibling.outerHTML;\r\n            tAttrs.templateUrl = undefined;\r\n            nextSibling.parentNode.removeChild(nextSibling);\r\n          }\r\n        }\r\n\r\n        return function postLink (scope, element, attr) {\r\n\r\n          // Directive options\r\n          var options = {\r\n            scope: scope\r\n          };\r\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\r\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\r\n          });\r\n\r\n          // use string regex match boolean attr falsy values, leave truthy values be\r\n          var falseValueRegExp = /^(false|0|)$/i;\r\n          angular.forEach(['html', 'container'], function (key) {\r\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n          });\r\n\r\n          // bind functions from the attrs to the show and hide events\r\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n            if (angular.isDefined(attr[bsKey])) {\r\n              options[key] = scope.$eval(attr[bsKey]);\r\n            }\r\n          });\r\n\r\n          // Support scope as an object\r\n          if (attr.bsDropdown) {\r\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\r\n              scope.content = newValue;\r\n            }, true);\r\n          }\r\n\r\n          // Initialize dropdown\r\n          var dropdown = $dropdown(element, options);\r\n\r\n          // Visibility binding support\r\n          if (attr.bsShow) {\r\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n              if (!dropdown || !angular.isDefined(newValue)) return;\r\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n              if (newValue === true) {\r\n                dropdown.show();\r\n              } else {\r\n                dropdown.hide();\r\n              }\r\n            });\r\n          }\r\n\r\n          // Garbage collection\r\n          scope.$on('$destroy', function () {\r\n            if (dropdown) dropdown.destroy();\r\n            options = null;\r\n            dropdown = null;\r\n          });\r\n\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: datepicker\\datepicker.js\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      hasToday: false,\r\n      hasClear: false,\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right',\r\n      // The format that will be given to the screen reader values placed in the DOM.\r\n      screenReaderDateFormat: 'fullDate',\r\n      // Focuses the table element in the dropdown upon display of the picker.\r\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\r\n      focusOnOpen: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\r\n        // defaults and the configuration passed.\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // Add assistive technology helper attributes.\r\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\r\n\r\n        // View vars\r\n\r\n        // Initialize the datepicker view collection by passing a reference to the base object.\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        /*\r\n         * View mode for the date picker.\r\n         * 0: days\r\n         * 1: months\r\n         * 2: years\r\n         */\r\n        scope.$mode = options.startView;\r\n        // icon class override\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        // Show buttons at the bottom of the picker.\r\n        scope.$hasToday = options.hasToday;\r\n        scope.$hasClear = options.hasClear;\r\n        /*\r\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\r\n         * aria attributes which are linked via ids.\r\n         */\r\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\r\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\r\n        scope.keyboard = options.keyboard;\r\n        scope.focusOnOpen = options.focusOnOpen;\r\n\r\n        // labels\r\n        scope.$nextLabel = options.labelNext;\r\n        scope.$previousLabel = options.labelPrevious;\r\n\r\n        // This is the actual current picker view.\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Internal handlers\r\n\r\n        function handleOnKeyDown (evt, apply) {\r\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\r\n            return false;\r\n          }\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n              if (options.focusOnOpen) return true;\r\n            } else {\r\n              if (apply === undefined || apply) {\r\n                scope.$apply(function () {\r\n                  $datepicker.setMode(scope.$mode - 1);\r\n                });\r\n              } else {\r\n                $datepicker.setMode(scope.$mode - 1);\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        }\r\n\r\n        // Scope methods\r\n\r\n        /**\r\n         * Pass through from the scope to the provider for the selection of a date.\r\n         */\r\n        scope.$select = function (date, disabled) {\r\n          if (disabled) return;\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n        scope.$setToday = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(new Date());\r\n          } else {\r\n            $datepicker.select(new Date(), true);\r\n          }\r\n        };\r\n        scope.$clear = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(null);\r\n          } else {\r\n            $datepicker.select(null, true);\r\n          }\r\n        };\r\n        scope.$focused = function (dayInfo) {\r\n          scope.selectedDayId = dayInfo.id;\r\n          if (dayInfo.isNext && !scope.selected) {\r\n            if (scope.$mode) {\r\n              $datepicker.update(dayInfo.date);\r\n            } else {\r\n              scope.$select(dayInfo.date);\r\n            }\r\n          }\r\n        };\r\n        scope.$onKeyDown = function (evt, day) {\r\n          var continueHandling = handleOnKeyDown(evt, false);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n          }\r\n        };\r\n        scope.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inTable = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n              inTable = true;\r\n              break;\r\n            } else {\r\n              inTable = false;\r\n            }\r\n          }\r\n\r\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n          //\r\n\r\n          if (!inTable && !evt.relatedTarget) {\r\n            // hmm\r\n          } else if (!inTable) {\r\n            $datepicker.hide();\r\n          } else {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (angular.isDate(date)) {\r\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\r\n              controller.$dateValue = new Date(date);\r\n            }\r\n          } else {\r\n            controller.$dateValue = null;\r\n          }\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () {\r\n                $datepicker.hide(true);\r\n              });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {\r\n              year: date.getFullYear(),\r\n              month: date.getMonth(),\r\n              date: date.getDate()\r\n            });\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        /**\r\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\r\n         * rebuilt. The views are days, months, and years.\r\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\r\n         */\r\n        $datepicker.setMode = function setMode (mode) {\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          // The picker has been changed so the view needs to be built.\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        /**\r\n         * Builds the datepicker's view based on the picker that is currently set.\r\n         */\r\n        $datepicker.$build = function $build (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], function (day) {\r\n              updateSelected(day);\r\n              if (day.selected) scope.selected = day;\r\n            });\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {\r\n            year: targetDate.getUTCFullYear(),\r\n            month: targetDate.getUTCMonth(),\r\n            date: targetDate.getUTCDate()\r\n          });\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Handles the onKeyDown event from the element that this datepicker is bound.\r\n         * In the standard case this will be an input element. If the trigger is set\r\n         * to click and is bound to a button then it is likely we're servicing a 508\r\n         * type situation where the implementation will no longer uses. Focus will be\r\n         * given to the table.\r\n         */\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          var continueHandling = handleOnKeyDown(evt);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n            parentScope.$digest();\r\n          }\r\n        };\r\n\r\n        // $datepicker.$onFocusOut = function (evt) {\r\n        //   // find out if the related target's parents contain the datepicker's $element\r\n        //   var inTable = false;\r\n        //   var parent = angular.element(evt.relatedTarget);\r\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n        //     parent = parent.parent();\r\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n        //       inTable = true;\r\n        //       break;\r\n        //     } else {\r\n        //       inTable = false;\r\n        //     }\r\n        //   }\r\n\r\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n        //   //\r\n\r\n        //   if (!inTable && !evt.relatedTarget) {\r\n        //     // hmm\r\n        //   } else if (!inTable) {\r\n        //     $datepicker.hide();\r\n        //   } else {\r\n        //     evt.stopPropagation();\r\n        //     evt.preventDefault();\r\n        //   }\r\n        // };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n          el.focused = el.selected;\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        // The datepicker will override the init functionality of the tool\r\n        var _init = $datepicker.init;\r\n        /**\r\n         * Initialize the datepicker.\r\n         */\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\r\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\r\n        var _destroy = $datepicker.destroy;\r\n\r\n        /**\r\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\r\n         */\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be shown.\r\n        var _show = $datepicker.show;\r\n\r\n        /**\r\n         * Override for the tooltip's show function.\r\n         *\r\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\r\n         * Once shown it sets up the appropriate events.\r\n         */\r\n        $datepicker.show = function show () {\r\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n\r\n          // Call the \"overriden base\" function on the tooltip.\r\n          _show();\r\n\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n\r\n            // Update assistive technologies for view changes:\r\n            $datepicker.$element.attr('aria-hidden', 'false');\r\n            element.attr('aria-expanded', 'true');\r\n\r\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n            // If keyboard navigation is enabled (true by default).\r\n            if (options.keyboard) {\r\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\r\n              // Check to see if the table element should receive the focus when the picker is shown.\r\n              if (options.focusOnOpen) {\r\n                // Focus the table element.\r\n                // $datepicker.$element.find('table')[0].focus();\r\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\r\n              } else {\r\n                element.on('keydown', $datepicker.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be hidden.\r\n        var _hide = $datepicker.hide;\r\n\r\n        /**\r\n         * Overrid efor the tooltip's hide function.\r\n         *\r\n         * Updates attributes for assistive technologies and unbinds events.\r\n         */\r\n        $datepicker.hide = function (blur) {\r\n          // If the picker is already hidden don't do anything.\r\n          if (!$datepicker.$isShown) return;\r\n\r\n          // Update the attributes used by assisteive technologies\r\n          $datepicker.$element.attr('aria-hidden', 'true');\r\n          element.attr('aria-expanded', 'false');\r\n\r\n          // Unbind the mouse and touch events\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n          // If keyboard events were bound then unbind them.\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          if (options.focusOnOpen) {\r\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\r\n            element[0].focus();\r\n          }\r\n          // Call the tooltip's hide function.\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\r\n    return {\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        options = angular.extend({}, $datepicker.defaults, options);\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\r\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n\r\n          return date === null ? null : new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n      }\r\n    };\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLong = $dateFormatter.weekdays(lang);\r\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n\r\n        var weekDaysLabelsHtml = '';\r\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\r\n          var weekDayShortLabel = weekDaysShortLabels[i];\r\n          var weekDayLabel = weekDaysLongLabels[i];\r\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\r\n        }\r\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {\r\n          year: startDate.getFullYear(),\r\n          month: startDate.getMonth(),\r\n          date: startDate.getDate()\r\n        };\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {\r\n            month: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n              // in $datepicker.$selectPane, so picker would not update selected day display if\r\n              // user picks first day of the new month.\r\n              // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n            // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            var selectedDay;\r\n            var todayDay;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              // push the day information onto the collection\r\n              var dayItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: day,\r\n                value: day.getDate(),\r\n                isToday: day.toDateString() === today,\r\n                label: formatDate(day, this.format),\r\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\r\n                selected: picker.$date && this.isSelected(day),\r\n                muted: day.getMonth() !== viewDate.month,\r\n                disabled: this.isDisabled(day)\r\n              };\r\n\r\n              if (dayItem.selected) selectedDay = dayItem;\r\n              if (dayItem.isToday) todayDay = dayItem;\r\n\r\n              days.push(dayItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedDay) {\r\n                scope.selectedDayId = selectedDay.id;\r\n                if (todayDay) todayDay.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedDay.focused = true;\r\n                scope.selected = selectedDay;\r\n              } else if (todayDay) {\r\n                todayDay.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.isTodayDisabled = this.isDisabled(new Date());\r\n            scope.hasSelectedDate = picker.$date != null;\r\n            scope.$modeLabel = options.labelMonth;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\r\n              date.getMonth() === picker.$date.getMonth() &&\r\n              date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n            // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n            // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n            // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            var actualTime;\r\n\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date) {\r\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n                picker.$date = new Date();\r\n              } else {\r\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\r\n              }\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return false;\r\n            }\r\n\r\n            actualTime = picker.$date.getTime();\r\n\r\n            var newDate;\r\n\r\n            switch (evt.keyCode) {\r\n              // enter\r\n              case 13:\r\n                if (options.focusOnOpen) {\r\n                  picker.select(new Date(actualTime), true);\r\n                  return false;\r\n                }\r\n                break;\r\n                // pageup\r\n              case 33:\r\n                if (evt.altKey) { // move back a year\r\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move back a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\r\n                  }\r\n                }\r\n                break;\r\n\r\n                // pagedown\r\n              case 34:\r\n                if (evt.altKey) { // move forward a year\r\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move forward a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\r\n                  }\r\n                }\r\n\r\n                break;\r\n\r\n                // left arrow\r\n              case 37:\r\n                newDate = new Date(actualTime - 1 * 864e5);\r\n                break;\r\n\r\n                // up arrow\r\n              case 38:\r\n                newDate = new Date(actualTime - 7 * 864e5);\r\n                break;\r\n\r\n                // right arrow\r\n              case 39:\r\n                newDate = new Date(actualTime + 1 * 864e5);\r\n                break;\r\n\r\n                // down arrow\r\n              case 40:\r\n                newDate = new Date(actualTime + 7 * 864e5);\r\n                break;\r\n\r\n              default:\r\n                return false;\r\n            }\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n\r\n            if (evt && evt.stopPropagation) evt.stopPropagation();\r\n\r\n            return false;\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            var selectedMonth;\r\n            var thisMonth;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n\r\n              var monthItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: month,\r\n                label: formatDate(month, this.format),\r\n                selected: picker.$isSelected(month),\r\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\r\n                disabled: this.isDisabled(month)\r\n              };\r\n\r\n              if (monthItem.selected) selectedMonth = monthItem;\r\n              if (monthItem.isToday) thisMonth = monthItem;\r\n\r\n              months.push(monthItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedMonth) {\r\n                scope.selectedDayId = selectedMonth.id;\r\n                if (thisMonth) thisMonth.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedMonth.focused = true;\r\n                scope.selected = selectedMonth;\r\n              } else if (thisMonth) {\r\n                thisMonth.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modeLabel = options.labelYear;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\r\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 12\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            var selectedYear;\r\n            var thisYear;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n\r\n              var yearItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: year,\r\n                label: formatDate(year, this.format),\r\n                selected: picker.$isSelected(year),\r\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\r\n                disabled: this.isDisabled(year)\r\n              };\r\n\r\n              if (yearItem.selected) selectedYear = yearItem;\r\n              if (yearItem.isToday) thisYear = yearItem;\r\n\r\n              years.push(yearItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedYear) {\r\n                scope.selectedDayId = selectedYear.id;\r\n                if (thisYear) thisYear.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedYear.focused = true;\r\n                scope.selected = selectedYear;\r\n              } else if (thisYear) {\r\n                thisYear.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.startYear = years[0].label;\r\n            scope.endYear = years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modelLabel = options.labelDays;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: collapse\\collapse.js\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function (element) {\r\n        self.$toggles.push(element);\r\n        element.attr('aria-expanded', 'false');\r\n      };\r\n      self.$registerTarget = function (element) {\r\n        self.$targets.push(element);\r\n\r\n        var i = 0;\r\n        if (self.$targets) {\r\n          for (i = 0; i < self.$targets.length; i++) {\r\n            self.$targets[i].attr('aria-hidden', 'true');\r\n          }\r\n          for (i = 0; i < self.$targets.$active.length; i++) {\r\n            if (self.$targets[self.$targets.$active[i]]) {\r\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\r\n            }\r\n            if (self.$toggles[self.$targets.$active[i]]) {\r\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      self.$unregisterToggle = function (element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function (element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        if (angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        } else if (!self.$options.disallowToggle && isActive(value)) {\r\n          deactivateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function () {\r\n        if (self.$options.allowMultiple) {\r\n          return self.$targets.$active;\r\n        }\r\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes (index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for (var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive (value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) !== -1;\r\n      }\r\n\r\n      function deactivateItem (value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\r\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem (value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\r\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[0]]) {\r\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\r\n          }\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n\r\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\r\n          }\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            } else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              } else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function () {\r\n    var KEY_CODES = {\r\n      ENTER: 13,\r\n      SPACE: 32\r\n    };\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        var actionEventHandler = function () {\r\n          if (!attrs.disabled) {\r\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n            bsCollapseCtrl.$setActive(index * 1);\r\n            scope.$apply();\r\n          }\r\n        };\r\n\r\n        element.on('click', actionEventHandler);\r\n        element.bind('keydown keypress', function (e) {\r\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\r\n            console.log('key handler handling');\r\n            actionEventHandler();\r\n            e.preventDefault();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function ($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if (bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          } else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: button\\button.js\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = !!controller.$viewValue;\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$viewValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: aside\\aside.js\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: alert\\alert.js\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true,\r\n      focusMeDisabled: false\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n        $alert.returnFocus = function () {\r\n          function findFocusableElements () {\r\n            var containerEl = angular.element($alert.$element).closest('[ng-controller]');\r\n            return containerEl.find('a:not([disabled]),button:not([disabled]),input:not([disabled]),select:not([disabled]),[tabindex]:not([disabled]):not([tabindex=\"-1\"])').filter(function (i, el) {\r\n              return !angular.element(el).parentsUntil(containerEl, '[tabindex=\"-1\"]').length;\r\n            });\r\n          }\r\n\r\n          function findNextFocusableElement () {\r\n            if (document.activeElement) {\r\n              var focusable = findFocusableElements().toArray();\r\n              if (focusable === undefined) return;\r\n              var index = focusable.indexOf(document.activeElement);\r\n              return focusable[index + 1];\r\n            }\r\n          }\r\n          angular.element(findNextFocusableElement()).focus();\r\n        };\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n        if (options.focusMeDisabled) {\r\n          $alert.$scope.focusMeDisabled = options.focusMeDisabled;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: affix\\affix.js\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true,\r\n      setWidth: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = options.setWidth && !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element[0].style.position;\r\n          var initialTop = element[0].style.top;\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n            element.css('top', initialTop);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null) {\r\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window, $timeout) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix;\r\n        $timeout(function () { affix = $affix(element, options); });\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n\r\n// Source: module.js\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n\r\n})(window, document);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    var KEY_CODES = {\r\n      downArrow: 40,\r\n      enter: 13,\r\n      escape: 27,\r\n      upArrow: 38\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n        scope.id = options.id;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function isActive (index) {\r\n          return scope.$activeIndex === index ? true : undefined;\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        scope.$generateResultId = function (index) {\r\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          // If the key code isn't up arrow, down arrow, or enter return.\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n            // Navigate with keyboard\r\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if ((evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex === 0) || (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex === scope.$matches.length - 1)) {\r\n            scope.$activeIndex = -1;\r\n            var ele = '#' + evt.currentTarget.id;\r\n            // position the cursor after the last letter of the selected item inside the control to allow the user to easily delete the selection if desired\r\n            angular.element(ele).val('').val(controller.$viewValue);\r\n            angular.element(ele).focus();\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n            setAriaActiveDescendant();\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              if (options.id) {\r\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\r\n                $typeahead.$element.attr('id', options.id + '_listbox');\r\n                element.attr('aria-controls', options.id + '_listbox');\r\n\r\n                var assertDiv = document.getElementById(options.id + '_sr_text');\r\n                if (!assertDiv) {\r\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\r\n                }\r\n              }\r\n\r\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\r\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\r\n\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                // event for the element that we attach is added to event queue\r\n                // before pushing the same event more that once for the same element, event need to detach\r\n                // list item jumps happening in search list for this setted keydown off\r\n                if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n\r\n          var assertDiv = document.getElementById(options.id + '_sr_text');\r\n          angular.element(assertDiv).remove();\r\n\r\n          setAriaActiveDescendant();\r\n\r\n          hide();\r\n        };\r\n\r\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Helper functions within this closure\r\n\r\n        function setAriaActiveDescendant (index) {\r\n          if (index === undefined || !scope.id) {\r\n            element.removeAttr('aria-activedescendant');\r\n          } else {\r\n            var resultId = scope.$generateResultId(index);\r\n            if (resultId) {\r\n              element.attr('aria-activedescendant', resultId);\r\n            } else {\r\n              element.removeAttr('aria-activedescendant');\r\n            }\r\n          }\r\n        }\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\r\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\r\n          element.attr('aria-autocomplete', 'list');\r\n        }\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          element.off('keydown');\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = options.resolve || {};\r\n    var locals = options.locals || {};\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template) {\r\n      resolve.$template = $q.when(template);\r\n    } else if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n    }\r\n\r\n    if (options.titleTemplate) {\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          findElement('[ng-bind=\"title\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if (!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function (locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory (element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        /* var scope = */\r\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        if (element && element[0] && element[0].tagName.toUpperCase() === 'BUTTON') {\r\n          element.attr('aria-haspopup', 'true');\r\n          element.attr('data-toggle', 'dropdown');\r\n          element.attr('aria-expanded', 'false');\r\n          // element.attr('role', 'button'); As the element is a <button> there is no need for this attribute\r\n        }\r\n\r\n        // Dropdown menu items that are natively focusable need a tabindex of -1, but the user still needs to tab into the drodpwn menu\r\n        // This event serves to enable the user to tab into the drodpown menu\r\n        element.keydown(function(evt){\r\n          if(/(9)/.test(evt.keyCode)){\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n            var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n            items.eq(0)[0].focus();\r\n          }\r\n        })\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function (evt) {\r\n          if ((/(9)/.test(evt.keyCode) && !options.keyboard) || /27/.test(evt.keyCode)) {\r\n            $dropdown.hide(/27/.test(evt.keyCode));\r\n            return;\r\n          }\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if (!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function (el, i) {\r\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if (evt.keyCode === 38 && index > 0) index--;\r\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if (evt.keyCode === 40 && index === items.length - 1) index = 0;\r\n          else if (angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        $dropdown.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inMenu = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $dropdown.$element[0]) {\r\n              inMenu = true;\r\n              break;\r\n            } else {\r\n              inMenu = false;\r\n            }\r\n          }\r\n\r\n          if (!inMenu) {\r\n            $dropdown.hide();\r\n          } else {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Set assistive technology properties\r\n            element.attr('aria-expanded', 'true');\r\n            if ($dropdown.$element) {\r\n              $dropdown.$element.attr('aria-hidden', 'false');\r\n              $dropdown.$element.attr('role', 'menu');\r\n              // $dropdown.$element.attr('tabindex', '-1'); <ul> element should have no tabindex per SS-9603\r\n            }\r\n            if (options.keyboard && $dropdown.$element) {\r\n              $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n              $dropdown.$element.on('focusout', $dropdown.$onFocusOut);\r\n            }\r\n\r\n            bodyEl.on('click', onBodyClick);\r\n\r\n            if ($dropdown.$element) {\r\n              var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider)'));\r\n              // <li> should have role=\"none\" as per SS-9603\r\n              items.attr('role', 'none');\r\n\r\n              angular.element($dropdown.$element[0].querySelectorAll('li.divider')).attr('role', 'seperator');\r\n\r\n              items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n              items.attr('role', 'menuitem');\r\n              if (items.length && options.keyboard) {\r\n                // items[0].focus(); Removing initial focus as user must tab into the menu per SS-9603\r\n\r\n                //Dropdown menu items that are natively focusable need to have a tabindex of -1 per SS-9603\r\n                angular.forEach(items, function (value, key) {\r\n                  angular.element(value).attr('tabindex', '-1');\r\n                });\r\n              }\r\n            }\r\n          }, 0, false);\r\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function (returnFocus) {\r\n          if (!$dropdown.$isShown) return;\r\n\r\n          element.attr('aria-expanded', 'false');\r\n          $dropdown.$element.attr('aria-hidden', 'true');\r\n\r\n          if (options.keyboard && $dropdown.$element) {\r\n            $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n            $dropdown.$element.off('focusout', $dropdown.$onFocusOut);\r\n          }\r\n\r\n          bodyEl.off('click', onBodyClick);\r\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\r\n          $timeout(function () {\r\n            hide();\r\n            if (returnFocus) {\r\n              $timeout(function () {\r\n                if (element && element[0]) {\r\n                  element[0].focus();\r\n                }\r\n              }, 0, false);\r\n            }\r\n          }, 200);\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function () {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick (evt) {\r\n          if (evt.target === element[0]) return undefined;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      compile: function (tElement, tAttrs) {\r\n\r\n        // Support for inlined template (next sibling)\r\n        // It must be fetched before compilation\r\n        if (!tAttrs.bsDropdown) {\r\n          var nextSibling = tElement[0].nextSibling;\r\n          while (nextSibling && nextSibling.nodeType !== 1) {\r\n            nextSibling = nextSibling.nextSibling;\r\n          }\r\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\r\n            tAttrs.template = nextSibling.outerHTML;\r\n            tAttrs.templateUrl = undefined;\r\n            nextSibling.parentNode.removeChild(nextSibling);\r\n          }\r\n        }\r\n\r\n        return function postLink (scope, element, attr) {\r\n\r\n          // Directive options\r\n          var options = {\r\n            scope: scope\r\n          };\r\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\r\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\r\n          });\r\n\r\n          // use string regex match boolean attr falsy values, leave truthy values be\r\n          var falseValueRegExp = /^(false|0|)$/i;\r\n          angular.forEach(['html', 'container'], function (key) {\r\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n          });\r\n\r\n          // bind functions from the attrs to the show and hide events\r\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n            if (angular.isDefined(attr[bsKey])) {\r\n              options[key] = scope.$eval(attr[bsKey]);\r\n            }\r\n          });\r\n\r\n          // Support scope as an object\r\n          if (attr.bsDropdown) {\r\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\r\n              scope.content = newValue;\r\n            }, true);\r\n          }\r\n\r\n          // Initialize dropdown\r\n          var dropdown = $dropdown(element, options);\r\n\r\n          // Visibility binding support\r\n          if (attr.bsShow) {\r\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n              if (!dropdown || !angular.isDefined(newValue)) return;\r\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n              if (newValue === true) {\r\n                dropdown.show();\r\n              } else {\r\n                dropdown.hide();\r\n              }\r\n            });\r\n          }\r\n\r\n          // Garbage collection\r\n          scope.$on('$destroy', function () {\r\n            if (dropdown) dropdown.destroy();\r\n            options = null;\r\n            dropdown = null;\r\n          });\r\n\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      mouseDownPreventDefault: true,\r\n      mouseDownStopPropagation: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        // var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($tooltip);\r\n          }\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          if (tipElement !== null) {\r\n            // Support v1.2+ $animate\r\n            // https://github.com/angular/angular.js/issues/11713\r\n            if (angular.version.minor <= 2) {\r\n              $animate.leave(tipElement, leaveAnimateCallback);\r\n            } else {\r\n              $animate.leave(tipElement).then(leaveAnimateCallback);\r\n            }\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\r\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n              // element.on('blur', $tooltip.leave);\r\n            } else if (trigger !== 'manual') {\r\n              // Only bind up hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              } else if (trigger === 'focus') { // but do bind focus events for touch\r\n                element.on('focus', $tooltip.enter);\r\n                element.on('blur', $tooltip.leave);\r\n              }\r\n\r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              // Remove previously defined hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              } else if (trigger === 'focus') { // Remove previously defined focus events\r\n                element.off('focus', $tooltip.enter);\r\n                element.off('blur', $tooltip.leave);\r\n              }\r\n\r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) { // eslint-disable-line\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active',\r\n      isVertical: false\r\n    };\r\n    var _tabsHash = {};\r\n\r\n    var _addTabControl = function (key, control) {\r\n      if (!_tabsHash[key]) _tabsHash[key] = control;\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      $scope.$onClick = function $onClick (evt, pane, index) {\r\n        if (!pane.disabled) {\r\n          self.$setActive(pane.name || index);\r\n        }\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n      };\r\n\r\n      function navigatePane (index, toLeft) {\r\n        var newIndex = 0;\r\n\r\n        if (toLeft) {\r\n          // Moving to the left\r\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\r\n        } else {\r\n          // Moving to the right\r\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\r\n        }\r\n\r\n        if (self.$panes[newIndex].disabled) {\r\n          navigatePane(newIndex, toLeft);\r\n        } else {\r\n          self.$setActive(self.$panes[newIndex].name || newIndex);\r\n        }\r\n      }\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n\r\n        self.$panes.push(pane);\r\n\r\n        self.$panes.forEach(function (tabPane, index) {\r\n          // Set an id value for the pane so that it can be used in the template\r\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\r\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\r\n        });\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\r\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\r\n          // If space or enter was pressed\r\n          self.$setActive(name);\r\n\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n\r\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\r\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\r\n        }\r\n      };\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      $tab.addTabControl = _addTabControl;\r\n      $tab.tabsHash = _tabsHash;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\r\n        // tabs are available in the tab component\r\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\r\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\r\n        }\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          $timeout(function () {\r\n            // get li elements\r\n            var liElements = element.find('li');\r\n            for (var i = 0; i < liElements.length; i++) {\r\n              var iElement = angular.element(liElements[i]);\r\n              if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\r\n                // if li is active, set focus to it.\r\n                iElement.find('a')[0].focus();\r\n              }\r\n            }\r\n            // delay, for the class (.active) change to reflect in DOM.\r\n          }, 100);\r\n        });\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Set up the assistive attributes\r\n        element.attr('role', 'tabpanel');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n        // Save tab id into scope\r\n        scope.id = attrs.id;\r\n\r\n        scope.name = scope.name || scope.id;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // Once the push has occured when can then update the element with some properties.\r\n        // Update the aria-labelledby attribute\r\n\t\t// SS-11127 - removed aria-describedby from tab and tab-panel and utilized aria-labeledby on the tab-panel using the ID of the tab and not the ID of the tab link\r\n        if (scope.$describedBy !== undefined) {\r\n          element.attr('aria-labelledby', scope.$describedBy);\r\n        }\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('focusOn', function () {\r\n    return {\r\n      restrict: 'A',\r\n      link: function (scope, elem, attr) {\r\n        scope.$watch(attr.focusOn, function (newValue, oldValue) {\r\n          if (newValue !== oldValue && newValue) {\r\n            elem[0].focus();\r\n          }\r\n        });\r\n      }\r\n    };\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok',\r\n      toggle: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              if (options.toggle) {\r\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\r\n              } else {\r\n                controller.$setViewValue(value);\r\n              }\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $select);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            var anchor;\r\n\r\n            if (evt.target.nodeName !== 'A') {\r\n              var anchorCandidate = targetEl.parent();\r\n              while (!anchor && anchorCandidate.length > 0) {\r\n                if (anchorCandidate[0].nodeName === 'A') {\r\n                  anchor = anchorCandidate;\r\n                }\r\n                anchorCandidate = anchorCandidate.parent();\r\n              }\r\n            }\r\n\r\n            if (anchor) {\r\n              angular.element(anchor).triggerHandler('click');\r\n            } else {\r\n              targetEl.triggerHandler('click');\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\r\n            if (newValue === false) {\r\n              popover.setEnabled(false);\r\n            } else {\r\n              popover.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true,\r\n      size: null,\r\n      zIndex: null,\r\n      containerElement: null\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      var layoutHideElement = angular.element('#layoutContainer');\r\n\r\n      var backdropCount = 0;\r\n      var dialogBaseZindex = 1050;\r\n      var backdropBaseZindex = 1040;\r\n\r\n      var validSizes = {\r\n        lg: 'modal-lg',\r\n        sm: 'modal-sm'\r\n      };\r\n\r\n      function ModalFactory (config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if (options.containerElement) {\r\n          layoutHideElement = angular.element(options.containerElement);\r\n        }\r\n        if (!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        if (options.zIndex) {\r\n          dialogBaseZindex = parseInt(options.zIndex, 10);\r\n          backdropBaseZindex = dialogBaseZindex - 10;\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        $modal.returnFocus = function () {\r\n\r\n        };\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function (key) {\r\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData;\r\n        var modalElement;\r\n        var modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({\r\n          position: 'fixed',\r\n          top: '0px',\r\n          left: '0px',\r\n          bottom: '0px',\r\n          right: '0px'\r\n        });\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function () {\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function () {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if (backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function () {\r\n          if ($modal.$isShown) return;\r\n\r\n          var parent;\r\n          var after;\r\n          if (angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if (modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\r\n\r\n          if (options.backdrop) {\r\n            // set z-index\r\n            modalElement.css({\r\n              'z-index': dialogBaseZindex + (backdropCount * 20)\r\n            });\r\n            backdropElement.css({\r\n              'z-index': backdropBaseZindex + (backdropCount * 20)\r\n            });\r\n\r\n            // increment number of backdrops\r\n            backdropCount++;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($modal);\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({\r\n            display: 'block'\r\n          }).addClass(options.placement);\r\n\r\n          // Options: customClass\r\n          if (options.customClass) {\r\n            modalElement.addClass(options.customClass);\r\n          }\r\n\r\n          // Options: size\r\n          if (options.size && validSizes[options.size]) {\r\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\r\n          }\r\n\r\n          // Options: animation\r\n          if (options.animation) {\r\n            if (options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function () {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n\r\n          layoutHideElement.attr('aria-hidden', 'true');\r\n\r\n          if (options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'false');\r\n          modalElement.attr('tabindex', '0');\r\n          modalElement.focus();\r\n          if (!modalElement.length || !angular.element(modalElement[0]).hasClass('modal')) {\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n            unbindKeyboardEvents();\r\n          }\r\n        }\r\n\r\n        $modal.hide = function () {\r\n          if (!$modal.$isShown) return;\r\n\r\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'true');\r\n\r\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            // decrement number of backdrops\r\n            backdropCount--;\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($modal);\r\n          }\r\n          if (findElement('.modal').length <= 0) {\r\n            bodyElement.removeClass(options.prefixClass + '-open');\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n          }\r\n          if (options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        function findFocusableElements () {\r\n          // Add all elements we want to include in our selection\r\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\r\n          if (document.activeElement) {\r\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\r\n              function (element) {\r\n                // Check for visibility while always include the current activeElement\r\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\r\n              });\r\n\r\n            return focusable;\r\n          }\r\n        }\r\n\r\n        function findNextFocusableElement (inReverse) {\r\n          if (document.activeElement) {\r\n            var focusable = findFocusableElements();\r\n            if (focusable === undefined) return;\r\n            if (inReverse) {\r\n              focusable = Array.prototype.reverse.call(focusable);\r\n            }\r\n\r\n            var index = focusable.indexOf(document.activeElement);\r\n            return focusable[index + 1];\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function () {\r\n          if ($modal.$isShown) {\r\n            $modal.hide();\r\n          } else {\r\n            $modal.show();\r\n          }\r\n        };\r\n\r\n        $modal.focus = function () {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function (evt) {\r\n\r\n          // Escape was pressed on an open modal. Hide it.  Backspace key, nothing happen.\r\n          if ((evt.which === 8 || evt.which === 27) && $modal.$isShown) {\r\n            if (evt.which === 27) {\r\n              $modal.hide();\r\n            }\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $modal.$onKeyDown = function (evt) {\r\n          if (options.keyboard) {\r\n            if (evt.keyCode === 8 && evt.target.tagName !== 'TEXTAREA' && evt.target.tagName !== 'INPUT') {\r\n              evt.preventDefault();\r\n            }\r\n\r\n            if (evt.keyCode === 9) {\r\n\r\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\r\n              if (nextFocusable === undefined) {\r\n                if (evt.preventDefault) evt.preventDefault();\r\n                if (evt.stopPropagation) evt.stopPropagation();\r\n\r\n                var focusable = findFocusableElements();\r\n                if (evt.shiftKey) {\r\n                  focusable[focusable.length - 1].focus();\r\n                } else {\r\n                  focusable[0].focus();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n        function bindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n            modalElement.on('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n            modalElement.off('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        // Private helpers\r\n\r\n        function hideOnBackdropClick (evt) {\r\n          if (evt.target !== evt.currentTarget) return;\r\n          if (options.backdrop === 'static') {\r\n            $modal.focus();\r\n          } else {\r\n            $modal.hide();\r\n          }\r\n        }\r\n\r\n        function preventEventDefault (evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement () {\r\n          if ($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if (modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope,\r\n          element: element,\r\n          show: false\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Options: alias modalClass to customClass\r\n        if (options.modalClass) {\r\n          options.customClass = options.modalClass;\r\n        }\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsModal) {\r\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        if (options.keyboard) {\r\n          modal.returnFocus = function () {\r\n            element[0].focus();\r\n          };\r\n        }\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.ngFocusOut', [])\r\n  .directive('ngFocusOut', ['$parse', '$rootScope', function ($parse, $rootScope) {\r\n    return {\r\n      restrict: 'A',\r\n      compile: function ($element, attr) {\r\n        // NOTE:\r\n        // We expose the powerful `$event` object on the scope that provides access to the Window,\r\n        // etc. This is OK, because expressions are not sandboxed any more (and the expression\r\n        // sandbox was never meant to be a security feature anyway).\r\n        var fn = $parse(attr.ngFocusOut);\r\n\r\n        return function link (scope, element) {\r\n          function ngEventHandler (event) {\r\n            var callback = function () {\r\n              fn(scope, {\r\n                $event: event\r\n              });\r\n            };\r\n            if ($rootScope.$$phase) {\r\n              scope.$evalAsync(callback);\r\n            } else {\r\n              scope.$apply(callback);\r\n            }\r\n          }\r\n\r\n          // setup the handler\r\n          element.on('focusout', ngEventHandler);\r\n\r\n          scope.$on('$destroy', function () {\r\n            // tear down the handler\r\n            element.off('focusout', ngEventHandler);\r\n          });\r\n        };\r\n      }\r\n    };\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.focusElement', [])\r\n  .directive('focusElement', ['$timeout', '$parse', function ($timeout, $parse) {\r\n    return {\r\n      link: function (scope, element, attrs) {\r\n        scope.$watch(attrs.focusElement, function (value) {\r\n          if (value === true) {\r\n            $timeout(function () {\r\n              element[0].focus();\r\n            });\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          if (value.match(/Z/)) {\r\n            date = new Date(value.substr(1, value.length - 3));\r\n          } else {\r\n            date = new Date(value.substr(1, value.length - 2));\r\n          }\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    this.weekdays = function (lang) {\r\n      return $locale.DATETIME_FORMATS.DAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      hasToday: false,\r\n      hasClear: false,\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right',\r\n      // The format that will be given to the screen reader values placed in the DOM.\r\n      screenReaderDateFormat: 'fullDate',\r\n      // Focuses the table element in the dropdown upon display of the picker.\r\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\r\n      focusOnOpen: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\r\n        // defaults and the configuration passed.\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // Add assistive technology helper attributes.\r\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\r\n\r\n        // View vars\r\n\r\n        // Initialize the datepicker view collection by passing a reference to the base object.\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        /*\r\n         * View mode for the date picker.\r\n         * 0: days\r\n         * 1: months\r\n         * 2: years\r\n         */\r\n        scope.$mode = options.startView;\r\n        // icon class override\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        // Show buttons at the bottom of the picker.\r\n        scope.$hasToday = options.hasToday;\r\n        scope.$hasClear = options.hasClear;\r\n        /*\r\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\r\n         * aria attributes which are linked via ids.\r\n         */\r\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\r\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\r\n        scope.keyboard = options.keyboard;\r\n        scope.focusOnOpen = options.focusOnOpen;\r\n\r\n        // labels\r\n        scope.$nextLabel = options.labelNext;\r\n        scope.$previousLabel = options.labelPrevious;\r\n\r\n        // This is the actual current picker view.\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Internal handlers\r\n\r\n        function handleOnKeyDown (evt, apply) {\r\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\r\n            return false;\r\n          }\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n              if (options.focusOnOpen) return true;\r\n            } else {\r\n              if (apply === undefined || apply) {\r\n                scope.$apply(function () {\r\n                  $datepicker.setMode(scope.$mode - 1);\r\n                });\r\n              } else {\r\n                $datepicker.setMode(scope.$mode - 1);\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        }\r\n\r\n        // Scope methods\r\n\r\n        /**\r\n         * Pass through from the scope to the provider for the selection of a date.\r\n         */\r\n        scope.$select = function (date, disabled) {\r\n          if (disabled) return;\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n        scope.$setToday = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(new Date());\r\n          } else {\r\n            $datepicker.select(new Date(), true);\r\n          }\r\n        };\r\n        scope.$clear = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(null);\r\n          } else {\r\n            $datepicker.select(null, true);\r\n          }\r\n        };\r\n        scope.$focused = function (dayInfo) {\r\n          scope.selectedDayId = dayInfo.id;\r\n          if (dayInfo.isNext && !scope.selected) {\r\n            if (scope.$mode) {\r\n              $datepicker.update(dayInfo.date);\r\n            } else {\r\n              scope.$select(dayInfo.date);\r\n            }\r\n          }\r\n        };\r\n        scope.$onKeyDown = function (evt, day) {\r\n          var continueHandling = handleOnKeyDown(evt, false);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n          }\r\n        };\r\n        scope.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inTable = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n              inTable = true;\r\n              break;\r\n            } else {\r\n              inTable = false;\r\n            }\r\n          }\r\n\r\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n          //\r\n\r\n          if (!inTable && !evt.relatedTarget) {\r\n            // hmm\r\n          } else if (!inTable) {\r\n            $datepicker.hide();\r\n          } else {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (angular.isDate(date)) {\r\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\r\n              controller.$dateValue = new Date(date);\r\n            }\r\n          } else {\r\n            controller.$dateValue = null;\r\n          }\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () {\r\n                $datepicker.hide(true);\r\n              });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {\r\n              year: date.getFullYear(),\r\n              month: date.getMonth(),\r\n              date: date.getDate()\r\n            });\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        /**\r\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\r\n         * rebuilt. The views are days, months, and years.\r\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\r\n         */\r\n        $datepicker.setMode = function setMode (mode) {\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          // The picker has been changed so the view needs to be built.\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        /**\r\n         * Builds the datepicker's view based on the picker that is currently set.\r\n         */\r\n        $datepicker.$build = function $build (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], function (day) {\r\n              updateSelected(day);\r\n              if (day.selected) scope.selected = day;\r\n            });\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {\r\n            year: targetDate.getUTCFullYear(),\r\n            month: targetDate.getUTCMonth(),\r\n            date: targetDate.getUTCDate()\r\n          });\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Handles the onKeyDown event from the element that this datepicker is bound.\r\n         * In the standard case this will be an input element. If the trigger is set\r\n         * to click and is bound to a button then it is likely we're servicing a 508\r\n         * type situation where the implementation will no longer uses. Focus will be\r\n         * given to the table.\r\n         */\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          var continueHandling = handleOnKeyDown(evt);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n            parentScope.$digest();\r\n          }\r\n        };\r\n\r\n        // $datepicker.$onFocusOut = function (evt) {\r\n        //   // find out if the related target's parents contain the datepicker's $element\r\n        //   var inTable = false;\r\n        //   var parent = angular.element(evt.relatedTarget);\r\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n        //     parent = parent.parent();\r\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n        //       inTable = true;\r\n        //       break;\r\n        //     } else {\r\n        //       inTable = false;\r\n        //     }\r\n        //   }\r\n\r\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n        //   //\r\n\r\n        //   if (!inTable && !evt.relatedTarget) {\r\n        //     // hmm\r\n        //   } else if (!inTable) {\r\n        //     $datepicker.hide();\r\n        //   } else {\r\n        //     evt.stopPropagation();\r\n        //     evt.preventDefault();\r\n        //   }\r\n        // };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n          el.focused = el.selected;\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        // The datepicker will override the init functionality of the tool\r\n        var _init = $datepicker.init;\r\n        /**\r\n         * Initialize the datepicker.\r\n         */\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\r\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\r\n        var _destroy = $datepicker.destroy;\r\n\r\n        /**\r\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\r\n         */\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be shown.\r\n        var _show = $datepicker.show;\r\n\r\n        /**\r\n         * Override for the tooltip's show function.\r\n         *\r\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\r\n         * Once shown it sets up the appropriate events.\r\n         */\r\n        $datepicker.show = function show () {\r\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n\r\n          // Call the \"overriden base\" function on the tooltip.\r\n          _show();\r\n\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n\r\n            // Update assistive technologies for view changes:\r\n            $datepicker.$element.attr('aria-hidden', 'false');\r\n            element.attr('aria-expanded', 'true');\r\n\r\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n            // If keyboard navigation is enabled (true by default).\r\n            if (options.keyboard) {\r\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\r\n              // Check to see if the table element should receive the focus when the picker is shown.\r\n              if (options.focusOnOpen) {\r\n                // Focus the table element.\r\n                // $datepicker.$element.find('table')[0].focus();\r\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\r\n              } else {\r\n                element.on('keydown', $datepicker.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be hidden.\r\n        var _hide = $datepicker.hide;\r\n\r\n        /**\r\n         * Overrid efor the tooltip's hide function.\r\n         *\r\n         * Updates attributes for assistive technologies and unbinds events.\r\n         */\r\n        $datepicker.hide = function (blur) {\r\n          // If the picker is already hidden don't do anything.\r\n          if (!$datepicker.$isShown) return;\r\n\r\n          // Update the attributes used by assisteive technologies\r\n          $datepicker.$element.attr('aria-hidden', 'true');\r\n          element.attr('aria-expanded', 'false');\r\n\r\n          // Unbind the mouse and touch events\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n          // If keyboard events were bound then unbind them.\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          if (options.focusOnOpen) {\r\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\r\n            element[0].focus();\r\n          }\r\n          // Call the tooltip's hide function.\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\r\n    return {\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        options = angular.extend({}, $datepicker.defaults, options);\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\r\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n\r\n          return date === null ? null : new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n      }\r\n    };\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLong = $dateFormatter.weekdays(lang);\r\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n\r\n        var weekDaysLabelsHtml = '';\r\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\r\n          var weekDayShortLabel = weekDaysShortLabels[i];\r\n          var weekDayLabel = weekDaysLongLabels[i];\r\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\r\n        }\r\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {\r\n          year: startDate.getFullYear(),\r\n          month: startDate.getMonth(),\r\n          date: startDate.getDate()\r\n        };\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {\r\n            month: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n              // in $datepicker.$selectPane, so picker would not update selected day display if\r\n              // user picks first day of the new month.\r\n              // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n            // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            var selectedDay;\r\n            var todayDay;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              // push the day information onto the collection\r\n              var dayItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: day,\r\n                value: day.getDate(),\r\n                isToday: day.toDateString() === today,\r\n                label: formatDate(day, this.format),\r\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\r\n                selected: picker.$date && this.isSelected(day),\r\n                muted: day.getMonth() !== viewDate.month,\r\n                disabled: this.isDisabled(day)\r\n              };\r\n\r\n              if (dayItem.selected) selectedDay = dayItem;\r\n              if (dayItem.isToday) todayDay = dayItem;\r\n\r\n              days.push(dayItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedDay) {\r\n                scope.selectedDayId = selectedDay.id;\r\n                if (todayDay) todayDay.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedDay.focused = true;\r\n                scope.selected = selectedDay;\r\n              } else if (todayDay) {\r\n                todayDay.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.isTodayDisabled = this.isDisabled(new Date());\r\n            scope.hasSelectedDate = picker.$date != null;\r\n            scope.$modeLabel = options.labelMonth;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\r\n              date.getMonth() === picker.$date.getMonth() &&\r\n              date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n            // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n            // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n            // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            var actualTime;\r\n\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date) {\r\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n                picker.$date = new Date();\r\n              } else {\r\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\r\n              }\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return false;\r\n            }\r\n\r\n            actualTime = picker.$date.getTime();\r\n\r\n            var newDate;\r\n\r\n            switch (evt.keyCode) {\r\n              // enter\r\n              case 13:\r\n                if (options.focusOnOpen) {\r\n                  picker.select(new Date(actualTime), true);\r\n                  return false;\r\n                }\r\n                break;\r\n                // pageup\r\n              case 33:\r\n                if (evt.altKey) { // move back a year\r\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move back a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\r\n                  }\r\n                }\r\n                break;\r\n\r\n                // pagedown\r\n              case 34:\r\n                if (evt.altKey) { // move forward a year\r\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move forward a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\r\n                  }\r\n                }\r\n\r\n                break;\r\n\r\n                // left arrow\r\n              case 37:\r\n                newDate = new Date(actualTime - 1 * 864e5);\r\n                break;\r\n\r\n                // up arrow\r\n              case 38:\r\n                newDate = new Date(actualTime - 7 * 864e5);\r\n                break;\r\n\r\n                // right arrow\r\n              case 39:\r\n                newDate = new Date(actualTime + 1 * 864e5);\r\n                break;\r\n\r\n                // down arrow\r\n              case 40:\r\n                newDate = new Date(actualTime + 7 * 864e5);\r\n                break;\r\n\r\n              default:\r\n                return false;\r\n            }\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n\r\n            if (evt && evt.stopPropagation) evt.stopPropagation();\r\n\r\n            return false;\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            var selectedMonth;\r\n            var thisMonth;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n\r\n              var monthItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: month,\r\n                label: formatDate(month, this.format),\r\n                selected: picker.$isSelected(month),\r\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\r\n                disabled: this.isDisabled(month)\r\n              };\r\n\r\n              if (monthItem.selected) selectedMonth = monthItem;\r\n              if (monthItem.isToday) thisMonth = monthItem;\r\n\r\n              months.push(monthItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedMonth) {\r\n                scope.selectedDayId = selectedMonth.id;\r\n                if (thisMonth) thisMonth.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedMonth.focused = true;\r\n                scope.selected = selectedMonth;\r\n              } else if (thisMonth) {\r\n                thisMonth.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modeLabel = options.labelYear;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\r\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 12\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            var selectedYear;\r\n            var thisYear;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n\r\n              var yearItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: year,\r\n                label: formatDate(year, this.format),\r\n                selected: picker.$isSelected(year),\r\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\r\n                disabled: this.isDisabled(year)\r\n              };\r\n\r\n              if (yearItem.selected) selectedYear = yearItem;\r\n              if (yearItem.isToday) thisYear = yearItem;\r\n\r\n              years.push(yearItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedYear) {\r\n                scope.selectedDayId = selectedYear.id;\r\n                if (thisYear) thisYear.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedYear.focused = true;\r\n                scope.selected = selectedYear;\r\n              } else if (thisYear) {\r\n                thisYear.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.startYear = years[0].label;\r\n            scope.endYear = years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modelLabel = options.labelDays;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function (element) {\r\n        self.$toggles.push(element);\r\n        element.attr('aria-expanded', 'false');\r\n      };\r\n      self.$registerTarget = function (element) {\r\n        self.$targets.push(element);\r\n\r\n        var i = 0;\r\n        if (self.$targets) {\r\n          for (i = 0; i < self.$targets.length; i++) {\r\n            self.$targets[i].attr('aria-hidden', 'true');\r\n          }\r\n          for (i = 0; i < self.$targets.$active.length; i++) {\r\n            if (self.$targets[self.$targets.$active[i]]) {\r\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\r\n            }\r\n            if (self.$toggles[self.$targets.$active[i]]) {\r\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      self.$unregisterToggle = function (element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function (element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        if (angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        } else if (!self.$options.disallowToggle && isActive(value)) {\r\n          deactivateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function () {\r\n        if (self.$options.allowMultiple) {\r\n          return self.$targets.$active;\r\n        }\r\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes (index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for (var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive (value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) !== -1;\r\n      }\r\n\r\n      function deactivateItem (value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\r\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem (value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\r\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[0]]) {\r\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\r\n          }\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n\r\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\r\n          }\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            } else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              } else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function () {\r\n    var KEY_CODES = {\r\n      ENTER: 13,\r\n      SPACE: 32\r\n    };\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        var actionEventHandler = function () {\r\n          if (!attrs.disabled) {\r\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n            bsCollapseCtrl.$setActive(index * 1);\r\n            scope.$apply();\r\n          }\r\n        };\r\n\r\n        element.on('click', actionEventHandler);\r\n        element.bind('keydown keypress', function (e) {\r\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\r\n            console.log('key handler handling');\r\n            actionEventHandler();\r\n            e.preventDefault();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function ($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if (bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          } else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = !!controller.$viewValue;\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$viewValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true,\r\n      focusMeDisabled: false\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n        $alert.returnFocus = function () {\r\n          function findFocusableElements () {\r\n            var containerEl = angular.element($alert.$element).closest('[ng-controller]');\r\n            return containerEl.find('a:not([disabled]),button:not([disabled]),input:not([disabled]),select:not([disabled]),[tabindex]:not([disabled]):not([tabindex=\"-1\"])').filter(function (i, el) {\r\n              return !angular.element(el).parentsUntil(containerEl, '[tabindex=\"-1\"]').length;\r\n            });\r\n          }\r\n\r\n          function findNextFocusableElement () {\r\n            if (document.activeElement) {\r\n              var focusable = findFocusableElements().toArray();\r\n              if (focusable === undefined) return;\r\n              var index = focusable.indexOf(document.activeElement);\r\n              return focusable[index + 1];\r\n            }\r\n          }\r\n          angular.element(findNextFocusableElement()).focus();\r\n        };\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n        if (options.focusMeDisabled) {\r\n          $alert.$scope.focusMeDisabled = options.focusMeDisabled;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true,\r\n      setWidth: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = options.setWidth && !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element[0].style.position;\r\n          var initialTop = element[0].style.top;\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n            element.css('top', initialTop);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null) {\r\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window, $timeout) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix;\r\n        $timeout(function () { affix = $affix(element, options); });\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n"],"sourceRoot":"/source/"}