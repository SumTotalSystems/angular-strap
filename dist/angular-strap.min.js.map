{"version":3,"sources":["angular-strap.js","popover/popover.js","helpers/compiler.js","dropdown/dropdown.js","typeahead/typeahead.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/focus-out.js","helpers/focus-element.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["container","document","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","provider","trigger","keyboard","title","content","delay","autoClose","$get","$popover","PopoverFactory","config","$tooltip","restrict","directive","requestAnimationFrame","$window","attr","falseValueRegExp","bsKey","isDefined","charAt","toUpperCase","slice","test","dataTarget","target","$eval","$observe","newValue","oldValue","$sce","trustAsHtml","$watch","bsPopover","$applyPlacement","popover","bsShow","match","bsEnabled","viewport","setViewport","$on","destroy","minLength","filter","limit","autoSelect","comparator","trimValue","KEY_CODES","downArrow","enter","escape","upArrow","$typeahead","parentScope","id","$resetMatches","setAriaActiveDescendant","index","resultId","$generateResultId","$$phase","$root","$activeIndex","$activate","$scope","$$postDigest","activate","$matches","select","$select","evt","$isActive","matches","safeDigest","update","$$rAF","$render","$emit","prefixEvent","onSelect","$setViewValue","length","isFunction","$viewValue","$getIndex","$onMouseDown","preventDefault","stopPropagation","equals","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$isVisible","getElementById","ele","currentTarget","isUndefined","label","$$updateScrollTop","$digest","focus","show","$element","assertDiv","$timeout","on","append","$onKeyDown","ariaLabelledby","hide","off","onKeyUp","which","$isShown","onFocusKeyUp","$onFocusKeyUp","array","TypeaheadFactory","$filter","expression","results","postLink","require","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$match","$watchCollection","values","watchOptions","ngModel","$modelValue","valuesFn","selectMode","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","toString","placement","titleTemplate","type","mouseDownPreventDefault","mouseDownStopPropagation","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","isTouch","unbindTriggerEvents","i","leave","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","tipScope","$destroy","$options","$promise","$new","$rootScope","$id","map","parseFloat","$setEnabled","$hide","setEnabled","isEnabled","toggle","compileData","tipContainer","init","bindTriggerEvents","isElement","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","version","prepend","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","isNative","tooltip","transclusion","hasOwnProperty","bsTooltip","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","nodeName","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","self","newIndex","navigatePane","toLeft","$panes","$setActive","name","$activePaneChangeListeners","pane","$navClass","$activeClass","$onClick","tabPane","$labeledBy","$active","activeIndex","$remove","indexOf","splice","fn","$pane","$onKeyPress","e","charCode","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","liElements","find","iElement","attrs","bsActivePane","parsedBsActivePane","$parse","assign","render","$push","$describedBy","elem","focusOn","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$selectNone","$updateActiveIndex","a","b","$apply","isArray","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","routeAttr","$navbar","li","liElement","pattern","path","RegExp","regexp","backdrop","size","zIndex","containerElement","bodyElement","layoutHideElement","backdropCount","backdropBaseZindex","ModalFactory","modalElement","$modal","defaultPrevented","findFocusableElements","focusableElements","focusable","findNextFocusableElement","call","inReverse","prototype","reverse","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","dialogBaseZindex","returnFocus","$show","bottom","destroyModalElement","z-index","customClass","validSizes","minor","backdropAnimation","bindBackdropEvents","nextFocusable","shiftKey","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","callback","$event","ngFocusOut","ngEventHandler","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","noop","toLowerCase","indexOfCaseInsensitive","len","str","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","weekdays","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","keydown","parentEl","items","eq","inMenu","relatedTarget","$onFocusOut","hasClass","webkitMatchesSelector","Element","mozMatchesSelector","msMatchesSelector","oMatchesSelector","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","screenReaderDateFormat","focusOnOpen","DatepickerFactory","$datepicker","pickerViews","datepickerViews","altKey","setMode","$mode","focused","$views","views","$iconLeft","$iconRight","$hasToday","dropdownId","$nextLabel","labelNext","$previousLabel","$picker","handleOnKeyDown","$toggleMode","$setToday","$clear","$focused","selectedDayId","dayInfo","isNext","continueHandling","onKeyDown","inTable","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","built","$updateSelected","updateSelected","build","isSelected","steps","getUTCFullYear","getUTCMonth","$selectPane","UTC","getUTCDate","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysShortLabels","weekDaysLongLabels","weekDaysLabelsHtml","weekDayLabel","concat","picker","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","days","selectedDay","todayDay","dayItem","isToday","screenReaderLabel","muted","defaultFirstDayTabIndex","showLabels","labels","isTodayDisabled","hasSelectedDate","$modeLabel","isDisabled","getDay","actualTime","months","selectedMonth","monthItem","thisMonthDate","thisMonth","lastDate","actualMonth","firstYear","years","selectedYear","yearItem","thisYear","startYear","endYear","$modelLabel","actualYear","setYear","Array","startCollapsed","allowMultiple","activeIndexes","$targets","deactivateItem","activateItem","$toggles","$collapse","$viewChangeListeners","$registerToggle","$registerTarget","$unregisterToggle","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","ENTER","SPACE","actionEventHandler","bsCollapseToggle","bind","log","action","$unregisterTarget","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","focusMeDisabled","$alert","containerEl","AlertFactory","toArray","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\r\n'use strict';\r\n\r\n// Source: popover\\popover.js\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\r\n            if (newValue === false) {\r\n              popover.setEnabled(false);\r\n            } else {\r\n              popover.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: typeahead\\typeahead.js\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    var KEY_CODES = {\r\n      downArrow: 40,\r\n      enter: 13,\r\n      escape: 27,\r\n      upArrow: 38\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n        scope.id = options.id;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function isActive (index) {\r\n          return scope.$activeIndex === index ? true : undefined;\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        scope.$generateResultId = function (index) {\r\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          // If the key code isn't up arrow, down arrow, or enter return.\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n            // Navigate with keyboard\r\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if ((evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex === 0) || (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex === scope.$matches.length - 1)) {\r\n            scope.$activeIndex = -1;\r\n            var ele = '#' + evt.currentTarget.id;\r\n            // position the cursor after the last letter of the selected item inside the control to allow the user to easily delete the selection if desired\r\n            angular.element(ele).val('').val(controller.$viewValue);\r\n            angular.element(ele).focus();\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n            setAriaActiveDescendant();\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              if (options.id) {\r\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\r\n                $typeahead.$element.attr('id', options.id + '_listbox');\r\n                element.attr('aria-controls', options.id + '_listbox');\r\n\r\n                var assertDiv = document.getElementById(options.id + '_sr_text');\r\n                if (!assertDiv) {\r\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\r\n                }\r\n              }\r\n\r\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\r\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\r\n\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                // event for the element that we attach is added to event queue\r\n                // before pushing the same event more that once for the same element, event need to detach\r\n                // list item jumps happening in search list for this setted keydown off\r\n                if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n\r\n          var assertDiv = document.getElementById(options.id + '_sr_text');\r\n          angular.element(assertDiv).remove();\r\n\r\n          setAriaActiveDescendant();\r\n\r\n          hide();\r\n        };\r\n\r\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Helper functions within this closure\r\n\r\n        function setAriaActiveDescendant (index) {\r\n          if (index === undefined || !scope.id) {\r\n            element.removeAttr('aria-activedescendant');\r\n          } else {\r\n            var resultId = scope.$generateResultId(index);\r\n            if (resultId) {\r\n              element.attr('aria-activedescendant', resultId);\r\n            } else {\r\n              element.removeAttr('aria-activedescendant');\r\n            }\r\n          }\r\n        }\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\r\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\r\n          element.attr('aria-autocomplete', 'list');\r\n        }\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          element.off('keydown');\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tooltip\\tooltip.js\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      mouseDownPreventDefault: true,\r\n      mouseDownStopPropagation: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        // var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($tooltip);\r\n          }\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          if (tipElement !== null) {\r\n            // Support v1.2+ $animate\r\n            // https://github.com/angular/angular.js/issues/11713\r\n            if (angular.version.minor <= 2) {\r\n              $animate.leave(tipElement, leaveAnimateCallback);\r\n            } else {\r\n              $animate.leave(tipElement).then(leaveAnimateCallback);\r\n            }\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\r\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n              // element.on('blur', $tooltip.leave);\r\n            } else if (trigger !== 'manual') {\r\n              // Only bind up hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              } else if (trigger === 'focus') { // but do bind focus events for touch\r\n                element.on('focus', $tooltip.enter);\r\n                element.on('blur', $tooltip.leave);\r\n              }\r\n\r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              // Remove previously defined hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              } else if (trigger === 'focus') { // Remove previously defined focus events\r\n                element.off('focus', $tooltip.enter);\r\n                element.off('blur', $tooltip.leave);\r\n              }\r\n\r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) { // eslint-disable-line\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: timepicker\\timepicker.js\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: tab\\tab.js\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active',\r\n      isVertical: false\r\n    };\r\n    var _tabsHash = {};\r\n\r\n    var _addTabControl = function (key, control) {\r\n      if (!_tabsHash[key]) _tabsHash[key] = control;\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      $scope.$onClick = function $onClick (evt, pane, index) {\r\n        if (!pane.disabled) {\r\n          self.$setActive(pane.name || index);\r\n        }\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n      };\r\n\r\n      function navigatePane (index, toLeft) {\r\n        var newIndex = 0;\r\n\r\n        if (toLeft) {\r\n          // Moving to the left\r\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\r\n        } else {\r\n          // Moving to the right\r\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\r\n        }\r\n\r\n        if (self.$panes[newIndex].disabled) {\r\n          navigatePane(newIndex, toLeft);\r\n        } else {\r\n          self.$setActive(self.$panes[newIndex].name || newIndex);\r\n        }\r\n      }\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n\r\n        self.$panes.push(pane);\r\n\r\n        self.$panes.forEach(function (tabPane, index) {\r\n          // Set an id value for the pane so that it can be used in the template\r\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\r\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\r\n        });\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\r\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\r\n          // If space or enter was pressed\r\n          self.$setActive(name);\r\n\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n\r\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\r\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\r\n        }\r\n      };\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      $tab.addTabControl = _addTabControl;\r\n      $tab.tabsHash = _tabsHash;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\r\n        // tabs are available in the tab component\r\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\r\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\r\n        }\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          $timeout(function () {\r\n            // get li elements\r\n            var liElements = element.find('li');\r\n            for (var i = 0; i < liElements.length; i++) {\r\n              var iElement = angular.element(liElements[i]);\r\n              if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\r\n                // if li is active, set focus to it.\r\n                iElement.find('a')[0].focus();\r\n              }\r\n            }\r\n            // delay, for the class (.active) change to reflect in DOM.\r\n          }, 100);\r\n        });\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Set up the assistive attributes\r\n        element.attr('role', 'tabpanel');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n        // Save tab id into scope\r\n        scope.id = attrs.id;\r\n\r\n        scope.name = scope.name || scope.id;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // Once the push has occured when can then update the element with some properties.\r\n        // Update the aria-labelledby attribute\r\n\t\t// SS-11127 - removed aria-describedby from tab and tab-panel and utilized aria-labeledby on the tab-panel using the ID of the tab and not the ID of the tab link\r\n        if (scope.$describedBy !== undefined) {\r\n          element.attr('aria-labelledby', scope.$describedBy);\r\n        }\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('focusOn', function () {\r\n    return {\r\n      restrict: 'A',\r\n      link: function (scope, elem, attr) {\r\n        scope.$watch(attr.focusOn, function (newValue, oldValue) {\r\n          if (newValue !== oldValue && newValue) {\r\n            elem[0].focus();\r\n          }\r\n        });\r\n      }\r\n    };\r\n  });\r\n\r\n// Source: select\\select.js\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok',\r\n      toggle: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              if (options.toggle) {\r\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\r\n              } else {\r\n                controller.$setViewValue(value);\r\n              }\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $select);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            var anchor;\r\n\r\n            if (evt.target.nodeName !== 'A') {\r\n              var anchorCandidate = targetEl.parent();\r\n              while (!anchor && anchorCandidate.length > 0) {\r\n                if (anchorCandidate[0].nodeName === 'A') {\r\n                  anchor = anchorCandidate;\r\n                }\r\n                anchorCandidate = anchorCandidate.parent();\r\n              }\r\n            }\r\n\r\n            if (anchor) {\r\n              angular.element(anchor).triggerHandler('click');\r\n            } else {\r\n              targetEl.triggerHandler('click');\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: scrollspy\\scrollspy.js\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: navbar\\navbar.js\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: modal\\modal.js\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true,\r\n      size: null,\r\n      zIndex: null,\r\n      containerElement: null\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      var layoutHideElement = angular.element('#layoutContainer');\r\n\r\n      var backdropCount = 0;\r\n      var dialogBaseZindex = 1050;\r\n      var backdropBaseZindex = 1040;\r\n\r\n      var validSizes = {\r\n        lg: 'modal-lg',\r\n        sm: 'modal-sm'\r\n      };\r\n\r\n      function ModalFactory (config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if (options.containerElement) {\r\n          layoutHideElement = angular.element(options.containerElement);\r\n        }\r\n        if (!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        if (options.zIndex) {\r\n          dialogBaseZindex = parseInt(options.zIndex, 10);\r\n          backdropBaseZindex = dialogBaseZindex - 10;\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        $modal.returnFocus = function () {\r\n\r\n        };\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function (key) {\r\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData;\r\n        var modalElement;\r\n        var modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({\r\n          position: 'fixed',\r\n          top: '0px',\r\n          left: '0px',\r\n          bottom: '0px',\r\n          right: '0px'\r\n        });\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function () {\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function () {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if (backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function () {\r\n          if ($modal.$isShown) return;\r\n\r\n          var parent;\r\n          var after;\r\n          if (angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if (modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\r\n\r\n          if (options.backdrop) {\r\n            // set z-index\r\n            modalElement.css({\r\n              'z-index': dialogBaseZindex + (backdropCount * 20)\r\n            });\r\n            backdropElement.css({\r\n              'z-index': backdropBaseZindex + (backdropCount * 20)\r\n            });\r\n\r\n            // increment number of backdrops\r\n            backdropCount++;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($modal);\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({\r\n            display: 'block'\r\n          }).addClass(options.placement);\r\n\r\n          // Options: customClass\r\n          if (options.customClass) {\r\n            modalElement.addClass(options.customClass);\r\n          }\r\n\r\n          // Options: size\r\n          if (options.size && validSizes[options.size]) {\r\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\r\n          }\r\n\r\n          // Options: animation\r\n          if (options.animation) {\r\n            if (options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function () {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n\r\n          layoutHideElement.attr('aria-hidden', 'true');\r\n\r\n          if (options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'false');\r\n          modalElement.attr('tabindex', '0');\r\n          modalElement.focus();\r\n          if (!modalElement.length || !angular.element(modalElement[0]).hasClass('modal')) {\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n            unbindKeyboardEvents();\r\n          }\r\n        }\r\n\r\n        $modal.hide = function () {\r\n          if (!$modal.$isShown) return;\r\n\r\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'true');\r\n\r\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            // decrement number of backdrops\r\n            backdropCount--;\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($modal);\r\n          }\r\n          if (findElement('.modal').length <= 0) {\r\n            bodyElement.removeClass(options.prefixClass + '-open');\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n          }\r\n          if (options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        function findFocusableElements () {\r\n          // Add all elements we want to include in our selection\r\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\r\n          if (document.activeElement) {\r\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\r\n              function (element) {\r\n                // Check for visibility while always include the current activeElement\r\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\r\n              });\r\n\r\n            return focusable;\r\n          }\r\n        }\r\n\r\n        function findNextFocusableElement (inReverse) {\r\n          if (document.activeElement) {\r\n            var focusable = findFocusableElements();\r\n            if (focusable === undefined) return;\r\n            if (inReverse) {\r\n              focusable = Array.prototype.reverse.call(focusable);\r\n            }\r\n\r\n            var index = focusable.indexOf(document.activeElement);\r\n            return focusable[index + 1];\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function () {\r\n          if ($modal.$isShown) {\r\n            $modal.hide();\r\n          } else {\r\n            $modal.show();\r\n          }\r\n        };\r\n\r\n        $modal.focus = function () {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function (evt) {\r\n\r\n          // Escape was pressed on an open modal. Hide it.  Backspace key, nothing happen.\r\n          if ((evt.which === 8 || evt.which === 27) && $modal.$isShown) {\r\n            if (evt.which === 27) {\r\n              $modal.hide();\r\n            }\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $modal.$onKeyDown = function (evt) {\r\n          if (options.keyboard) {\r\n            if (evt.keyCode === 8 && evt.target.tagName !== 'TEXTAREA' && evt.target.tagName !== 'INPUT') {\r\n              evt.preventDefault();\r\n            }\r\n\r\n            if (evt.keyCode === 9) {\r\n\r\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\r\n              if (nextFocusable === undefined) {\r\n                if (evt.preventDefault) evt.preventDefault();\r\n                if (evt.stopPropagation) evt.stopPropagation();\r\n\r\n                var focusable = findFocusableElements();\r\n                if (evt.shiftKey) {\r\n                  focusable[focusable.length - 1].focus();\r\n                } else {\r\n                  focusable[0].focus();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n        function bindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n            modalElement.on('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n            modalElement.off('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        // Private helpers\r\n\r\n        function hideOnBackdropClick (evt) {\r\n          if (evt.target !== evt.currentTarget) return;\r\n          if (options.backdrop === 'static') {\r\n            $modal.focus();\r\n          } else {\r\n            $modal.hide();\r\n          }\r\n        }\r\n\r\n        function preventEventDefault (evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement () {\r\n          if ($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if (modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope,\r\n          element: element,\r\n          show: false\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Options: alias modalClass to customClass\r\n        if (options.modalClass) {\r\n          options.customClass = options.modalClass;\r\n        }\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsModal) {\r\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        if (options.keyboard) {\r\n          modal.returnFocus = function () {\r\n            element[0].focus();\r\n          };\r\n        }\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\raf.js\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n\r\n// Source: helpers\\parse-options.js\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\focus-out.js\r\nangular.module('mgcrea.ngStrap.helpers.ngFocusOut', [])\r\n  .directive('ngFocusOut', ['$parse', '$rootScope', function ($parse, $rootScope) {\r\n    return {\r\n      restrict: 'A',\r\n      compile: function ($element, attr) {\r\n        // NOTE:\r\n        // We expose the powerful `$event` object on the scope that provides access to the Window,\r\n        // etc. This is OK, because expressions are not sandboxed any more (and the expression\r\n        // sandbox was never meant to be a security feature anyway).\r\n        var fn = $parse(attr.ngFocusOut);\r\n\r\n        return function link (scope, element) {\r\n          function ngEventHandler (event) {\r\n            var callback = function () {\r\n              fn(scope, {\r\n                $event: event\r\n              });\r\n            };\r\n            if ($rootScope.$$phase) {\r\n              scope.$evalAsync(callback);\r\n            } else {\r\n              scope.$apply(callback);\r\n            }\r\n          }\r\n\r\n          // setup the handler\r\n          element.on('focusout', ngEventHandler);\r\n\r\n          scope.$on('$destroy', function () {\r\n            // tear down the handler\r\n            element.off('focusout', ngEventHandler);\r\n          });\r\n        };\r\n      }\r\n    };\r\n  }]);\r\n\r\n// Source: helpers\\focus-element.js\r\nangular.module('mgcrea.ngStrap.helpers.focusElement', [])\r\n  .directive('focusElement', ['$timeout', '$parse', function ($timeout, $parse) {\r\n    return {\r\n      link: function (scope, element, attrs) {\r\n        scope.$watch(attrs.focusElement, function (value) {\r\n          if (value === true) {\r\n            $timeout(function () {\r\n              element[0].focus();\r\n            });\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n\r\n// Source: helpers\\dimensions.js\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n\r\n// Source: helpers\\debounce.js\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n\r\n// Source: helpers\\date-parser.js\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          if (value.match(/Z/)) {\r\n            date = new Date(value.substr(1, value.length - 3));\r\n          } else {\r\n            date = new Date(value.substr(1, value.length - 2));\r\n          }\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n\r\n// Source: helpers\\date-formatter.js\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    this.weekdays = function (lang) {\r\n      return $locale.DATETIME_FORMATS.DAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n\r\n// Source: helpers\\compiler.js\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = options.resolve || {};\r\n    var locals = options.locals || {};\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template) {\r\n      resolve.$template = $q.when(template);\r\n    } else if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n    }\r\n\r\n    if (options.titleTemplate) {\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          findElement('[ng-bind=\"title\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if (!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function (locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n\r\n// Source: dropdown\\dropdown.js\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory (element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        /* var scope = */\r\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        if (element && element[0] && element[0].tagName.toUpperCase() === 'BUTTON') {\r\n          element.attr('aria-haspopup', 'true');\r\n          element.attr('data-toggle', 'dropdown');\r\n          element.attr('aria-expanded', 'false');\r\n          // element.attr('role', 'button'); As the element is a <button> there is no need for this attribute\r\n        }\r\n\r\n        // Dropdown menu items that are natively focusable need a tabindex of -1, but the user still needs to tab into the drodpwn menu\r\n        // This event serves to enable the user to tab into the drodpown menu\r\n        element.keydown(function (evt) {\r\n          if (/(9)/.test(evt.keyCode) && $dropdown.$element) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n            var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n            items.eq(0)[0].focus();\r\n          }\r\n        });\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function (evt) {\r\n          if ((/(9)/.test(evt.keyCode) && !options.keyboard) || /27/.test(evt.keyCode)) {\r\n            $dropdown.hide(/27/.test(evt.keyCode));\r\n            return;\r\n          }\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if (!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function (el, i) {\r\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if (evt.keyCode === 38 && index > 0) index--;\r\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if (evt.keyCode === 40 && index === items.length - 1) index = 0;\r\n          else if (angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        $dropdown.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inMenu = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $dropdown.$element[0]) {\r\n              inMenu = true;\r\n              break;\r\n            } else {\r\n              inMenu = false;\r\n            }\r\n          }\r\n\r\n          if (!inMenu) {\r\n            $dropdown.hide();\r\n          } else {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Set assistive technology properties\r\n            element.attr('aria-expanded', 'true');\r\n            if ($dropdown.$element) {\r\n              $dropdown.$element.attr('aria-hidden', 'false');\r\n              $dropdown.$element.attr('role', 'menu');\r\n              // $dropdown.$element.attr('tabindex', '-1'); <ul> element should have no tabindex per SS-9603\r\n            }\r\n            if (options.keyboard && $dropdown.$element) {\r\n              $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n              $dropdown.$element.on('focusout', $dropdown.$onFocusOut);\r\n            }\r\n\r\n            bodyEl.on('click', onBodyClick);\r\n\r\n            if ($dropdown.$element) {\r\n              var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider)'));\r\n              // <li> should have role=\"none\" as per SS-9603\r\n              items.attr('role', 'none');\r\n\r\n              angular.element($dropdown.$element[0].querySelectorAll('li.divider')).attr('role', 'seperator');\r\n\r\n              items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n              items.attr('role', 'menuitem');\r\n              if (items.length && options.keyboard) {\r\n                // items[0].focus(); Removing initial focus as user must tab into the menu per SS-9603\r\n\r\n                // Dropdown menu items that are natively focusable need to have a tabindex of -1 per SS-9603\r\n                angular.forEach(items, function (value, key) {\r\n                  angular.element(value).attr('tabindex', '-1');\r\n                });\r\n              }\r\n            }\r\n          }, 0, false);\r\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function (returnFocus) {\r\n          if (!$dropdown.$isShown) return;\r\n\r\n          element.attr('aria-expanded', 'false');\r\n          $dropdown.$element.attr('aria-hidden', 'true');\r\n\r\n          if (options.keyboard && $dropdown.$element) {\r\n            $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n            $dropdown.$element.off('focusout', $dropdown.$onFocusOut);\r\n          }\r\n\r\n          bodyEl.off('click', onBodyClick);\r\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\r\n          $timeout(function () {\r\n            hide();\r\n            if (returnFocus) {\r\n              $timeout(function () {\r\n                if (element && element[0]) {\r\n                  element[0].focus();\r\n                }\r\n              }, 0, false);\r\n            }\r\n          }, 200);\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function () {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick (evt) {\r\n          if (evt.target === element[0]) return undefined;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      compile: function (tElement, tAttrs) {\r\n\r\n        // Support for inlined template (next sibling)\r\n        // It must be fetched before compilation\r\n        if (!tAttrs.bsDropdown) {\r\n          var nextSibling = tElement[0].nextSibling;\r\n          while (nextSibling && nextSibling.nodeType !== 1) {\r\n            nextSibling = nextSibling.nextSibling;\r\n          }\r\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\r\n            tAttrs.template = nextSibling.outerHTML;\r\n            tAttrs.templateUrl = undefined;\r\n            nextSibling.parentNode.removeChild(nextSibling);\r\n          }\r\n        }\r\n\r\n        return function postLink (scope, element, attr) {\r\n\r\n          // Directive options\r\n          var options = {\r\n            scope: scope\r\n          };\r\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\r\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\r\n          });\r\n\r\n          // use string regex match boolean attr falsy values, leave truthy values be\r\n          var falseValueRegExp = /^(false|0|)$/i;\r\n          angular.forEach(['html', 'container'], function (key) {\r\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n          });\r\n\r\n          // bind functions from the attrs to the show and hide events\r\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n            if (angular.isDefined(attr[bsKey])) {\r\n              options[key] = scope.$eval(attr[bsKey]);\r\n            }\r\n          });\r\n\r\n          // Support scope as an object\r\n          if (attr.bsDropdown) {\r\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\r\n              scope.content = newValue;\r\n            }, true);\r\n          }\r\n\r\n          // Initialize dropdown\r\n          var dropdown = $dropdown(element, options);\r\n\r\n          // Visibility binding support\r\n          if (attr.bsShow) {\r\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n              if (!dropdown || !angular.isDefined(newValue)) return;\r\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n              if (newValue === true) {\r\n                dropdown.show();\r\n              } else {\r\n                dropdown.hide();\r\n              }\r\n            });\r\n          }\r\n\r\n          // Garbage collection\r\n          scope.$on('$destroy', function () {\r\n            if (dropdown) dropdown.destroy();\r\n            options = null;\r\n            dropdown = null;\r\n          });\r\n\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: datepicker\\datepicker.js\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      hasToday: false,\r\n      hasClear: false,\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right',\r\n      // The format that will be given to the screen reader values placed in the DOM.\r\n      screenReaderDateFormat: 'fullDate',\r\n      // Focuses the table element in the dropdown upon display of the picker.\r\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\r\n      focusOnOpen: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\r\n        // defaults and the configuration passed.\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // Add assistive technology helper attributes.\r\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\r\n\r\n        // View vars\r\n\r\n        // Initialize the datepicker view collection by passing a reference to the base object.\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        /*\r\n         * View mode for the date picker.\r\n         * 0: days\r\n         * 1: months\r\n         * 2: years\r\n         */\r\n        scope.$mode = options.startView;\r\n        // icon class override\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        // Show buttons at the bottom of the picker.\r\n        scope.$hasToday = options.hasToday;\r\n        scope.$hasClear = options.hasClear;\r\n        /*\r\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\r\n         * aria attributes which are linked via ids.\r\n         */\r\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\r\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\r\n        scope.keyboard = options.keyboard;\r\n        scope.focusOnOpen = options.focusOnOpen;\r\n\r\n        // labels\r\n        scope.$nextLabel = options.labelNext;\r\n        scope.$previousLabel = options.labelPrevious;\r\n\r\n        // This is the actual current picker view.\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Internal handlers\r\n\r\n        function handleOnKeyDown (evt, apply) {\r\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\r\n            return false;\r\n          }\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n              if (options.focusOnOpen) return true;\r\n            } else {\r\n              if (apply === undefined || apply) {\r\n                scope.$apply(function () {\r\n                  $datepicker.setMode(scope.$mode - 1);\r\n                });\r\n              } else {\r\n                $datepicker.setMode(scope.$mode - 1);\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        }\r\n\r\n        // Scope methods\r\n\r\n        /**\r\n         * Pass through from the scope to the provider for the selection of a date.\r\n         */\r\n        scope.$select = function (date, disabled) {\r\n          if (disabled) return;\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n        scope.$setToday = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(new Date());\r\n          } else {\r\n            $datepicker.select(new Date(), true);\r\n          }\r\n        };\r\n        scope.$clear = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(null);\r\n          } else {\r\n            $datepicker.select(null, true);\r\n          }\r\n        };\r\n        scope.$focused = function (dayInfo) {\r\n          scope.selectedDayId = dayInfo.id;\r\n          if (dayInfo.isNext && !scope.selected) {\r\n            if (scope.$mode) {\r\n              $datepicker.update(dayInfo.date);\r\n            } else {\r\n              scope.$select(dayInfo.date);\r\n            }\r\n          }\r\n        };\r\n        scope.$onKeyDown = function (evt, day) {\r\n          var continueHandling = handleOnKeyDown(evt, false);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n          }\r\n        };\r\n        scope.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inTable = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n              inTable = true;\r\n              break;\r\n            } else {\r\n              inTable = false;\r\n            }\r\n          }\r\n\r\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n          //\r\n\r\n          if (!inTable && !evt.relatedTarget) {\r\n            // hmm\r\n          } else if (!inTable) {\r\n            $datepicker.hide();\r\n          } else {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (angular.isDate(date)) {\r\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\r\n              controller.$dateValue = new Date(date);\r\n            }\r\n          } else {\r\n            controller.$dateValue = null;\r\n          }\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () {\r\n                $datepicker.hide(true);\r\n              });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {\r\n              year: date.getFullYear(),\r\n              month: date.getMonth(),\r\n              date: date.getDate()\r\n            });\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        /**\r\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\r\n         * rebuilt. The views are days, months, and years.\r\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\r\n         */\r\n        $datepicker.setMode = function setMode (mode) {\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          // The picker has been changed so the view needs to be built.\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        /**\r\n         * Builds the datepicker's view based on the picker that is currently set.\r\n         */\r\n        $datepicker.$build = function $build (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], function (day) {\r\n              updateSelected(day);\r\n              if (day.selected) scope.selected = day;\r\n            });\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {\r\n            year: targetDate.getUTCFullYear(),\r\n            month: targetDate.getUTCMonth(),\r\n            date: targetDate.getUTCDate()\r\n          });\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Handles the onKeyDown event from the element that this datepicker is bound.\r\n         * In the standard case this will be an input element. If the trigger is set\r\n         * to click and is bound to a button then it is likely we're servicing a 508\r\n         * type situation where the implementation will no longer uses. Focus will be\r\n         * given to the table.\r\n         */\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          var continueHandling = handleOnKeyDown(evt);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n            parentScope.$digest();\r\n          }\r\n        };\r\n\r\n        // $datepicker.$onFocusOut = function (evt) {\r\n        //   // find out if the related target's parents contain the datepicker's $element\r\n        //   var inTable = false;\r\n        //   var parent = angular.element(evt.relatedTarget);\r\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n        //     parent = parent.parent();\r\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n        //       inTable = true;\r\n        //       break;\r\n        //     } else {\r\n        //       inTable = false;\r\n        //     }\r\n        //   }\r\n\r\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n        //   //\r\n\r\n        //   if (!inTable && !evt.relatedTarget) {\r\n        //     // hmm\r\n        //   } else if (!inTable) {\r\n        //     $datepicker.hide();\r\n        //   } else {\r\n        //     evt.stopPropagation();\r\n        //     evt.preventDefault();\r\n        //   }\r\n        // };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n          el.focused = el.selected;\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        // The datepicker will override the init functionality of the tool\r\n        var _init = $datepicker.init;\r\n        /**\r\n         * Initialize the datepicker.\r\n         */\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\r\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\r\n        var _destroy = $datepicker.destroy;\r\n\r\n        /**\r\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\r\n         */\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be shown.\r\n        var _show = $datepicker.show;\r\n\r\n        /**\r\n         * Override for the tooltip's show function.\r\n         *\r\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\r\n         * Once shown it sets up the appropriate events.\r\n         */\r\n        $datepicker.show = function show () {\r\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n\r\n          // Call the \"overriden base\" function on the tooltip.\r\n          _show();\r\n\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n\r\n            // Update assistive technologies for view changes:\r\n            $datepicker.$element.attr('aria-hidden', 'false');\r\n            element.attr('aria-expanded', 'true');\r\n\r\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n            // If keyboard navigation is enabled (true by default).\r\n            if (options.keyboard) {\r\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\r\n              // Check to see if the table element should receive the focus when the picker is shown.\r\n              if (options.focusOnOpen) {\r\n                // Focus the table element.\r\n                // $datepicker.$element.find('table')[0].focus();\r\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\r\n              } else {\r\n                element.on('keydown', $datepicker.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be hidden.\r\n        var _hide = $datepicker.hide;\r\n\r\n        /**\r\n         * Overrid efor the tooltip's hide function.\r\n         *\r\n         * Updates attributes for assistive technologies and unbinds events.\r\n         */\r\n        $datepicker.hide = function (blur) {\r\n          // If the picker is already hidden don't do anything.\r\n          if (!$datepicker.$isShown) return;\r\n\r\n          // Update the attributes used by assisteive technologies\r\n          $datepicker.$element.attr('aria-hidden', 'true');\r\n          element.attr('aria-expanded', 'false');\r\n\r\n          // Unbind the mouse and touch events\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n          // If keyboard events were bound then unbind them.\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          if (options.focusOnOpen) {\r\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\r\n            element[0].focus();\r\n          }\r\n          // Call the tooltip's hide function.\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\r\n    return {\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        options = angular.extend({}, $datepicker.defaults, options);\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\r\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n\r\n          return date === null ? null : new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n      }\r\n    };\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLong = $dateFormatter.weekdays(lang);\r\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n\r\n        var weekDaysLabelsHtml = '';\r\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\r\n          var weekDayShortLabel = weekDaysShortLabels[i];\r\n          var weekDayLabel = weekDaysLongLabels[i];\r\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\r\n        }\r\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {\r\n          year: startDate.getFullYear(),\r\n          month: startDate.getMonth(),\r\n          date: startDate.getDate()\r\n        };\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {\r\n            month: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n              // in $datepicker.$selectPane, so picker would not update selected day display if\r\n              // user picks first day of the new month.\r\n              // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n            // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            var selectedDay;\r\n            var todayDay;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              // push the day information onto the collection\r\n              var dayItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: day,\r\n                value: day.getDate(),\r\n                isToday: day.toDateString() === today,\r\n                label: formatDate(day, this.format),\r\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\r\n                selected: picker.$date && this.isSelected(day),\r\n                muted: day.getMonth() !== viewDate.month,\r\n                disabled: this.isDisabled(day)\r\n              };\r\n\r\n              if (dayItem.selected) selectedDay = dayItem;\r\n              if (dayItem.isToday) todayDay = dayItem;\r\n\r\n              days.push(dayItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedDay) {\r\n                scope.selectedDayId = selectedDay.id;\r\n                if (todayDay) todayDay.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedDay.focused = true;\r\n                scope.selected = selectedDay;\r\n              } else if (todayDay) {\r\n                todayDay.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.isTodayDisabled = this.isDisabled(new Date());\r\n            scope.hasSelectedDate = picker.$date != null;\r\n            scope.$modeLabel = options.labelMonth;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\r\n              date.getMonth() === picker.$date.getMonth() &&\r\n              date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n            // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n            // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n            // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            var actualTime;\r\n\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date) {\r\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n                picker.$date = new Date();\r\n              } else {\r\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\r\n              }\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return false;\r\n            }\r\n\r\n            actualTime = picker.$date.getTime();\r\n\r\n            var newDate;\r\n\r\n            switch (evt.keyCode) {\r\n              // enter\r\n              case 13:\r\n                if (options.focusOnOpen) {\r\n                  picker.select(new Date(actualTime), true);\r\n                  return false;\r\n                }\r\n                break;\r\n                // pageup\r\n              case 33:\r\n                if (evt.altKey) { // move back a year\r\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move back a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\r\n                  }\r\n                }\r\n                break;\r\n\r\n                // pagedown\r\n              case 34:\r\n                if (evt.altKey) { // move forward a year\r\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move forward a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\r\n                  }\r\n                }\r\n\r\n                break;\r\n\r\n                // left arrow\r\n              case 37:\r\n                newDate = new Date(actualTime - 1 * 864e5);\r\n                break;\r\n\r\n                // up arrow\r\n              case 38:\r\n                newDate = new Date(actualTime - 7 * 864e5);\r\n                break;\r\n\r\n                // right arrow\r\n              case 39:\r\n                newDate = new Date(actualTime + 1 * 864e5);\r\n                break;\r\n\r\n                // down arrow\r\n              case 40:\r\n                newDate = new Date(actualTime + 7 * 864e5);\r\n                break;\r\n\r\n              default:\r\n                return false;\r\n            }\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n\r\n            if (evt && evt.stopPropagation) evt.stopPropagation();\r\n\r\n            return false;\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            var selectedMonth;\r\n            var thisMonth;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n\r\n              var monthItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: month,\r\n                label: formatDate(month, this.format),\r\n                selected: picker.$isSelected(month),\r\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\r\n                disabled: this.isDisabled(month)\r\n              };\r\n\r\n              if (monthItem.selected) selectedMonth = monthItem;\r\n              if (monthItem.isToday) thisMonth = monthItem;\r\n\r\n              months.push(monthItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedMonth) {\r\n                scope.selectedDayId = selectedMonth.id;\r\n                if (thisMonth) thisMonth.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedMonth.focused = true;\r\n                scope.selected = selectedMonth;\r\n              } else if (thisMonth) {\r\n                thisMonth.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modeLabel = options.labelYear;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\r\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 12\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            var selectedYear;\r\n            var thisYear;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n\r\n              var yearItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: year,\r\n                label: formatDate(year, this.format),\r\n                selected: picker.$isSelected(year),\r\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\r\n                disabled: this.isDisabled(year)\r\n              };\r\n\r\n              if (yearItem.selected) selectedYear = yearItem;\r\n              if (yearItem.isToday) thisYear = yearItem;\r\n\r\n              years.push(yearItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedYear) {\r\n                scope.selectedDayId = selectedYear.id;\r\n                if (thisYear) thisYear.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedYear.focused = true;\r\n                scope.selected = selectedYear;\r\n              } else if (thisYear) {\r\n                thisYear.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.startYear = years[0].label;\r\n            scope.endYear = years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modelLabel = options.labelDays;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: collapse\\collapse.js\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function (element) {\r\n        self.$toggles.push(element);\r\n        element.attr('aria-expanded', 'false');\r\n      };\r\n      self.$registerTarget = function (element) {\r\n        self.$targets.push(element);\r\n\r\n        var i = 0;\r\n        if (self.$targets) {\r\n          for (i = 0; i < self.$targets.length; i++) {\r\n            self.$targets[i].attr('aria-hidden', 'true');\r\n          }\r\n          for (i = 0; i < self.$targets.$active.length; i++) {\r\n            if (self.$targets[self.$targets.$active[i]]) {\r\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\r\n            }\r\n            if (self.$toggles[self.$targets.$active[i]]) {\r\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      self.$unregisterToggle = function (element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function (element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        if (angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        } else if (!self.$options.disallowToggle && isActive(value)) {\r\n          deactivateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function () {\r\n        if (self.$options.allowMultiple) {\r\n          return self.$targets.$active;\r\n        }\r\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes (index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for (var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive (value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) !== -1;\r\n      }\r\n\r\n      function deactivateItem (value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\r\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem (value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\r\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[0]]) {\r\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\r\n          }\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n\r\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\r\n          }\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            } else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              } else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function () {\r\n    var KEY_CODES = {\r\n      ENTER: 13,\r\n      SPACE: 32\r\n    };\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        var actionEventHandler = function () {\r\n          if (!attrs.disabled) {\r\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n            bsCollapseCtrl.$setActive(index * 1);\r\n            scope.$apply();\r\n          }\r\n        };\r\n\r\n        element.on('click', actionEventHandler);\r\n        element.bind('keydown keypress', function (e) {\r\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\r\n            console.log('key handler handling');\r\n            actionEventHandler();\r\n            e.preventDefault();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function ($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if (bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          } else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: button\\button.js\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = !!controller.$viewValue;\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$viewValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n\r\n// Source: aside\\aside.js\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: alert\\alert.js\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true,\r\n      focusMeDisabled: false\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n        $alert.returnFocus = function () {\r\n          function findFocusableElements () {\r\n            var containerEl = angular.element($alert.$element).closest('[ng-controller]');\r\n            return containerEl.find('a:not([disabled]),button:not([disabled]),input:not([disabled]),select:not([disabled]),[tabindex]:not([disabled]):not([tabindex=\"-1\"])').filter(function (i, el) {\r\n              return !angular.element(el).parentsUntil(containerEl, '[tabindex=\"-1\"]').length;\r\n            });\r\n          }\r\n\r\n          function findNextFocusableElement () {\r\n            if (document.activeElement) {\r\n              var focusable = findFocusableElements().toArray();\r\n              if (focusable === undefined) return;\r\n              var index = focusable.indexOf(document.activeElement);\r\n              return focusable[index + 1];\r\n            }\r\n          }\r\n          angular.element(findNextFocusableElement()).focus();\r\n        };\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n        if (options.focusMeDisabled) {\r\n          $alert.$scope.focusMeDisabled = options.focusMeDisabled;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n\r\n// Source: affix\\affix.js\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true,\r\n      setWidth: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = options.setWidth && !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element[0].style.position;\r\n          var initialTop = element[0].style.top;\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n            element.css('top', initialTop);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null) {\r\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window, $timeout) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix;\r\n        $timeout(function () { affix = $affix(element, options); });\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n\r\n// Source: module.js\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n\r\n})(window, document);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$popover', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      // uncommenting the next two lines will break backwards compatability\r\n      // prefixClass: 'popover',\r\n      // prefixEvent: 'popover',\r\n      container: false,\r\n      target: false,\r\n      placement: 'right',\r\n      templateUrl: 'popover/popover.tpl.html',\r\n      contentTemplate: false,\r\n      trigger: 'click',\r\n      keyboard: true,\r\n      html: false,\r\n      title: '',\r\n      content: '',\r\n      delay: 0,\r\n      autoClose: false\r\n    };\r\n\r\n    this.$get = function ($tooltip) {\r\n\r\n      function PopoverFactory (element, config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        var $popover = $tooltip(element, options);\r\n\r\n        // Support scope as string options [/*title, */content]\r\n        if (options.content) {\r\n          $popover.$scope.content = options.content;\r\n        }\r\n\r\n        return $popover;\r\n\r\n      }\r\n\r\n      return PopoverFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPopover', function ($window, $sce, $popover) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var popover;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n              if (angular.isDefined(oldValue)) {\r\n                requestAnimationFrame(function () {\r\n                  if (popover) popover.$applyPlacement();\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsPopover) {\r\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              requestAnimationFrame(function () {\r\n                if (popover) popover.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\r\n            if (newValue === true) {\r\n              popover.show();\r\n            } else {\r\n              popover.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\r\n            if (newValue === false) {\r\n              popover.setEnabled(false);\r\n            } else {\r\n              popover.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!popover || !angular.isDefined(newValue)) return;\r\n            popover.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        popover = $popover(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (popover) popover.destroy();\r\n          options = null;\r\n          popover = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\r\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\r\n\r\nangular.module('mgcrea.ngStrap.core', [])\r\n  .service('$bsCompiler', bsCompilerService);\r\n\r\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\r\n\r\n  /*\r\n   * @ngdoc service\r\n   * @name $bsCompiler\r\n   * @module material.core\r\n   * @description\r\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\r\n   * to easily compile an element with a templateUrl, controller, and locals.\r\n   *\r\n   * @usage\r\n   * <hljs lang=\"js\">\r\n   * $bsCompiler.compile({\r\n   *   templateUrl: 'modal.html',\r\n   *   controller: 'ModalCtrl',\r\n   *   locals: {\r\n   *     modal: myModalInstance;\r\n   *   }\r\n   * }).then(function(compileData) {\r\n   *   compileData.element; // modal.html's template in an element\r\n   *   compileData.link(myScope); //attach controller & scope to element\r\n   * });\r\n   * </hljs>\r\n   */\r\n\r\n   /*\r\n    * @ngdoc method\r\n    * @name $bsCompiler#compile\r\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\r\n    * locals, and scope.\r\n    * @param {object} options An options object, with the following properties:\r\n    *\r\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\r\n    *      newly created scope or the name of a registered controller if passed as a string.\r\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *    - `template` - `{string=}` An html template as a string.\r\n    *    - `templateUrl` - `{string=}` A path to an html template.\r\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\r\n    *      it is loaded. It will be given the template string as a parameter, and should\r\n    *      return a a new string representing the transformed template.\r\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\r\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\r\n    *      instantiated `compile()` will fail..\r\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\r\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is injected and the return value is treated as the\r\n    *        dependency. If the result is a promise, it is resolved before its value is\r\n    *        injected into the controller.\r\n    *\r\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\r\n    * `compileData` has the following properties:\r\n    *\r\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\r\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\r\n    *     the element and instantiate the provided controller (if given).\r\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\r\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\r\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\r\n    */\r\n  this.compile = function (options) {\r\n\r\n    if (options.template && /\\.html$/.test(options.template)) {\r\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\r\n      options.templateUrl = options.template;\r\n      options.template = '';\r\n    }\r\n\r\n    var templateUrl = options.templateUrl;\r\n    var template = options.template || '';\r\n    var controller = options.controller;\r\n    var controllerAs = options.controllerAs;\r\n    var resolve = options.resolve || {};\r\n    var locals = options.locals || {};\r\n    var transformTemplate = options.transformTemplate || angular.identity;\r\n    var bindToController = options.bindToController;\r\n\r\n    // Take resolve values and invoke them.\r\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\r\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\r\n    angular.forEach(resolve, function (value, key) {\r\n      if (angular.isString(value)) {\r\n        resolve[key] = $injector.get(value);\r\n      } else {\r\n        resolve[key] = $injector.invoke(value);\r\n      }\r\n    });\r\n    // Add the locals, which are just straight values to inject\r\n    // eg locals: { three: 3 }, will inject three into the controller\r\n    angular.extend(resolve, locals);\r\n\r\n    if (template) {\r\n      resolve.$template = $q.when(template);\r\n    } else if (templateUrl) {\r\n      resolve.$template = fetchTemplate(templateUrl);\r\n    } else {\r\n      throw new Error('Missing `template` / `templateUrl` option.');\r\n    }\r\n\r\n    if (options.titleTemplate) {\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          findElement('[ng-bind=\"title\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    if (options.contentTemplate) {\r\n      // TODO(mgcrea): deprecate?\r\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\r\n        .then(function (templates) {\r\n          var templateEl = angular.element(templates[0]);\r\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\r\n            .removeAttr('ng-bind')\r\n            .html(templates[1]);\r\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\r\n          if (!options.templateUrl) contentEl.next().remove();\r\n          return templateEl[0].outerHTML;\r\n        });\r\n    }\r\n\r\n    // Wait for all the resolves to finish if they are promises\r\n    return $q.all(resolve).then(function (locals) {\r\n\r\n      var template = transformTemplate(locals.$template);\r\n      if (options.html) {\r\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\r\n      }\r\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\r\n      var element = angular.element('<div>').html(template.trim()).contents();\r\n      var linkFn = $compile(element);\r\n\r\n      // Return a linking function that can be used later when the element is ready\r\n      return {\r\n        locals: locals,\r\n        element: element,\r\n        link: function link (scope) {\r\n          locals.$scope = scope;\r\n\r\n          // Instantiate controller if it exists, because we have scope\r\n          if (controller) {\r\n            var invokeCtrl = $controller(controller, locals, true);\r\n            if (bindToController) {\r\n              angular.extend(invokeCtrl.instance, locals);\r\n            }\r\n            // Support angular@~1.2 invokeCtrl\r\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\r\n            // See angular-route source for this logic\r\n            element.data('$ngControllerController', ctrl);\r\n            element.children().data('$ngControllerController', ctrl);\r\n\r\n            if (controllerAs) {\r\n              scope[controllerAs] = ctrl;\r\n            }\r\n          }\r\n\r\n          return linkFn.apply(null, arguments);\r\n        }\r\n      };\r\n    });\r\n\r\n  };\r\n\r\n  function findElement (query, element) {\r\n    return angular.element((element || document).querySelectorAll(query));\r\n  }\r\n\r\n  var fetchPromises = {};\r\n  function fetchTemplate (template) {\r\n    if (fetchPromises[template]) return fetchPromises[template];\r\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\r\n      .then(function (res) {\r\n        return res.data;\r\n      }));\r\n  }\r\n\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$dropdown', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'dropdown',\r\n      prefixEvent: 'dropdown',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'dropdown/dropdown.tpl.html',\r\n      trigger: 'click',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\r\n\r\n      function DropdownFactory (element, config) {\r\n\r\n        var $dropdown = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        /* var scope = */\r\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        $dropdown = $tooltip(element, options);\r\n        var parentEl = element.parent();\r\n\r\n        if (element && element[0] && element[0].tagName.toUpperCase() === 'BUTTON') {\r\n          element.attr('aria-haspopup', 'true');\r\n          element.attr('data-toggle', 'dropdown');\r\n          element.attr('aria-expanded', 'false');\r\n          // element.attr('role', 'button'); As the element is a <button> there is no need for this attribute\r\n        }\r\n\r\n        // Dropdown menu items that are natively focusable need a tabindex of -1, but the user still needs to tab into the drodpwn menu\r\n        // This event serves to enable the user to tab into the drodpown menu\r\n        element.keydown(function (evt) {\r\n          if (/(9)/.test(evt.keyCode) && $dropdown.$element) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n            var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n            items.eq(0)[0].focus();\r\n          }\r\n        });\r\n\r\n        // Protected methods\r\n\r\n        $dropdown.$onKeyDown = function (evt) {\r\n          if ((/(9)/.test(evt.keyCode) && !options.keyboard) || /27/.test(evt.keyCode)) {\r\n            $dropdown.hide(/27/.test(evt.keyCode));\r\n            return;\r\n          }\r\n          if (!/(38|40)/.test(evt.keyCode)) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Retrieve focused index\r\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n          if (!items.length) return;\r\n          var index;\r\n          angular.forEach(items, function (el, i) {\r\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\r\n          });\r\n\r\n          // Navigate with keyboard\r\n          if (evt.keyCode === 38 && index > 0) index--;\r\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\r\n          else if (evt.keyCode === 40 && index === items.length - 1) index = 0;\r\n          else if (angular.isUndefined(index)) index = 0;\r\n          items.eq(index)[0].focus();\r\n\r\n        };\r\n\r\n        $dropdown.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inMenu = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $dropdown.$element[0]) {\r\n              inMenu = true;\r\n              break;\r\n            } else {\r\n              inMenu = false;\r\n            }\r\n          }\r\n\r\n          if (!inMenu) {\r\n            $dropdown.hide();\r\n          } else {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $dropdown.show;\r\n        $dropdown.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Set assistive technology properties\r\n            element.attr('aria-expanded', 'true');\r\n            if ($dropdown.$element) {\r\n              $dropdown.$element.attr('aria-hidden', 'false');\r\n              $dropdown.$element.attr('role', 'menu');\r\n              // $dropdown.$element.attr('tabindex', '-1'); <ul> element should have no tabindex per SS-9603\r\n            }\r\n            if (options.keyboard && $dropdown.$element) {\r\n              $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\r\n              $dropdown.$element.on('focusout', $dropdown.$onFocusOut);\r\n            }\r\n\r\n            bodyEl.on('click', onBodyClick);\r\n\r\n            if ($dropdown.$element) {\r\n              var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider)'));\r\n              // <li> should have role=\"none\" as per SS-9603\r\n              items.attr('role', 'none');\r\n\r\n              angular.element($dropdown.$element[0].querySelectorAll('li.divider')).attr('role', 'seperator');\r\n\r\n              items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\r\n              items.attr('role', 'menuitem');\r\n              if (items.length && options.keyboard) {\r\n                // items[0].focus(); Removing initial focus as user must tab into the menu per SS-9603\r\n\r\n                // Dropdown menu items that are natively focusable need to have a tabindex of -1 per SS-9603\r\n                angular.forEach(items, function (value, key) {\r\n                  angular.element(value).attr('tabindex', '-1');\r\n                });\r\n              }\r\n            }\r\n          }, 0, false);\r\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\r\n        };\r\n\r\n        var hide = $dropdown.hide;\r\n        $dropdown.hide = function (returnFocus) {\r\n          if (!$dropdown.$isShown) return;\r\n\r\n          element.attr('aria-expanded', 'false');\r\n          $dropdown.$element.attr('aria-hidden', 'true');\r\n\r\n          if (options.keyboard && $dropdown.$element) {\r\n            $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\r\n            $dropdown.$element.off('focusout', $dropdown.$onFocusOut);\r\n          }\r\n\r\n          bodyEl.off('click', onBodyClick);\r\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\r\n          $timeout(function () {\r\n            hide();\r\n            if (returnFocus) {\r\n              $timeout(function () {\r\n                if (element && element[0]) {\r\n                  element[0].focus();\r\n                }\r\n              }, 0, false);\r\n            }\r\n          }, 200);\r\n        };\r\n\r\n        var destroy = $dropdown.destroy;\r\n        $dropdown.destroy = function () {\r\n          bodyEl.off('click', onBodyClick);\r\n          destroy();\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function onBodyClick (evt) {\r\n          if (evt.target === element[0]) return undefined;\r\n          return evt.target !== element[0] && $dropdown.hide();\r\n        }\r\n\r\n        return $dropdown;\r\n\r\n      }\r\n\r\n      return DropdownFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      compile: function (tElement, tAttrs) {\r\n\r\n        // Support for inlined template (next sibling)\r\n        // It must be fetched before compilation\r\n        if (!tAttrs.bsDropdown) {\r\n          var nextSibling = tElement[0].nextSibling;\r\n          while (nextSibling && nextSibling.nodeType !== 1) {\r\n            nextSibling = nextSibling.nextSibling;\r\n          }\r\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\r\n            tAttrs.template = nextSibling.outerHTML;\r\n            tAttrs.templateUrl = undefined;\r\n            nextSibling.parentNode.removeChild(nextSibling);\r\n          }\r\n        }\r\n\r\n        return function postLink (scope, element, attr) {\r\n\r\n          // Directive options\r\n          var options = {\r\n            scope: scope\r\n          };\r\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\r\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\r\n          });\r\n\r\n          // use string regex match boolean attr falsy values, leave truthy values be\r\n          var falseValueRegExp = /^(false|0|)$/i;\r\n          angular.forEach(['html', 'container'], function (key) {\r\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n          });\r\n\r\n          // bind functions from the attrs to the show and hide events\r\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n            if (angular.isDefined(attr[bsKey])) {\r\n              options[key] = scope.$eval(attr[bsKey]);\r\n            }\r\n          });\r\n\r\n          // Support scope as an object\r\n          if (attr.bsDropdown) {\r\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\r\n              scope.content = newValue;\r\n            }, true);\r\n          }\r\n\r\n          // Initialize dropdown\r\n          var dropdown = $dropdown(element, options);\r\n\r\n          // Visibility binding support\r\n          if (attr.bsShow) {\r\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n              if (!dropdown || !angular.isDefined(newValue)) return;\r\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\r\n              if (newValue === true) {\r\n                dropdown.show();\r\n              } else {\r\n                dropdown.hide();\r\n              }\r\n            });\r\n          }\r\n\r\n          // Garbage collection\r\n          scope.$on('$destroy', function () {\r\n            if (dropdown) dropdown.destroy();\r\n            options = null;\r\n            dropdown = null;\r\n          });\r\n\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'bsAsyncFilter',\r\n      limit: 6,\r\n      autoSelect: false,\r\n      comparator: '',\r\n      trimValue: true\r\n    };\r\n\r\n    var KEY_CODES = {\r\n      downArrow: 40,\r\n      enter: 13,\r\n      escape: 27,\r\n      upArrow: 38\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\r\n\r\n      function TypeaheadFactory (element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n        scope.id = options.id;\r\n\r\n        scope.$resetMatches = function () {\r\n          scope.$matches = [];\r\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function isActive (index) {\r\n          return scope.$activeIndex === index ? true : undefined;\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function (matches) {\r\n          scope.$matches = matches;\r\n          if (scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\r\n          }\r\n\r\n          // wrap in a $timeout so the results are updated\r\n          // before repositioning\r\n          safeDigest(scope);\r\n          $$rAF($typeahead.$applyPlacement);\r\n        };\r\n\r\n        $typeahead.activate = function (index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function (index) {\r\n          if (index === -1) return;\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if (parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $typeahead);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        scope.$generateResultId = function (index) {\r\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\r\n        };\r\n\r\n        $typeahead.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$$updateScrollTop = function (container, index) {\r\n          if (index > -1 && index < container.children.length) {\r\n            var active = container.children[index];\r\n            var clientTop = active.offsetTop;\r\n            var clientBottom = active.offsetTop + active.clientHeight;\r\n            var highWatermark = container.scrollTop;\r\n            var lowWatermark = container.scrollTop + container.clientHeight;\r\n\r\n            // active entry overlaps top border\r\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\r\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\r\n            } else if (clientBottom > lowWatermark) {\r\n              // top of active element is invisible because it's below the bottom of the visible container window\r\n              container.scrollTop = clientTop;\r\n            }\r\n          }\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function (evt) {\r\n          // If the key code isn't up arrow, down arrow, or enter return.\r\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\r\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n            // Navigate with keyboard\r\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\r\n            scope.$activeIndex--;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\r\n            scope.$activeIndex++;\r\n            setAriaActiveDescendant(scope.$activeIndex);\r\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\r\n          } else if ((evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex === 0) || (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex === scope.$matches.length - 1)) {\r\n            scope.$activeIndex = -1;\r\n            var ele = '#' + evt.currentTarget.id;\r\n            // position the cursor after the last letter of the selected item inside the control to allow the user to easily delete the selection if desired\r\n            angular.element(ele).val('').val(controller.$viewValue);\r\n            angular.element(ele).focus();\r\n          } else if (angular.isUndefined(scope.$activeIndex)) {\r\n            scope.$activeIndex = 0;\r\n            setAriaActiveDescendant();\r\n          }\r\n\r\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\r\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function () {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed immediately.\r\n          $timeout(function () {\r\n            if ($typeahead.$element) {\r\n              if (options.id) {\r\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\r\n                $typeahead.$element.attr('id', options.id + '_listbox');\r\n                element.attr('aria-controls', options.id + '_listbox');\r\n\r\n                var assertDiv = document.getElementById(options.id + '_sr_text');\r\n                if (!assertDiv) {\r\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\r\n                }\r\n              }\r\n\r\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\r\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\r\n\r\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n              if (options.keyboard) {\r\n                // event for the element that we attach is added to event queue\r\n                // before pushing the same event more that once for the same element, event need to detach\r\n                // list item jumps happening in search list for this setted keydown off\r\n                if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function () {\r\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          if (!options.autoSelect) {\r\n            $typeahead.activate(-1);\r\n          }\r\n\r\n          var assertDiv = document.getElementById(options.id + '_sr_text');\r\n          angular.element(assertDiv).remove();\r\n\r\n          setAriaActiveDescendant();\r\n\r\n          hide();\r\n        };\r\n\r\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\r\n        $typeahead.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === KEY_CODES.escape) {\r\n            $typeahead.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        // Helper functions within this closure\r\n\r\n        function setAriaActiveDescendant (index) {\r\n          if (index === undefined || !scope.id) {\r\n            element.removeAttr('aria-activedescendant');\r\n          } else {\r\n            var resultId = scope.$generateResultId(index);\r\n            if (resultId) {\r\n              element.attr('aria-activedescendant', resultId);\r\n            } else {\r\n              element.removeAttr('aria-activedescendant');\r\n            }\r\n          }\r\n        }\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .filter('bsAsyncFilter', function ($filter) {\r\n    return function (array, expression, comparator) {\r\n      if (array && angular.isFunction(array.then)) {\r\n        return array.then(function (results) {\r\n          return $filter('filter')(results, expression, comparator);\r\n        });\r\n      }\r\n      return $filter('filter')(array, expression, comparator);\r\n    };\r\n  })\r\n\r\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Fixes firefox bug when using objects in model with typeahead\r\n        // Yes this breaks any other directive using a 'change' event on this input,\r\n        // but if it is using the 'change' event why is it used with typeahead?\r\n        element.off('change');\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Disable browser autocompletion\r\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\r\n\r\n        // Build proper bsOptions\r\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var bsOptions = attr.bsOptions;\r\n        if (filter) {\r\n          bsOptions += ' | ' + filter + ':$viewValue';\r\n          if (comparator) bsOptions += ':' + comparator;\r\n        }\r\n        if (limit) bsOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(bsOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\r\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\r\n          element.attr('aria-autocomplete', 'list');\r\n        }\r\n\r\n        // Watch options on demand\r\n        if (options.watchOptions) {\r\n          // Watch bsOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n            .then(function (values) {\r\n              // Prevent input with no future prospect if selectMode is truthy\r\n              // @TODO test selectMode\r\n              if (options.selectMode && !values.length && newValue.length > 0) {\r\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n                return;\r\n              }\r\n              if (values.length > limit) values = values.slice(0, limit);\r\n              typeahead.update(values);\r\n              // Queue a new rendering that will leverage collection loading\r\n              controller.$render();\r\n            });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n\r\n          // If we can determine the displayValue, use that\r\n          if (displayValue) {\r\n            return displayValue;\r\n          }\r\n\r\n          // If there's no display value, attempt to use the modelValue.\r\n          // If the model is an object not much we can do\r\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\r\n            return modelValue;\r\n          }\r\n          return '';\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if (controller.$isEmpty(controller.$viewValue)) {\r\n            return element.val('');\r\n          }\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\r\n          var ss = element[0].selectionStart;\r\n          var sd = element[0].selectionEnd;\r\n          element.val(options.trimValue === false ? value : value.trim());\r\n          element[0].setSelectionRange(ss, sd);\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          element.off('keydown');\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$tooltip', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'tooltip',\r\n      prefixEvent: 'tooltip',\r\n      container: false,\r\n      target: false,\r\n      placement: 'top',\r\n      templateUrl: 'tooltip/tooltip.tpl.html',\r\n      template: '',\r\n      titleTemplate: false,\r\n      trigger: 'hover focus',\r\n      keyboard: false,\r\n      html: false,\r\n      show: false,\r\n      title: '',\r\n      type: '',\r\n      delay: 0,\r\n      autoClose: false,\r\n      bsEnabled: true,\r\n      mouseDownPreventDefault: true,\r\n      mouseDownStopPropagation: true,\r\n      viewport: {\r\n        selector: 'body',\r\n        padding: 0\r\n      }\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      var $body = angular.element($window.document);\r\n\r\n      function TooltipFactory (element, config) {\r\n\r\n        var $tooltip = {};\r\n\r\n        // Common vars\r\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\r\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\r\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        // var nodeName = element[0].nodeName.toLowerCase();\r\n        if (options.delay && angular.isString(options.delay)) {\r\n          var split = options.delay.split(',').map(parseFloat);\r\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $tooltip.$id = options.id || element.attr('id') || '';\r\n\r\n        // Support scope as string options\r\n        if (options.title) {\r\n          scope.title = $sce.trustAsHtml(options.title);\r\n        }\r\n\r\n        // Provide scope helpers\r\n        scope.$setEnabled = function (isEnabled) {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.setEnabled(isEnabled);\r\n          });\r\n        };\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $tooltip.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $tooltip.$isShown = scope.$isShown = false;\r\n\r\n        // Private vars\r\n        var timeout;\r\n        var hoverState;\r\n\r\n        // Fetch, compile then initialize tooltip\r\n        var compileData;\r\n        var tipElement;\r\n        var tipContainer;\r\n        var tipScope;\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $tooltip.init();\r\n        });\r\n\r\n        $tooltip.init = function () {\r\n\r\n          // Options: delay\r\n          if (options.delay && angular.isNumber(options.delay)) {\r\n            options.delay = {\r\n              show: options.delay,\r\n              hide: options.delay\r\n            };\r\n          }\r\n\r\n          // Replace trigger on touch devices ?\r\n          // if(isTouch && options.trigger === defaults.trigger) {\r\n          //   options.trigger.replace(/hover/g, 'click');\r\n          // }\r\n\r\n          // Options : container\r\n          if (options.container === 'self') {\r\n            tipContainer = element;\r\n          } else if (angular.isElement(options.container)) {\r\n            tipContainer = options.container;\r\n          } else if (options.container) {\r\n            tipContainer = findElement(options.container);\r\n          }\r\n\r\n          // Options: trigger\r\n          bindTriggerEvents();\r\n\r\n          // Options: target\r\n          if (options.target) {\r\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\r\n          }\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              if (options.trigger === 'focus') {\r\n                element[0].focus();\r\n              } else {\r\n                $tooltip.show();\r\n              }\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $tooltip.destroy = function () {\r\n\r\n          // Unbind events\r\n          unbindTriggerEvents();\r\n\r\n          // Remove element\r\n          destroyTipElement();\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n\r\n        };\r\n\r\n        $tooltip.enter = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'in';\r\n          if (!options.delay || !options.delay.show) {\r\n            return $tooltip.show();\r\n          }\r\n\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'in') $tooltip.show();\r\n          }, options.delay.show);\r\n\r\n        };\r\n\r\n        $tooltip.show = function () {\r\n          if (!options.bsEnabled || $tooltip.$isShown) return;\r\n\r\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($tooltip);\r\n          }\r\n          var parent;\r\n          var after;\r\n          if (options.container) {\r\n            parent = tipContainer;\r\n            if (tipContainer[0].lastChild) {\r\n              after = angular.element(tipContainer[0].lastChild);\r\n            } else {\r\n              after = null;\r\n            }\r\n          } else {\r\n            parent = null;\r\n            after = element;\r\n          }\r\n\r\n\r\n          // Hide any existing tipElement\r\n          if (tipElement) destroyTipElement();\r\n          // Fetch a cloned element linked from template\r\n          tipScope = $tooltip.$scope.$new();\r\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\r\n\r\n          // Set the initial positioning.  Make the tooltip invisible\r\n          // so IE doesn't try to focus on it off screen.\r\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\r\n\r\n          // Options: animation\r\n          if (options.animation) tipElement.addClass(options.animation);\r\n          // Options: type\r\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\r\n          // Options: custom classes\r\n          if (options.customClass) tipElement.addClass(options.customClass);\r\n\r\n          // Append the element, without any animations.  If we append\r\n          // using $animate.enter, some of the animations cause the placement\r\n          // to be off due to the transforms.\r\n          if (after) {\r\n            after.after(tipElement);\r\n          } else {\r\n            parent.prepend(tipElement);\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n\r\n          // Now, apply placement\r\n          $tooltip.$applyPlacement();\r\n\r\n          // Once placed, animate it.\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n          safeDigest(scope);\r\n\r\n          $$rAF(function () {\r\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\r\n            if (tipElement) tipElement.css({visibility: 'visible'});\r\n\r\n            // Bind events\r\n            if (options.keyboard) {\r\n              if (options.trigger !== 'focus') {\r\n                $tooltip.focus();\r\n              }\r\n              bindKeyboardEvents();\r\n            }\r\n          });\r\n\r\n          if (options.autoClose) {\r\n            bindAutoCloseEvents();\r\n          }\r\n\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($tooltip);\r\n          }\r\n        }\r\n\r\n        $tooltip.leave = function () {\r\n\r\n          clearTimeout(timeout);\r\n          hoverState = 'out';\r\n          if (!options.delay || !options.delay.hide) {\r\n            return $tooltip.hide();\r\n          }\r\n          timeout = setTimeout(function () {\r\n            if (hoverState === 'out') {\r\n              $tooltip.hide();\r\n            }\r\n          }, options.delay.hide);\r\n\r\n        };\r\n\r\n        var _blur;\r\n        var _tipToHide;\r\n        $tooltip.hide = function (blur) {\r\n\r\n          if (!$tooltip.$isShown) return;\r\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($tooltip);\r\n          }\r\n\r\n          // store blur value for leaveAnimateCallback to use\r\n          _blur = blur;\r\n\r\n          // store current tipElement reference to use\r\n          // in leaveAnimateCallback\r\n          _tipToHide = tipElement;\r\n\r\n          if (tipElement !== null) {\r\n            // Support v1.2+ $animate\r\n            // https://github.com/angular/angular.js/issues/11713\r\n            if (angular.version.minor <= 2) {\r\n              $animate.leave(tipElement, leaveAnimateCallback);\r\n            } else {\r\n              $animate.leave(tipElement).then(leaveAnimateCallback);\r\n            }\r\n          }\r\n\r\n          $tooltip.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          if (options.keyboard && tipElement !== null) {\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (options.autoClose && tipElement !== null) {\r\n            unbindAutoCloseEvents();\r\n          }\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($tooltip);\r\n          }\r\n\r\n          // check if current tipElement still references\r\n          // the same element when hide was called\r\n          if (tipElement === _tipToHide) {\r\n            // Allow to blur the input when hidden, like when pressing enter key\r\n            if (_blur && options.trigger === 'focus') {\r\n              return element[0].blur();\r\n            }\r\n\r\n            // clean up child scopes\r\n            destroyTipElement();\r\n          }\r\n        }\r\n\r\n        $tooltip.toggle = function (evt) {\r\n          if (evt) { evt.preventDefault(); }\r\n          if ($tooltip.$isShown) {\r\n            $tooltip.leave();\r\n          } else {\r\n            $tooltip.enter();\r\n          }\r\n        };\r\n\r\n        $tooltip.focus = function () {\r\n          tipElement[0].focus();\r\n        };\r\n\r\n        $tooltip.setEnabled = function (isEnabled) {\r\n          options.bsEnabled = isEnabled;\r\n        };\r\n\r\n        $tooltip.setViewport = function (viewport) {\r\n          options.viewport = viewport;\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $tooltip.$applyPlacement = function () {\r\n          if (!tipElement) return;\r\n\r\n          // Determine if we're doing an auto or normal placement\r\n          var placement = options.placement;\r\n          var autoToken = /\\s?auto?\\s?/i;\r\n          var autoPlace = autoToken.test(placement);\r\n\r\n          if (autoPlace) {\r\n            placement = placement.replace(autoToken, '') || defaults.placement;\r\n          }\r\n\r\n          // Need to add the position class before we get\r\n          // the offsets\r\n          tipElement.addClass(options.placement);\r\n\r\n          // Get the position of the target element\r\n          // and the height and width of the tooltip so we can center it.\r\n          var elementPosition = getPosition();\r\n          var tipWidth = tipElement.prop('offsetWidth');\r\n          var tipHeight = tipElement.prop('offsetHeight');\r\n\r\n          // Refresh viewport position\r\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\r\n\r\n          // If we're auto placing, we need to check the positioning\r\n          if (autoPlace) {\r\n            var originalPlacement = placement;\r\n            var viewportPosition = getPosition($tooltip.$viewport);\r\n\r\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\r\n              placement = originalPlacement.replace('bottom', 'top');\r\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\r\n              placement = originalPlacement.replace('top', 'bottom');\r\n            }\r\n\r\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\r\n              placement = placement.replace('left', 'right');\r\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\r\n              placement = placement.replace('right', 'left');\r\n            }\r\n\r\n            tipElement.removeClass(originalPlacement).addClass(placement);\r\n          }\r\n\r\n          // Get the tooltip's top and left coordinates to center it with this directive.\r\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\r\n          applyPlacement(tipPosition, placement);\r\n        };\r\n\r\n        $tooltip.$onKeyUp = function (evt) {\r\n          if (evt.which === 27 && $tooltip.$isShown) {\r\n            $tooltip.hide();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusKeyUp = function (evt) {\r\n          if (evt.which === 27) {\r\n            element[0].blur();\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $tooltip.$onFocusElementMouseDown = function (evt) {\r\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\r\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\r\n          // Some browsers do not auto-focus buttons (eg. Safari)\r\n          if ($tooltip.$isShown) {\r\n            element[0].blur();\r\n          } else {\r\n            element[0].focus();\r\n          }\r\n        };\r\n\r\n        // bind/unbind events\r\n        function bindTriggerEvents () {\r\n\r\n          var triggers = options.trigger.split(' ');\r\n          angular.forEach(triggers, function (trigger) {\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.on(trigger, $tooltip.toggle);\r\n              // element.on('blur', $tooltip.leave);\r\n            } else if (trigger !== 'manual') {\r\n              // Only bind up hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              } else if (trigger === 'focus') { // but do bind focus events for touch\r\n                element.on('focus', $tooltip.enter);\r\n                element.on('blur', $tooltip.leave);\r\n              }\r\n\r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          });\r\n        }\r\n\r\n        function unbindTriggerEvents () {\r\n          var triggers = options.trigger.split(' ');\r\n          for (var i = triggers.length; i--;) {\r\n            var trigger = triggers[i];\r\n            if (trigger === 'click' || trigger === 'contextmenu') {\r\n              element.off(trigger, $tooltip.toggle);\r\n            } else if (trigger !== 'manual') {\r\n              // Remove previously defined hover events if we are on a desktop\r\n              if (!isTouch) {\r\n                element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\r\n                element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\r\n              } else if (trigger === 'focus') { // Remove previously defined focus events\r\n                element.off('focus', $tooltip.enter);\r\n                element.off('blur', $tooltip.leave);\r\n              }\r\n\r\n              // if (nodeName === 'button' && trigger !== 'hover') {\r\n              //   element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\r\n              // }\r\n            }\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.on('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.on('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.trigger !== 'focus') {\r\n            tipElement.off('keyup', $tooltip.$onKeyUp);\r\n          } else {\r\n            element.off('keyup', $tooltip.$onFocusKeyUp);\r\n          }\r\n        }\r\n\r\n        var _autoCloseEventsBinded = false;\r\n        function bindAutoCloseEvents () {\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // Stop propagation when clicking inside tooltip\r\n            tipElement.on('click', stopEventPropagation);\r\n\r\n            // Hide when clicking outside tooltip\r\n            $body.on('click', $tooltip.hide);\r\n\r\n            _autoCloseEventsBinded = true;\r\n          }, 0, false);\r\n        }\r\n\r\n        function unbindAutoCloseEvents () {\r\n          if (_autoCloseEventsBinded) {\r\n            tipElement.off('click', stopEventPropagation);\r\n            $body.off('click', $tooltip.hide);\r\n            _autoCloseEventsBinded = false;\r\n          }\r\n        }\r\n\r\n        function stopEventPropagation (event) {\r\n          event.stopPropagation();\r\n        }\r\n\r\n        // Private methods\r\n\r\n        function getPosition ($element) {\r\n          $element = $element || (options.target || element);\r\n\r\n          var el = $element[0];\r\n          var isBody = el.tagName === 'BODY';\r\n\r\n          var elRect = el.getBoundingClientRect();\r\n          var rect = {};\r\n\r\n          // IE8 has issues with angular.extend and using elRect directly.\r\n          // By coping the values of elRect into a new object, we can continue to use extend\r\n          /* eslint-disable guard-for-in */\r\n          for (var p in elRect) { // eslint-disable-line\r\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\r\n            rect[p] = elRect[p];\r\n          }\r\n          /* eslint-enable guard-for-in */\r\n\r\n          if (rect.width === null) {\r\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\r\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\r\n          }\r\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\r\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\r\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\r\n\r\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\r\n        }\r\n\r\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\r\n          var offset;\r\n          var split = placement.split('-');\r\n\r\n          switch (split[0]) {\r\n            case 'right':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left + position.width\r\n              };\r\n              break;\r\n            case 'bottom':\r\n              offset = {\r\n                top: position.top + position.height,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n            case 'left':\r\n              offset = {\r\n                top: position.top + position.height / 2 - actualHeight / 2,\r\n                left: position.left - actualWidth\r\n              };\r\n              break;\r\n            default:\r\n              offset = {\r\n                top: position.top - actualHeight,\r\n                left: position.left + position.width / 2 - actualWidth / 2\r\n              };\r\n              break;\r\n          }\r\n\r\n          if (!split[1]) {\r\n            return offset;\r\n          }\r\n\r\n          // Add support for corners @todo css\r\n          if (split[0] === 'top' || split[0] === 'bottom') {\r\n            switch (split[1]) {\r\n              case 'left':\r\n                offset.left = position.left;\r\n                break;\r\n              case 'right':\r\n                offset.left = position.left + position.width - actualWidth;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          } else if (split[0] === 'left' || split[0] === 'right') {\r\n            switch (split[1]) {\r\n              case 'top':\r\n                offset.top = position.top - actualHeight + position.height;\r\n                break;\r\n              case 'bottom':\r\n                offset.top = position.top;\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          }\r\n\r\n          return offset;\r\n        }\r\n\r\n        function applyPlacement (offset, placement) {\r\n          var tip = tipElement[0];\r\n          var width = tip.offsetWidth;\r\n          var height = tip.offsetHeight;\r\n\r\n          // manually read margins because getBoundingClientRect includes difference\r\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\r\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\r\n\r\n          // we must check for NaN for ie 8/9\r\n          if (isNaN(marginTop)) marginTop = 0;\r\n          if (isNaN(marginLeft)) marginLeft = 0;\r\n\r\n          offset.top = offset.top + marginTop;\r\n          offset.left = offset.left + marginLeft;\r\n\r\n          // dimensions setOffset doesn't round pixel values\r\n          // so we use setOffset directly with our own function\r\n          dimensions.setOffset(tip, angular.extend({\r\n            using: function (props) {\r\n              tipElement.css({\r\n                top: Math.round(props.top) + 'px',\r\n                left: Math.round(props.left) + 'px',\r\n                right: ''\r\n              });\r\n            }\r\n          }, offset), 0);\r\n\r\n          // check to see if placing tip in new offset caused the tip to resize itself\r\n          var actualWidth = tip.offsetWidth;\r\n          var actualHeight = tip.offsetHeight;\r\n\r\n          if (placement === 'top' && actualHeight !== height) {\r\n            offset.top = offset.top + height - actualHeight;\r\n          }\r\n\r\n          // If it's an exotic placement, exit now instead of\r\n          // applying a delta and changing the arrow\r\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\r\n\r\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\r\n\r\n          if (delta.left) {\r\n            offset.left += delta.left;\r\n          } else {\r\n            offset.top += delta.top;\r\n          }\r\n\r\n          dimensions.setOffset(tip, offset);\r\n\r\n          if (/top|right|bottom|left/.test(placement)) {\r\n            var isVertical = /top|bottom/.test(placement);\r\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\r\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\r\n\r\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\r\n          }\r\n        }\r\n\r\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\r\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\r\n          var delta = {top: 0, left: 0};\r\n          if (!$tooltip.$viewport) return delta;\r\n\r\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\r\n          var viewportDimensions = getPosition($tooltip.$viewport);\r\n\r\n          if (/right|left/.test(placement)) {\r\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\r\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\r\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\r\n              delta.top = viewportDimensions.top - topEdgeOffset;\r\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\r\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\r\n            }\r\n          } else {\r\n            var leftEdgeOffset = position.left - viewportPadding;\r\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\r\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\r\n              delta.left = viewportDimensions.left - leftEdgeOffset;\r\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\r\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\r\n            }\r\n          }\r\n\r\n          return delta;\r\n        }\r\n\r\n        function replaceArrow (delta, dimension, isHorizontal) {\r\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\r\n\r\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\r\n                .css(isHorizontal ? 'top' : 'left', '');\r\n        }\r\n\r\n        function destroyTipElement () {\r\n          // Cancel pending callbacks\r\n          clearTimeout(timeout);\r\n\r\n          if ($tooltip.$isShown && tipElement !== null) {\r\n            if (options.autoClose) {\r\n              unbindAutoCloseEvents();\r\n            }\r\n\r\n            if (options.keyboard) {\r\n              unbindKeyboardEvents();\r\n            }\r\n          }\r\n\r\n          if (tipScope) {\r\n            tipScope.$destroy();\r\n            tipScope = null;\r\n          }\r\n\r\n          if (tipElement) {\r\n            tipElement.remove();\r\n            tipElement = $tooltip.$element = null;\r\n          }\r\n        }\r\n\r\n        return $tooltip;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return TooltipFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        var tooltip;\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // should not parse target attribute (anchor tag), only data-target #1454\r\n        var dataTarget = element.attr('data-target');\r\n        if (angular.isDefined(dataTarget)) {\r\n          if (falseValueRegExp.test(dataTarget)) {\r\n            options.target = false;\r\n          } else {\r\n            options.target = dataTarget;\r\n          }\r\n        }\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Observe scope attributes for change\r\n        attr.$observe('title', function (newValue) {\r\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\r\n            var oldValue = scope.title;\r\n            scope.title = $sce.trustAsHtml(newValue);\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        attr.$observe('disabled', function (newValue) {\r\n          if (newValue && tooltip.$isShown) {\r\n            tooltip.hide();\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsTooltip) {\r\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.title = newValue;\r\n            }\r\n            if (angular.isDefined(oldValue)) {\r\n              $$rAF(function () {\r\n                if (tooltip) tooltip.$applyPlacement();\r\n              });\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\r\n            if (newValue === true) {\r\n              tooltip.show();\r\n            } else {\r\n              tooltip.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Enabled binding support\r\n        if (attr.bsEnabled) {\r\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\r\n            if (newValue === false) {\r\n              tooltip.setEnabled(false);\r\n            } else {\r\n              tooltip.setEnabled(true);\r\n            }\r\n          });\r\n        }\r\n\r\n        // Viewport support\r\n        if (attr.viewport) {\r\n          scope.$watch(attr.viewport, function (newValue) {\r\n            if (!tooltip || !angular.isDefined(newValue)) return;\r\n            tooltip.setViewport(newValue);\r\n          });\r\n        }\r\n\r\n        // Initialize popover\r\n        tooltip = $tooltip(element, options);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (tooltip) tooltip.destroy();\r\n          options = null;\r\n          tooltip = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\r\n\r\n  .provider('$timepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      defaultDate: 'auto',\r\n      // uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'timepicker',\r\n      prefixClass: 'timepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'timepicker/timepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: true,\r\n      timeType: 'date',\r\n      timeFormat: 'shortTime',\r\n      timezone: null,\r\n      modelTimeFormat: null,\r\n      autoclose: false,\r\n      minTime: -Infinity,\r\n      maxTime: +Infinity,\r\n      length: 5,\r\n      hourStep: 1,\r\n      minuteStep: 5,\r\n      secondStep: 5,\r\n      roundDisplay: false,\r\n      iconUp: 'glyphicon glyphicon-chevron-up',\r\n      iconDown: 'glyphicon glyphicon-chevron-down',\r\n      arrowBehavior: 'pager'\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) {\r\n        defaults.lang = $dateFormatter.getDefaultLocale();\r\n      }\r\n\r\n      function timepickerFactory (element, controller, config) {\r\n\r\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $timepicker.$options;\r\n        var scope = $timepicker.$scope;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        function floorMinutes (time) {\r\n          // coeff used to floor current time to nearest minuteStep interval\r\n          var coeff = 1000 * 60 * options.minuteStep;\r\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\r\n        }\r\n\r\n        // View vars\r\n\r\n        var selectedIndex = 0;\r\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\r\n        var startDate = controller.$dateValue || defaultDate;\r\n        var viewDate = {\r\n          hour: startDate.getHours(),\r\n          meridian: startDate.getHours() < 12,\r\n          minute: startDate.getMinutes(),\r\n          second: startDate.getSeconds(),\r\n          millisecond: startDate.getMilliseconds()\r\n        };\r\n\r\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\r\n\r\n        var hoursFormat = $dateFormatter.hoursFormat(format);\r\n        var timeSeparator = $dateFormatter.timeSeparator(format);\r\n        var minutesFormat = $dateFormatter.minutesFormat(format);\r\n        var secondsFormat = $dateFormatter.secondsFormat(format);\r\n        var showSeconds = $dateFormatter.showSeconds(format);\r\n        var showAM = $dateFormatter.showAM(format);\r\n\r\n        scope.$iconUp = options.iconUp;\r\n        scope.$iconDown = options.iconDown;\r\n\r\n        // Scope methods\r\n\r\n        scope.$select = function (date, index) {\r\n          $timepicker.select(date, index);\r\n        };\r\n        scope.$moveIndex = function (value, index) {\r\n          $timepicker.$moveIndex(value, index);\r\n        };\r\n        scope.$switchMeridian = function (date) {\r\n          $timepicker.switchMeridian(date);\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $timepicker.update = function (date) {\r\n          // console.warn('$timepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $timepicker.$date = date;\r\n            angular.extend(viewDate, {\r\n              hour: date.getHours(),\r\n              minute: date.getMinutes(),\r\n              second: date.getSeconds(),\r\n              millisecond: date.getMilliseconds()\r\n            });\r\n            $timepicker.$build();\r\n          } else if (!$timepicker.$isBuilt) {\r\n            $timepicker.$build();\r\n          }\r\n        };\r\n\r\n        $timepicker.select = function (date, index, keep) {\r\n          // console.warn('$timepicker.select', date, scope.$mode);\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\r\n          }\r\n\r\n          if (!angular.isDate(date)) date = new Date(date);\r\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\r\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\r\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n          if (options.autoclose && !keep) {\r\n            $timeout(function () {\r\n              $timepicker.hide(true);\r\n            });\r\n          }\r\n        };\r\n\r\n        $timepicker.switchMeridian = function (date) {\r\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\r\n            return;\r\n          }\r\n          var hours = (date || controller.$dateValue).getHours();\r\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\r\n          controller.$setViewValue(angular.copy(controller.$dateValue));\r\n          controller.$render();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $timepicker.$build = function () {\r\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\r\n          var i;\r\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\r\n          var hours = [];\r\n          var hour;\r\n          for (i = 0; i < options.length; i++) {\r\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\r\n            hours.push({\r\n              date: hour,\r\n              label: formatDate(hour, hoursFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\r\n              disabled: $timepicker.$isDisabled(hour, 0)\r\n            });\r\n          }\r\n          var minutes = [];\r\n          var minute;\r\n          for (i = 0; i < options.length; i++) {\r\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\r\n            minutes.push({\r\n              date: minute,\r\n              label: formatDate(minute, minutesFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\r\n              disabled: $timepicker.$isDisabled(minute, 1)\r\n            });\r\n          }\r\n          var seconds = [];\r\n          var second;\r\n          for (i = 0; i < options.length; i++) {\r\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\r\n            seconds.push({\r\n              date: second,\r\n              label: formatDate(second, secondsFormat),\r\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\r\n              disabled: $timepicker.$isDisabled(second, 2)\r\n            });\r\n          }\r\n\r\n          var rows = [];\r\n          for (i = 0; i < options.length; i++) {\r\n            if (showSeconds) {\r\n              rows.push([hours[i], minutes[i], seconds[i]]);\r\n            } else {\r\n              rows.push([hours[i], minutes[i]]);\r\n            }\r\n          }\r\n          scope.rows = rows;\r\n          scope.showSeconds = showSeconds;\r\n          scope.showAM = showAM;\r\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\r\n          scope.timeSeparator = timeSeparator;\r\n          $timepicker.$isBuilt = true;\r\n        };\r\n\r\n        $timepicker.$isSelected = function (date, index) {\r\n          if (!$timepicker.$date) return false;\r\n          else if (index === 0) {\r\n            return date.getHours() === $timepicker.$date.getHours();\r\n          } else if (index === 1) {\r\n            return date.getMinutes() === $timepicker.$date.getMinutes();\r\n          } else if (index === 2) {\r\n            return date.getSeconds() === $timepicker.$date.getSeconds();\r\n          }\r\n        };\r\n\r\n        $timepicker.$isDisabled = function (date, index) {\r\n          var selectedTime;\r\n          if (index === 0) {\r\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\r\n          } else if (index === 1) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\r\n          } else if (index === 2) {\r\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\r\n          }\r\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\r\n        };\r\n\r\n        scope.$arrowAction = function (value, index) {\r\n          if (options.arrowBehavior === 'picker') {\r\n            $timepicker.$setTimeByStep(value, index);\r\n          } else {\r\n            $timepicker.$moveIndex(value, index);\r\n          }\r\n        };\r\n\r\n        $timepicker.$setTimeByStep = function (value, index) {\r\n          var newDate = new Date($timepicker.$date || startDate);\r\n          var hours = newDate.getHours();\r\n          var minutes = newDate.getMinutes();\r\n          var seconds = newDate.getSeconds();\r\n          if (index === 0) {\r\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\r\n          } else if (index === 1) {\r\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\r\n          } else if (index === 2) {\r\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\r\n          }\r\n          $timepicker.select(newDate, index, true);\r\n        };\r\n\r\n        $timepicker.$moveIndex = function (value, index) {\r\n          var targetDate;\r\n          if (index === 0) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\r\n            angular.extend(viewDate, {\r\n              hour: targetDate.getHours()\r\n            });\r\n          } else if (index === 1) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\r\n            angular.extend(viewDate, {\r\n              minute: targetDate.getMinutes()\r\n            });\r\n          } else if (index === 2) {\r\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\r\n            angular.extend(viewDate, {\r\n              second: targetDate.getSeconds()\r\n            });\r\n          }\r\n          $timepicker.$build();\r\n        };\r\n\r\n        $timepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        $timepicker.$onKeyDown = function (evt) {\r\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          // Close on enter\r\n          if (evt.keyCode === 13) {\r\n            $timepicker.hide(true);\r\n            return;\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          var newDate = new Date($timepicker.$date);\r\n          var hours = newDate.getHours();\r\n          var hoursLength = formatDate(newDate, hoursFormat).length;\r\n          var minutes = newDate.getMinutes();\r\n          var minutesLength = formatDate(newDate, minutesFormat).length;\r\n          var seconds = newDate.getSeconds();\r\n          var secondsLength = formatDate(newDate, secondsFormat).length;\r\n          var sepLength = 1;\r\n          var lateralMove = /(37|39)/.test(evt.keyCode);\r\n          var count = 2 + showSeconds * 1 + showAM * 1;\r\n\r\n          // Navigate indexes (left, right)\r\n          if (lateralMove) {\r\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\r\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\r\n          }\r\n\r\n          // Update values (up, down)\r\n          var selectRange = [0, hoursLength];\r\n          var incr = 0;\r\n          if (evt.keyCode === 38) incr = -1;\r\n          if (evt.keyCode === 40) incr = +1;\r\n          var isSeconds = selectedIndex === 2 && showSeconds;\r\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\r\n          if (selectedIndex === 0) {\r\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\r\n            // re-calculate hours length because we have changed hours value\r\n            hoursLength = formatDate(newDate, hoursFormat).length;\r\n            selectRange = [0, hoursLength];\r\n          } else if (selectedIndex === 1) {\r\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\r\n            // re-calculate minutes length because we have changes minutes value\r\n            minutesLength = formatDate(newDate, minutesFormat).length;\r\n            selectRange = [hoursLength + sepLength, minutesLength];\r\n          } else if (isSeconds) {\r\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\r\n            // re-calculate seconds length because we have changes seconds value\r\n            secondsLength = formatDate(newDate, secondsFormat).length;\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\r\n          } else if (isMeridian) {\r\n            if (!lateralMove) $timepicker.switchMeridian();\r\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\r\n          }\r\n          $timepicker.select(newDate, selectedIndex, true);\r\n          createSelection(selectRange[0], selectRange[1]);\r\n          parentScope.$digest();\r\n        };\r\n\r\n        // Private\r\n\r\n        function createSelection (start, length) {\r\n          var end = start + length;\r\n          if (element[0].createTextRange) {\r\n            var selRange = element[0].createTextRange();\r\n            selRange.collapse(true);\r\n            selRange.moveStart('character', start);\r\n            selRange.moveEnd('character', end);\r\n            selRange.select();\r\n          } else if (element[0].setSelectionRange) {\r\n            element[0].setSelectionRange(start, end);\r\n          } else if (angular.isUndefined(element[0].selectionStart)) {\r\n            element[0].selectionStart = start;\r\n            element[0].selectionEnd = end;\r\n          }\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        var _init = $timepicker.init;\r\n        $timepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'time');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        var _destroy = $timepicker.destroy;\r\n        $timepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        var _show = $timepicker.show;\r\n        $timepicker.show = function () {\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n          _show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n            if (options.keyboard) {\r\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $timepicker.hide;\r\n        $timepicker.hide = function (blur) {\r\n          if (!$timepicker.$isShown) return;\r\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\r\n          if (options.keyboard) {\r\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\r\n          }\r\n          _hide(blur);\r\n        };\r\n\r\n        return $timepicker;\r\n\r\n      }\r\n\r\n      timepickerFactory.defaults = defaults;\r\n      return timepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\r\n\r\n    var defaults = $timepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize timepicker\r\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\r\n        var timepicker = $timepicker(element, controller, options);\r\n        options = timepicker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format, timezone) {\r\n          return $dateFormatter.formatDate(date, format, lang, timezone);\r\n        };\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!timepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\r\n            if (newValue === true) {\r\n              timepicker.show();\r\n            } else {\r\n              timepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Initialize parser\r\n        var dateParser = $dateParser({\r\n          format: options.timeFormat,\r\n          lang: lang\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minTime', 'maxTime'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\r\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\r\n              validateAgainstMinMaxTime(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\r\n          timepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        function validateAgainstMinMaxTime (parsedTime) {\r\n          if (!angular.isDate(parsedTime)) return;\r\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\r\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (!isValid) {\r\n            return;\r\n          }\r\n          controller.$dateValue = parsedTime;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            controller.$setValidity('date', true);\r\n            return null;\r\n          }\r\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // Return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return undefined;\r\n          }\r\n          validateAgainstMinMaxTime(parsedTime);\r\n\r\n          if (options.timeType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\r\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.timeType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.timeType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.timeType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.timeType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\r\n          } else if (options.timeType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\r\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          return getTimeFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getTimeFormattedString());\r\n        };\r\n\r\n        function getTimeFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (timepicker) timepicker.destroy();\r\n          options = null;\r\n          timepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.tab', [])\r\n\r\n  .provider('$tab', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      template: 'tab/tab.tpl.html',\r\n      navClass: 'nav-tabs',\r\n      activeClass: 'active',\r\n      isVertical: false\r\n    };\r\n    var _tabsHash = {};\r\n\r\n    var _addTabControl = function (key, control) {\r\n      if (!_tabsHash[key]) _tabsHash[key] = control;\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['isVertical'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\r\n      });\r\n\r\n      // Publish options on scope\r\n      $scope.$navClass = self.$options.navClass;\r\n      $scope.$activeClass = self.$options.activeClass;\r\n\r\n      $scope.$onClick = function $onClick (evt, pane, index) {\r\n        if (!pane.disabled) {\r\n          self.$setActive(pane.name || index);\r\n        }\r\n\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n      };\r\n\r\n      function navigatePane (index, toLeft) {\r\n        var newIndex = 0;\r\n\r\n        if (toLeft) {\r\n          // Moving to the left\r\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\r\n        } else {\r\n          // Moving to the right\r\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\r\n        }\r\n\r\n        if (self.$panes[newIndex].disabled) {\r\n          navigatePane(newIndex, toLeft);\r\n        } else {\r\n          self.$setActive(self.$panes[newIndex].name || newIndex);\r\n        }\r\n      }\r\n\r\n      self.$panes = $scope.$panes = [];\r\n\r\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\r\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\r\n      // activePaneChangeListeners to make more sense.\r\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\r\n\r\n      self.$push = function (pane) {\r\n        if (angular.isUndefined(self.$panes.$active)) {\r\n          $scope.$setActive(pane.name || 0);\r\n        }\r\n\r\n        self.$panes.push(pane);\r\n\r\n        self.$panes.forEach(function (tabPane, index) {\r\n          // Set an id value for the pane so that it can be used in the template\r\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\r\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\r\n        });\r\n      };\r\n\r\n      self.$remove = function (pane) {\r\n        var index = self.$panes.indexOf(pane);\r\n        var active = self.$panes.$active;\r\n        var activeIndex;\r\n        if (angular.isString(active)) {\r\n          activeIndex = self.$panes.map(function (pane) {\r\n            return pane.name;\r\n          }).indexOf(active);\r\n        } else {\r\n          activeIndex = self.$panes.$active;\r\n        }\r\n\r\n        // remove pane from $panes array\r\n        self.$panes.splice(index, 1);\r\n\r\n        if (index < activeIndex) {\r\n          // we removed a pane before the active pane, so we need to\r\n          // decrement the active pane index\r\n          activeIndex--;\r\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\r\n          // we remove the active pane and it was the one at the end,\r\n          // so select the previous one\r\n          activeIndex--;\r\n        }\r\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\r\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\r\n        } else {\r\n          self.$setActive();\r\n        }\r\n      };\r\n\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        self.$panes.$active = value;\r\n        self.$activePaneChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\r\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\r\n      };\r\n\r\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\r\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\r\n          // If space or enter was pressed\r\n          self.$setActive(name);\r\n\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n\r\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\r\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\r\n          // If the left of right arrow key was pressed.\r\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\r\n        }\r\n      };\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $tab = {};\r\n      $tab.defaults = defaults;\r\n      $tab.controller = controller;\r\n      $tab.addTabControl = _addTabControl;\r\n      $tab.tabsHash = _tabsHash;\r\n      return $tab;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\r\n\r\n    var defaults = $tab.defaults;\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsTabs'],\r\n      transclude: true,\r\n      scope: true,\r\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\r\n      templateUrl: function (element, attr) {\r\n        return attr.template || defaults.template;\r\n      },\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\r\n        // tabs are available in the tab component\r\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\r\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\r\n        }\r\n\r\n        // 'ngModel' does interfere with form validation\r\n        // and status, use `bsActivePane` instead to avoid it\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            bsTabsCtrl.$setActive(modelValue);\r\n            return modelValue;\r\n          });\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          $timeout(function () {\r\n            // get li elements\r\n            var liElements = element.find('li');\r\n            for (var i = 0; i < liElements.length; i++) {\r\n              var iElement = angular.element(liElements[i]);\r\n              if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\r\n                // if li is active, set focus to it.\r\n                iElement.find('a')[0].focus();\r\n              }\r\n            }\r\n            // delay, for the class (.active) change to reflect in DOM.\r\n          }, 100);\r\n        });\r\n\r\n        if (attrs.bsActivePane) {\r\n          // adapted from angularjs ngModelController bindings\r\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\r\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\r\n\r\n          // Update bsActivePane value with change\r\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\r\n          });\r\n\r\n          // watch bsActivePane for value changes\r\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\r\n            bsTabsCtrl.$setActive(newValue);\r\n          }, true);\r\n        }\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsPane', function ($window, $animate, $sce) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsTabs'],\r\n      scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsTabsCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('tab-pane');\r\n\r\n        // Set up the assistive attributes\r\n        element.attr('role', 'tabpanel');\r\n\r\n        // Observe title attribute for change\r\n        attrs.$observe('title', function (newValue, oldValue) {\r\n          scope.title = $sce.trustAsHtml(newValue);\r\n        });\r\n\r\n        // Save tab name into scope\r\n        scope.name = attrs.name;\r\n        // Save tab id into scope\r\n        scope.id = attrs.id;\r\n\r\n        scope.name = scope.name || scope.id;\r\n\r\n        // Add animation class\r\n        if (bsTabsCtrl.$options.animation) {\r\n          element.addClass(bsTabsCtrl.$options.animation);\r\n        }\r\n\r\n        attrs.$observe('disabled', function (newValue, oldValue) {\r\n          scope.disabled = scope.$eval(newValue);\r\n        });\r\n\r\n        // Push pane to parent bsTabs controller\r\n        bsTabsCtrl.$push(scope);\r\n\r\n        // Once the push has occured when can then update the element with some properties.\r\n        // Update the aria-labelledby attribute\r\n\t\t// SS-11127 - removed aria-describedby from tab and tab-panel and utilized aria-labeledby on the tab-panel using the ID of the tab and not the ID of the tab link\r\n        if (scope.$describedBy !== undefined) {\r\n          element.attr('aria-labelledby', scope.$describedBy);\r\n        }\r\n\r\n        // remove pane from tab controller when pane is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsTabsCtrl.$remove(scope);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsTabsCtrl.$panes.indexOf(scope);\r\n\r\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('focusOn', function () {\r\n    return {\r\n      restrict: 'A',\r\n      link: function (scope, elem, attr) {\r\n        scope.$watch(attr.focusOn, function (newValue, oldValue) {\r\n          if (newValue !== oldValue && newValue) {\r\n            elem[0].focus();\r\n          }\r\n        });\r\n      }\r\n    };\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$select', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'select',\r\n      prefixEvent: '$select',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'select/select.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      multiple: false,\r\n      allNoneButtons: false,\r\n      sort: true,\r\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\r\n      placeholder: 'Choose among the following...',\r\n      allText: 'All',\r\n      noneText: 'None',\r\n      maxLength: 3,\r\n      maxLengthHtml: 'selected',\r\n      iconCheckmark: 'glyphicon glyphicon-ok',\r\n      toggle: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\r\n\r\n      // var bodyEl = angular.element($window.document.body);\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n\r\n      function SelectFactory (element, controller, config) {\r\n\r\n        var $select = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $select = $tooltip(element, options);\r\n        var scope = $select.$scope;\r\n\r\n        scope.$matches = [];\r\n        if (options.multiple) {\r\n          scope.$activeIndex = [];\r\n        } else {\r\n          scope.$activeIndex = -1;\r\n        }\r\n        scope.$isMultiple = options.multiple;\r\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\r\n        scope.$iconCheckmark = options.iconCheckmark;\r\n        scope.$allText = options.allText;\r\n        scope.$noneText = options.noneText;\r\n\r\n        scope.$activate = function (index) {\r\n          scope.$$postDigest(function () {\r\n            $select.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function (index, evt) {\r\n          scope.$$postDigest(function () {\r\n            $select.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function () {\r\n          return $select.$isVisible();\r\n        };\r\n\r\n        scope.$isActive = function (index) {\r\n          return $select.$isActive(index);\r\n        };\r\n\r\n        scope.$selectAll = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (!scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        scope.$selectNone = function () {\r\n          for (var i = 0; i < scope.$matches.length; i++) {\r\n            if (scope.$isActive(i)) {\r\n              scope.$select(i);\r\n            }\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $select.update = function (matches) {\r\n          scope.$matches = matches;\r\n          $select.$updateActiveIndex();\r\n        };\r\n\r\n        $select.activate = function (index) {\r\n          if (options.multiple) {\r\n            if ($select.$isActive(index)) {\r\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\r\n            } else {\r\n              scope.$activeIndex.push(index);\r\n            }\r\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\r\n          } else {\r\n            scope.$activeIndex = index;\r\n          }\r\n          return scope.$activeIndex;\r\n        };\r\n\r\n        $select.select = function (index) {\r\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\r\n          var value = scope.$matches[index].value;\r\n          scope.$apply(function () {\r\n            $select.activate(index);\r\n            if (options.multiple) {\r\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\r\n                if (angular.isUndefined(scope.$matches[index])) {\r\n                  return null;\r\n                }\r\n                return scope.$matches[index].value;\r\n              }));\r\n            } else {\r\n              if (options.toggle) {\r\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\r\n              } else {\r\n                controller.$setViewValue(value);\r\n              }\r\n              // Hide if single select\r\n              $select.hide();\r\n            }\r\n          });\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\r\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\r\n            options.onSelect(value, index, $select);\r\n          }\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $select.$updateActiveIndex = function () {\r\n          if (options.multiple) {\r\n            if (angular.isArray(controller.$modelValue)) {\r\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\r\n                return $select.$getIndex(value);\r\n              });\r\n            } else {\r\n              scope.$activeIndex = [];\r\n            }\r\n          } else {\r\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\r\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\r\n            } else {\r\n              scope.$activeIndex = -1;\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$isVisible = function () {\r\n          if (!options.minLength || !controller) {\r\n            return scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $select.$isActive = function (index) {\r\n          if (options.multiple) {\r\n            return scope.$activeIndex.indexOf(index) !== -1;\r\n          }\r\n          return scope.$activeIndex === index;\r\n        };\r\n\r\n        $select.$getIndex = function (value) {\r\n          var index;\r\n          for (index = scope.$matches.length; index--;) {\r\n            if (angular.equals(scope.$matches[index].value, value)) break;\r\n          }\r\n          return index;\r\n        };\r\n\r\n        $select.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            var anchor;\r\n\r\n            if (evt.target.nodeName !== 'A') {\r\n              var anchorCandidate = targetEl.parent();\r\n              while (!anchor && anchorCandidate.length > 0) {\r\n                if (anchorCandidate[0].nodeName === 'A') {\r\n                  anchor = anchorCandidate;\r\n                }\r\n                anchorCandidate = anchorCandidate.parent();\r\n              }\r\n            }\r\n\r\n            if (anchor) {\r\n              angular.element(anchor).triggerHandler('click');\r\n            } else {\r\n              targetEl.triggerHandler('click');\r\n            }\r\n          }\r\n        };\r\n\r\n        $select.$onKeyDown = function (evt) {\r\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\r\n          // Let tab propagate\r\n          if (evt.keyCode !== 9) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // release focus on tab\r\n          if (options.multiple && evt.keyCode === 9) {\r\n            return $select.hide();\r\n          }\r\n\r\n          // Select with enter\r\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\r\n            return $select.select(scope.$activeIndex);\r\n          }\r\n\r\n          if (!options.multiple) {\r\n            // Navigate with keyboard\r\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\r\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n            scope.$digest();\r\n          }\r\n        };\r\n\r\n        $select.$isIE = function () {\r\n          var ua = $window.navigator.userAgent;\r\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\r\n        };\r\n\r\n        $select.$selectScrollFix = function (e) {\r\n          if ($document[0].activeElement.tagName === 'UL') {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            e.target.focus();\r\n          }\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var _show = $select.show;\r\n        $select.show = function () {\r\n          _show();\r\n          if (options.multiple) {\r\n            $select.$element.addClass('select-multiple');\r\n          }\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n            if (options.keyboard) {\r\n              element.on('keydown', $select.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var _hide = $select.hide;\r\n        $select.hide = function () {\r\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\r\n            scope.$activeIndex = -1;\r\n          }\r\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\r\n          if (options.keyboard) {\r\n            element.off('keydown', $select.$onKeyDown);\r\n          }\r\n          _hide(true);\r\n        };\r\n\r\n        return $select;\r\n\r\n      }\r\n\r\n      SelectFactory.defaults = defaults;\r\n      return SelectFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\r\n\r\n    var defaults = $select.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, placeholder: defaults.placeholder};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show, hide and select events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\r\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\r\n        var dataMultiple = element.attr('data-multiple');\r\n        if (angular.isDefined(dataMultiple)) {\r\n          if (falseValueRegExp.test(dataMultiple)) {\r\n            options.multiple = false;\r\n          } else {\r\n            options.multiple = dataMultiple;\r\n          }\r\n        }\r\n\r\n        // Add support for select markup\r\n        if (element[0].nodeName.toLowerCase() === 'select') {\r\n          var inputEl = element;\r\n          inputEl.css('display', 'none');\r\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\r\n          inputEl.after(element);\r\n        }\r\n\r\n        // Build proper bsOptions\r\n        var parsedOptions = $parseOptions(attr.bsOptions);\r\n\r\n        // Initialize select\r\n        var select = $select(element, controller, options);\r\n\r\n        if (select.$isIE()) {\r\n          element[0].addEventListener('blur', select.$selectScrollFix);\r\n        }\r\n\r\n        // Watch bsOptions values before filtering for changes\r\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\r\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function (values) {\r\n            select.update(values);\r\n            controller.$render();\r\n          });\r\n        }, true);\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\r\n          select.$updateActiveIndex();\r\n          controller.$render();\r\n        }, true);\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var selected;\r\n          var index;\r\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\r\n            selected = controller.$modelValue.map(function (value) {\r\n              index = select.$getIndex(value);\r\n              return index !== -1 ? select.$scope.$matches[index].label : false;\r\n            }).filter(angular.isDefined);\r\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\r\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\r\n            } else {\r\n              selected = selected.join(', ');\r\n            }\r\n          } else {\r\n            index = select.$getIndex(controller.$modelValue);\r\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\r\n          }\r\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\r\n        };\r\n\r\n        if (options.multiple) {\r\n          controller.$isEmpty = function (value) {\r\n            return !value || value.length === 0;\r\n          };\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (select) select.destroy();\r\n          options = null;\r\n          select = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$scrollspy', function () {\r\n\r\n    // Pool of registered spies\r\n    var spies = this.$$spies = {};\r\n\r\n    var defaults = this.defaults = {\r\n      debounce: 150,\r\n      throttle: 100,\r\n      offset: 100\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\r\n\r\n      var windowEl = angular.element($window);\r\n      var docEl = angular.element($document.prop('documentElement'));\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      // Helper functions\r\n\r\n      function nodeName (element, name) {\r\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\r\n      }\r\n\r\n      function ScrollSpyFactory (config) {\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        if (!options.element) options.element = bodyEl;\r\n        var isWindowSpy = nodeName(options.element, 'body');\r\n        var scrollEl = isWindowSpy ? windowEl : options.element;\r\n        var scrollId = isWindowSpy ? 'window' : options.id;\r\n\r\n        // Use existing spy\r\n        if (spies[scrollId]) {\r\n          spies[scrollId].$$count++;\r\n          return spies[scrollId];\r\n        }\r\n\r\n        var $scrollspy = {};\r\n\r\n        // Private vars\r\n        var unbindViewContentLoaded;\r\n        var unbindIncludeContentLoaded;\r\n        var trackedElements = $scrollspy.$trackedElements = [];\r\n        var sortedElements = [];\r\n        var activeTarget;\r\n        var debouncedCheckPosition;\r\n        var throttledCheckPosition;\r\n        var debouncedCheckOffsets;\r\n        /* eslint-disable no-unused-vars */\r\n        var viewportHeight;\r\n        /* eslint-enable no-unused-vars */\r\n        var scrollTop;\r\n\r\n        $scrollspy.init = function () {\r\n\r\n          // Setup internal ref counter\r\n          this.$$count = 1;\r\n\r\n          // Bind events\r\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\r\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\r\n          scrollEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', debouncedCheckPosition);\r\n          scrollEl.on('scroll', throttledCheckPosition);\r\n\r\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\r\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\r\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\r\n          debouncedCheckOffsets();\r\n\r\n          // Register spy for reuse\r\n          if (scrollId) {\r\n            spies[scrollId] = $scrollspy;\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.destroy = function () {\r\n\r\n          // Check internal ref counter\r\n          this.$$count--;\r\n          if (this.$$count > 0) {\r\n            return;\r\n          }\r\n\r\n          // Unbind events\r\n          scrollEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', debouncedCheckPosition);\r\n          scrollEl.off('scroll', throttledCheckPosition);\r\n          unbindViewContentLoaded();\r\n          unbindIncludeContentLoaded();\r\n          if (scrollId) {\r\n            delete spies[scrollId];\r\n          }\r\n        };\r\n\r\n        $scrollspy.checkPosition = function () {\r\n\r\n          // Not ready yet\r\n          if (!sortedElements.length) return;\r\n\r\n          // Calculate the scroll position\r\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\r\n\r\n          // Calculate the viewport height for use by the components\r\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\r\n\r\n          // Activate first element if scroll is smaller\r\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\r\n            return $scrollspy.$activateElement(sortedElements[0]);\r\n          }\r\n\r\n          // Activate proper element\r\n          for (var i = sortedElements.length; i--;) {\r\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\r\n            if (activeTarget === sortedElements[i].target) continue;\r\n            if (scrollTop < sortedElements[i].offsetTop) continue;\r\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\r\n            return $scrollspy.$activateElement(sortedElements[i]);\r\n          }\r\n\r\n        };\r\n\r\n        $scrollspy.checkPositionWithEventLoop = function () {\r\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\r\n          // in this setTimeout call\r\n          setTimeout($scrollspy.checkPosition, 1);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $scrollspy.$activateElement = function (element) {\r\n          if (activeTarget) {\r\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\r\n            if (activeElement) {\r\n              activeElement.source.removeClass('active');\r\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\r\n                activeElement.source.parent().parent().removeClass('active');\r\n              }\r\n            }\r\n          }\r\n          activeTarget = element.target;\r\n          element.source.addClass('active');\r\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\r\n            element.source.parent().parent().addClass('active');\r\n          }\r\n        };\r\n\r\n        $scrollspy.$getTrackedElement = function (target) {\r\n          return trackedElements.filter(function (obj) {\r\n            return obj.target === target;\r\n          })[0];\r\n        };\r\n\r\n        // Track offsets behavior\r\n\r\n        $scrollspy.checkOffsets = function () {\r\n\r\n          angular.forEach(trackedElements, function (trackedElement) {\r\n            var targetElement = document.querySelector(trackedElement.target);\r\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\r\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\r\n          });\r\n\r\n          sortedElements = trackedElements\r\n          .filter(function (el) {\r\n            return el.offsetTop !== null;\r\n          })\r\n          .sort(function (a, b) {\r\n            return a.offsetTop - b.offsetTop;\r\n          });\r\n\r\n          debouncedCheckPosition();\r\n\r\n        };\r\n\r\n        $scrollspy.trackElement = function (target, source) {\r\n          trackedElements.push({target: target, source: source});\r\n        };\r\n\r\n        $scrollspy.untrackElement = function (target, source) {\r\n          var toDelete;\r\n          for (var i = trackedElements.length; i--;) {\r\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\r\n              toDelete = i;\r\n              break;\r\n            }\r\n          }\r\n          trackedElements.splice(toDelete, 1);\r\n        };\r\n\r\n        $scrollspy.activate = function (i) {\r\n          trackedElements[i].addClass('active');\r\n        };\r\n\r\n        // Initialize plugin\r\n\r\n        $scrollspy.init();\r\n        return $scrollspy;\r\n\r\n      }\r\n\r\n      return ScrollSpyFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      link: function postLink (scope, element, attr) {\r\n\r\n        var options = {scope: scope};\r\n        angular.forEach(['offset', 'target'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var scrollspy = $scrollspy(options);\r\n        scrollspy.trackElement(options.target, element);\r\n\r\n        scope.$on('$destroy', function () {\r\n          if (scrollspy) {\r\n            scrollspy.untrackElement(options.target, element);\r\n            scrollspy.destroy();\r\n          }\r\n          options = null;\r\n          scrollspy = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n\r\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      compile: function postLink (element, attr) {\r\n        var children = element[0].querySelectorAll('li > a[href]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.navbar', [])\r\n\r\n  .provider('$navbar', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      routeAttr: 'data-match-route',\r\n      strict: false\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsNavbar', function ($window, $location, $navbar) {\r\n\r\n    var defaults = $navbar.defaults;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = angular.copy(defaults);\r\n        angular.forEach(Object.keys(defaults), function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Watch for the $location\r\n        scope.$watch(function () {\r\n\r\n          return $location.path();\r\n\r\n        }, function (newValue, oldValue) {\r\n\r\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\r\n\r\n          angular.forEach(liElements, function (li) {\r\n\r\n            var liElement = angular.element(li);\r\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\r\n            if (options.strict) {\r\n              pattern = '^' + pattern + '$';\r\n            }\r\n            var regexp = new RegExp(pattern, 'i');\r\n\r\n            if (regexp.test(newValue)) {\r\n              liElement.addClass(options.activeClass);\r\n            } else {\r\n              liElement.removeClass(options.activeClass);\r\n            }\r\n\r\n          });\r\n\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\r\n\r\n  .provider('$modal', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      backdropAnimation: 'am-fade',\r\n      customClass: '',\r\n      prefixClass: 'modal',\r\n      prefixEvent: 'modal',\r\n      placement: 'top',\r\n      templateUrl: 'modal/modal.tpl.html',\r\n      template: '',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true,\r\n      size: null,\r\n      zIndex: null,\r\n      containerElement: null\r\n    };\r\n\r\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\r\n\r\n      var forEach = angular.forEach;\r\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\r\n      var bodyElement = angular.element($window.document.body);\r\n\r\n      var layoutHideElement = angular.element('#layoutContainer');\r\n\r\n      var backdropCount = 0;\r\n      var dialogBaseZindex = 1050;\r\n      var backdropBaseZindex = 1040;\r\n\r\n      var validSizes = {\r\n        lg: 'modal-lg',\r\n        sm: 'modal-sm'\r\n      };\r\n\r\n      function ModalFactory (config) {\r\n\r\n        var $modal = {};\r\n\r\n        // Common vars\r\n        var options = $modal.$options = angular.extend({}, defaults, config);\r\n\r\n        var promise = $modal.$promise = $bsCompiler.compile(options);\r\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\r\n\r\n        if (options.containerElement) {\r\n          layoutHideElement = angular.element(options.containerElement);\r\n        }\r\n        if (!options.element && !options.container) {\r\n          options.container = 'body';\r\n        }\r\n\r\n        if (options.zIndex) {\r\n          dialogBaseZindex = parseInt(options.zIndex, 10);\r\n          backdropBaseZindex = dialogBaseZindex - 10;\r\n        }\r\n\r\n        // Store $id to identify the triggering element in events\r\n        // give priority to options.id, otherwise, try to use\r\n        // element id if defined\r\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\r\n\r\n        $modal.returnFocus = function () {\r\n\r\n        };\r\n\r\n        // Support scope as string options\r\n        forEach(['title', 'content'], function (key) {\r\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\r\n        });\r\n\r\n        // Provide scope helpers\r\n        scope.$hide = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.hide();\r\n          });\r\n        };\r\n        scope.$show = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.show();\r\n          });\r\n        };\r\n        scope.$toggle = function () {\r\n          scope.$$postDigest(function () {\r\n            $modal.toggle();\r\n          });\r\n        };\r\n        // Publish isShown as a protected var on scope\r\n        $modal.$isShown = scope.$isShown = false;\r\n\r\n        // Fetch, compile then initialize modal\r\n        var compileData;\r\n        var modalElement;\r\n        var modalScope;\r\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\r\n        backdropElement.css({\r\n          position: 'fixed',\r\n          top: '0px',\r\n          left: '0px',\r\n          bottom: '0px',\r\n          right: '0px'\r\n        });\r\n        promise.then(function (data) {\r\n          compileData = data;\r\n          $modal.init();\r\n        });\r\n\r\n        $modal.init = function () {\r\n\r\n          // Options: show\r\n          if (options.show) {\r\n            scope.$$postDigest(function () {\r\n              $modal.show();\r\n            });\r\n          }\r\n\r\n        };\r\n\r\n        $modal.destroy = function () {\r\n\r\n          // Remove element\r\n          destroyModalElement();\r\n\r\n          // remove backdrop element\r\n          if (backdropElement) {\r\n            backdropElement.remove();\r\n            backdropElement = null;\r\n          }\r\n\r\n          // Destroy scope\r\n          scope.$destroy();\r\n        };\r\n\r\n        $modal.show = function () {\r\n          if ($modal.$isShown) return;\r\n\r\n          var parent;\r\n          var after;\r\n          if (angular.isElement(options.container)) {\r\n            parent = options.container;\r\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\r\n          } else {\r\n            if (options.container) {\r\n              parent = findElement(options.container);\r\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\r\n            } else {\r\n              parent = null;\r\n              after = options.element;\r\n            }\r\n          }\r\n\r\n          // destroy any existing modal elements\r\n          if (modalElement) destroyModalElement();\r\n\r\n          // create a new scope, so we can destroy it and all child scopes\r\n          // when destroying the modal element\r\n          modalScope = $modal.$scope.$new();\r\n          // Fetch a cloned element linked from template (noop callback is required)\r\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\r\n\r\n          if (options.backdrop) {\r\n            // set z-index\r\n            modalElement.css({\r\n              'z-index': dialogBaseZindex + (backdropCount * 20)\r\n            });\r\n            backdropElement.css({\r\n              'z-index': backdropBaseZindex + (backdropCount * 20)\r\n            });\r\n\r\n            // increment number of backdrops\r\n            backdropCount++;\r\n          }\r\n\r\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\r\n            options.onBeforeShow($modal);\r\n          }\r\n\r\n          // Set the initial positioning.\r\n          modalElement.css({\r\n            display: 'block'\r\n          }).addClass(options.placement);\r\n\r\n          // Options: customClass\r\n          if (options.customClass) {\r\n            modalElement.addClass(options.customClass);\r\n          }\r\n\r\n          // Options: size\r\n          if (options.size && validSizes[options.size]) {\r\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\r\n          }\r\n\r\n          // Options: animation\r\n          if (options.animation) {\r\n            if (options.backdrop) {\r\n              backdropElement.addClass(options.backdropAnimation);\r\n            }\r\n            modalElement.addClass(options.animation);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            $animate.enter(backdropElement, bodyElement, null);\r\n          }\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\r\n          } else {\r\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\r\n          }\r\n\r\n          $modal.$isShown = scope.$isShown = true;\r\n          safeDigest(scope);\r\n          // Focus once the enter-animation has started\r\n          // Weird PhantomJS bug hack\r\n          var el = modalElement[0];\r\n          requestAnimationFrame(function () {\r\n            el.focus();\r\n          });\r\n\r\n          bodyElement.addClass(options.prefixClass + '-open');\r\n\r\n          layoutHideElement.attr('aria-hidden', 'true');\r\n\r\n          if (options.animation) {\r\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n\r\n          // Bind events\r\n          bindBackdropEvents();\r\n          bindKeyboardEvents();\r\n        };\r\n\r\n        function enterAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.show', $modal);\r\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\r\n            options.onShow($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'false');\r\n          modalElement.attr('tabindex', '0');\r\n          modalElement.focus();\r\n          if (!modalElement.length || !angular.element(modalElement[0]).hasClass('modal')) {\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n            unbindKeyboardEvents();\r\n          }\r\n        }\r\n\r\n        $modal.hide = function () {\r\n          if (!$modal.$isShown) return;\r\n\r\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\r\n            return;\r\n          }\r\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\r\n            options.onBeforeHide($modal);\r\n          }\r\n\r\n          modalElement.attr('aria-hidden', 'true');\r\n\r\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\r\n\r\n          // Support v1.2+ $animate\r\n          // https://github.com/angular/angular.js/issues/11713\r\n          if (angular.version.minor <= 2) {\r\n            $animate.leave(modalElement, leaveAnimateCallback);\r\n          } else {\r\n            $animate.leave(modalElement).then(leaveAnimateCallback);\r\n          }\r\n\r\n          if (options.backdrop) {\r\n            // decrement number of backdrops\r\n            backdropCount--;\r\n            $animate.leave(backdropElement);\r\n          }\r\n          $modal.$isShown = scope.$isShown = false;\r\n          safeDigest(scope);\r\n\r\n          // Unbind events\r\n          unbindBackdropEvents();\r\n          unbindKeyboardEvents();\r\n        };\r\n\r\n        function leaveAnimateCallback () {\r\n          scope.$emit(options.prefixEvent + '.hide', $modal);\r\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\r\n            options.onHide($modal);\r\n          }\r\n          if (findElement('.modal').length <= 0) {\r\n            bodyElement.removeClass(options.prefixClass + '-open');\r\n            layoutHideElement.attr('aria-hidden', 'false');\r\n          }\r\n          if (options.animation) {\r\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\r\n          }\r\n        }\r\n\r\n        function findFocusableElements () {\r\n          // Add all elements we want to include in our selection\r\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\r\n          if (document.activeElement) {\r\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\r\n              function (element) {\r\n                // Check for visibility while always include the current activeElement\r\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\r\n              });\r\n\r\n            return focusable;\r\n          }\r\n        }\r\n\r\n        function findNextFocusableElement (inReverse) {\r\n          if (document.activeElement) {\r\n            var focusable = findFocusableElements();\r\n            if (focusable === undefined) return;\r\n            if (inReverse) {\r\n              focusable = Array.prototype.reverse.call(focusable);\r\n            }\r\n\r\n            var index = focusable.indexOf(document.activeElement);\r\n            return focusable[index + 1];\r\n          }\r\n        }\r\n\r\n        $modal.toggle = function () {\r\n          if ($modal.$isShown) {\r\n            $modal.hide();\r\n          } else {\r\n            $modal.show();\r\n          }\r\n        };\r\n\r\n        $modal.focus = function () {\r\n          modalElement[0].focus();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $modal.$onKeyUp = function (evt) {\r\n\r\n          // Escape was pressed on an open modal. Hide it.  Backspace key, nothing happen.\r\n          if ((evt.which === 8 || evt.which === 27) && $modal.$isShown) {\r\n            if (evt.which === 27) {\r\n              $modal.hide();\r\n            }\r\n            evt.stopPropagation();\r\n          }\r\n        };\r\n\r\n        $modal.$onKeyDown = function (evt) {\r\n          if (options.keyboard) {\r\n            if (evt.keyCode === 8 && evt.target.tagName !== 'TEXTAREA' && evt.target.tagName !== 'INPUT') {\r\n              evt.preventDefault();\r\n            }\r\n\r\n            if (evt.keyCode === 9) {\r\n\r\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\r\n              if (nextFocusable === undefined) {\r\n                if (evt.preventDefault) evt.preventDefault();\r\n                if (evt.stopPropagation) evt.stopPropagation();\r\n\r\n                var focusable = findFocusableElements();\r\n                if (evt.shiftKey) {\r\n                  focusable[focusable.length - 1].focus();\r\n                } else {\r\n                  focusable[0].focus();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n        function bindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('click', hideOnBackdropClick);\r\n            backdropElement.on('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function unbindBackdropEvents () {\r\n          if (options.backdrop) {\r\n            modalElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('click', hideOnBackdropClick);\r\n            backdropElement.off('wheel', preventEventDefault);\r\n          }\r\n        }\r\n\r\n        function bindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.on('keyup', $modal.$onKeyUp);\r\n            modalElement.on('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        function unbindKeyboardEvents () {\r\n          if (options.keyboard) {\r\n            modalElement.off('keyup', $modal.$onKeyUp);\r\n            modalElement.off('keydown', $modal.$onKeyDown);\r\n          }\r\n        }\r\n\r\n        // Private helpers\r\n\r\n        function hideOnBackdropClick (evt) {\r\n          if (evt.target !== evt.currentTarget) return;\r\n          if (options.backdrop === 'static') {\r\n            $modal.focus();\r\n          } else {\r\n            $modal.hide();\r\n          }\r\n        }\r\n\r\n        function preventEventDefault (evt) {\r\n          evt.preventDefault();\r\n        }\r\n\r\n        function destroyModalElement () {\r\n          if ($modal.$isShown && modalElement !== null) {\r\n            // un-bind events\r\n            unbindBackdropEvents();\r\n            unbindKeyboardEvents();\r\n          }\r\n\r\n          if (modalScope) {\r\n            modalScope.$destroy();\r\n            modalScope = null;\r\n          }\r\n\r\n          if (modalElement) {\r\n            modalElement.remove();\r\n            modalElement = $modal.$element = null;\r\n          }\r\n        }\r\n\r\n        return $modal;\r\n\r\n      }\r\n\r\n      // Helper functions\r\n\r\n      function safeDigest (scope) {\r\n        /* eslint-disable no-unused-expressions */\r\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\r\n        /* eslint-enable no-unused-expressions */\r\n      }\r\n\r\n      function findElement (query, element) {\r\n        return angular.element((element || document).querySelectorAll(query));\r\n      }\r\n\r\n      return ModalFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope,\r\n          element: element,\r\n          show: false\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Options: alias modalClass to customClass\r\n        if (options.modalClass) {\r\n          options.customClass = options.modalClass;\r\n        }\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsModal) {\r\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize modal\r\n        var modal = $modal(options);\r\n\r\n        if (options.keyboard) {\r\n          modal.returnFocus = function () {\r\n            element[0].focus();\r\n          };\r\n        }\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', modal.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (modal) modal.destroy();\r\n          options = null;\r\n          modal = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\r\n  angular.module('ng')\r\n\r\n  .factory('$$rAF', function ($window, $timeout) {\r\n\r\n    var requestAnimationFrame = $window.requestAnimationFrame ||\r\n                                $window.webkitRequestAnimationFrame ||\r\n                                $window.mozRequestAnimationFrame;\r\n\r\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\r\n                               $window.webkitCancelAnimationFrame ||\r\n                               $window.mozCancelAnimationFrame ||\r\n                               $window.webkitCancelRequestAnimationFrame;\r\n\r\n    var rafSupported = !!requestAnimationFrame;\r\n    var raf = rafSupported ?\r\n      function (fn) {\r\n        var id = requestAnimationFrame(fn);\r\n        return function () {\r\n          cancelAnimationFrame(id);\r\n        };\r\n      } :\r\n      function (fn) {\r\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\r\n        return function () {\r\n          $timeout.cancel(timer);\r\n        };\r\n      };\r\n\r\n    raf.supported = rafSupported;\r\n\r\n    return raf;\r\n\r\n  });\r\n}\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\r\n\r\n  .provider('$parseOptions', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\r\n    };\r\n\r\n    this.$get = function ($parse, $q) {\r\n\r\n      function ParseOptionsFactory (attr, config) {\r\n\r\n        var $parseOptions = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        $parseOptions.$values = [];\r\n\r\n        // Private vars\r\n        var match;\r\n        var displayFn;\r\n        var valueName;\r\n        /* eslint-disable no-unused-vars */\r\n        var keyName;\r\n        var groupByFn;\r\n        /* eslint-enable no-unused-vars */\r\n        var valueFn;\r\n        var valuesFn;\r\n\r\n        $parseOptions.init = function () {\r\n          $parseOptions.$match = match = attr.match(options.regexp);\r\n          displayFn = $parse(match[2] || match[1]);\r\n          valueName = match[4] || match[6];\r\n          keyName = match[5];\r\n          groupByFn = $parse(match[3] || '');\r\n          valueFn = $parse(match[2] ? match[1] : valueName);\r\n          valuesFn = $parse(match[7]);\r\n        };\r\n\r\n        $parseOptions.valuesFn = function (scope, controller) {\r\n          return $q.when(valuesFn(scope, controller))\r\n          .then(function (values) {\r\n            if (!angular.isArray(values)) {\r\n              values = [];\r\n            }\r\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\r\n            return $parseOptions.$values;\r\n          });\r\n        };\r\n\r\n        $parseOptions.displayValue = function (modelValue) {\r\n          var scope = {};\r\n          scope[valueName] = modelValue;\r\n          return displayFn(scope);\r\n        };\r\n\r\n        // Private functions\r\n\r\n        function parseValues (values, scope) {\r\n          return values.map(function (match, index) {\r\n            var locals = {};\r\n            var label;\r\n            var value;\r\n            locals[valueName] = match;\r\n            label = displayFn(scope, locals);\r\n            value = valueFn(scope, locals);\r\n            return {label: label, value: value, index: index};\r\n          });\r\n        }\r\n\r\n        $parseOptions.init();\r\n        return $parseOptions;\r\n\r\n      }\r\n\r\n      return ParseOptionsFactory;\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.ngFocusOut', [])\r\n  .directive('ngFocusOut', ['$parse', '$rootScope', function ($parse, $rootScope) {\r\n    return {\r\n      restrict: 'A',\r\n      compile: function ($element, attr) {\r\n        // NOTE:\r\n        // We expose the powerful `$event` object on the scope that provides access to the Window,\r\n        // etc. This is OK, because expressions are not sandboxed any more (and the expression\r\n        // sandbox was never meant to be a security feature anyway).\r\n        var fn = $parse(attr.ngFocusOut);\r\n\r\n        return function link (scope, element) {\r\n          function ngEventHandler (event) {\r\n            var callback = function () {\r\n              fn(scope, {\r\n                $event: event\r\n              });\r\n            };\r\n            if ($rootScope.$$phase) {\r\n              scope.$evalAsync(callback);\r\n            } else {\r\n              scope.$apply(callback);\r\n            }\r\n          }\r\n\r\n          // setup the handler\r\n          element.on('focusout', ngEventHandler);\r\n\r\n          scope.$on('$destroy', function () {\r\n            // tear down the handler\r\n            element.off('focusout', ngEventHandler);\r\n          });\r\n        };\r\n      }\r\n    };\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.focusElement', [])\r\n  .directive('focusElement', ['$timeout', '$parse', function ($timeout, $parse) {\r\n    return {\r\n      link: function (scope, element, attrs) {\r\n        scope.$watch(attrs.focusElement, function (value) {\r\n          if (value === true) {\r\n            $timeout(function () {\r\n              element[0].focus();\r\n            });\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\r\n\r\n  .factory('dimensions', function () {\r\n\r\n    var fn = {};\r\n\r\n    /**\r\n     * Test the element nodeName\r\n     * @param element\r\n     * @param name\r\n     */\r\n    var nodeName = fn.nodeName = function (element, name) {\r\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\r\n    };\r\n\r\n    /**\r\n     * Returns the element computed style\r\n     * @param element\r\n     * @param prop\r\n     * @param extra\r\n     */\r\n    fn.css = function (element, prop, extra) {\r\n      var value;\r\n      if (element.currentStyle) { // IE\r\n        value = element.currentStyle[prop];\r\n      } else if (window.getComputedStyle) {\r\n        value = window.getComputedStyle(element)[prop];\r\n      } else {\r\n        value = element.style[prop];\r\n      }\r\n      return extra === true ? parseFloat(value) || 0 : value;\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.offset = function (element) {\r\n      var boxRect = element.getBoundingClientRect();\r\n      var docElement = element.ownerDocument;\r\n      return {\r\n        width: boxRect.width || element.offsetWidth,\r\n        height: boxRect.height || element.offsetHeight,\r\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\r\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\r\n      };\r\n    };\r\n\r\n    /**\r\n     * Provides set equivalent of jQuery's offset function:\r\n     * @required-by bootstrap-tooltip\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     * @param options\r\n     * @param i\r\n     */\r\n    fn.setOffset = function (element, options, i) {\r\n      var curPosition;\r\n      var curLeft;\r\n      var curCSSTop;\r\n      var curTop;\r\n      var curOffset;\r\n      var curCSSLeft;\r\n      var calculatePosition;\r\n      var position = fn.css(element, 'position');\r\n      var curElem = angular.element(element);\r\n      var props = {};\r\n\r\n      // Set position first, in-case top/left are set even on static elem\r\n      if (position === 'static') {\r\n        element.style.position = 'relative';\r\n      }\r\n\r\n      curOffset = fn.offset(element);\r\n      curCSSTop = fn.css(element, 'top');\r\n      curCSSLeft = fn.css(element, 'left');\r\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\r\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\r\n\r\n      // Need to be able to calculate position if either\r\n      // top or left is auto and position is either absolute or fixed\r\n      if (calculatePosition) {\r\n        curPosition = fn.position(element);\r\n        curTop = curPosition.top;\r\n        curLeft = curPosition.left;\r\n      } else {\r\n        curTop = parseFloat(curCSSTop) || 0;\r\n        curLeft = parseFloat(curCSSLeft) || 0;\r\n      }\r\n\r\n      if (angular.isFunction(options)) {\r\n        options = options.call(element, i, curOffset);\r\n      }\r\n\r\n      if (options.top !== null) {\r\n        props.top = (options.top - curOffset.top) + curTop;\r\n      }\r\n      if (options.left !== null) {\r\n        props.left = (options.left - curOffset.left) + curLeft;\r\n      }\r\n\r\n      if ('using' in options) {\r\n        options.using.call(curElem, props);\r\n      } else {\r\n        curElem.css({\r\n          top: props.top + 'px',\r\n          left: props.left + 'px'\r\n        });\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Provides read-only equivalent of jQuery's position function\r\n     * @required-by bootstrap-tooltip, bootstrap-affix\r\n     * @url http://api.jquery.com/offset/\r\n     * @param element\r\n     */\r\n    fn.position = function (element) {\r\n\r\n      var offsetParentRect = {top: 0, left: 0};\r\n      var offsetParentEl;\r\n      var offset;\r\n\r\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\r\n      if (fn.css(element, 'position') === 'fixed') {\r\n\r\n        // We assume that getBoundingClientRect is available when computed position is fixed\r\n        offset = element.getBoundingClientRect();\r\n\r\n      } else {\r\n\r\n        // Get *real* offsetParentEl\r\n        offsetParentEl = offsetParentElement(element);\r\n\r\n        // Get correct offsets\r\n        offset = fn.offset(element);\r\n        if (!nodeName(offsetParentEl, 'html')) {\r\n          offsetParentRect = fn.offset(offsetParentEl);\r\n        }\r\n\r\n        // Add offsetParent borders\r\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\r\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\r\n      }\r\n\r\n      // Subtract parent offsets and element margins\r\n      return {\r\n        width: element.offsetWidth,\r\n        height: element.offsetHeight,\r\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\r\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\r\n      };\r\n\r\n    };\r\n\r\n    /**\r\n     * Returns the closest, non-statically positioned offsetParent of a given element\r\n     * @required-by fn.position\r\n     * @param element\r\n     */\r\n    function offsetParentElement (element) {\r\n      var docElement = element.ownerDocument;\r\n      var offsetParent = element.offsetParent || docElement;\r\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\r\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\r\n        offsetParent = offsetParent.offsetParent;\r\n      }\r\n      return offsetParent || docElement.documentElement;\r\n    }\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's height function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/height/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.height = function (element, outer) {\r\n      var value = element.offsetHeight;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    /**\r\n     * Provides equivalent of jQuery's width function\r\n     * @required-by bootstrap-affix\r\n     * @url http://api.jquery.com/width/\r\n     * @param element\r\n     * @param outer\r\n     */\r\n    fn.width = function (element, outer) {\r\n      var value = element.offsetWidth;\r\n      if (outer) {\r\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\r\n      } else {\r\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\r\n      }\r\n      return value;\r\n    };\r\n\r\n    return fn;\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\r\n.factory('debounce', function ($timeout) {\r\n  return function (func, wait, immediate) {\r\n    var timeout = null;\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      var callNow = immediate && !timeout;\r\n      if (timeout) {\r\n        $timeout.cancel(timeout);\r\n      }\r\n      timeout = $timeout(function later () {\r\n        timeout = null;\r\n        if (!immediate) {\r\n          func.apply(context, args);\r\n        }\r\n      }, wait, false);\r\n      if (callNow) {\r\n        func.apply(context, args);\r\n      }\r\n      return timeout;\r\n    };\r\n  };\r\n})\r\n\r\n\r\n// @source jashkenas/underscore\r\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\r\n.factory('throttle', function ($timeout) {\r\n  return function (func, wait, options) {\r\n    var timeout = null;\r\n    if (!options) options = {};\r\n    return function () {\r\n      var context = this;\r\n      var args = arguments;\r\n      if (!timeout) {\r\n        if (options.leading !== false) {\r\n          func.apply(context, args);\r\n        }\r\n        timeout = $timeout(function later () {\r\n          timeout = null;\r\n          if (options.trailing !== false) {\r\n            func.apply(context, args);\r\n          }\r\n        }, wait, false);\r\n      }\r\n    };\r\n  };\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\r\n\r\n.provider('$dateParser', function ($localeProvider) {\r\n\r\n  // define a custom ParseDate object to use instead of native Date\r\n  // to avoid date values wrapping when setting date component values\r\n  function ParseDate () {\r\n    this.year = 1970;\r\n    this.month = 0;\r\n    this.day = 1;\r\n    this.hours = 0;\r\n    this.minutes = 0;\r\n    this.seconds = 0;\r\n    this.milliseconds = 0;\r\n  }\r\n\r\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\r\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\r\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\r\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\r\n  ParseDate.prototype.getHours = function () { return this.hours; };\r\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\r\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\r\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\r\n  ParseDate.prototype.fromDate = function (value) {\r\n    this.year = value.getFullYear();\r\n    this.month = value.getMonth();\r\n    this.day = value.getDate();\r\n    this.hours = value.getHours();\r\n    this.minutes = value.getMinutes();\r\n    this.seconds = value.getSeconds();\r\n    this.milliseconds = value.getMilliseconds();\r\n    return this;\r\n  };\r\n\r\n  ParseDate.prototype.toDate = function () {\r\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\r\n  };\r\n\r\n  var proto = ParseDate.prototype;\r\n\r\n  function noop () {\r\n  }\r\n\r\n  function isNumeric (n) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n  }\r\n\r\n  function indexOfCaseInsensitive (array, value) {\r\n    var len = array.length;\r\n    var str = value.toString().toLowerCase();\r\n    for (var i = 0; i < len; i++) {\r\n      if (array[i].toLowerCase() === str) { return i; }\r\n    }\r\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\r\n  }\r\n\r\n  var defaults = this.defaults = {\r\n    format: 'shortDate',\r\n    strict: false\r\n  };\r\n\r\n  this.$get = function ($locale, dateFilter) {\r\n\r\n    var DateParserFactory = function (config) {\r\n\r\n      var options = angular.extend({}, defaults, config);\r\n\r\n      var $dateParser = {};\r\n\r\n      /* eslint-disable key-spacing, quote-props */\r\n      var regExpMap = {\r\n        'sss'   : '[0-9]{3}',\r\n        'ss'    : '[0-5][0-9]',\r\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'mm'    : '[0-5][0-9]',\r\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\r\n        'HH'    : '[01][0-9]|2[0-3]',\r\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\r\n        'hh'    : '[0][1-9]|[1][012]',\r\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'a'     : 'AM|PM',\r\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\r\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\r\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\r\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\r\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\r\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\r\n        'MM'    : '0[1-9]|1[012]',\r\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\r\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\r\n        'yy'    : '[0-9]{2}',\r\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\r\n      };\r\n\r\n      var setFnMap = {\r\n        'sss'   : proto.setMilliseconds,\r\n        'ss'    : proto.setSeconds,\r\n        's'     : proto.setSeconds,\r\n        'mm'    : proto.setMinutes,\r\n        'm'     : proto.setMinutes,\r\n        'HH'    : proto.setHours,\r\n        'H'     : proto.setHours,\r\n        'hh'    : proto.setHours,\r\n        'h'     : proto.setHours,\r\n        'EEEE'  : noop,\r\n        'EEE'   : noop,\r\n        'dd'    : proto.setDate,\r\n        'd'     : proto.setDate,\r\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\r\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\r\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\r\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\r\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\r\n        'yyyy'  : proto.setFullYear,\r\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\r\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\r\n      };\r\n      /* eslint-enable key-spacing, quote-props */\r\n\r\n      var regex;\r\n      var setMap;\r\n\r\n      $dateParser.init = function () {\r\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\r\n        regex = regExpForFormat($dateParser.$format);\r\n        setMap = setMapForFormat($dateParser.$format);\r\n      };\r\n\r\n      $dateParser.isValid = function (date) {\r\n        if (angular.isDate(date)) return !isNaN(date.getTime());\r\n        return regex.test(date);\r\n      };\r\n\r\n      $dateParser.parse = function (value, baseDate, format, timezone) {\r\n        // check for date format special names\r\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\r\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\r\n        var formatRegex = format ? regExpForFormat(format) : regex;\r\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\r\n        var matches = formatRegex.exec(value);\r\n        if (!matches) return false;\r\n        // use custom ParseDate object to set parsed values\r\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\r\n        for (var i = 0; i < matches.length - 1; i++) {\r\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\r\n        }\r\n        // convert back to native Date object\r\n        var newDate = date.toDate();\r\n\r\n        // check new native Date object for day values overflow\r\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\r\n          return false;\r\n        }\r\n\r\n        return newDate;\r\n      };\r\n\r\n      $dateParser.getDateForAttribute = function (key, value) {\r\n        var date;\r\n\r\n        if (value === 'today') {\r\n          var today = new Date();\r\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\r\n          if (value.match(/Z/)) {\r\n            date = new Date(value.substr(1, value.length - 3));\r\n          } else {\r\n            date = new Date(value.substr(1, value.length - 2));\r\n          }\r\n        } else if (isNumeric(value)) {\r\n          date = new Date(parseInt(value, 10));\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\r\n          date = key === 'minDate' ? -Infinity : +Infinity;\r\n        } else {\r\n          date = new Date(value);\r\n        }\r\n\r\n        return date;\r\n      };\r\n\r\n      $dateParser.getTimeForAttribute = function (key, value) {\r\n        var time;\r\n\r\n        if (value === 'now') {\r\n          time = new Date().setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\r\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\r\n        } else if (isNumeric(value)) {\r\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\r\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\r\n          time = key === 'minTime' ? -Infinity : +Infinity;\r\n        } else {\r\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\r\n        }\r\n\r\n        return time;\r\n      };\r\n\r\n      /* Handle switch to/from daylight saving.\r\n      * Hours may be non-zero on daylight saving cut-over:\r\n      * > 12 when midnight changeover, but then cannot generate\r\n      * midnight datetime, so jump to 1AM, otherwise reset.\r\n      * @param  date  (Date) the date to check\r\n      * @return  (Date) the corrected date\r\n      *\r\n      * __ copied from jquery ui datepicker __\r\n      */\r\n      $dateParser.daylightSavingAdjust = function (date) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\r\n        return date;\r\n      };\r\n\r\n      /* Correct the date for timezone offset.\r\n      * @param  date  (Date) the date to adjust\r\n      * @param  timezone  (string) the timezone to adjust for\r\n      * @param  undo  (boolean) to add or subtract timezone offset\r\n      * @return  (Date) the corrected date\r\n      */\r\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\r\n        if (!date) {\r\n          return null;\r\n        }\r\n        // Right now, only 'UTC' is supported.\r\n        if (timezone && timezone === 'UTC') {\r\n          date = new Date(date.getTime());\r\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\r\n        }\r\n        return date;\r\n      };\r\n\r\n      // Private functions\r\n\r\n      function regExpForFormat (format) {\r\n        // `format` string can contain literal values.\r\n        // These need to be escaped by surrounding with\r\n        // single quotes (e.g. `\"h 'in the morning'\"`).\r\n        // In order to output a single quote, escape it - i.e.,\r\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\r\n\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseRegex(re);\r\n      }\r\n\r\n      function buildDateAbstractRegex (format) {\r\n        var escapedFormat = escapeReservedSymbols(format);\r\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\r\n        var literalRegex = /('(?:\\\\'|.)*?')/;\r\n        var formatParts = escapedLiteralFormat.split(literalRegex);\r\n        var dateElements = Object.keys(regExpMap);\r\n        var dateRegexParts = [];\r\n\r\n        angular.forEach(formatParts, function (part) {\r\n          if (isFormatStringLiteral(part)) {\r\n            part = trimLiteralEscapeChars(part);\r\n          } else {\r\n            // Abstract replaces to avoid collisions\r\n            for (var i = 0; i < dateElements.length; i++) {\r\n              part = part.split(dateElements[i]).join('${' + i + '}');\r\n            }\r\n          }\r\n          dateRegexParts.push(part);\r\n        });\r\n\r\n        return dateRegexParts.join('');\r\n      }\r\n\r\n      function escapeReservedSymbols (text) {\r\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\r\n                   .replace(/-/g, '[-]')\r\n                   .replace(/\\./g, '[.]')\r\n                   .replace(/\\*/g, '[*]')\r\n                   .replace(/\\+/g, '[+]')\r\n                   .replace(/\\?/g, '[?]')\r\n                   .replace(/\\$/g, '[$]')\r\n                   .replace(/\\^/g, '[^]')\r\n                   .replace(/\\//g, '[/]')\r\n                   .replace(/\\\\s/g, '[\\\\s]');\r\n      }\r\n\r\n      function isFormatStringLiteral (text) {\r\n        return /^'.*'$/.test(text);\r\n      }\r\n\r\n      function trimLiteralEscapeChars (text) {\r\n        return text.replace(/^'(.*)'$/, '$1');\r\n      }\r\n\r\n      function buildDateParseRegex (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var re = abstractRegex;\r\n\r\n        // Replace abstracted values\r\n        for (var i = 0; i < dateElements.length; i++) {\r\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\r\n        }\r\n\r\n        return new RegExp('^' + re + '$', ['i']);\r\n      }\r\n\r\n      function setMapForFormat (format) {\r\n        var re = buildDateAbstractRegex(format);\r\n        return buildDateParseValuesMap(re);\r\n      }\r\n\r\n      function buildDateParseValuesMap (abstractRegex) {\r\n        var dateElements = Object.keys(regExpMap);\r\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\r\n        var valuesMatch;\r\n        var keyIndex;\r\n        var valueKey;\r\n        var valueFunction;\r\n        var valuesFunctionMap = [];\r\n\r\n        /* eslint-disable no-cond-assign */\r\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\r\n          keyIndex = valuesMatch[1];\r\n          valueKey = dateElements[keyIndex];\r\n          valueFunction = setFnMap[valueKey];\r\n\r\n          valuesFunctionMap.push(valueFunction);\r\n        }\r\n\r\n        return valuesFunctionMap;\r\n      }\r\n\r\n      $dateParser.init();\r\n      return $dateParser;\r\n\r\n    };\r\n\r\n    return DateParserFactory;\r\n\r\n  };\r\n\r\n});\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\r\n\r\n  .service('$dateFormatter', function ($locale, dateFilter) {\r\n\r\n    // The unused `lang` arguments are on purpose. The default implementation does not\r\n    // use them and it always uses the locale loaded into the `$locale` service.\r\n    // Custom implementations might use it, thus allowing different directives to\r\n    // have different languages.\r\n\r\n    this.getDefaultLocale = function () {\r\n      return $locale.id;\r\n    };\r\n\r\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\r\n    // Return either the corresponding date format or the given date format.\r\n    this.getDatetimeFormat = function (format, lang) {\r\n      return $locale.DATETIME_FORMATS[format] || format;\r\n    };\r\n\r\n    this.weekdaysShort = function (lang) {\r\n      return $locale.DATETIME_FORMATS.SHORTDAY;\r\n    };\r\n\r\n    this.weekdays = function (lang) {\r\n      return $locale.DATETIME_FORMATS.DAY;\r\n    };\r\n\r\n    function splitTimeFormat (format) {\r\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\r\n    }\r\n\r\n    // h:mm a => h\r\n    this.hoursFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[0];\r\n    };\r\n\r\n    // h:mm a => mm\r\n    this.minutesFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[2];\r\n    };\r\n\r\n    // h:mm:ss a => ss\r\n    this.secondsFormat = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => :\r\n    this.timeSeparator = function (timeFormat) {\r\n      return splitTimeFormat(timeFormat)[1];\r\n    };\r\n\r\n    // h:mm:ss a => true, h:mm a => false\r\n    this.showSeconds = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[4];\r\n    };\r\n\r\n    // h:mm a => true, H.mm => false\r\n    this.showAM = function (timeFormat) {\r\n      return !!splitTimeFormat(timeFormat)[5];\r\n    };\r\n\r\n    this.formatDate = function (date, format, lang, timezone) {\r\n      return dateFilter(date, format, timezone);\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\r\n  .provider('$datepicker', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      // Uncommenting the following line will break backwards compatability\r\n      // prefixEvent: 'datepicker',\r\n      prefixClass: 'datepicker',\r\n      placement: 'bottom-left',\r\n      templateUrl: 'datepicker/datepicker.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      // lang: $locale.id,\r\n      useNative: false,\r\n      dateType: 'date',\r\n      dateFormat: 'shortDate',\r\n      timezone: null,\r\n      modelDateFormat: null,\r\n      dayFormat: 'dd',\r\n      monthFormat: 'MMM',\r\n      yearFormat: 'yyyy',\r\n      monthTitleFormat: 'MMMM yyyy',\r\n      yearTitleFormat: 'yyyy',\r\n      strictFormat: false,\r\n      autoclose: false,\r\n      minDate: -Infinity,\r\n      maxDate: +Infinity,\r\n      startView: 0,\r\n      minView: 0,\r\n      startWeek: 0,\r\n      daysOfWeekDisabled: '',\r\n      hasToday: false,\r\n      hasClear: false,\r\n      iconLeft: 'glyphicon glyphicon-chevron-left',\r\n      iconRight: 'glyphicon glyphicon-chevron-right',\r\n      // The format that will be given to the screen reader values placed in the DOM.\r\n      screenReaderDateFormat: 'fullDate',\r\n      // Focuses the table element in the dropdown upon display of the picker.\r\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\r\n      focusOnOpen: false\r\n    };\r\n\r\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\r\n\r\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n      var isTouch = ('createTouch' in $window.document) && isNative;\r\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\r\n\r\n      function DatepickerFactory (element, controller, config) {\r\n\r\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\r\n        // defaults and the configuration passed.\r\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\r\n        var parentScope = config.scope;\r\n        var options = $datepicker.$options;\r\n        var scope = $datepicker.$scope;\r\n        if (options.startView) options.startView -= options.minView;\r\n\r\n        // Add assistive technology helper attributes.\r\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\r\n\r\n        // View vars\r\n\r\n        // Initialize the datepicker view collection by passing a reference to the base object.\r\n        var pickerViews = datepickerViews($datepicker);\r\n        $datepicker.$views = pickerViews.views;\r\n        var viewDate = pickerViews.viewDate;\r\n        /*\r\n         * View mode for the date picker.\r\n         * 0: days\r\n         * 1: months\r\n         * 2: years\r\n         */\r\n        scope.$mode = options.startView;\r\n        // icon class override\r\n        scope.$iconLeft = options.iconLeft;\r\n        scope.$iconRight = options.iconRight;\r\n        // Show buttons at the bottom of the picker.\r\n        scope.$hasToday = options.hasToday;\r\n        scope.$hasClear = options.hasClear;\r\n        /*\r\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\r\n         * aria attributes which are linked via ids.\r\n         */\r\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\r\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\r\n        scope.keyboard = options.keyboard;\r\n        scope.focusOnOpen = options.focusOnOpen;\r\n\r\n        // labels\r\n        scope.$nextLabel = options.labelNext;\r\n        scope.$previousLabel = options.labelPrevious;\r\n\r\n        // This is the actual current picker view.\r\n        var $picker = $datepicker.$views[scope.$mode];\r\n\r\n        // Internal handlers\r\n\r\n        function handleOnKeyDown (evt, apply) {\r\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\r\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\r\n            return false;\r\n          }\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n\r\n          if (evt.keyCode === 13) {\r\n            if (!scope.$mode) {\r\n              $datepicker.hide(true);\r\n              if (options.focusOnOpen) return true;\r\n            } else {\r\n              if (apply === undefined || apply) {\r\n                scope.$apply(function () {\r\n                  $datepicker.setMode(scope.$mode - 1);\r\n                });\r\n              } else {\r\n                $datepicker.setMode(scope.$mode - 1);\r\n              }\r\n            }\r\n            return false;\r\n          }\r\n\r\n          return true;\r\n        }\r\n\r\n        // Scope methods\r\n\r\n        /**\r\n         * Pass through from the scope to the provider for the selection of a date.\r\n         */\r\n        scope.$select = function (date, disabled) {\r\n          if (disabled) return;\r\n          $datepicker.select(date);\r\n        };\r\n        scope.$selectPane = function (value) {\r\n          $datepicker.$selectPane(value);\r\n        };\r\n        scope.$toggleMode = function () {\r\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\r\n        };\r\n        scope.$setToday = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(new Date());\r\n          } else {\r\n            $datepicker.select(new Date(), true);\r\n          }\r\n        };\r\n        scope.$clear = function () {\r\n          if (options.autoclose) {\r\n            $datepicker.setMode(0);\r\n            $datepicker.select(null);\r\n          } else {\r\n            $datepicker.select(null, true);\r\n          }\r\n        };\r\n        scope.$focused = function (dayInfo) {\r\n          scope.selectedDayId = dayInfo.id;\r\n          if (dayInfo.isNext && !scope.selected) {\r\n            if (scope.$mode) {\r\n              $datepicker.update(dayInfo.date);\r\n            } else {\r\n              scope.$select(dayInfo.date);\r\n            }\r\n          }\r\n        };\r\n        scope.$onKeyDown = function (evt, day) {\r\n          var continueHandling = handleOnKeyDown(evt, false);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n          }\r\n        };\r\n        scope.$onFocusOut = function (evt) {\r\n          // find out if the related target's parents contain the datepicker's $element\r\n          var inTable = false;\r\n          var parent = angular.element(evt.relatedTarget);\r\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n            parent = parent.parent();\r\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n              inTable = true;\r\n              break;\r\n            } else {\r\n              inTable = false;\r\n            }\r\n          }\r\n\r\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n          //\r\n\r\n          if (!inTable && !evt.relatedTarget) {\r\n            // hmm\r\n          } else if (!inTable) {\r\n            $datepicker.hide();\r\n          } else {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n          }\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $datepicker.update = function (date) {\r\n          // console.warn('$datepicker.update() newValue=%o', date);\r\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\r\n            $datepicker.$date = date;\r\n            $picker.update.call($picker, date);\r\n          }\r\n          // Build only if pristine\r\n          $datepicker.$build(true);\r\n        };\r\n\r\n        $datepicker.updateDisabledDates = function (dateRanges) {\r\n          options.disabledDateRanges = dateRanges;\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\r\n          }\r\n        };\r\n\r\n        $datepicker.select = function (date, keep) {\r\n          // console.warn('$datepicker.select', date, scope.$mode);\r\n          if (angular.isDate(date)) {\r\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\r\n              controller.$dateValue = new Date(date);\r\n            }\r\n          } else {\r\n            controller.$dateValue = null;\r\n          }\r\n          if (!scope.$mode || keep) {\r\n            controller.$setViewValue(angular.copy(date));\r\n            controller.$render();\r\n            if (options.autoclose && !keep) {\r\n              $timeout(function () {\r\n                $datepicker.hide(true);\r\n              });\r\n            }\r\n          } else {\r\n            angular.extend(viewDate, {\r\n              year: date.getFullYear(),\r\n              month: date.getMonth(),\r\n              date: date.getDate()\r\n            });\r\n            $datepicker.setMode(scope.$mode - 1);\r\n            $datepicker.$build();\r\n          }\r\n        };\r\n\r\n        /**\r\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\r\n         * rebuilt. The views are days, months, and years.\r\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\r\n         */\r\n        $datepicker.setMode = function setMode (mode) {\r\n          scope.$mode = mode;\r\n          $picker = $datepicker.$views[scope.$mode];\r\n          // The picker has been changed so the view needs to be built.\r\n          $datepicker.$build();\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        /**\r\n         * Builds the datepicker's view based on the picker that is currently set.\r\n         */\r\n        $datepicker.$build = function $build (pristine) {\r\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\r\n          if (pristine === true && $picker.built) return;\r\n          if (pristine === false && !$picker.built) return;\r\n          $picker.build.call($picker);\r\n        };\r\n\r\n        $datepicker.$updateSelected = function () {\r\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\r\n            angular.forEach(scope.rows[i], function (day) {\r\n              updateSelected(day);\r\n              if (day.selected) scope.selected = day;\r\n            });\r\n          }\r\n        };\r\n\r\n        $datepicker.$isSelected = function (date) {\r\n          return $picker.isSelected(date);\r\n        };\r\n\r\n        $datepicker.$setDisabledEl = function (el) {\r\n          el.disabled = $picker.isDisabled(el.date);\r\n        };\r\n\r\n        $datepicker.$selectPane = function (value) {\r\n          var steps = $picker.steps;\r\n          // set targetDate to first day of month to avoid problems with\r\n          // date values rollover. This assumes the viewDate does not\r\n          // depend on the day of the month\r\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\r\n          angular.extend(viewDate, {\r\n            year: targetDate.getUTCFullYear(),\r\n            month: targetDate.getUTCMonth(),\r\n            date: targetDate.getUTCDate()\r\n          });\r\n          $datepicker.$build();\r\n        };\r\n\r\n        $datepicker.$onMouseDown = function (evt) {\r\n          // Prevent blur on mousedown on .dropdown-menu\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n          // Emulate click for mobile devices\r\n          if (isTouch) {\r\n            var targetEl = angular.element(evt.target);\r\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\r\n              targetEl = targetEl.parent();\r\n            }\r\n            targetEl.triggerHandler('click');\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Handles the onKeyDown event from the element that this datepicker is bound.\r\n         * In the standard case this will be an input element. If the trigger is set\r\n         * to click and is bound to a button then it is likely we're servicing a 508\r\n         * type situation where the implementation will no longer uses. Focus will be\r\n         * given to the table.\r\n         */\r\n        $datepicker.$onKeyDown = function (evt) {\r\n          var continueHandling = handleOnKeyDown(evt);\r\n\r\n          if (continueHandling) {\r\n            // Navigate with keyboard\r\n            $picker.onKeyDown(evt);\r\n            parentScope.$digest();\r\n          }\r\n        };\r\n\r\n        // $datepicker.$onFocusOut = function (evt) {\r\n        //   // find out if the related target's parents contain the datepicker's $element\r\n        //   var inTable = false;\r\n        //   var parent = angular.element(evt.relatedTarget);\r\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\r\n        //     parent = parent.parent();\r\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\r\n        //       inTable = true;\r\n        //       break;\r\n        //     } else {\r\n        //       inTable = false;\r\n        //     }\r\n        //   }\r\n\r\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\r\n        //   //\r\n\r\n        //   if (!inTable && !evt.relatedTarget) {\r\n        //     // hmm\r\n        //   } else if (!inTable) {\r\n        //     $datepicker.hide();\r\n        //   } else {\r\n        //     evt.stopPropagation();\r\n        //     evt.preventDefault();\r\n        //   }\r\n        // };\r\n\r\n        // Private\r\n\r\n        function updateSelected (el) {\r\n          el.selected = $datepicker.$isSelected(el.date);\r\n          el.focused = el.selected;\r\n        }\r\n\r\n        function focusElement () {\r\n          element[0].focus();\r\n        }\r\n\r\n        // Overrides\r\n\r\n        // The datepicker will override the init functionality of the tool\r\n        var _init = $datepicker.init;\r\n        /**\r\n         * Initialize the datepicker.\r\n         */\r\n        $datepicker.init = function () {\r\n          if (isNative && options.useNative) {\r\n            element.prop('type', 'date');\r\n            element.css('-webkit-appearance', 'textfield');\r\n            return;\r\n          } else if (isTouch) {\r\n            element.prop('type', 'text');\r\n            element.attr('readonly', 'true');\r\n            element.on('click', focusElement);\r\n          }\r\n          _init();\r\n        };\r\n\r\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\r\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\r\n        var _destroy = $datepicker.destroy;\r\n\r\n        /**\r\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\r\n         */\r\n        $datepicker.destroy = function () {\r\n          if (isNative && options.useNative) {\r\n            element.off('click', focusElement);\r\n          }\r\n          _destroy();\r\n        };\r\n\r\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be shown.\r\n        var _show = $datepicker.show;\r\n\r\n        /**\r\n         * Override for the tooltip's show function.\r\n         *\r\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\r\n         * Once shown it sets up the appropriate events.\r\n         */\r\n        $datepicker.show = function show () {\r\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\r\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\r\n\r\n          // Call the \"overriden base\" function on the tooltip.\r\n          _show();\r\n\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function () {\r\n            // if $datepicker is no longer showing, don't setup events\r\n            if (!$datepicker.$isShown) return;\r\n\r\n            // Update assistive technologies for view changes:\r\n            $datepicker.$element.attr('aria-hidden', 'false');\r\n            element.attr('aria-expanded', 'true');\r\n\r\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\r\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n            // If keyboard navigation is enabled (true by default).\r\n            if (options.keyboard) {\r\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\r\n              // Check to see if the table element should receive the focus when the picker is shown.\r\n              if (options.focusOnOpen) {\r\n                // Focus the table element.\r\n                // $datepicker.$element.find('table')[0].focus();\r\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\r\n              } else {\r\n                element.on('keydown', $datepicker.$onKeyDown);\r\n              }\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\r\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\r\n        // is to be hidden.\r\n        var _hide = $datepicker.hide;\r\n\r\n        /**\r\n         * Overrid efor the tooltip's hide function.\r\n         *\r\n         * Updates attributes for assistive technologies and unbinds events.\r\n         */\r\n        $datepicker.hide = function (blur) {\r\n          // If the picker is already hidden don't do anything.\r\n          if (!$datepicker.$isShown) return;\r\n\r\n          // Update the attributes used by assisteive technologies\r\n          $datepicker.$element.attr('aria-hidden', 'true');\r\n          element.attr('aria-expanded', 'false');\r\n\r\n          // Unbind the mouse and touch events\r\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\r\n\r\n          // If keyboard events were bound then unbind them.\r\n          if (options.keyboard) {\r\n            element.off('keydown', $datepicker.$onKeyDown);\r\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\r\n          }\r\n          if (options.focusOnOpen) {\r\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\r\n            element[0].focus();\r\n          }\r\n          // Call the tooltip's hide function.\r\n          _hide(blur);\r\n        };\r\n\r\n        return $datepicker;\r\n      }\r\n\r\n      DatepickerFactory.defaults = defaults;\r\n      return DatepickerFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\r\n\r\n    // var defaults = $datepicker.defaults;\r\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\r\n            options[key] = false;\r\n          }\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Initialize datepicker\r\n        var datepicker = $datepicker(element, controller, options);\r\n        options = datepicker.$options;\r\n        // Set expected iOS format\r\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Visibility binding support\r\n        if (attr.bsShow) {\r\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\r\n            if (!datepicker || !angular.isDefined(newValue)) return;\r\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\r\n            if (newValue === true) {\r\n              datepicker.show();\r\n            } else {\r\n              datepicker.hide();\r\n            }\r\n          });\r\n        }\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          // console.warn('attr.$observe(%s)', key, attr[key]);\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\r\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              // Build only if dirty\r\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            datepicker.$options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\r\n          datepicker.update(controller.$dateValue);\r\n        }, true);\r\n\r\n        // Normalize undefined/null/empty array,\r\n        // so that we don't treat changing from undefined->null as a change.\r\n        function normalizeDateRanges (ranges) {\r\n          if (!ranges || !ranges.length) return null;\r\n          return ranges;\r\n        }\r\n\r\n        if (angular.isDefined(attr.disabledDates)) {\r\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\r\n            disabledRanges = normalizeDateRanges(disabledRanges);\r\n            previousValue = normalizeDateRanges(previousValue);\r\n\r\n            if (disabledRanges) {\r\n              datepicker.updateDisabledDates(disabledRanges);\r\n            }\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\r\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n          return new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        // viewValue -> element\r\n        controller.$render = function () {\r\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\r\n          element.val(getDateFormattedString());\r\n        };\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (datepicker) datepicker.destroy();\r\n          options = null;\r\n          datepicker = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\r\n    return {\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n        // Directive options\r\n        var options = {\r\n          scope: scope\r\n        };\r\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        options = angular.extend({}, $datepicker.defaults, options);\r\n\r\n        var lang = options.lang;\r\n\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        // Observe attributes for changes\r\n        angular.forEach(['minDate', 'maxDate'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            attr.$observe(key, function (newValue) {\r\n              options[key] = dateParser.getDateForAttribute(key, newValue);\r\n              validateAgainstMinMaxDate(controller.$dateValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Observe date format\r\n        if (angular.isDefined(attr.dateFormat)) {\r\n          attr.$observe('dateFormat', function (newValue) {\r\n            options.dateFormat = newValue;\r\n          });\r\n        }\r\n\r\n        function validateAgainstMinMaxDate (parsedDate) {\r\n          if (!angular.isDate(parsedDate)) return;\r\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\r\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\r\n          var isValid = isMinValid && isMaxValid;\r\n          controller.$setValidity('date', isValid);\r\n          controller.$setValidity('min', isMinValid);\r\n          controller.$setValidity('max', isMaxValid);\r\n          // Only update the model when we have a valid date\r\n          if (isValid) controller.$dateValue = parsedDate;\r\n        }\r\n\r\n        // viewValue -> $parsers -> modelValue\r\n        controller.$parsers.unshift(function (viewValue) {\r\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\r\n          var date;\r\n          // Null values should correctly reset the model value & validity\r\n          if (!viewValue) {\r\n            controller.$setValidity('date', true);\r\n            // BREAKING CHANGE:\r\n            // return null (not undefined) when input value is empty, so angularjs 1.3\r\n            // ngModelController can go ahead and run validators, like ngRequired\r\n            return null;\r\n          }\r\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\r\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\r\n            controller.$setValidity('date', false);\r\n            // return undefined, causes ngModelController to\r\n            // invalidate model value\r\n            return;\r\n          }\r\n          validateAgainstMinMaxDate(parsedDate);\r\n\r\n          if (options.dateType === 'string') {\r\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\r\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\r\n          }\r\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\r\n          if (options.dateType === 'number') {\r\n            return date.getTime();\r\n          } else if (options.dateType === 'unix') {\r\n            return date.getTime() / 1000;\r\n          } else if (options.dateType === 'iso') {\r\n            return date.toISOString();\r\n          }\r\n\r\n          return date === null ? null : new Date(date);\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function (modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var date;\r\n          if (angular.isUndefined(modelValue) || modelValue === null) {\r\n            date = NaN;\r\n          } else if (angular.isDate(modelValue)) {\r\n            date = modelValue;\r\n          } else if (options.dateType === 'string') {\r\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\r\n          } else if (options.dateType === 'unix') {\r\n            date = new Date(modelValue * 1000);\r\n          } else {\r\n            date = new Date(modelValue);\r\n          }\r\n          // Setup default value?\r\n          // if (isNaN(date.getTime())) {\r\n          //   var today = new Date();\r\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\r\n          // }\r\n          // do not adjust date if timezone is UTC\r\n          if (options.timezone === 'UTC') {\r\n            controller.$dateValue = date;\r\n          } else {\r\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\r\n          }\r\n\r\n          return getDateFormattedString();\r\n        });\r\n\r\n        function getDateFormattedString () {\r\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\r\n        }\r\n      }\r\n    };\r\n  })\r\n\r\n  .provider('datepickerViews', function () {\r\n\r\n    // var defaults = this.defaults = {\r\n    //   dayFormat: 'dd',\r\n    //   daySplit: 7\r\n    // };\r\n\r\n    // Split array into smaller arrays\r\n    function split (arr, size) {\r\n      var arrays = [];\r\n      while (arr.length > 0) {\r\n        arrays.push(arr.splice(0, size));\r\n      }\r\n      return arrays;\r\n    }\r\n\r\n    // Modulus operator\r\n    function mod (n, m) {\r\n      return ((n % m) + m) % m;\r\n    }\r\n\r\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\r\n\r\n      return function (picker) {\r\n\r\n        var scope = picker.$scope;\r\n        var options = picker.$options;\r\n\r\n        var lang = options.lang;\r\n        var formatDate = function (date, format) {\r\n          return $dateFormatter.formatDate(date, format, lang);\r\n        };\r\n        var dateParser = $dateParser({\r\n          format: options.dateFormat,\r\n          lang: lang,\r\n          strict: options.strictFormat\r\n        });\r\n\r\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\r\n        var weekDaysLong = $dateFormatter.weekdays(lang);\r\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\r\n\r\n        var weekDaysLabelsHtml = '';\r\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\r\n          var weekDayShortLabel = weekDaysShortLabels[i];\r\n          var weekDayLabel = weekDaysLongLabels[i];\r\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\r\n        }\r\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\r\n\r\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\r\n        var viewDate = {\r\n          year: startDate.getFullYear(),\r\n          month: startDate.getMonth(),\r\n          date: startDate.getDate()\r\n        };\r\n\r\n        var views = [{\r\n          format: options.dayFormat,\r\n          split: 7,\r\n          steps: {\r\n            month: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\r\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\r\n              // in $datepicker.$selectPane, so picker would not update selected day display if\r\n              // user picks first day of the new month.\r\n              // As a workaround, we are always forcing update when picked date is first day of month.\r\n              viewDate.date = picker.$date.getDate();\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\r\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\r\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\r\n            var firstDateOffset = firstDate.getTimezoneOffset();\r\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\r\n            // Handle daylight time switch\r\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\r\n            var days = [];\r\n            var day;\r\n            var selectedDay;\r\n            var todayDay;\r\n            for (var i = 0; i < 42; i++) { // < 7 * 6\r\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\r\n              // push the day information onto the collection\r\n              var dayItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: day,\r\n                value: day.getDate(),\r\n                isToday: day.toDateString() === today,\r\n                label: formatDate(day, this.format),\r\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\r\n                selected: picker.$date && this.isSelected(day),\r\n                muted: day.getMonth() !== viewDate.month,\r\n                disabled: this.isDisabled(day)\r\n              };\r\n\r\n              if (dayItem.selected) selectedDay = dayItem;\r\n              if (dayItem.isToday) todayDay = dayItem;\r\n\r\n              days.push(dayItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedDay) {\r\n                scope.selectedDayId = selectedDay.id;\r\n                if (todayDay) todayDay.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedDay.focused = true;\r\n                scope.selected = selectedDay;\r\n              } else if (todayDay) {\r\n                todayDay.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\r\n            scope.showLabels = true;\r\n            scope.labels = weekDaysLabelsHtml;\r\n            scope.rows = split(days, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.isTodayDisabled = this.isDisabled(new Date());\r\n            scope.hasSelectedDate = picker.$date != null;\r\n            scope.$modeLabel = options.labelMonth;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\r\n              date.getMonth() === picker.$date.getMonth() &&\r\n              date.getDate() === picker.$date.getDate();\r\n          },\r\n          isDisabled: function (date) {\r\n            var time = date.getTime();\r\n\r\n            // Disabled because of min/max date.\r\n            if (time < options.minDate || time > options.maxDate) return true;\r\n\r\n            // Disabled due to being a disabled day of the week\r\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\r\n\r\n            // Disabled because of disabled date range.\r\n            if (options.disabledDateRanges) {\r\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\r\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n\r\n            return false;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            var actualTime;\r\n\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date) {\r\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n                picker.$date = new Date();\r\n              } else {\r\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\r\n              }\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return false;\r\n            }\r\n\r\n            actualTime = picker.$date.getTime();\r\n\r\n            var newDate;\r\n\r\n            switch (evt.keyCode) {\r\n              // enter\r\n              case 13:\r\n                if (options.focusOnOpen) {\r\n                  picker.select(new Date(actualTime), true);\r\n                  return false;\r\n                }\r\n                break;\r\n                // pageup\r\n              case 33:\r\n                if (evt.altKey) { // move back a year\r\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move back a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\r\n                  }\r\n                }\r\n                break;\r\n\r\n                // pagedown\r\n              case 34:\r\n                if (evt.altKey) { // move forward a year\r\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\r\n                } else { // move forward a month\r\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\r\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\r\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\r\n                  }\r\n                }\r\n\r\n                break;\r\n\r\n                // left arrow\r\n              case 37:\r\n                newDate = new Date(actualTime - 1 * 864e5);\r\n                break;\r\n\r\n                // up arrow\r\n              case 38:\r\n                newDate = new Date(actualTime - 7 * 864e5);\r\n                break;\r\n\r\n                // right arrow\r\n              case 39:\r\n                newDate = new Date(actualTime + 1 * 864e5);\r\n                break;\r\n\r\n                // down arrow\r\n              case 40:\r\n                newDate = new Date(actualTime + 7 * 864e5);\r\n                break;\r\n\r\n              default:\r\n                return false;\r\n            }\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n\r\n            if (evt && evt.stopPropagation) evt.stopPropagation();\r\n\r\n            return false;\r\n          }\r\n        }, {\r\n          name: 'month',\r\n          format: options.monthFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 1\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getMonth() !== viewDate.month) {\r\n              angular.extend(viewDate, {\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            // var firstMonth = new Date(viewDate.year, 0, 1);\r\n            var months = [];\r\n            var month;\r\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            var selectedMonth;\r\n            var thisMonth;\r\n            for (var i = 0; i < 12; i++) {\r\n              month = new Date(viewDate.year, i, 1);\r\n\r\n              var monthItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: month,\r\n                label: formatDate(month, this.format),\r\n                selected: picker.$isSelected(month),\r\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\r\n                disabled: this.isDisabled(month)\r\n              };\r\n\r\n              if (monthItem.selected) selectedMonth = monthItem;\r\n              if (monthItem.isToday) thisMonth = monthItem;\r\n\r\n              months.push(monthItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedMonth) {\r\n                scope.selectedDayId = selectedMonth.id;\r\n                if (thisMonth) thisMonth.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedMonth.focused = true;\r\n                scope.selected = selectedMonth;\r\n              } else if (thisMonth) {\r\n                thisMonth.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = formatDate(month, options.yearTitleFormat);\r\n            scope.showLabels = false;\r\n            scope.rows = split(months, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modeLabel = options.labelYear;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualMonth = picker.$date.getMonth();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\r\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\r\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\r\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\r\n\r\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\r\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }, {\r\n          name: 'year',\r\n          format: options.yearFormat,\r\n          split: 4,\r\n          steps: {\r\n            year: 12\r\n          },\r\n          update: function (date, force) {\r\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$build();\r\n            } else if (date.getFullYear() !== viewDate.year) {\r\n              angular.extend(viewDate, {\r\n                year: picker.$date.getFullYear(),\r\n                month: picker.$date.getMonth(),\r\n                date: picker.$date.getDate()\r\n              });\r\n              picker.$updateSelected();\r\n            }\r\n          },\r\n          build: function () {\r\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\r\n            var years = [];\r\n            var year;\r\n            var selectedYear;\r\n            var thisYear;\r\n            for (var i = 0; i < 12; i++) {\r\n              year = new Date(firstYear + i, 0, 1);\r\n\r\n              var yearItem = {\r\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\r\n                date: year,\r\n                label: formatDate(year, this.format),\r\n                selected: picker.$isSelected(year),\r\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\r\n                disabled: this.isDisabled(year)\r\n              };\r\n\r\n              if (yearItem.selected) selectedYear = yearItem;\r\n              if (yearItem.isToday) thisYear = yearItem;\r\n\r\n              years.push(yearItem);\r\n            }\r\n\r\n            scope.selected = null;\r\n\r\n            var defaultFirstDayTabIndex = false;\r\n            // Setup the focusing\r\n            if (options.focusOnOpen) {\r\n              if (selectedYear) {\r\n                scope.selectedDayId = selectedYear.id;\r\n                if (thisYear) thisYear.focused = false;\r\n                // Needs to fire after the today focusing is unset in case the selected day is today.\r\n                selectedYear.focused = true;\r\n                scope.selected = selectedYear;\r\n              } else if (thisYear) {\r\n                thisYear.focused = true;\r\n              } else {\r\n                defaultFirstDayTabIndex = true;\r\n              }\r\n            }\r\n\r\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\r\n            scope.startYear = years[0].label;\r\n            scope.endYear = years[years.length - 1].label;\r\n            scope.showLabels = false;\r\n            scope.rows = split(years, this.split);\r\n            if (defaultFirstDayTabIndex) {\r\n              scope.rows[0][0].isNext = true;\r\n            }\r\n            scope.$modelLabel = options.labelDays;\r\n            this.built = true;\r\n          },\r\n          isSelected: function (date) {\r\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\r\n          },\r\n          isDisabled: function (date) {\r\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\r\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\r\n          },\r\n          onKeyDown: function (evt) {\r\n            // If the picker doesn't have a date selected and the event comes from the today TD\r\n            // then set the picker's $date to today and set the actual time to its value.\r\n            if (options.keyboard &&\r\n              options.focusOnOpen &&\r\n              !picker.$date &&\r\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\r\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\r\n            }\r\n\r\n            if (!picker.$date) {\r\n              return;\r\n            }\r\n            var actualYear = picker.$date.getFullYear();\r\n            var newDate = new Date(picker.$date);\r\n\r\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\r\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\r\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\r\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\r\n\r\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\r\n          }\r\n        }];\r\n\r\n        return {\r\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\r\n          viewDate: viewDate\r\n        };\r\n\r\n      };\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.collapse', [])\r\n\r\n  .provider('$collapse', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-collapse',\r\n      disallowToggle: false,\r\n      activeClass: 'in',\r\n      startCollapsed: false,\r\n      allowMultiple: false\r\n    };\r\n\r\n    var controller = this.controller = function ($scope, $element, $attrs) {\r\n      var self = this;\r\n\r\n      // Attributes options\r\n      self.$options = angular.copy(defaults);\r\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\r\n      });\r\n\r\n      // use string regex match boolean attr falsy values, leave truthy values be\r\n      var falseValueRegExp = /^(false|0|)$/i;\r\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\r\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\r\n          self.$options[key] = false;\r\n        }\r\n      });\r\n\r\n      self.$toggles = [];\r\n      self.$targets = [];\r\n\r\n      self.$viewChangeListeners = [];\r\n\r\n      self.$registerToggle = function (element) {\r\n        self.$toggles.push(element);\r\n        element.attr('aria-expanded', 'false');\r\n      };\r\n      self.$registerTarget = function (element) {\r\n        self.$targets.push(element);\r\n\r\n        var i = 0;\r\n        if (self.$targets) {\r\n          for (i = 0; i < self.$targets.length; i++) {\r\n            self.$targets[i].attr('aria-hidden', 'true');\r\n          }\r\n          for (i = 0; i < self.$targets.$active.length; i++) {\r\n            if (self.$targets[self.$targets.$active[i]]) {\r\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\r\n            }\r\n            if (self.$toggles[self.$targets.$active[i]]) {\r\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      self.$unregisterToggle = function (element) {\r\n        var index = self.$toggles.indexOf(element);\r\n        // remove toggle from $toggles array\r\n        self.$toggles.splice(index, 1);\r\n      };\r\n      self.$unregisterTarget = function (element) {\r\n        var index = self.$targets.indexOf(element);\r\n\r\n        // remove element from $targets array\r\n        self.$targets.splice(index, 1);\r\n\r\n        if (self.$options.allowMultiple) {\r\n          // remove target index from $active array values\r\n          deactivateItem(element);\r\n        }\r\n\r\n        // fix active item indexes\r\n        fixActiveItemIndexes(index);\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      // use array to store all the currently open panels\r\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\r\n      self.$setActive = $scope.$setActive = function (value) {\r\n        if (angular.isArray(value)) {\r\n          self.$targets.$active = value;\r\n        } else if (!self.$options.disallowToggle && isActive(value)) {\r\n          deactivateItem(value);\r\n        } else {\r\n          activateItem(value);\r\n        }\r\n\r\n        self.$viewChangeListeners.forEach(function (fn) {\r\n          fn();\r\n        });\r\n      };\r\n\r\n      self.$activeIndexes = function () {\r\n        if (self.$options.allowMultiple) {\r\n          return self.$targets.$active;\r\n        }\r\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\r\n      };\r\n\r\n      function fixActiveItemIndexes (index) {\r\n        // item with index was removed, so we\r\n        // need to adjust other items index values\r\n        var activeIndexes = self.$targets.$active;\r\n        for (var i = 0; i < activeIndexes.length; i++) {\r\n          if (index < activeIndexes[i]) {\r\n            activeIndexes[i] = activeIndexes[i] - 1;\r\n          }\r\n\r\n          // the last item is active, so we need to\r\n          // adjust its index\r\n          if (activeIndexes[i] === self.$targets.length) {\r\n            activeIndexes[i] = self.$targets.length - 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      function isActive (value) {\r\n        var activeItems = self.$targets.$active;\r\n        return activeItems.indexOf(value) !== -1;\r\n      }\r\n\r\n      function deactivateItem (value) {\r\n        var index = self.$targets.$active.indexOf(value);\r\n        if (index !== -1) {\r\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\r\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\r\n          self.$targets.$active.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      function activateItem (value) {\r\n        if (!self.$options.allowMultiple) {\r\n          // remove current selected item\r\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\r\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[0]]) {\r\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\r\n          }\r\n          self.$targets.$active.splice(0, 1);\r\n        }\r\n\r\n        if (self.$targets.$active.indexOf(value) === -1) {\r\n          self.$targets.$active.push(value);\r\n\r\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\r\n          }\r\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\r\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\r\n          }\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    this.$get = function () {\r\n      var $collapse = {};\r\n      $collapse.defaults = defaults;\r\n      $collapse.controller = controller;\r\n      return $collapse;\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\r\n\r\n    return {\r\n      require: ['?ngModel', 'bsCollapse'],\r\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        if (ngModelCtrl) {\r\n\r\n          // Update the modelValue following\r\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\r\n          });\r\n\r\n          // modelValue -> $formatters -> viewValue\r\n          ngModelCtrl.$formatters.push(function (modelValue) {\r\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            if (angular.isArray(modelValue)) {\r\n              // model value is an array, so just replace\r\n              // the active items directly\r\n              bsCollapseCtrl.$setActive(modelValue);\r\n            } else {\r\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\r\n\r\n              if (angular.isArray(activeIndexes)) {\r\n                // we have an array of selected indexes\r\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\r\n                  // item with modelValue index is not active\r\n                  bsCollapseCtrl.$setActive(modelValue * 1);\r\n                }\r\n              } else if (activeIndexes !== modelValue * 1) {\r\n                bsCollapseCtrl.$setActive(modelValue * 1);\r\n              }\r\n            }\r\n            return modelValue;\r\n          });\r\n\r\n        }\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseToggle', function () {\r\n    var KEY_CODES = {\r\n      ENTER: 13,\r\n      SPACE: 32\r\n    };\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base attr\r\n        element.attr('data-toggle', 'collapse');\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerToggle(element);\r\n\r\n        // remove toggle from collapse controller when toggle is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterToggle(element);\r\n        });\r\n\r\n        var actionEventHandler = function () {\r\n          if (!attrs.disabled) {\r\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\r\n            bsCollapseCtrl.$setActive(index * 1);\r\n            scope.$apply();\r\n          }\r\n        };\r\n\r\n        element.on('click', actionEventHandler);\r\n        element.bind('keydown keypress', function (e) {\r\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\r\n            console.log('key handler handling');\r\n            actionEventHandler();\r\n            e.preventDefault();\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCollapseTarget', function ($animate) {\r\n\r\n    return {\r\n      require: ['^?ngModel', '^bsCollapse'],\r\n      // scope: true,\r\n      link: function postLink (scope, element, attrs, controllers) {\r\n\r\n        // var ngModelCtrl = controllers[0];\r\n        var bsCollapseCtrl = controllers[1];\r\n\r\n        // Add base class\r\n        element.addClass('collapse');\r\n\r\n        // Add animation class\r\n        if (bsCollapseCtrl.$options.animation) {\r\n          element.addClass(bsCollapseCtrl.$options.animation);\r\n        }\r\n\r\n        // Push pane to parent bsCollapse controller\r\n        bsCollapseCtrl.$registerTarget(element);\r\n\r\n        // remove pane target from collapse controller when target is destroyed\r\n        scope.$on('$destroy', function () {\r\n          bsCollapseCtrl.$unregisterTarget(element);\r\n        });\r\n\r\n        function render () {\r\n          var index = bsCollapseCtrl.$targets.indexOf(element);\r\n          var active = bsCollapseCtrl.$activeIndexes();\r\n          var action = 'removeClass';\r\n          if (angular.isArray(active)) {\r\n            if (active.indexOf(index) !== -1) {\r\n              action = 'addClass';\r\n            }\r\n          } else if (index === active) {\r\n            action = 'addClass';\r\n          }\r\n\r\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\r\n        }\r\n\r\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\r\n          render();\r\n        });\r\n        render();\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.button', [])\r\n\r\n  .provider('$button', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      activeClass: 'active',\r\n      toggleEvent: 'click'\r\n    };\r\n\r\n    this.$get = function () {\r\n      return {defaults: defaults};\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckboxGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\r\n        angular.forEach(children, function (child) {\r\n          var childEl = angular.element(child);\r\n          childEl.attr('bs-checkbox', '');\r\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsCheckbox', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support label > input[type=\"checkbox\"]\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\r\n        if (constantValueRegExp.test(attr.trueValue)) {\r\n          trueValue = scope.$eval(attr.trueValue);\r\n        }\r\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\r\n        if (constantValueRegExp.test(attr.falseValue)) {\r\n          falseValue = scope.$eval(attr.falseValue);\r\n        }\r\n\r\n        // Parse exotic values\r\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\r\n        if (hasExoticValues) {\r\n          controller.$parsers.push(function (viewValue) {\r\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\r\n            return viewValue ? trueValue : falseValue;\r\n          });\r\n          // modelValue -> $formatters -> viewValue\r\n          controller.$formatters.push(function (modelValue) {\r\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n            return angular.equals(modelValue, trueValue);\r\n          });\r\n        }\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = !!controller.$viewValue;\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            if (!isInput) {\r\n              controller.$setViewValue(!activeElement.hasClass('active'));\r\n            }\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadioGroup', function () {\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      compile: function postLink (element, attr) {\r\n        element.attr('data-toggle', 'buttons');\r\n        element.removeAttr('ng-model');\r\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\r\n        angular.forEach(children, function (child) {\r\n          angular.element(child).attr('bs-radio', '');\r\n          angular.element(child).attr('ng-model', attr.ngModel);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsRadio', function ($button, $$rAF) {\r\n\r\n    var defaults = $button.defaults;\r\n    var constantValueRegExp = /^(true|false|\\d+)$/;\r\n\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function postLink (scope, element, attr, controller) {\r\n\r\n        var options = defaults;\r\n\r\n        // Support `label > input[type=\"radio\"]` markup\r\n        var isInput = element[0].nodeName === 'INPUT';\r\n        var activeElement = isInput ? element.parent() : element;\r\n\r\n        var value;\r\n        attr.$observe('value', function (v) {\r\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\r\n            value = scope.$eval(v);\r\n          } else {\r\n            value = v;\r\n          }\r\n          controller.$render();\r\n        });\r\n\r\n        // model -> view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          var isActive = angular.equals(controller.$viewValue, value);\r\n          $$rAF(function () {\r\n            if (isInput) element[0].checked = isActive;\r\n            activeElement.toggleClass(options.activeClass, isActive);\r\n          });\r\n        };\r\n\r\n        // view -> model\r\n        element.bind(options.toggleEvent, function () {\r\n          scope.$apply(function () {\r\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\r\n            controller.$setViewValue(value);\r\n            controller.$render();\r\n          });\r\n        });\r\n\r\n      }\r\n\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$aside', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade-and-slide-right',\r\n      prefixClass: 'aside',\r\n      prefixEvent: 'aside',\r\n      placement: 'right',\r\n      templateUrl: 'aside/aside.tpl.html',\r\n      contentTemplate: false,\r\n      container: false,\r\n      element: null,\r\n      backdrop: true,\r\n      keyboard: true,\r\n      html: false,\r\n      show: true\r\n    };\r\n\r\n    this.$get = function ($modal) {\r\n\r\n      function AsideFactory (config) {\r\n\r\n        var $aside = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $aside = $modal(options);\r\n\r\n        return $aside;\r\n\r\n      }\r\n\r\n      return AsideFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAside', function ($window, $sce, $aside) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAside) {\r\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize aside\r\n        var aside = $aside(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', aside.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (aside) aside.destroy();\r\n          options = null;\r\n          aside = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\n// @BUG: following snippet won't compile correctly\r\n\r\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\r\n\r\n  .provider('$alert', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'alert',\r\n      prefixEvent: 'alert',\r\n      placement: null,\r\n      templateUrl: 'alert/alert.tpl.html',\r\n      container: false,\r\n      element: null,\r\n      backdrop: false,\r\n      keyboard: true,\r\n      show: true,\r\n      // Specific options\r\n      duration: false,\r\n      type: false,\r\n      dismissable: true,\r\n      focusMeDisabled: false\r\n    };\r\n\r\n    this.$get = function ($modal, $timeout) {\r\n\r\n      function AlertFactory (config) {\r\n\r\n        var $alert = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $alert = $modal(options);\r\n        $alert.returnFocus = function () {\r\n          function findFocusableElements () {\r\n            var containerEl = angular.element($alert.$element).closest('[ng-controller]');\r\n            return containerEl.find('a:not([disabled]),button:not([disabled]),input:not([disabled]),select:not([disabled]),[tabindex]:not([disabled]):not([tabindex=\"-1\"])').filter(function (i, el) {\r\n              return !angular.element(el).parentsUntil(containerEl, '[tabindex=\"-1\"]').length;\r\n            });\r\n          }\r\n\r\n          function findNextFocusableElement () {\r\n            if (document.activeElement) {\r\n              var focusable = findFocusableElements().toArray();\r\n              if (focusable === undefined) return;\r\n              var index = focusable.indexOf(document.activeElement);\r\n              return focusable[index + 1];\r\n            }\r\n          }\r\n          angular.element(findNextFocusableElement()).focus();\r\n        };\r\n\r\n        // Support scope as string options [/*title, content, */ type, dismissable]\r\n        $alert.$scope.dismissable = !!options.dismissable;\r\n        if (options.type) {\r\n          $alert.$scope.type = options.type;\r\n        }\r\n        if (options.focusMeDisabled) {\r\n          $alert.$scope.focusMeDisabled = options.focusMeDisabled;\r\n        }\r\n\r\n        // Support auto-close duration\r\n        var show = $alert.show;\r\n        if (options.duration) {\r\n          $alert.show = function () {\r\n            show();\r\n            $timeout(function () {\r\n              $alert.hide();\r\n            }, options.duration * 1000);\r\n          };\r\n        }\r\n\r\n        return $alert;\r\n\r\n      }\r\n\r\n      return AlertFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAlert', function ($window, $sce, $alert) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      scope: true,\r\n      link: function postLink (scope, element, attr, transclusion) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope, element: element, show: false};\r\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // use string regex match boolean attr falsy values, leave truthy values be\r\n        var falseValueRegExp = /^(false|0|)$/i;\r\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\r\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\r\n        });\r\n\r\n        // bind functions from the attrs to the show and hide events\r\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\r\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\r\n          if (angular.isDefined(attr[bsKey])) {\r\n            options[key] = scope.$eval(attr[bsKey]);\r\n          }\r\n        });\r\n\r\n        // overwrite inherited title value when no value specified\r\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\r\n        if (!scope.hasOwnProperty('title')) {\r\n          scope.title = '';\r\n        }\r\n\r\n        // Support scope as data-attrs\r\n        angular.forEach(['title', 'content', 'type'], function (key) {\r\n          if (attr[key]) {\r\n            attr.$observe(key, function (newValue, oldValue) {\r\n              scope[key] = $sce.trustAsHtml(newValue);\r\n            });\r\n          }\r\n        });\r\n\r\n        // Support scope as an object\r\n        if (attr.bsAlert) {\r\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\r\n            if (angular.isObject(newValue)) {\r\n              angular.extend(scope, newValue);\r\n            } else {\r\n              scope.content = newValue;\r\n            }\r\n          }, true);\r\n        }\r\n\r\n        // Initialize alert\r\n        var alert = $alert(options);\r\n\r\n        // Trigger\r\n        element.on(attr.trigger || 'click', alert.toggle);\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function () {\r\n          if (alert) alert.destroy();\r\n          options = null;\r\n          alert = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function () {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto',\r\n      inlineStyles: true,\r\n      setWidth: true\r\n    };\r\n\r\n    this.$get = function ($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory (element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom';\r\n        var setWidth = false;\r\n        var initialAffixTop = 0;\r\n        var initialOffsetTop = 0;\r\n        var offsetTop = 0;\r\n        var offsetBottom = 0;\r\n        var affixed = null;\r\n        var unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          } else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function () {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = options.setWidth && !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function () {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function () {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function () {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if (affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          if (affix === 'top') {\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', '');\r\n            }\r\n          } else if (affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            } else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if (setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', (options.offsetParent) ? '' : 'relative');\r\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n            }\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if (setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            if (options.inlineStyles) {\r\n              element.css('position', 'fixed');\r\n              element.css('top', initialAffixTop + 'px');\r\n            }\r\n          }\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n        };\r\n\r\n        $affix.$onResize = function () {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function () {\r\n          var initialPosition = element[0].style.position;\r\n          var initialTop = element[0].style.top;\r\n          // Reset position to calculate correct offsetTop\r\n          if (options.inlineStyles) {\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', '');\r\n          }\r\n\r\n          if (options.offsetTop) {\r\n            if (options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if (options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              } else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            } else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if (options.offsetBottom) {\r\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            } else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          if (options.inlineStyles) {\r\n            element.css('position', initialPosition);\r\n            element.css('top', initialTop);\r\n          }\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if (scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if (_unpin !== null) {\r\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\r\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          }\r\n          return 'middle';\r\n        }\r\n\r\n        function getScrollTop () {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight () {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function ($affix, $window, $timeout) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink (scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\r\n          if (angular.isDefined(attr[key])) {\r\n            var option = attr[key];\r\n            if (/true/i.test(option)) option = true;\r\n            if (/false/i.test(option)) option = false;\r\n            options[key] = option;\r\n          }\r\n        });\r\n\r\n        var affix;\r\n        $timeout(function () { affix = $affix(element, options); });\r\n        scope.$on('$destroy', function () {\r\n          if (affix) affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function () {\r\n    return {\r\n      controller: function ($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n","'use strict';\r\n\r\nangular.module('mgcrea.ngStrap', [\r\n  'mgcrea.ngStrap.modal',\r\n  'mgcrea.ngStrap.aside',\r\n  'mgcrea.ngStrap.alert',\r\n  'mgcrea.ngStrap.button',\r\n  'mgcrea.ngStrap.select',\r\n  'mgcrea.ngStrap.datepicker',\r\n  'mgcrea.ngStrap.timepicker',\r\n  'mgcrea.ngStrap.navbar',\r\n  'mgcrea.ngStrap.tooltip',\r\n  'mgcrea.ngStrap.popover',\r\n  'mgcrea.ngStrap.dropdown',\r\n  'mgcrea.ngStrap.typeahead',\r\n  'mgcrea.ngStrap.scrollspy',\r\n  'mgcrea.ngStrap.affix',\r\n  'mgcrea.ngStrap.tab',\r\n  'mgcrea.ngStrap.collapse'\r\n]);\r\n"],"sourceRoot":"/source/"}