{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["placement","document","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","bsCompilerService","$inject","$http","get","angular","module","defaults","this","animation","data","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","prefixEvent","isDefined","onSelect","$setViewValue","length","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","keyCode","$digest","show","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","target","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$options","$promise","$new","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","bindTriggerEvents","isElement","focus","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","prefixClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","leave","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","blur","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","isUndefined","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","$activeClass","self","$panes","$activePaneChangeListeners","$push","pane","$active","$navClass","$remove","active","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","size","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","$show","bottom","destroyModalElement","z-index","backdropBaseZindex","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$hasClear","$toggleMode","$views","$mode","setMode","$setToday","$clear","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","bind","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","$affix","inlineStyles","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","offsetBottom","elementHeight","initialAffixTop","pageYOffset","affixed","unpin","$parseOffsets","affix","setWidth","offsetUnpin","$onResize","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function(key, control)\n    {\n      if (!_tabsHash[key])\n        _tabsHash[key] = control;\n    }\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n            self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n\t\t  $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n \t\t\t  //Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n\t\t\t\t//tabs are available in the tab component\n\t\t\t\tif (attrs.tabKey != '' && attrs.tabKey != undefined){\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function(evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function(el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function() {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function() {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function(tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function(key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function(key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n            scope.content = newValue;\n          }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!dropdown || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n          });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function() {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n          }\n\t\t}\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function(e) {\n          if(e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          }\n          else if(e.which !== 16 && e.which !== 9)\n          {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function(evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function(el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function() {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function() {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function(tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function(key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function(key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n            scope.content = newValue;\n          }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!dropdown || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n          });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function() {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function(key, control)\n    {\n      if (!_tabsHash[key])\n        _tabsHash[key] = control;\n    }\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n            self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n\t\t  $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n \t\t\t  //Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n\t\t\t\t//tabs are available in the tab component\n\t\t\t\tif (attrs.tabKey != '' && attrs.tabKey != undefined){\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n          }\n\t\t}\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function(e) {\n          if(e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          }\n          else if(e.which !== 16 && e.which !== 9)\n          {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}