{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","affix/affix.js","alert/alert.js","module.js"],"names":["placement","document","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","bsCompilerService","$inject","$http","get","angular","module","defaults","this","animation","data","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","prefixEvent","isDefined","onSelect","$setViewValue","length","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","keyCode","$digest","show","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","target","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$options","$promise","$new","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","bindTriggerEvents","isElement","focus","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","prefixClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","leave","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","blur","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","isUndefined","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","size","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","$show","bottom","destroyModalElement","z-index","backdropBaseZindex","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$hasClear","$toggleMode","$views","$mode","setMode","$setToday","$clear","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","bind","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","AsideFactory","$aside","bsAside","aside","AffixFactory","$affix","inlineStyles","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","offsetBottom","elementHeight","initialAffixTop","pageYOffset","affixed","unpin","$parseOffsets","affix","setWidth","offsetUnpin","$onResize","$debouncedOnResize","initialPosition","affixTarget","option","duration","dismissable","AlertFactory","$alert","bsAlert","alert"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n        \n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n            self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function(evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function(el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function() {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function() {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function(tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function(key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function(key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n            scope.content = newValue;\n          }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!dropdown || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n          });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function() {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n          }\n\t\t}\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function(e) {\n          if(e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          }\n          else if(e.which !== 16 && e.which !== 9)\n          {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function(evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function(el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function() {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function() {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function(tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function(key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function(key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n            scope.content = newValue;\n          }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!dropdown || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n          });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function() {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n        \n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n            self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n          }\n\t\t}\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function(e) {\n          if(e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          }\n          else if(e.which !== 16 && e.which !== 9)\n          {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}