{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","datepicker/datepicker.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","dropdown/dropdown.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["placement","document","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","bsCompilerService","$inject","$http","get","angular","module","defaults","this","animation","data","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","contentEl","findElement","contentTemplate","removeAttr","html","templates","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","bodyEl","$typeahead","$scope","$matches","config","$resetMatches","$$postDigest","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$$rAF","$render","$emit","prefixEvent","parentScope","length","l","$viewValue","i","preventDefault","stopPropagation","keyCode","$digest","show","$timeout","$element","$onMouseDown","hide","on","$onKeyDown","TypeaheadFactory","array","isFunction","$$phase","$window","body","$filter","expression","directive","results","restrict","require","falseValueRegExp","attr","bsOptions","test","parsedOptions","$parseOptions","typeahead","watchOptions","watchedOptions","$watchCollection","values","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$setViewValue","substring","displayValue","slice","$formatters","push","modelValue","selected","val","destroy","isDefined","label","toString","$on","target","title","type","autoClose","bsEnabled","viewport","selector","padding","String","htmlReplaceRegExp","$body","$tooltip","split","enterAnimateCallback","leaveAnimateCallback","_tipToHide","leave","$isShown","blur","tipElement","nodeName","triggers","toggle","unbindTriggerEvents","enter","off","bindKeyboardEvents","$onKeyUp","isTouch","$onFocusElementMouseDown","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","rect","width","elRect","height","p","top","left","dimensions","offset","el","scroll","isBody","documentElement","getCalculatedOffset","position","actualWidth","actualHeight","outerDims","clientWidth","innerHeight","tip","marginTop","parseInt","using","props","css","isNaN","right","marginLeft","setOffset","delta","getViewportAdjustedDelta","isVertical","replaceArrow","arrowDelta","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","clearTimeout","timeout","tipScope","$destroy","$options","$promise","$bsCompiler","$new","$rootScope","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","promise","init","tipContainer","bindTriggerEvents","isElement","destroyTipElement","hoverState","parent","after","lastChild","display","visibility","clonedElement","version","minor","addClass","$animate","customClass","$applyPlacement","focus","_blur","elementPosition","autoPlace","autoToken","viewportPosition","originalPlacement","tipHeight","tipWidth","removeClass","tipPosition","applyPlacement","$location","transclusion","dataTarget","hasOwnProperty","tooltip","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","setSelectionRange","isUndefined","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","$iconUp","$iconDown","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","minute","keep","Date","setHours","setMinutes","setSeconds","hours","midIndex","$isSelected","disabled","minutes","seconds","minutesFormat","rows","showSeconds","secondsFormat","$isDisabled","showAM","timeSeparator","$date","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","sepLength","lateralMove","count","minutesLength","selectRange","hoursLength","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","prop","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","getTimeForAttribute","parse","timezoneOffsetAdjust","NaN","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$tab","transclude","postLink","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","$isActive","prefixClass","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","b","a","$apply","isArray","$getIndex","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","$trackedElements","sortedElements","activeTarget","debouncedCheckPosition","viewportHeight","throttledCheckPosition","debouncedCheckOffsets","scrollTop","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","querySelectorAll","child","content","$popover","PopoverFactory","requestAnimationFrame","popover","bsPopover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","bodyElement","backdropCount","backdropBaseZindex","ModalFactory","$modal","modalElement","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","destroyModalElement","modalScope","$show","bottom","z-index","defaultPrevented","backdropAnimation","bindBackdropEvents","which","$root","query","dialogBaseZindex","bsModal","modal","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","prototype","tAttrs","nextSibling","nodeType","parentNode","removeChild","bsDropdown","dropdown","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","$values","displayFn","valueName","valueFn","ParseOptionsFactory","groupByFn","keyName","jqLite","currentStyle","window","getComputedStyle","extra","boxRect","getBoundingClientRect","style","offsetHeight","docElement","ownerDocument","curPosition","curLeft","curCSSTop","pageYOffset","clientTop","pageXOffset","scrollLeft","clientLeft","curCSSLeft","calculatePosition","curTop","curOffset","curElem","call","offsetParentRect","offsetParentElement","offsetParent","offsetWidth","outer","func","immediate","factory","context","args","cancel","callNow","leading","trailing","wait","year","$localeProvider","milliseconds","ParseDate","isNumeric","n","isFinite","indexOfCaseInsensitive","len","str","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","noop","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valuesFunctionMap","valuesRegex","valueKey","valueFunction","setFnMap","exec","regex","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","s","setDate","setMonth","setMap","regExpForFormat","$format","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","$toggleMode","setMode","updateDisabledDates","disabledDateRanges","dateRanges","mode","pristine","$updateSelected","built","$setDisabledEl","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","daySplit","arr","mod","arrays","size","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDate","getDay","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isSelected","firstMonth","months","lastDate","actualMonth","firstYear","years","actualYear","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","controllers","actionEventHandler","bsCollapseToggle","bind","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","equals","checked","toggleClass","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","$affix","inlineStyles","reset","setWidth","initialAffixTop","getRequiredAffixClass","unpin","getScrollTop","scrollHeight","getScrollHeight","initialOffsetTop","offsetBottom","affixed","$parseOffsets","affix","elementHeight","offsetUnpin","$onResize","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function() {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function(matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function(index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function(index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function() {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function(value) {\n          var l = scope.$matches.length,\n            i = l;\n          if (!l) return;\n          for (i = l; i--;) {\n            if (scope.$matches[i].value === value) break;\n          }\n          if (i < 0) return;\n          return i;\n        };\n\n        $typeahead.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function(evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function() {\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n            if (options.keyboard) {\n              element && element.on('keydown', $typeahead.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function() {\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            element && element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect)\n            $typeahead.activate(-1);\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function($filter) {\n    return function(array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function(results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      } else {\n        return $filter('filter')(array, expression, comparator);\n      }\n    };\n  })\n\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function(values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function(values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function() {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n       selector: 'body',\n       padding: 0\n      }\n    };\n\n    this.$get = function($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var trim = String.prototype.trim;\n      var isTouch = 'createTouch' in $window.document;\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if(options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if(options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function(isEnabled) {\n          scope.$$postDigest(function() {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout, hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData, tipElement, tipContainer, tipScope;\n        promise.then(function(data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function() {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if(options.container === 'self') {\n            tipContainer = element;\n          } else if(angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if(options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if(options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function() {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function() {\n            if (hoverState ==='in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function() {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent, after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if(tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function(clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if(options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if(options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          after ? after.after(tipElement) : parent.prepend(tipElement);\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if(tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if(options.keyboard) {\n              if(options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if(options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function(blur) {\n\n          if(!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if(options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if(options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if(_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function() {\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\n        };\n\n        $tooltip.focus = function() {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function(isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function(viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function() {\n          if(!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement,\n              autoToken = /\\s?auto?\\s?/i,\n              autoPlace  = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition(),\n              tipWidth = tipElement.prop('offsetWidth'),\n              tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/top/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('top', 'bottom');\n            } else if (/bottom/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('bottom', 'top');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function(evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function(evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function(evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function(trigger) {\n            if(trigger === 'click') {\n              element.on('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          });\n        }\n\n        function unbindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if(trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation(event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0],\n              isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\n          }\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n          case 'right':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left + position.width\n            };\n            break;\n          case 'bottom':\n            offset = {\n              top: position.top + position.height,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          case 'left':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left - actualWidth\n            };\n            break;\n          default:\n            offset = {\n              top: position.top - actualHeight,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          }\n\n          if(!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if(split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n            case 'left':\n              offset.left = position.left;\n              break;\n            case 'right':\n              offset.left =  position.left + position.width - actualWidth;\n            }\n          } else if(split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement(offset, placement) {\n          var tip = tipElement[0],\n              width = tip.offsetWidth,\n              height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop  = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top  = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth,\n              actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement),\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow(delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement() {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if($tooltip.$isShown && tipElement !== null) {\n            if(options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if(options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if(tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if(tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      var fetchPromises = {};\n      function fetchTemplate(template) {\n        if(fetchPromises[template]) return fetchPromises[template];\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\n          return res.data;\n        }));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function(newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && $$rAF(function() {\n              tooltip && tooltip.$applyPlacement();\n            });\n          }\n        });\n\n        // Support scope as an object\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.title = newValue;\n          }\n          angular.isDefined(oldValue) && $$rAF(function() {\n            tooltip && tooltip.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n          newValue === true ? tooltip.show() : tooltip.hide();\n        });\n\n        // Enabled binding support\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          tooltip.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      //uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes(time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format),\n          timeSeparator = $dateFormatter.timeSeparator(format),\n          minutesFormat = $dateFormatter.minutesFormat(format),\n          secondsFormat = $dateFormatter.secondsFormat(format),\n          showSeconds = $dateFormatter.showSeconds(format),\n          showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function(date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function(value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function(date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function(date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function(date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function() {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function(date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function() {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [],\n            hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [],\n            minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [],\n            second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function(date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function(date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function(value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(),\n            hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(),\n            minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds(),\n            secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function() {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function() {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function() {\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              element && element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function(blur) {\n          if (!$timepicker.$isShown) return;\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            element && element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!timepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          newValue === true ? timepicker.show() : timepicker.hide();\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime(parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          } else {\n            validateAgainstMinMaxTime(parsedTime);\n          }\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function(pane) {\n        if(angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function(pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if(angular.isString(active)) {\n          activeIndex = self.$panes.map(function(pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        }\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if(activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function(value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function() {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function(element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function(newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if(bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function(newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function() {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render() {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function($window, $document, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory(element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        }\n        else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function(index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function(matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function(index) {\n          if(options.multiple) {\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\n            if(options.sort) scope.$activeIndex.sort(function(a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function(index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function() {\n            $select.activate(index);\n            if(options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function() {\n          if(options.multiple) {\n            if(angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if(angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function(index) {\n          if(options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          } else {\n            return scope.$activeIndex === index;\n          }\n        };\n\n        $select.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $select.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function(evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if(evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function() {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function(e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function() {\n          _show();\n          if(options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function() {\n          if(!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if(angular.isDefined(dataMultiple)) {\n          if(falseValueRegExp.test(dataMultiple))\n            options.multiple = false;\n          else\n            options.multiple = dataMultiple;\n        }\n\n        // Add support for select markup\n        if(element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected, index;\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function(value) {\n              index = select.$getIndex(value);\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected ? selected : options.placeholder) + (options.caretHtml ? options.caretHtml : defaults.caretHtml));\n        };\n\n        if(options.multiple){\n          controller.$isEmpty = function(value){\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function() {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName(element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory(config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if(!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if(spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        var viewportHeight;\n        var scrollTop;\n\n        $scrollspy.init = function() {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if(scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function() {\n\n          // Check internal ref counter\n          this.$$count--;\n          if(this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function() {\n\n          // Not ready yet\n          if(!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if(activeTarget === sortedElements[i].target) continue;\n            if(scrollTop < sortedElements[i].offsetTop) continue;\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function() {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function(element) {\n          if(activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if(activeElement) {\n              activeElement.source.removeClass('active');\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function(target) {\n          return trackedElements.filter(function(obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function() {\n\n          angular.forEach(trackedElements, function(trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function(el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function(a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function(target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function(target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements = trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function(i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink(scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function() {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink(element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if(options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\n              popover && popover.$applyPlacement();\n            });\n          });\n        });\n\n        // Support scope as an object\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\n            popover && popover.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n          newValue === true ? popover.show() : popover.hide();\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          popover.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function() {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function() {\n\n          return $location.path();\n\n        }, function(newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function(li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if(options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if(regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var trim = String.prototype.trim;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      function ModalFactory(config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if(!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function(key) {\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $modal.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData, modalElement, modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position:'fixed', top:'0px', left:'0px', bottom:'0px', right:'0px'});\n        promise.then(function(data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function() {\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function() {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if(backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function() {\n          if($modal.$isShown) return;\n\n          var parent, after;\n          if(angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if(modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function(clonedElement, scope) {});\n\n          if(options.backdrop) {\n              // set z-index\n              modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n              backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n              // increment number of backdrops\n              backdropCount++;\n          }\n\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: animation\n          if(options.animation) {\n            if(options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if(options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function() {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function() {\n          if(!$modal.$isShown) return;\n\n          if(options.backdrop) {\n              // decrement number of modals\n              backdropCount--;\n          }\n\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if(options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function() {\n\n          $modal.$isShown ? $modal.hide() : $modal.show();\n\n        };\n\n        $modal.focus = function() {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function(evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents() {\n          if(options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents() {\n          if(options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick(evt) {\n          if(evt.target !== evt.currentTarget) return;\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\n        }\n\n        function preventEventDefault(evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement() {\n          if($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if(modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if(modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function(evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function(el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            options.keyboard && $dropdown.$element && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          parentEl.hasClass('dropdown') && parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function() {\n          if (!$dropdown.$isShown) return;\n          options.keyboard && $dropdown.$element && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function() {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function(tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling.classList.contains('dropdown-menu')) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function(key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function(key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n              options[key] = false;\n          });\n\n          // Support scope as an object\n          attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\n            scope.content = newValue;\n          }, true);\n\n          // Visibility binding support\n          attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n            if (!dropdown || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n            newValue === true ? dropdown.show() : dropdown.hide();\n          });\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Garbage collection\n          scope.$on('$destroy', function() {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\n(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\n\n.factory('$$rAF', function($window, $timeout) {\n\n  var requestAnimationFrame = $window.requestAnimationFrame ||\n                              $window.webkitRequestAnimationFrame ||\n                              $window.mozRequestAnimationFrame;\n\n  var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                             $window.webkitCancelAnimationFrame ||\n                             $window.mozCancelAnimationFrame ||\n                             $window.webkitCancelRequestAnimationFrame;\n\n  var rafSupported = !!requestAnimationFrame;\n  var raf = rafSupported ?\n    function(fn) {\n      var id = requestAnimationFrame(fn);\n      return function() {\n        cancelAnimationFrame(id);\n      };\n    } :\n    function(fn) {\n      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n      return function() {\n        $timeout.cancel(timer);\n      };\n    };\n\n  raf.supported = rafSupported;\n\n  return raf;\n\n});\n\n// .factory('$$animateReflow', function($$rAF, $document) {\n\n//   var bodyEl = $document[0].body;\n\n//   return function(fn) {\n//     //the returned function acts as the cancellation function\n//     return $$rAF(function() {\n//       //the line below will force the browser to perform a repaint\n//       //so that all the animated elements within the animation frame\n//       //will be properly updated and drawn on screen. This is\n//       //required to perform multi-class CSS based animations with\n//       //Firefox. DO NOT REMOVE THIS LINE.\n//       var a = bodyEl.offsetWidth + 1;\n//       fn();\n//     });\n//   };\n\n// });\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function() {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\n        $parseOptions.init = function() {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]),\n          valueName = match[4] || match[6],\n          keyName = match[5],\n          groupByFn = $parse(match[3] || ''),\n          valueFn = $parse(match[2] ? match[1] : valueName),\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function(scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function(values) {\n            if(!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function(modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function(match, index) {\n            var locals = {}, label, value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function($document, $window) {\n\n    var jqLite = angular.element;\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function(element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function(element, prop, extra) {\n      var value;\n      if (element.currentStyle) { //IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function(element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n  \n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = fn.css(element, 'position'),\n          curElem = angular.element(element),\n          props = {};\n      \n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n      \n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') && \n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n      \n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n      \n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n      \n      if (options.top !== null ) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if ( options.left !== null ) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function(element) {\n\n      var offsetParentRect = {top: 0, left: 0},\n          offsetParentElement,\n          offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentElement\n        offsetParentElement = offsetParent(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentElement, 'html')) {\n          offsetParentRect = fn.offset(offsetParentElement);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    var offsetParent = function offsetParentElement(element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    };\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function(element, outer) {\n      var value = element.offsetHeight;\n      if(outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function(element, outer) {\n      var value = element.offsetWidth;\n      if(outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function($timeout) {\n  return function(func, wait, immediate) {\n    var timeout = null;\n    return function() {\n      var context = this,\n        args = arguments,\n        callNow = immediate && !timeout;\n      if(timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later() {\n        timeout = null;\n        if(!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if(callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function($timeout) {\n  return function(func, wait, options) {\n    var timeout = null;\n    options || (options = {});\n    return function() {\n      var context = this,\n        args = arguments;\n      if(!timeout) {\n        if(options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later() {\n          timeout = null;\n          if(options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate() {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\n  ParseDate.prototype.getHours = function() { return this.hours; };\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\n  ParseDate.prototype.fromDate = function(value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function() {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop() {\n  }\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive(array, value) {\n    var len = array.length, str=value.toString().toLowerCase();\n    for (var i=0; i<len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function($locale, dateFilter) {\n\n    var DateParserFactory = function(config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function(value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n\n      var regex, setMap;\n\n      $dateParser.init = function() {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function(date) {\n        if(angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function(value, baseDate, format, timezone) {\n        // check for date format special names\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if(!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for(var i = 0; i < matches.length - 1; i++) {\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function(key, value) {\n        var date;\n\n        if(value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if(isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function(key, value) {\n        var time;\n\n        if(value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if(isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function(date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function(date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo?-1:1)*date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat(format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex(format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          }\n          else {\n            // Abstract replaces to avoid collisions\n            for(var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols(text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral(text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars(text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex(abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for(var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat(format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap(abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch, keyIndex, valueKey, valueFunction;\n        var valuesFunctionMap = [];\n\n        while((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function() {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function(format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function(lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat(format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function(date, format, lang, timezone){\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\n  /* jshint validthis: true */\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function(options) {\n\n    if(options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function(value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function(templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if(!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function(locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link(scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement(query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate(template) {\n    if(fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function(res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function(date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function(value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function() {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function(date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function(dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function(date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function() { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function(mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function(pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function() {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function(date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function(el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function(value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function() {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function() {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function() {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function(blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    var defaults = $datepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!datepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n          newValue === true ? datepicker.show() : datepicker.hide();\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n            // Build only if dirty\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\n            validateAgainstMinMaxDate(controller.$dateValue);\n          });\n        });\n\n        // Observe date format\n        angular.isDefined(attr.dateFormat) && attr.$observe('dateFormat', function(newValue) {\n          datepicker.$options.dateFormat = newValue;\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxDate(parsedDate);\n          }\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function() {\n\n    var defaults = this.defaults = {\n      dayFormat: 'dd',\n      daySplit: 7\n    };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while(arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function($dateFormatter, $dateParser, $sce) {\n\n      return function(picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n            format: options.dayFormat,\n            split: 7,\n            steps: { month: 1 },\n            update: function(date, force) {\n              if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n                viewDate.date = picker.$date.getDate();\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n              if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n              var days = [], day;\n              for(var i = 0; i < 42; i++) { // < 7 * 6\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n              }\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.showLabels = true;\n              scope.labels = weekDaysLabelsHtml;\n              scope.rows = split(days, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n            },\n            isDisabled: function(date) {\n              var time = date.getTime();\n\n              // Disabled because of min/max date.\n              if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n              if (options.disabledDateRanges) {\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualTime = picker.$date.getTime();\n              var newDate;\n\n              if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'month',\n            format: options.monthFormat,\n            split: 4,\n            steps: { year: 1 },\n            update: function(date, force) {\n              if (!this.built || date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if (date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstMonth = new Date(viewDate.year, 0, 1);\n              var months = [], month;\n              for (var i = 0; i < 12; i++) {\n                month = new Date(viewDate.year, i, 1);\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n              }\n              scope.title = formatDate(month, options.yearTitleFormat);\n              scope.showLabels = false;\n              scope.rows = split(months, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualMonth = picker.$date.getMonth();\n              var newDate = new Date(picker.$date);\n\n              if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'year',\n            format: options.yearFormat,\n            split: 4,\n            steps: { year: 12 },\n            update: function(date, force) {\n              if (!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if (date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n              var years = [], year;\n              for (var i = 0; i < 12; i++) {\n                year = new Date(firstYear + i, 0, 1);\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n              }\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\n              scope.showLabels = false;\n              scope.rows = split(years, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualYear = picker.$date.getFullYear(),\n                  newDate = new Date(picker.$date);\n\n              if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = value;\n        }\n        else if(!self.$options.disallowToggle) {\n          // toogle element active status\n          isActive(value) ? deactivateItem(value) : activateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        return self.$options.allowMultiple ? self.$targets.$active :\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    var defaults = $collapse.defaults;\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            }\n            else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              }\n              else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function(e) {\n          if(e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          }\n          else if(e.which !== 16 && e.which !== 9)\n          {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          }\n          else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function() {\n\n    var defaults = this.defaults = {\n      activeClass:'active',\n      toggleEvent:'click'\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if(constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if(constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if(hasExoticValues) {\n          controller.$parsers.push(function(viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function(modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n             return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if(!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if(!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function(child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function(v) {\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function($modal) {\n\n      function AsideFactory(config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function($window, $sce, $aside) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function($modal, $timeout) {\n\n      function AlertFactory(config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if(options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if(options.duration) {\n          $alert.show = function() {\n            show();\n            $timeout(function() {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function($window, $sce, $alert) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function() {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory(element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom',\n            setWidth = false,\n            initialAffixTop = 0,\n            initialOffsetTop = 0,\n            offsetTop = 0,\n            offsetBottom = 0,\n            affixed = null,\n            unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          }\n          else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function() {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function() {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function() {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function() {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if(affixed === affix) return;\n          affixed = affix;\n\n          if(affix === 'top') {\n            unpin = null;\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if(affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            }\n            else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if(setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function() {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function() {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles){\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if(options.offsetTop) {\n            if(options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if(options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              }\n              else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            }\n            else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if(options.offsetBottom) {\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            }\n            else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles){\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass(unpin, position, elementHeight) {\n\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if(scrollTop <= offsetTop) {\n            return 'top';\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\n            return 'middle';\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          } else {\n            return 'middle';\n          }\n\n        }\n\n        function getScrollTop() {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight() {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink(scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function(key) {\n          if(angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function() {\n          affix && affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function() {\n    return {\n      controller: function($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function() {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function(matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function(index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function(index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function() {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function(value) {\n          var l = scope.$matches.length,\n            i = l;\n          if (!l) return;\n          for (i = l; i--;) {\n            if (scope.$matches[i].value === value) break;\n          }\n          if (i < 0) return;\n          return i;\n        };\n\n        $typeahead.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function(evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function() {\n            $typeahead.$element && $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n            if (options.keyboard) {\n              element && element.on('keydown', $typeahead.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function() {\n          $typeahead.$element && $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            element && element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect)\n            $typeahead.activate(-1);\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function($filter) {\n    return function(array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function(results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      } else {\n        return $filter('filter')(array, expression, comparator);\n      }\n    };\n  })\n\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function(newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function(values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function(values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function() {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\n  /* jshint validthis: true */\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function(options) {\n\n    if(options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function(value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function(templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if(!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function(locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link(scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement(query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate(template) {\n    if(fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function(res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function(date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function(value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function() {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function(date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function(dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function(date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function() { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function(mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function(pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function() {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function(date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function(el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function(value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function() {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function() {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function() {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function(blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    var defaults = $datepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!datepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n          newValue === true ? datepicker.show() : datepicker.hide();\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n            // Build only if dirty\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\n            validateAgainstMinMaxDate(controller.$dateValue);\n          });\n        });\n\n        // Observe date format\n        angular.isDefined(attr.dateFormat) && attr.$observe('dateFormat', function(newValue) {\n          datepicker.$options.dateFormat = newValue;\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxDate(parsedDate);\n          }\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function() {\n\n    var defaults = this.defaults = {\n      dayFormat: 'dd',\n      daySplit: 7\n    };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while(arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function($dateFormatter, $dateParser, $sce) {\n\n      return function(picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n            format: options.dayFormat,\n            split: 7,\n            steps: { month: 1 },\n            update: function(date, force) {\n              if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n                viewDate.date = picker.$date.getDate();\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n              if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n              var days = [], day;\n              for(var i = 0; i < 42; i++) { // < 7 * 6\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n              }\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.showLabels = true;\n              scope.labels = weekDaysLabelsHtml;\n              scope.rows = split(days, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n            },\n            isDisabled: function(date) {\n              var time = date.getTime();\n\n              // Disabled because of min/max date.\n              if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n              if (options.disabledDateRanges) {\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualTime = picker.$date.getTime();\n              var newDate;\n\n              if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'month',\n            format: options.monthFormat,\n            split: 4,\n            steps: { year: 1 },\n            update: function(date, force) {\n              if (!this.built || date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if (date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstMonth = new Date(viewDate.year, 0, 1);\n              var months = [], month;\n              for (var i = 0; i < 12; i++) {\n                month = new Date(viewDate.year, i, 1);\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n              }\n              scope.title = formatDate(month, options.yearTitleFormat);\n              scope.showLabels = false;\n              scope.rows = split(months, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualMonth = picker.$date.getMonth();\n              var newDate = new Date(picker.$date);\n\n              if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'year',\n            format: options.yearFormat,\n            split: 4,\n            steps: { year: 12 },\n            update: function(date, force) {\n              if (!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if (date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n              var years = [], year;\n              for (var i = 0; i < 12; i++) {\n                year = new Date(firstYear + i, 0, 1);\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n              }\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\n              scope.showLabels = false;\n              scope.rows = split(years, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualYear = picker.$date.getFullYear(),\n                  newDate = new Date(picker.$date);\n\n              if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n       selector: 'body',\n       padding: 0\n      }\n    };\n\n    this.$get = function($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var trim = String.prototype.trim;\n      var isTouch = 'createTouch' in $window.document;\n      var htmlReplaceRegExp = /ng-bind=\"/ig;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if(options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if(options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function(isEnabled) {\n          scope.$$postDigest(function() {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout, hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData, tipElement, tipContainer, tipScope;\n        promise.then(function(data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function() {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if(options.container === 'self') {\n            tipContainer = element;\n          } else if(angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if(options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if(options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              options.trigger === 'focus' ? element[0].focus() : $tooltip.show();\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function() {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function() {\n            if (hoverState ==='in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function() {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent, after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if(tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function(clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if(options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if(options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if(options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          after ? after.after(tipElement) : parent.prepend(tipElement);\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if(tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if(options.keyboard) {\n              if(options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if(options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function() {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function(blur) {\n\n          if(!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if(options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if(options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if(_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function() {\n          $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();\n        };\n\n        $tooltip.focus = function() {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function(isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function(viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function() {\n          if(!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement,\n              autoToken = /\\s?auto?\\s?/i,\n              autoPlace  = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition(),\n              tipWidth = tipElement.prop('offsetWidth'),\n              tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/top/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('top', 'bottom');\n            } else if (/bottom/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('bottom', 'top');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function(evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function(evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function(evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          $tooltip.$isShown ? element[0].blur() : element[0].focus();\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function(trigger) {\n            if(trigger === 'click') {\n              element.on('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          });\n        }\n\n        function unbindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if(trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if(trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n            }\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation(event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0],\n              isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top });\n          }\n          var elOffset = isBody ? { top: 0, left: 0 } : dimensions.offset(el),\n              scroll = { scroll:  isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0 },\n              outerDims = isBody ? { width: document.documentElement.clientWidth, height: $window.innerHeight } : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n          case 'right':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left + position.width\n            };\n            break;\n          case 'bottom':\n            offset = {\n              top: position.top + position.height,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          case 'left':\n            offset = {\n              top: position.top + position.height / 2 - actualHeight / 2,\n              left: position.left - actualWidth\n            };\n            break;\n          default:\n            offset = {\n              top: position.top - actualHeight,\n              left: position.left + position.width / 2 - actualWidth / 2\n            };\n            break;\n          }\n\n          if(!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if(split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n            case 'left':\n              offset.left = position.left;\n              break;\n            case 'right':\n              offset.left =  position.left + position.width - actualWidth;\n            }\n          } else if(split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement(offset, placement) {\n          var tip = tipElement[0],\n              width = tip.offsetWidth,\n              height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10),\n              marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop  = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top  = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth,\n              actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement),\n                arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight,\n                arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow(delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement() {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if($tooltip.$isShown && tipElement !== null) {\n            if(options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if(options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if(tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if(tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      var fetchPromises = {};\n      function fetchTemplate(template) {\n        if(fetchPromises[template]) return fetchPromises[template];\n        return (fetchPromises[template] = $http.get(template, {cache: $templateCache}).then(function(res) {\n          return res.data;\n        }));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function(newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && $$rAF(function() {\n              tooltip && tooltip.$applyPlacement();\n            });\n          }\n        });\n\n        // Support scope as an object\n        attr.bsTooltip && scope.$watch(attr.bsTooltip, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.title = newValue;\n          }\n          angular.isDefined(oldValue) && $$rAF(function() {\n            tooltip && tooltip.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n          newValue === true ? tooltip.show() : tooltip.hide();\n        });\n\n        // Enabled binding support\n        attr.bsEnabled && scope.$watch(attr.bsEnabled, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n          newValue === false ? tooltip.setEnabled(false) : tooltip.setEnabled(true);\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!tooltip || !angular.isDefined(newValue)) return;\n          tooltip.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if(tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      //uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes(time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format),\n          timeSeparator = $dateFormatter.timeSeparator(format),\n          minutesFormat = $dateFormatter.minutesFormat(format),\n          secondsFormat = $dateFormatter.secondsFormat(format),\n          showSeconds = $dateFormatter.showSeconds(format),\n          showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function(date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function(value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function(date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function(date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function(date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function() {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function(date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function() {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [],\n            hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [],\n            minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [],\n            second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function(date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function(date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function(value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function(value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function(value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours(),\n            hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes(),\n            minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds(),\n            secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function() {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function() {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function() {\n          if((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $timepicker.$element && $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              element && element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function(blur) {\n          if (!$timepicker.$isShown) return;\n          $timepicker.$element && $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            element && element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!timepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n          newValue === true ? timepicker.show() : timepicker.hide();\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n            !isNaN(timepicker.$options[key]) && timepicker.$build();\n            validateAgainstMinMaxTime(controller.$dateValue);\n          });\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime(parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          } else {\n            validateAgainstMinMaxTime(parsedTime);\n          }\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function(key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function(pane) {\n        if(angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function(pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if(angular.isString(active)) {\n          activeIndex = self.$panes.map(function(pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        }\n        else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if(activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function(value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function() {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function(element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function() {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function(newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function(newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if(bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function(newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function() {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render() {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function($window, $document, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory(element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        }\n        else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function(index) {\n          scope.$$postDigest(function() {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function(index, evt) {\n          scope.$$postDigest(function() {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function() {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function(index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function(matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function(index) {\n          if(options.multiple) {\n            $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);\n            if(options.sort) scope.$activeIndex.sort(function(a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function(index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function() {\n            $select.activate(index);\n            if(options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function(index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function() {\n          if(options.multiple) {\n            if(angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function(value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if(angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function() {\n          if(!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function(index) {\n          if(options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          } else {\n            return scope.$activeIndex === index;\n          }\n        };\n\n        $select.$getIndex = function(value) {\n          var l = scope.$matches.length, i = l;\n          if(!l) return;\n          for(i = l; i--;) {\n            if(scope.$matches[i].value === value) break;\n          }\n          if(i < 0) return;\n          return i;\n        };\n\n        $select.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if(isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function(evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if(!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if(evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function() {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function(e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function() {\n          _show();\n          if(options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if(options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function() {\n          if(!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if(options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if(angular.isDefined(dataMultiple)) {\n          if(falseValueRegExp.test(dataMultiple))\n            options.multiple = false;\n          else\n            options.multiple = dataMultiple;\n        }\n\n        // Add support for select markup\n        if(element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function(values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected, index;\n          if(options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function(value) {\n              index = select.$getIndex(value);\n              return angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if(selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected ? selected : options.placeholder) + (options.caretHtml ? options.caretHtml : defaults.caretHtml));\n        };\n\n        if(options.multiple){\n          controller.$isEmpty = function(value){\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function() {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName(element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory(config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if(!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if(spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded, unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        var viewportHeight;\n        var scrollTop;\n\n        $scrollspy.init = function() {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if(scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function() {\n\n          // Check internal ref counter\n          this.$$count--;\n          if(this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function() {\n\n          // Not ready yet\n          if(!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if(scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if(angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if(activeTarget === sortedElements[i].target) continue;\n            if(scrollTop < sortedElements[i].offsetTop) continue;\n            if(sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function() {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function(element) {\n          if(activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if(activeElement) {\n              activeElement.source.removeClass('active');\n              if(nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if(nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function(target) {\n          return trackedElements.filter(function(obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function() {\n\n          angular.forEach(trackedElements, function(trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if(options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function(el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function(a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function(target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function(target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if(trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements = trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function(i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink(scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function() {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink(element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if(options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if(angular.isDefined(dataTarget)) {\n          if(falseValueRegExp.test(dataTarget))\n            options.target = false;\n          else\n            options.target = dataTarget;\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n            angular.isDefined(oldValue) && requestAnimationFrame(function() {\n              popover && popover.$applyPlacement();\n            });\n          });\n        });\n\n        // Support scope as an object\n        attr.bsPopover && scope.$watch(attr.bsPopover, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n          angular.isDefined(oldValue) && requestAnimationFrame(function() {\n            popover && popover.$applyPlacement();\n          });\n        }, true);\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n          newValue === true ? popover.show() : popover.hide();\n        });\n\n        // Viewport support\n        attr.viewport && scope.$watch(attr.viewport, function (newValue) {\n          if(!popover || !angular.isDefined(newValue)) return;\n          popover.setViewport(newValue);\n        });\n\n        // Initialize popover\n        var popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function() {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function() {\n\n          return $location.path();\n\n        }, function(newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function(li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if(options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if(regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var trim = String.prototype.trim;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      function ModalFactory(config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if(!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function(key) {\n          if(options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function() {\n          scope.$$postDigest(function() {\n            $modal.hide();\n          });\n        };\n        scope.$show = function() {\n          scope.$$postDigest(function() {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function() {\n          scope.$$postDigest(function() {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData, modalElement, modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position:'fixed', top:'0px', left:'0px', bottom:'0px', right:'0px'});\n        promise.then(function(data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function() {\n\n          // Options: show\n          if(options.show) {\n            scope.$$postDigest(function() {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function() {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if(backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function() {\n          if($modal.$isShown) return;\n\n          var parent, after;\n          if(angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if(modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function(clonedElement, scope) {});\n\n          if(options.backdrop) {\n              // set z-index\n              modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n              backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n              // increment number of backdrops\n              backdropCount++;\n          }\n\n          if(scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: animation\n          if(options.animation) {\n            if(options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if(options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function() {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function() {\n          if(!$modal.$isShown) return;\n\n          if(options.backdrop) {\n              // decrement number of modals\n              backdropCount--;\n          }\n\n          if(scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if(angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if(options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if(options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function() {\n\n          $modal.$isShown ? $modal.hide() : $modal.show();\n\n        };\n\n        $modal.focus = function() {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function(evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents() {\n          if(options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents() {\n          if(options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if(options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if(options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick(evt) {\n          if(evt.target !== evt.currentTarget) return;\n          options.backdrop === 'static' ? $modal.focus() : $modal.hide();\n        }\n\n        function preventEventDefault(evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement() {\n          if($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if(modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if(modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsModal && scope.$watch(attr.bsModal, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function(evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function(el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function() {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            options.keyboard && $dropdown.$element && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          parentEl.hasClass('dropdown') && parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function() {\n          if (!$dropdown.$isShown) return;\n          options.keyboard && $dropdown.$element && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          parentEl.hasClass('dropdown') && parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function() {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function(tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling.classList.contains('dropdown-menu')) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function(key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function(key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n              options[key] = false;\n          });\n\n          // Support scope as an object\n          attr.bsDropdown && scope.$watch(attr.bsDropdown, function(newValue, oldValue) {\n            scope.content = newValue;\n          }, true);\n\n          // Visibility binding support\n          attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n            if (!dropdown || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n            newValue === true ? dropdown.show() : dropdown.hide();\n          });\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Garbage collection\n          scope.$on('$destroy', function() {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\n(angular.version.minor < 3 && angular.version.dot < 14) && angular.module('ng')\n\n.factory('$$rAF', function($window, $timeout) {\n\n  var requestAnimationFrame = $window.requestAnimationFrame ||\n                              $window.webkitRequestAnimationFrame ||\n                              $window.mozRequestAnimationFrame;\n\n  var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                             $window.webkitCancelAnimationFrame ||\n                             $window.mozCancelAnimationFrame ||\n                             $window.webkitCancelRequestAnimationFrame;\n\n  var rafSupported = !!requestAnimationFrame;\n  var raf = rafSupported ?\n    function(fn) {\n      var id = requestAnimationFrame(fn);\n      return function() {\n        cancelAnimationFrame(id);\n      };\n    } :\n    function(fn) {\n      var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n      return function() {\n        $timeout.cancel(timer);\n      };\n    };\n\n  raf.supported = rafSupported;\n\n  return raf;\n\n});\n\n// .factory('$$animateReflow', function($$rAF, $document) {\n\n//   var bodyEl = $document[0].body;\n\n//   return function(fn) {\n//     //the returned function acts as the cancellation function\n//     return $$rAF(function() {\n//       //the line below will force the browser to perform a repaint\n//       //so that all the animated elements within the animation frame\n//       //will be properly updated and drawn on screen. This is\n//       //required to perform multi-class CSS based animations with\n//       //Firefox. DO NOT REMOVE THIS LINE.\n//       var a = bodyEl.offsetWidth + 1;\n//       fn();\n//     });\n//   };\n\n// });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function() {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;\n\n        $parseOptions.init = function() {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]),\n          valueName = match[4] || match[6],\n          keyName = match[5],\n          groupByFn = $parse(match[3] || ''),\n          valueFn = $parse(match[2] ? match[1] : valueName),\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function(scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function(values) {\n            if(!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function(modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function(match, index) {\n            var locals = {}, label, value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function($document, $window) {\n\n    var jqLite = angular.element;\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function(element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function(element, prop, extra) {\n      var value;\n      if (element.currentStyle) { //IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function(element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n  \n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition,\n          curLeft,\n          curCSSTop,\n          curTop,\n          curOffset,\n          curCSSLeft,\n          calculatePosition,\n          position = fn.css(element, 'position'),\n          curElem = angular.element(element),\n          props = {};\n      \n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n      \n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') && \n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n      \n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n      \n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n      \n      if (options.top !== null ) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if ( options.left !== null ) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function(element) {\n\n      var offsetParentRect = {top: 0, left: 0},\n          offsetParentElement,\n          offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentElement\n        offsetParentElement = offsetParent(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentElement, 'html')) {\n          offsetParentRect = fn.offset(offsetParentElement);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    var offsetParent = function offsetParentElement(element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if(nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while(offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    };\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function(element, outer) {\n      var value = element.offsetHeight;\n      if(outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function(element, outer) {\n      var value = element.offsetWidth;\n      if(outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function($timeout) {\n  return function(func, wait, immediate) {\n    var timeout = null;\n    return function() {\n      var context = this,\n        args = arguments,\n        callNow = immediate && !timeout;\n      if(timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later() {\n        timeout = null;\n        if(!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if(callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function($timeout) {\n  return function(func, wait, options) {\n    var timeout = null;\n    options || (options = {});\n    return function() {\n      var context = this,\n        args = arguments;\n      if(!timeout) {\n        if(options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later() {\n          timeout = null;\n          if(options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate() {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function(value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function(value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function(value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function(value) { this.hours = value; };\n  ParseDate.prototype.getHours = function() { return this.hours; };\n  ParseDate.prototype.setDate = function(value) { this.day = value; };\n  ParseDate.prototype.setMonth = function(value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function(value) { this.year = value; };\n  ParseDate.prototype.fromDate = function(value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function() {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop() {\n  }\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive(array, value) {\n    var len = array.length, str=value.toString().toLowerCase();\n    for (var i=0; i<len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function($locale, dateFilter) {\n\n    var DateParserFactory = function(config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}',\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function(value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function(value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function(value) { return this.setMonth(1 * value - 1); },\n        'M'     : function(value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function(value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function(value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n\n      var regex, setMap;\n\n      $dateParser.init = function() {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function(date) {\n        if(angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function(value, baseDate, format, timezone) {\n        // check for date format special names\n        if(format) format = $locale.DATETIME_FORMATS[format] || format;\n        if(angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if(!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for(var i = 0; i < matches.length - 1; i++) {\n          formatSetMap[i] && formatSetMap[i].call(date, matches[i+1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function(key, value) {\n        var date;\n\n        if(value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if(isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && 0 === value.length) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function(key, value) {\n        var time;\n\n        if(value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if(angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if(isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && 0 === value.length) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function(date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function(date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo?-1:1)*date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat(format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex(format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          }\n          else {\n            // Abstract replaces to avoid collisions\n            for(var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols(text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral(text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars(text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex(abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for(var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat(format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap(abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch, keyIndex, valueKey, valueFunction;\n        var valuesFunctionMap = [];\n\n        while((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function() {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function(format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function(lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat(format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function(timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function(timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function(date, format, lang, timezone){\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if(angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function(key) {\n        if(angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function(element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function(element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function(element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function(element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function(value) {\n        if(angular.isArray(value)) {\n          self.$targets.$active = value;\n        }\n        else if(!self.$options.disallowToggle) {\n          // toogle element active status\n          isActive(value) ? deactivateItem(value) : activateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function(fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function() {\n        return self.$options.allowMultiple ? self.$targets.$active :\n          self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for(var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function() {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function($window, $animate, $collapse) {\n\n    var defaults = $collapse.defaults;\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if(ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function() {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function(modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            }\n            else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              }\n              else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function() {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n          bsCollapseCtrl.$setActive(index * 1);\n          scope.$apply();\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function(e) {\n          if(e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          }\n          else if(e.which !== 16 && e.which !== 9)\n          {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if(bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function() {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          }\n          else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function() {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function() {\n\n    var defaults = this.defaults = {\n      activeClass:'active',\n      toggleEvent:'click'\n    };\n\n    this.$get = function() {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function(child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if(constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if(constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if(hasExoticValues) {\n          controller.$parsers.push(function(viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function(modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n             return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function(newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if(!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if(!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function() {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function(child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function(v) {\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function() {\n            if(isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function() {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function($modal) {\n\n      function AsideFactory(config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function($window, $sce, $aside) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAside && scope.$watch(attr.bsAside, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function($modal, $timeout) {\n\n      function AlertFactory(config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if(options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if(options.duration) {\n          $alert.show = function() {\n            show();\n            $timeout(function() {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function($window, $sce, $alert) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')){\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function(key) {\n          attr[key] && attr.$observe(key, function(newValue, oldValue) {\n            scope[key] = $sce.trustAsHtml(newValue);\n          });\n        });\n\n        // Support scope as an object\n        attr.bsAlert && scope.$watch(attr.bsAlert, function(newValue, oldValue) {\n          if(angular.isObject(newValue)) {\n            angular.extend(scope, newValue);\n          } else {\n            scope.content = newValue;\n          }\n        }, true);\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function() {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory(element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom',\n            setWidth = false,\n            initialAffixTop = 0,\n            initialOffsetTop = 0,\n            offsetTop = 0,\n            offsetBottom = 0,\n            affixed = null,\n            unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          }\n          else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function() {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function() {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function() {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function() {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if(affixed === affix) return;\n          affixed = affix;\n\n          if(affix === 'top') {\n            unpin = null;\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if(affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            }\n            else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if(setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if(setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function() {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function() {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles){\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if(options.offsetTop) {\n            if(options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if(options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              }\n              else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            }\n            else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if(options.offsetBottom) {\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            }\n            else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles){\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass(unpin, position, elementHeight) {\n\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if(scrollTop <= offsetTop) {\n            return 'top';\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\n            return 'middle';\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          } else {\n            return 'middle';\n          }\n\n        }\n\n        function getScrollTop() {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight() {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink(scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function(key) {\n          if(angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function() {\n          affix && affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function() {\n    return {\n      controller: function($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}