{"version":3,"sources":["angular-strap.js","typeahead/typeahead1.js","helpers/compiler.js","timepicker/timepicker.js","typeahead/typeahead.js","helpers/raf.js","helpers/parse-options.js","helpers/focus-out.js","helpers/focus-element.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","tooltip/tooltip.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","dropdown/dropdown.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","alert/alert.js","affix/affix.js","aside/aside.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","defaultDate","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","KEY_CODES","downArrow","enter","escape","upArrow","$typeahead","parentScope","id","$resetMatches","config","setAriaActiveDescendant","index","resultId","$generateResultId","attr","$$phase","$root","$activeIndex","$tooltip","$activate","$scope","$$postDigest","activate","$matches","select","$select","evt","$isActive","matches","safeDigest","update","$$rAF","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","$viewValue","$getIndex","$onMouseDown","preventDefault","stopPropagation","equals","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$isVisible","getElementById","$digest","document","label","show","$element","assertDiv","$timeout","parent","append","ariaLabelledby","hide","$onKeyDown","onKeyUp","which","$isShown","onFocusKeyUp","$onFocusKeyUp","array","TypeaheadFactory","$filter","expression","directive","results","postLink","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$match","$watchCollection","values","watchOptions","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","toString","$on","off","destroy","ele","currentTarget","isUndefined","$$updateScrollTop","focus","on","version","minor","requestAnimationFrame","dot","cancelAnimationFrame","$window","webkitRequestAnimationFrame","mozRequestAnimationFrame","fn","rafSupported","raf","timer","cancel","supported","$get","$values","regexp","match","valueName","keyName","map","displayFn","valueFn","ParseOptionsFactory","groupByFn","$parse","isArray","init","callback","$rootScope","$event","ngFocusOut","event","$apply","ngEventHandler","attrs","focusElement","factory","offsetParent","docElement","ownerDocument","height","outer","offsetHeight","nodeName","css","documentElement","window","getComputedStyle","name","prop","extra","currentStyle","boxRect","getBoundingClientRect","style","offset","left","width","curPosition","curLeft","top","curCSSTop","curTop","setOffset","calculatePosition","position","curElem","props","curCSSLeft","curOffset","parseFloat","indexOf","call","i","using","offsetParentRect","offsetParentEl","offsetParentElement","offsetWidth","func","immediate","timeout","args","context","callNow","leading","wait","trailing","year","seconds","$localeProvider","milliseconds","ParseDate","prototype","hours","noop","toLowerCase","isNaN","indexOfCaseInsensitive","len","str","format","strict","DateParserFactory","minutes","day","month","getFullYear","getHours","getMilliseconds","getMonth","Date","getMinutes","proto","isNumeric","toDate","$dateParser","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","split","dateRegexParts","escapeReservedSymbols","text","join","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","a","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","setSeconds","s","setMinutes","setHours","setDate","setMonth","setFullYear","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","date","getTime","timezone","newDate","parseInt","fromDate","getDate","today","substr","Infinity","getTimeForAttribute","time","daylightSavingAdjust","parse","timezoneOffsetAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","lang","splitTimeFormat","timeFormat","weekdays","hoursFormat","minutesFormat","secondsFormat","timeSeparator","showSeconds","formatDate","service","useNative","timeType","modelTimeFormat","autoclose","minTime","maxTime","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$timepicker","timepickerFactory","viewDate","hour","startDate","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","_init","floorMinutes","floor","selectedIndex","second","getSeconds","millisecond","$dateValue","$dateFormatter","minute","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","$build","$isBuilt","keep","copy","midIndex","disabled","$date","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","targetDate","target","targetEl","triggerHandler","isTouch","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","blur","$options","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","$eval","timepicker","bsShow","dateParser","validateAgainstMinMaxTime","NaN","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","unbindTriggerEvents","leave","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","getPosition","elRect","rect","p","dimensions","el","scroll","outerDims","isBody","body","clientWidth","innerHeight","actualWidth","actualHeight","marginLeft","right","marginTop","tip","getViewportAdjustedDelta","delta","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","tipScope","$destroy","$promise","$new","$id","$sce","trustAsHtml","$setEnabled","$hide","setEnabled","isEnabled","toggle","compileData","tipContainer","bindTriggerEvents","isElement","onBeforeShow","after","lastChild","display","visibility","clonedElement","addClass","prefixClass","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","tooltip","transclusion","dataTarget","hasOwnProperty","$observe","bsTooltip","setViewport","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","self","newIndex","navigatePane","toLeft","$panes","$setActive","$activePaneChangeListeners","pane","$navClass","$activeClass","$onClick","tabPane","$labeledBy","$active","activeIndex","$remove","splice","$pane","$onKeyPress","e","charCode","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","liElements","find","iElement","bsActivePane","parsedBsActivePane","assign","render","$push","$describedBy","elem","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$selectNone","$updateActiveIndex","b","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","bsPopover","popover","routeAttr","$navbar","li","liElement","pattern","path","RegExp","backdrop","size","zIndex","containerElement","bodyElement","layoutHideElement","backdropCount","backdropBaseZindex","ModalFactory","modalElement","$modal","defaultPrevented","findFocusableElements","focusableElements","focusable","findNextFocusableElement","inReverse","reverse","unbindBackdropEvents","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","dialogBaseZindex","returnFocus","$show","bottom","destroyModalElement","z-index","customClass","validSizes","backdropAnimation","bindBackdropEvents","nextFocusable","shiftKey","lg","sm","modalClass","bsModal","modal","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","inMenu","relatedTarget","$onFocusOut","parentEl","hasClass","webkitMatchesSelector","Element","mozMatchesSelector","msMatchesSelector","oMatchesSelector","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","screenReaderDateFormat","focusOnOpen","DatepickerFactory","$datepicker","pickerViews","datepickerViews","altKey","setMode","$mode","focused","$views","views","$iconLeft","$iconRight","$hasToday","dropdownId","$nextLabel","labelNext","$previousLabel","$picker","handleOnKeyDown","$toggleMode","$setToday","$clear","$focused","selectedDayId","dayInfo","isNext","continueHandling","onKeyDown","inTable","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","built","$updateSelected","updateSelected","build","isSelected","steps","getUTCFullYear","getUTCMonth","$selectPane","UTC","getUTCDate","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysShortLabels","weekDaysLongLabels","weekDaysLabelsHtml","weekDayLabel","concat","picker","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","days","selectedDay","todayDay","dayItem","isToday","screenReaderLabel","muted","defaultFirstDayTabIndex","showLabels","labels","isTodayDisabled","hasSelectedDate","$modeLabel","isDisabled","getDay","actualTime","months","selectedMonth","monthItem","thisMonthDate","thisMonth","lastDate","actualMonth","firstYear","years","selectedYear","yearItem","thisYear","actualYear","setYear","Array","startCollapsed","allowMultiple","activeIndexes","$targets","deactivateItem","activateItem","$toggles","$collapse","$viewChangeListeners","$registerToggle","$registerTarget","$unregisterToggle","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","ENTER","SPACE","actionEventHandler","bsCollapseToggle","bind","log","action","$unregisterTarget","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","duration","dismissable","focusMeDisabled","$alert","containerEl","AlertFactory","toArray","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option","AsideFactory","$aside","bsAside","aside"],"mappings":"CAOA,SCIAA,EAAAA,EAAAC,GDHE,YAgsCA,SEznCFC,GAAAC,EAAAD,EAAAA,EAAAA,EAAAA,EAAAA,GFmsCI,QE1lCJE,GAAAC,EAAAA,GF2lCM,ME1lCNC,SAAAC,SAAAC,GAAAA,GAAAA,iBAAAA,IF6lCI,QAASC,GAAcC,GACrB,MAAIC,GAAcD,GAAkBC,EAAcD,GGnxCxDE,EAAAF,GAAAG,EAAAC,IAAAJ,GAIAK,MAAAA,IACAC,KAAAA,SAAAR,GACAS,MAAAA,GAAAC,OH+rCIC,KEznCJC,QAAAV,SAAAP,GACAkB,EAAAA,UAAAlB,UAAAkB,KAAAA,EAAAA,YACAC,QAAAC,KAAAA,oGACApB,EAAAqB,YAAAA,EAAAA,SACArB,EAAAsB,SAAAA,GAEA,IAAAC,GAAAA,EAAAvB,YAKAwB,EAAAC,EAAAJ,UAAAK,GACAR,EAAAS,EAAAD,WACAL,EAAAO,EAAAA,aFsnCUP,EErnCVrB,EAAAqB,YACAA,EAAAQ,EAAAD,WFsnCUE,EAAoB9B,EAAQ8B,mBAAqBN,QAAQO,SACzDR,EAAmBvB,EAAQuB,gBExmCrC,IAVAC,QAAAQ,QAAAX,EAAAC,SAAAA,EAAAA,GAEAf,QAAAoB,SAAAD,GACAL,EAAAY,GAAAA,EAAAC,IAAA3B,GAEAc,EAAAY,GAAAA,EAAA3B,OAAAP,KFqnCMyB,QAAQQ,OAAOX,EAASC,GEhnC9BtB,EACAqB,EAAAY,UAAAE,EAAAC,KAAAA,OAEA,CAAA,IAAAC,EFmnCQ,KAAM,IAAIC,OAAM,6CAFhBjB,GEhnCRkB,UAAAjC,EAAAP,GFmoCM,ME5nCNC,GAAAwC,gBAEAnB,EAAAY,UAAAE,EAAAC,KAAAf,EAAAY,UAAA3B,EAAAN,EAAAwC,iBAAAA,KACArC,SAAAsC,GACA,GAAAJ,GAAAb,QAAApB,QAAAqC,EAAA,GAKA,OAJAF,GAAAG,oBAAAL,EAAA,IAAAM,WAAAN,WACAM,KAAAA,EAAA,IAGA3C,EAAAD,GAAAA,aF2mCUC,EAAQwC,kBErmClBnB,EAAAe,UAAAf,EAAAlB,KAAAkB,EAAAC,UAAAA,EAAAA,EAAAA,mBAAAA,KAAAA,SAAAA,GAEA,GAAAf,GAAAuB,QAAAA,QAAAR,EAAAW,IACAjC,EAAAuC,EAAA,sBAAAF,EAAA,IAAAM,WAAA,WAAAC,KAAAH,EAAA,GFumCU,OEtmCVlC,GAAAA,aAAAsC,EAAAC,OAAAC,SFsmCiBV,EAAW,GAAGW,aE/lC/Bb,EAAAC,IAAAf,GAAAlB,KAAA,SAAAmB,GFmmCQ,GElmCRA,GAAAA,EAAAA,EAAAA,UACAlB,GAAAA,OACA6C,EAAA1C,EAAA2C,QAAAA,cAAAA,kBFomCQ,IEhmCR9C,GAAAc,QAAAd,QAAA,SAAAwC,KAAArC,EAAA4C,QAAAC,WFimCYC,EEhmCZC,EAAAA,EFimCQ,QACEhC,OEhmCVE,EFimCUpB,QAASA,EACT6C,KE/lCV,SAAAzB,GFimCY,GADAF,EE9lCZlB,OAAA8C,EACA9C,EAAAmD,CAEA,GAAAnC,GAAAA,EAAAF,EAAAI,GAAA,EACA4B,IF8lCgB1B,QAAQQ,OAAOsB,EAAWE,SAAUlC,EE1lCpD,IAAAmC,GAAAJ,QAAAK,SAAAC,GAAAA,EAAAA,GF6lCcvD,GAAQW,KAAK,0BAA2B0C,GACxCrD,EAAQmD,WAAWxC,KAAK,0BAA2B0C,GAC/CrC,IACF8B,EAAM9B,GAAgBqC,GAG1B,MAAOJ,GAAOO,MAAM,KAAMD,eAQlC,IAAInD,MA5wCNqD,ECIFC,SAAA,KAAA,QAAA,YAAA,WAAA,cAAA,kBDHEtC,QCIFuC,OAAA,4BAAA,yBAAA,wCAAAC,SAAA,aAAA,WDHI,GCIJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,YACAuB,YAAA,aACAC,UAAA,cACAC,YAAA,+BACAC,QAAA,QACAC,WAAAA,EACAC,UAAAA,EACAC,MAAAA,EDHMN,MAAO,ECMbC,UAAAM,EACAC,OAAAA,gBACAC,MAAA,EACAC,YAAA,EACAC,WAAA,GDJML,WAAW,GCSjBC,GDNMC,UCQNI,GDPMH,MCUN5E,GDTM6E,OCWNE,GDVMD,QCYNE,GDVIhE,MCYJkC,MAAA+B,UAAAA,aAAAA,WAAAA,QAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GDXM,QCaNC,GAAA9E,EAAAc,EAAAiE,GDgJQ,QAASC,GCmEjBC,GDlEU,GCmEVjF,IAAAuC,GAAAO,EAAA+B,GDjEiB,CACL,GAAIK,GAAWpC,EAAMqC,kBAAkBF,ECqEnDN,GDnEc3E,EAAQoF,KAAK,wBAAyBF,GC2EpDG,EAAAA,WAAAC,6BD/EYtF,GAAQuC,WAAW,yBA9JvB,GCaRO,MACAA,EAAAyC,QAAAA,UAAApB,EAAAA,EDZQQ,GAAaa,EAASxF,EAASJ,ECcvCkD,IAAAA,GAAAgC,EAAAA,MAEAhC,EAAA2C,EAAAC,MDbQ5C,GCcRA,GAAA6C,EAAAA,GDbQ7C,ECcR6B,cAAAiB,WDbU9C,EAAM+C,YACN/C,EAAMyC,aAAe3F,EAAQuE,WAAa,EAAI,IAEhDrB,ECeRA,gBDdQA,ECeR6B,UAAAmB,SAAAb,GDdUnC,EAAM6C,aAAa,WACjBhB,EAAWiB,SAASX,MAGxBnC,EAAMiD,QAAU,SAASd,EAAOe,GCkBxClD,EAAAmD,aAAA,WACAtB,EAAAY,OAAAA,MDdQzC,ECoBRA,WAAAoD,WACA,MAAApD,GAAAyC,cDlBQzC,EAAMmD,UAAY,SAAkBhB,GCwB5CkB,MAAAA,GAAArD,eAAAA,GAAAA,EAAAA,GDrBQ6B,EAAWyB,OAAS,SAASF,GCyBrCvB,EAAAA,SAAAiB,EACA9C,EAAAyC,cAAAN,EAAAA,SDvBYnC,EAAMyC,aAAe3F,EAAQuE,WAAa,EAAI,IC2B1DgC,EAAAlB,GACAoB,EAAA/E,EAAAwB,kBDvBQ6B,EC0BR7D,SAAAwF,SAAAA,GACAxD,EAAAgC,aAAAA,GDxBQH,EC2BR4B,OAAA3G,SAAAH,GACA,GAAA+G,KAAApF,EAAA,CD1BU,GC2BVxB,GAAA6G,EAAAA,SAAAxB,GAAAN,KD1BU7D,GAAW4F,cAAcpF,GACzBR,EAAWwF,UC+BrB3B,EAAAA,gBACAC,GAAAZ,EAAAlD,UD7BUgC,EC8BVyD,MAAAzD,EAAA+C,YAAAc,UAAAA,EAAAA,EAAAA,GD7BcvF,QAAQoF,UAAU5G,EAAQ6G,WAAarF,QAAQwF,WAAWhH,EAAQ6G,WCgChF7G,EAAAkD,SAAA+C,EAAAc,EAAAvF,KD5BQuD,ECgCR7B,WAAAA,WD/BU,MAAKlD,GAAQoE,WAAclD,ECoCrCmE,EAAAnC,SAAA+C,QAAAc,QAAA1B,SAAAnE,EAAA+F,aAAA/F,EAAA+F,WAAAF,QAAA/G,EAAAoE,YAFA8C,EAAAA,SAAAH,QD7BQ7D,EAAMqC,kBAAoB,SAASF,GCkC3C,MAAAA,GAAAA,GAAAA,EAAAA,GAAAA,qBAAAA,EAAAA,GAGAN,EAAAoC,UAAAA,SAAAzF,GAEA0E,GAAAgB,EACAhB,KAAAiB,EAAAA,EAAAA,SAAAA,OAAAA,MDlCgB7F,QAAQ8F,OAAOpE,EAAM+C,SAASZ,GAAO3D,MAAOA,KCsC5D,MAAA2D,IDlCQN,ECoCRwC,aAAAC,SAAAC,GDnCUrB,ECoCVgB,iBDnCUhB,ECoCViB,mBDlCQtC,ECsCR2C,kBAAAC,SAAAA,EAAAJ,GDrCU,GCsCVtD,EAAAA,IAAA2D,EAAAC,EAAAtE,SAAAU,OAAA2D,CDrCY,GAAIJ,GCsChBE,EAAAA,SAAAI,GAEA7D,EAAA2D,EAAAA,UDtCgBF,EAAeF,EAAOC,UAAYD,EAAOO,aACzCJ,EAAgB1D,EAAU2D,UAC1BE,EAAe7D,EAAU2D,UAAY3D,EAAU8D,YCyC/DhD,IAAA4C,GAAAvB,EAAAA,EAEAnC,EAAA2D,UAAAxB,KAAA4B,IAAAA,EAAA/D,EAAA2D,UAAA3D,EAAA8D,cAGAhD,EAAAkD,IACA7B,EAAAgB,UAAAA,KDvCQrC,EC6CRA,WAAA7B,SAAAyC,GD5Ce,aC8CfqC,KAAAA,EAAAtD,YACAxB,EAAAyC,cAAAA,EAAAA,UAAAA,EAAAA,OAAAA,KAAAA,EAAAA,eACAP,EAAAA,iBACA5D,EAAAA,mBAEA0B,EAAAyC,UAAAA,EAAAA,OAAAA,EAAAA,SAAAA,OACAP,EAAAA,OAAAA,EAAAlC,cACA9C,EAAAA,UAAA8H,EAAAA,SAAAlI,EAAAiF,aAAArC,GD7CYM,EC8CZyC,eACAzC,EAAAA,EAAAyC,cACAP,QAAAA,QAAAA,EAAAA,eAAAA,EAAAA,GAAAA,aAAAA,KAAAA,EAAAA,SAAAA,EAAAA,cAAAA,QD7CqBgB,EAAI4B,UAAYtD,EAAUC,WAAazB,EAAMyC,aAAezC,EAAM+C,SAASc,OAAS,GCiDzGhC,EAAAA,eACA7B,EAAAiF,EAAAA,cD/CY3G,QAAQpB,QAAQgI,EAASF,eAAelI,EAAQiF,GAAK,aAAarC,KAAKM,EAAM+C,SAAS/C,EAAMyC,cAAc0C,QCoDtHtD,QAAAA,YAAAuD,EAAAA,gBACAvD,EAAAA,aAAA,EACAuD,KDjDUvD,ECqDVA,kBAAAA,EAAAwD,SAAA,GAAArF,EAAAyC,cDpDUzC,ECqDViF,WDnDQ,IAAIG,GCsDZlI,EAAAkI,IDrDQvD,GCuDRuD,KAAAE,WDtDUF,IACAG,ECuDV1D,WDtDY,GAAIA,EAAWwD,SAAU,CACvB,GAAIvI,EAAQiF,GAAI,CC0D9BF,EAAAwD,SAAA/C,KAAA,KAAAxF,EAAAiF,GAAAjF,YAEA+E,EAAAA,KAAAwD,gBAAAvI,EAAA+E,GAAAA,WACA,IAAA/E,GAAAkE,EAAAgE,eAAAlI,EAAAiF,GAAA,WACA7E,IDzDkB2E,EAAWwD,SAASG,SAASC,OAAO,YAAc3I,EAAQiF,GAAK,2KAGnEF,EAAWwD,SAAS/C,KAAK,kBAAmBxF,EAAQ4I,gBC4DlEC,EAAA9D,SAAA8D,GAAAA,YAAAA,EAAAA,cACA9D,EAAAb,UACAa,GAAAwD,EAAAxD,GAAAA,UAAAwD,EAAAO,cDxDa,GAAG,GAER,IC2DR/D,GAAAA,EAAAiB,ID1DQjB,GAAW8D,KAAO,WC6D1BL,EAAAA,UAAAN,EAAAA,SAAAlI,IAAAiF,YAAAF,EAAAoC,cACA3F,EAAApB,UAEAgF,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YD3DepF,EAAQuE,YCgEvBwE,EAAAhE,SAAAA,GAEA,IAAAqB,GAAA4C,EAAAtE,eAAAK,EAAAA,GAAAkE,WD9DUzH,SC+DVuD,QAAA8D,GAAAA,SD9DUzD,IACAyD,ICkEVK,GAAAnE,QACAA,GAAAoE,SAAAA,SAAA/C,GACAA,EAAA4C,QAAAtE,EAAAG,QAAAE,EAAAkE,WACAlE,EAAA8D,OACAzC,EAAAiB,mBAMAjC,GAAAA,aDhDQ,OAlBAL,GCmERM,cAAAvF,SAAAmF,GACA7E,EAAAA,QAAAuC,EAAAkC,SDlEYE,ECmEZ8D,OACAzC,EAAAd,oBDpDeP,ECiFf,QAAAwB,GAAA6C,GACAlG,EAAAkG,SAAA5H,EAAAwF,OAAAoC,EAAAjJ,MAAAsF,SAAAvC,EAAAiF,UD5EM,MADAkB,GC+ENC,SAAA1I,ED9EayI,MAERhF,OC+EL,iBAAA+E,UAAAG,SAAA/E,GD9EI,MAAO,UAAS4E,EAAOG,EAAY/E,GACjC,MCiFNgF,IAAAhI,QAAAwF,WAAAoC,EAAAjJ,MAEAS,EAAAmE,KAAAA,SAAAnE,GAEA,MAAA0I,GAAA,UAAAG,EAAAF,EAAA/E,KAGA8E,EAAAI,UAAAxG,EAAA9C,EAAAoF,ODjFOgE,UCyFPxJ,eAAAA,UAAAA,SAAAA,KAAAA,aAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GDxFI,GAAIY,GCyFRsC,EAAAA,QDxFI,QACEyG,SCyFNlI,MDxFMmI,QCyFNpI,UDxFMyB,KAAM,SAAkBC,EAAO9C,EAASoF,EAAMtE,GC4FpDd,EAAAyJ,IAAAA,SACArI,IAAAA,IACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAA,YAAAI,QAAAA,UAAAA,WAAAA,OAAAA,YAAAA,SAAAA,QAAAA,YAAAA,eAAAA,aAAAA,aAAAA,aAAAA,KAAAA,cAAAA,cAAAA,kBAAAA,SAAAA,GACAiI,QAAAlD,UAAA/E,EAAAkI,MAAAC,EAAAA,GAAAnI,EAAAoI,KD3FQ,IC6FRjK,GAAAkD,eD5FQ1B,SAAQC,SAAU,OAAQ,YAAa,YAAa,UAAY,SAASI,GACnEL,QAAQoF,UAAUpB,EAAK3D,KAASgI,EAAiBK,KAAK1E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KCmG/FL,QAAA6C,SAAA7C,eAAAxB,SAAAqE,eAAAA,SAAAzD,YAAAyD,SAAAA,GACA,GAAAC,GAAAtE,KAAAsE,EAAAA,OAAA1D,GAAAA,cAAA0D,EAAAA,MAAAA,EACAE,SAAAA,UAAAxE,EAAAwE,MAEA2F,EAAAA,GAAA3E,EAAA2E,MAAAA,EAAAA,OAGA/J,EAAAoE,KAAA2F,iBAAA/J,EAAAoE,KAAAA,eAAAA,MDjGQ,IAAIH,GAAS7C,QAAQoF,UAAU5G,EAAQqE,QAAUrE,EAAQqE,OAASzD,EAASyD,OCmGnFC,EAAA6F,EAAAA,OAAAvJ,EAAA0D,MACA8F,EAAAA,EAAAC,YAAAF,EAAAA,WAGAG,EAAAvF,EAAAA,SAEAV,KAEAjE,GAAA,MAAAiE,EAAA,cDrGcG,IAAY2F,GAAa,IAAM3F,IC2G7CF,IAAAiG,GAAAH,cAAAI,EDxGQ,ICyGRtH,GAAAuH,EAAAF,GAEAH,EAAAA,EAAAlH,EAAAhC,EAAAf,EDtGQ,IAHKC,EC0GbkK,KAAA9D,sBAAAkE,EAAAA,aDzGUtK,EC0GVc,KAAAA,oBAAAwF,QDxGY1G,EAAQ2K,aAAc,CACxB,GAAIJ,GAAiBH,EAAcI,OAAO,GAAG3H,QAAQ,OAAQ,IAAIA,QAAQ,UAAW,IAAIM,MC6GlGD,GAAA0H,iBAAAC,EAAAC,SAAAC,EAAAA,GAEA7H,EAAA8H,SAAAF,EAAAA,GAAAA,KAAAA,SAAAA,GACAV,EAAAa,OAAAA,GAIA/J,EAAAgK,cD5GQhI,ECgHR0H,OAAAF,EAAA3D,QAAAzC,SAAAoG,EAAAA,GD/GUxH,ECgHVoH,YAAAI,ED/GUN,ECiHV1D,SAAAA,EAAAA,GAAAA,KAAAA,SAAAA,GDhHY,MAAI1G,GAAQkL,aAAeR,EAAO3D,QAAU+D,EAAS/D,OAAS,MAC5D7F,GAAW4F,cAAc5F,EAAW+F,WAAWkE,UAAU,EAAGjK,EAAW+F,WAAWF,OAAS,KCyHzGqE,EAAAA,OAAA9G,IAAAoG,EAAAA,EAAAT,MAAA,EAAA3F,IACAgG,EAAAc,OAAAA,ODrHYlK,GAAWwF,eAGfxF,EAAWmK,YAAYC,KAAK,SAASC,GC0H7C,GAAAH,GAAAhB,EAAAgB,aAAAG,EDxHU,OAAIH,GC4Hd1E,EAGAlF,QAAApB,UAAAmL,IAAA,gBAAAA,GD3HmBA,EC8HnBC,KD1HQtK,EC4HRQ,QAAA8J,WACA,GAAAC,EAAArL,SAAAsL,EAAAA,YACA,MAAAtL,GAAAuL,IAAAC,GAEAxL,IAAAA,GAAAyL,EAAAA,UAAAJ,EAAAK,aD3HcN,EAAqB,KAAVnG,EAAeiF,EAAUxE,OAAOG,SAASZ,GAAOgD,MAAQnH,EAAW+F,UC+H5F/D,GAAA1B,QAAAkC,SAAA8H,GAAApB,EAAAgB,aAAAI,GAAAA,CACApL,IAAAA,GAAAoL,EAAAA,EAAAO,WAAAlJ,QAAA,iBAAA,IAAA,GACAyH,EAAAA,EAAAA,GAAAA,eACAtK,EAAAA,EAAA,GAAA4L,YACAtB,GAAAA,IAAAtK,EAAAyE,aAAA,EAAA/C,EAAAA,EAAAyB,QD7HU/C,EAAQ,GAAGyL,kBAAkBJ,EAAIK,IAEnC5I,EAAM8I,IAAI,WAAY,WACpB5L,EAAQ6L,IAAI,WI7StBxL,GAAA6J,EAAA4B,UAIAtL,EAAAI,KACAH,EAAA,YJgTEW,QI3SFuC,OAAA,4BAAA,yBAAA,wCAAAC,SAAA,aAAA,WJ4SI,GI3SJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,YACAuB,YAAA,aACAC,UAAA,cACAC,YAAA,+BACAC,QAAA,QACAC,WAAAA,EACAC,UAAAA,EACAC,MAAAA,EJ4SMN,MAAO,EIzSbC,UAAAM,EACAC,OAAAA,gBACAC,MAAA,EACAC,YAAA,EACAC,WAAA,GJ2SML,WAAW,GItSjBC,GJySMC,UIvSNI,GJwSMH,MIrSN5E,GJsSM6E,OIpSNE,GJqSMD,QInSNE,GJqSIhE,MInSJkC,MAAA+B,UAAAA,aAAAA,WAAAA,QAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GJoSM,QIlSNC,GAAA9E,EAAAc,EAAAiE,GJqcQ,QAASC,GIvOjBC,GJwOU,GIvOVjF,IAAAuC,GAAAO,EAAA+B,GJyOiB,CACL,GAAIK,GAAWpC,EAAMqC,kBAAkBF,EIrOnDN,GJuOc3E,EAAQoF,KAAK,wBAAyBF,GI/NpDG,EAAAA,WAAAC,6BJ2NYtF,GAAQuC,WAAW,yBApKvB,GIlSRO,MACAA,EAAAyC,QAAAA,UAAApB,EAAAA,EJmSQQ,GAAaa,EAASxF,EAASJ,EIjSvCkD,IAAAA,GAAAgC,EAAAA,MAEAhC,EAAA2C,EAAAC,MJkSQ5C,GIjSRA,GAAA6C,EAAAA,GJkSQ7C,EIjSR6B,cAAAiB,WJkSU9C,EAAM+C,YACN/C,EAAMyC,aAAe3F,EAAQuE,WAAa,EAAI,IAEhDrB,EIhSRA,gBJiSQA,EIhSR6B,UAAAmB,SAAAb,GJiSUnC,EAAM6C,aAAa,WACjBhB,EAAWiB,SAASX,MAGxBnC,EAAMiD,QAAU,SAASd,EAAOe,GI7RxClD,EAAAmD,aAAA,WACAtB,EAAAY,OAAAA,MJiSQzC,EI3RRA,WAAAoD,WACA,MAAApD,GAAAyC,cJ6RQzC,EAAMmD,UAAY,SAAkBhB,GIvR5CkB,MAAAA,GAAArD,eAAAA,GAAAA,EAAAA,GJ0RQ6B,EAAWyB,OAAS,SAASF,GItRrCvB,EAAAA,SAAAiB,EACA9C,EAAAyC,cAAAN,EAAAA,SJwRYnC,EAAMyC,aAAe3F,EAAQuE,WAAa,EAAI,IIpR1DgC,EAAAlB,GACAoB,EAAA/E,EAAAwB,kBJwRQ6B,EIrRR7D,SAAAwF,SAAAA,GACAxD,EAAAgC,aAAAA,GJuRQH,EIpRR4B,OAAA3G,SAAAH,GACA,GAAA+G,KAAApF,EAAA,CJqRU,GIpRVxB,GAAA6G,EAAAA,SAAAxB,GAAAN,KJqRU7D,GAAW4F,cAAcpF,GACzBR,EAAWwF,UIhRrB3B,EAAAA,gBACAC,GAAAZ,EAAAlD,UJkRUgC,EIjRVyD,MAAAzD,EAAA+C,YAAAc,UAAAA,EAAAA,EAAAA,GJkRcvF,QAAQoF,UAAU5G,EAAQ6G,WAAarF,QAAQwF,WAAWhH,EAAQ6G,WI/QhF7G,EAAAkD,SAAA+C,EAAAc,EAAAvF,KJmRQuD,EI/QR7B,WAAAA,WJgRU,MAAKlD,GAAQoE,WAAclD,EI3QrCmE,EAAAnC,SAAA+C,QAAAc,QAAA1B,SAAAnE,EAAA+F,aAAA/F,EAAA+F,WAAAF,QAAA/G,EAAAoE,YAFA8C,EAAAA,SAAAH,QJkRQ7D,EAAMqC,kBAAoB,SAASF,GI7Q3C,MAAAA,GAAAA,GAAAA,EAAAA,GAAAA,qBAAAA,EAAAA,GAGAN,EAAAoC,UAAAA,SAAAzF,GAEA0E,GAAAgB,EACAhB,KAAAiB,EAAAA,EAAAA,SAAAA,OAAAA,MJ6QgB7F,QAAQ8F,OAAOpE,EAAM+C,SAASZ,GAAO3D,MAAOA,KIzQ5D,MAAA2D,IJ6QQN,EI3QRwC,aAAAC,SAAAC,GJ4QUrB,EI3QVgB,iBJ4QUhB,EI3QViB,mBJ6QQtC,EIzQR2C,kBAAAC,SAAAA,EAAAJ,GJ0QU,GIzQVtD,EAAAA,IAAA2D,EAAAC,EAAAtE,SAAAU,OAAA2D,CJ0QY,GAAIJ,GIzQhBE,EAAAA,SAAAI,GAEA7D,EAAA2D,EAAAA,UJyQgBF,EAAeF,EAAOC,UAAYD,EAAOO,aACzCJ,EAAgB1D,EAAU2D,UAC1BE,EAAe7D,EAAU2D,UAAY3D,EAAU8D,YItQ/DhD,IAAA4C,GAAAvB,EAAAA,EAEAnC,EAAA2D,UAAAxB,KAAA4B,IAAAA,EAAA/D,EAAA2D,UAAA3D,EAAA8D,cAGAhD,EAAAkD,IACA7B,EAAAgB,UAAAA,KJwQQrC,EIlQRA,WAAA7B,SAAAyC,GJmQU,GAAK,aIjQfqC,KAAAA,EAAAtD,SJiQU,CAKA,IIrQVxB,EAAAyC,cAAAA,EAAAA,UAAAA,EAAAA,OAAAA,KAAAA,EAAAA,eACAP,EAAAA,iBACA5D,EAAAA,mBAEA0B,EAAAyC,UAAAA,EAAAA,OAAAA,EAAAA,SAAAA,OACAP,EAAAA,OAAAA,EAAAlC,kBACA1B,IAAApB,EAAAA,UAAA8H,EAAAA,SAAAlI,EAAAiF,aAAArC,EJkQYM,EIhQZyC,eACAzC,EAAAA,EAAAyC,cACAnE,QAAA2K,QAAA/F,EAAAgG,eAAAnH,EAAAA,GAAAA,aAAAA,KAAAA,EAAAA,SAAAA,EAAAA,cAAAA,WACAzD,IAAApB,EAAAA,UAAAsE,EAAAxD,WAAA+F,EAAAA,aAAAA,EAAAA,SAAAA,OAAAA,EACAzF,EAAAA,eJiQY4D,EI/PZiH,EAAAnJ,cACAA,QAAAyC,QAAAA,EAAAuC,eAAAlI,EAAAiF,GAAA,aAAArC,KAAAM,EAAA+C,SAAA/C,EAAAyC,cAAA0C,WACAjD,IAAAA,EAAAA,UAAAA,EAAAA,SAAAA,GAAAA,EAAAA,cAAAA,EAAAA,UAAAA,EAAAA,WAAAA,EAAAA,cAAAA,EAAAA,SAAAA,OAAAA,EAAAA,CJgQYlC,EAAMyC,aAAe,EI5PjCZ,IAAAA,GAAAuH,IAAAA,EAAAA,cAAAvH,EACA7B,SAAAiF,QAAAA,GAAAA,IAAAA,IAAAA,IAAAA,EAAAA,YJ8PY3G,QAAQpB,QAAQ+L,GAAKI,YIzPjCxH,SAAAA,YAAAuD,EAAAA,gBACAvD,EAAAA,aAAA,EACAuD,IJ4PUvD,GIxPVA,kBAAAA,EAAAwD,SAAA,GAAArF,EAAAyC,cJyPUzC,EIxPViF,WJ0PQ,IAAIG,GIvPZlI,EAAAkI,IJwPQvD,GItPRuD,KAAAE,WJuPUF,IACAG,EItPV1D,WJuPY,GAAIA,EAAWwD,SAAU,CACvB,GAAIvI,EAAQiF,GAAI,CInP9BF,EAAAwD,SAAA/C,KAAA,KAAAxF,EAAAiF,GAAAjF,YAEA+E,EAAAA,KAAAwD,gBAAAvI,EAAA+E,GAAAA,WACA,IAAA/E,GAAAkE,EAAAgE,eAAAlI,EAAAiF,GAAA,WAIA7E,IACA2E,EAAA3E,SAAAoM,SAAA7D,OAAA5D,YAAA+D,EAAAA,GAAAA,2KAGA/D,EAAAwD,SAAA/C,KAAA,kBAAAxF,EAAA4I,gBJiPc7D,EAAWwD,SAASiE,GAAG,YAAazH,EAAWoC,cI9O7D0B,EAAA9D,WACA8D,GAAAzI,EAAA6L,IAAA,UAAAlH,EAAA+D,YACA/D,GAAAwD,EAAAxD,GAAAA,UAAAwD,EAAAO,eJkPa,GAAG,GAER,II/OR/D,GAAAA,EAAAiB,IJgPQjB,GAAW8D,KAAO,WI7O1BL,EAAAA,UAAAN,EAAAA,SAAAlI,IAAAiF,YAAAF,EAAAoC,cACA3F,EAAApB,UAEAgF,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YJ+OepF,EAAQuE,YI1OvBwE,EAAAhE,SAAAA,GAEA,IAAAqB,GAAA4C,EAAAtE,eAAAK,EAAAA,GAAAkE,WJ4OUzH,SI3OVuD,QAAA8D,GAAAA,SJ4OUzD,IACAyD,IIxOVK,GAAAnE,QACAA,GAAAoE,SAAAA,SAAA/C,GACAA,EAAA4C,QAAAtE,EAAAG,QAAAE,EAAAkE,WACAlE,EAAA8D,OACAzC,EAAAiB,mBAMAjC,GAAAA,aJ0PQ,OAlBAL,GIvORM,cAAAvF,SAAAmF,GACA7E,EAAAA,QAAAuC,EAAAkC,SJwOYE,EIvOZ8D,OACAzC,EAAAd,oBJsPeP,EIzNf,QAAAwB,GAAA6C,GACAlG,EAAAkG,SAAA5H,EAAAwF,OAAAoC,EAAAjJ,MAAAsF,SAAAvC,EAAAiF,UJ8NM,MADAkB,GI3NNC,SAAA1I,EJ4NayI,MAERhF,OI3NL,iBAAA+E,UAAAG,SAAA/E,GJ4NI,MAAO,UAAS4E,EAAOG,EAAY/E,GACjC,MIzNNgF,IAAAhI,QAAAwF,WAAAoC,EAAAjJ,MAEAS,EAAAmE,KAAAA,SAAAnE,GAEA,MAAA0I,GAAA,UAAAG,EAAAF,EAAA/E,KAGA8E,EAAAI,UAAAxG,EAAA9C,EAAAoF,OJyNOgE,UIjNPxJ,eAAAA,UAAAA,SAAAA,KAAAA,aAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GJkNI,GAAIY,GIjNRsC,EAAAA,QJkNI,QACEyG,SIjNNlI,MJkNMmI,QIjNNpI,UJkNMyB,KAAM,SAAkBC,EAAO9C,EAASoF,EAAMtE,GI9MpDd,EAAAyJ,IAAAA,SACArI,IAAAA,IACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAA,YAAAI,QAAAA,UAAAA,WAAAA,OAAAA,YAAAA,SAAAA,QAAAA,YAAAA,eAAAA,aAAAA,aAAAA,aAAAA,KAAAA,cAAAA,cAAAA,kBAAAA,SAAAA,GACAiI,QAAAlD,UAAA/E,EAAAkI,MAAAC,EAAAA,GAAAnI,EAAAoI,KJ+MQ,II7MRjK,GAAAkD,eJ8MQ1B,SAAQC,SAAU,OAAQ,YAAa,YAAa,UAAY,SAASI,GACnEL,QAAQoF,UAAUpB,EAAK3D,KAASgI,EAAiBK,KAAK1E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KIvM/FL,QAAA6C,SAAA7C,eAAAxB,SAAAqE,eAAAA,SAAAzD,YAAAyD,SAAAA,GACA,GAAAC,GAAAtE,KAAAsE,EAAAA,OAAA1D,GAAAA,cAAA0D,EAAAA,MAAAA,EACAE,SAAAA,UAAAxE,EAAAwE,MAEA2F,EAAAA,GAAA3E,EAAA2E,MAAAA,EAAAA,OAGA/J,EAAAoE,KAAA2F,iBAAA/J,EAAAoE,KAAAA,eAAAA,MJyMQ,IAAIH,GAAS7C,QAAQoF,UAAU5G,EAAQqE,QAAUrE,EAAQqE,OAASzD,EAASyD,OIvMnFC,EAAA6F,EAAAA,OAAAvJ,EAAA0D,MACA8F,EAAAA,EAAAC,YAAAF,EAAAA,WAGAG,EAAAvF,EAAAA,SAEAV,KAEAjE,GAAA,MAAAiE,EAAA,cJqMcG,IAAY2F,GAAa,IAAM3F,II/L7CF,IAAAiG,GAAAH,cAAAI,EJkMQ,IIjMRtH,GAAAuH,EAAAF,GAEAH,EAAAA,EAAAlH,EAAAhC,EAAAf,EJoMQ,IAHKC,EIhMbkK,KAAA9D,sBAAAkE,EAAAA,aJiMUtK,EIhMVc,KAAAA,oBAAAwF,QJkMY1G,EAAQ2K,aAAc,CACxB,GAAIJ,GAAiBH,EAAcI,OAAO,GAAG3H,QAAQ,OAAQ,IAAIA,QAAQ,UAAW,IAAIM,MI7LlGD,GAAA0H,iBAAAC,EAAAC,SAAAC,EAAAA,GAEA7H,EAAA8H,SAAAF,EAAAA,GAAAA,KAAAA,SAAAA,GACAV,EAAAa,OAAAA,GAIA/J,EAAAgK,cJ8LQhI,EI1LR0H,OAAAF,EAAA3D,QAAAzC,SAAAoG,EAAAA,GJ2LUxH,EI1LVoH,YAAAI,EJ2LUN,EIzLV1D,SAAAA,EAAAA,GAAAA,KAAAA,SAAAA,GJ0LY,MAAI1G,GAAQkL,aAAeR,EAAO3D,QAAU+D,EAAS/D,OAAS,MAC5D7F,GAAW4F,cAAc5F,EAAW+F,WAAWkE,UAAU,EAAGjK,EAAW+F,WAAWF,OAAS,KIjLzGqE,EAAAA,OAAA9G,IAAAoG,EAAAA,EAAAT,MAAA,EAAA3F,IACAgG,EAAAc,OAAAA,OJqLYlK,GAAWwF,eAGfxF,EAAWmK,YAAYC,KAAK,SAASC,GIhL7C,GAAAH,GAAAhB,EAAAgB,aAAAG,EJkLU,OAAIH,GI9Kd1E,EAGAlF,QAAApB,UAAAmL,IAAA,gBAAAA,GJ+KmBA,EI5KnBC,KJgLQtK,EI9KRQ,QAAA8J,WACA,GAAAC,EAAArL,SAAAsL,EAAAA,YACA,MAAAtL,GAAAuL,IAAAC,GAEAxL,IAAAA,GAAAyL,EAAAA,UAAAJ,EAAAK,aJ+KcN,EAAqB,KAAVnG,EAAeiF,EAAUxE,OAAOG,SAASZ,GAAOgD,MAAQnH,EAAW+F,UI3K5F/D,GAAA1B,QAAAkC,SAAA8H,GAAApB,EAAAgB,aAAAI,GAAAA,CACApL,IAAAA,GAAAoL,EAAAA,EAAAO,WAAAlJ,QAAA,iBAAA,IAAA,GACAyH,EAAAA,EAAAA,GAAAA,eACAtK,EAAAA,EAAA,GAAA4L,YACAtB,GAAAA,IAAAtK,EAAAyE,aAAA,EAAA/C,EAAAA,EAAAyB,QJ6KU/C,EAAQ,GAAGyL,kBAAkBJ,EAAIK,IAEnC5I,EAAM8I,IAAI,WAAY,WACpB5L,EAAQ6L,IAAI,WKlmBtBQ,GAAAC,EAAAlL,UACAA,EAAA,KAIAmL,EAAAA,YLqmBMnL,QKxlBNiL,QAAAC,MAAA,GAAAlL,QAAAiL,QAAAG,IAAA,ILylBIpL,QKxlBJqL,OAAAA,MAAAA,QAAA5H,SAAAA,UAAAA,WAAAA,SAAAA,EAAAA,GLylBM,GAAI0H,GAAwBG,EAAQH,uBAAyBG,EAAQC,6BAA+BD,EAAQE,yBKtlBlHH,EAAAI,EAAAA,sBAAAA,EAAAA,4BAAAA,EAAAA,yBAAAA,EAAAA,kCACAC,IAAAzE,EACA0E,EAAAD,EAAA,SAAAD,GLwlBQ,GKvlBRxE,GAAAA,EAAA2E,ELwlBQ,OAAO,YACLP,EAAqB5H,KKnlB/B,SAAAkI,GLslBQ,GAAIC,GAAQ3E,EAASwE,EAAI,OAAO,EAChC,OAAO,YMtnBfxM,EAAA4M,OAAAD,IAQApM,ONknBMmM,GAAIG,UAAYJ,EMlnBtBK,KNsnBE/L,QM/mBFf,OAAAT,0CAAAmF,SAAAA,gBAAAA,WNgnBI,GM/mBJkF,GAAAA,KAAAmD,UNgnBMC,OM7mBNC,+KN+mBI1M,MM7mBJuM,MAAAI,SAAAA,KAAAA,SAAAA,EAAAA,GN8mBM,QM5mBNC,GAAAA,EAAAA,GN8oBQ,QMpmBRlM,GAAAwB,EAAA5B,GNqmBU,MMpmBVoJ,GAAAmD,IAAA,SAAAH,EAAArI,GNqmBY,GMrmBZ3D,GAAA2D,EAAAgD,IAIAgC,ONomBY/I,GAAOqM,GAAaD,EACpBrF,EAAQyF,EAAU5K,EAAO5B,GACzBI,EAAQqM,EAAQ7K,EAAO5B,IMrmBnC+G,MAAAgC,ENwmBc3I,MAAOA,EMpmBrBsM,MAAAA,KAnDA,GAAAC,MAEAF,EAAAA,QAAAA,UAAAA,EAAAA,EACA1D,GAAAY,UAEAZ,IAAAA,GACAA,EACAyD,EACAH,EACAC,EACAK,EACAF,CChCApE,OP2oBQU,GM1mBR6D,KAAAR,WN2mBUrD,EAAcG,OAASkD,EAAQlI,EAAKkI,MAAM1N,EAAQyN,QMxmB5DpD,EAAAY,EAAAA,EAAA,IAAAyC,EAAAxK,IACAyK,EAAAzL,EAAA+I,IAAA/H,EAAAA,GN0mBU0K,EMxmBVpM,EAAA2M,GNymBUF,EMxmBVvD,EAAAA,EAAAA,IAAAA,INymBUqD,EAAUG,EAAOR,EAAM,GAAKA,EAAM,GAAKC,GACvC1C,EMxmBVZ,EAAAmD,EAAAA,KN0mBQnD,EAAcY,SAAW,SAAS/H,EAAOhC,GACvC,MAAOiB,GAAGD,KAAK+I,EAAS/H,EAAOhC,IAAaf,KAAK,SAASuK,GAKxD,MM3mBZL,SAAAe,QAAAA,KACAlI,MAEAmH,EAAAyD,QAAA5K,EAAAA,OAAAA,EAAAA,EAAAA,MNwmBmBmH,EAAcmD,WAGzBnD,EMpmBR/I,aAAAA,SAAAA,GNqmBU,GMpmBV4B,KNsmBU,OADAA,GMpmBVxB,GAAAA,EACAJ,EAAAqM,IC7DAtD,EAAA+D,OACAzE,EPorBM,MO9qBNsD,OPirBEzL,QAAQf,OO7qBV4N,wCAAA7E,UAAA,cAAA,SAAA,aAAA,SAAA0E,EAAAI,GP8qBI,OACE3E,SO7qBN4E,IP8qBMtN,QAAS,SAASsH,EAAU/C,GAC1B,GAAIyH,GAAKiB,EAAO1I,EAAKgJ,WACrB,OO7qBR,UAAA/I,EAAArF,GP8qBU,QO7qBV8C,GAAAmL,GP8qBY,GAAIA,GO7qBhB,WACAnL,EAAAA,GP8qBgBqL,OAAQE,IOvqBxBzC,GAAAvG,QAEArF,EAAA6L,WAAAoC,GP2qBcnL,EAAMwL,OAAOL,GAGjBjO,EAAQoM,GAAG,WAAYmC,GQ5sBjClO,EAAAA,IAAA,WAAA,WAEAL,EAAA6L,IAAA,WAAA0C,WRktBEnN,QAAQf,OAAO,0CAA2C+I,UAAU,gBAAkB,WAAY,SAAU,SAASf,EAAUyF,GAC7H,OACEjL,KAAM,SAASC,EAAO9C,EAASwO,GAC7B1L,EAAM0H,OAAOgE,EAAMC,aAAc,SAASnN,GACpCA,KAAU,GACZ+G,EAAS,WSztBrBhI,EAAA,GAAA8L,iBTiuBE/K,QS1sBFpB,OAAAA,wCAAA0O,QAAA,aAAA,WTyyBI,QSvpBJC,GAAAC,GTwpBM,GAAIA,GAAa5O,EAAQ6O,cS9oB/BC,EAAA9O,EAAAA,cAAA+O,CACA,IAAAzN,EAAAtB,EAAAgP,aAAAA,MAAAA,GAAAA,eACA,MAAAD,IAAAE,EAAAN,EAAA,SAAA,WAAA9B,EAAAqC,IAAAP,EAAA,aACArN,EAAA4N,EAAAP,YTipBM,OS/oBNrN,IAAAtB,EAAAmP,gBT0iBI,GS1sBJ7N,MT2sBQ2N,ES1sBRG,EAAAA,SAAAC,SAAArP,EAAAsP,GT2sBM,MS1sBNhO,GAAA8N,UAAAC,EAAArP,SAAAuP,gBAAAA,EAAAA,cTi0BI,OArHA1C,GAAGqC,IS1sBP5N,SAAAtB,EAAAuP,EAAAA,GT2sBM,GAAIjO,EAQJ,OANEA,GS3sBRtB,EAAAwP,aT2sBgBxP,EAAQyP,aAAaF,GSlsBrCH,EAAAC,iBACAK,EAAA1P,iBAAA2P,GAAAA,GAEA3P,EAAA4P,MAAAL,GAEAT,KAAAY,EAAAZ,WAAA9O,IAAAgP,EAAAA,GTqsBInC,EAAGgD,OSnsBPH,SAAAI,GTosBM,GAAIJ,GAAU1P,EAAQ2P,wBAClBf,EAAa5O,EAAQ6O,aSzrB/BhC,QACAkD,MAAAC,EAAAA,OAAAA,EAAAA,YACAlB,OAAAmB,EAAAA,QAAAA,EAAAA,aACAC,IAAAC,EAAAA,KAAAA,EAAAA,aAAAA,EAAAA,gBAAAA,YAAAA,EAAAA,gBAAAA,WAAAA,GACAL,KAAAM,EAAAA,MAAAA,EAAAA,aAAAA,EAAAA,gBAAAA,aAAAA,EAAAA,gBAAAA,YAAAA,KT6rBIvD,ES1rBJwD,UAAAC,SAAAA,EAAAA,EAAAA,GACA,GAAAC,GACAC,EACAC,EAGAF,EACAvQ,ETyrBU0Q,EStrBVC,EACAR,EAAAjB,EAAAA,IAAAlP,EAAA,YACA0Q,EAAA7D,QAAA7M,QAAAA,GACAsQ,IAKAA,YAAAA,IACAN,EAAAA,MAAAnD,SAAA0D,YTqrBMI,ESnrBNX,EAAAA,OAAAA,GTorBMG,ESnrBNtD,EAAAqC,IAAAlP,EAAA,OTorBM0Q,ESnrBNE,EAAAA,IAAAA,EAAAT,QTorBMG,GSnrBNI,aAAAE,GAAA,UAAAL,KAAAJ,EAAAO,GAAAG,QAAA,QAAA,GTorBUP,GSjrBVN,EAAApJ,EAAAA,SAAAhH,GACAA,EAAAA,EAAAkR,ITmrBQb,EAAUD,EAAYF,OS/qB9BW,EAAAP,WAAAA,IAAAS,ETkrBQV,EAAUW,WAAWF,IAAe,GS/qB5CD,QAAAX,WAAAA,KTkrBQlQ,EAAUA,EAAQkR,KAAK9Q,EAAS+Q,EAAGJ,IS9qB3CG,OAAAlR,EAAAoR,MTirBQP,EShrBRP,IAAAtQ,EAAAsQ,IAAAS,EAAAT,IAAAE,GAEA,OAAAF,EAAAO,OTirBQA,EShrBRX,KAAAW,EAAAX,KAAAa,EAAAb,KAAAG,GTkrBU,SAAWrQ,GACbA,EAAQoR,MAAMF,KAAKN,EAASC,GStqBpCD,EAAAS,KAAAf,IAAAO,EAAAP,IAAA,KAAAJ,KAAAW,EAAAX,KAAA,QT8qBIjD,ESzqBJ0D,SAAAvQ,SAAAA,GT0qBM,GS9pBNkR,GACAD,EAVApB,GTwqBQK,IStqBR,EAGAgB,KAAAA,EA4BA,OT4oB0C,UAAhCrE,EAAGqC,IAAIlP,EAAS,YS/pB1BiR,EAAAA,EAAAf,yBTkqBQgB,EAAiBC,EAAoBnR,GS7pB7C6P,EAAAhD,EAAAgD,OAAA7P,GACA+P,EAAA/P,EAAAoR,UACAtC,EAAAE,EAAAA,OAAAA,IAEAc,EAAAA,KAAAmB,EAAAA,IAAAA,EAAA/B,kBAAA,GT+pBQ+B,EAAiBnB,MAAQjD,EAAGqC,IAAIgC,EAAgB,mBAAmB,KSppB3EnB,MAAAnB,EAAA5O,YACA8O,OAAAH,EAAAA,aACAuB,IAAAjB,EAAAN,IAAAA,EAAAuB,IAAArD,EAAAqC,IAAAN,EAAAO,aAAAA,GACAW,KAAAnB,EAAAA,KAAAA,EAAAA,KAAAA,EAAAO,IAAAlP,EAAAkP,cAAAP,KTmqBI9B,ES/oBJiC,OAAAxN,SAAAA,EAAAA,GTgpBM,GAAIA,GAAQtB,EAAQgP,YAMpB,OS5oBNe,GACAzO,GAAAA,EAAAtB,IAAAA,EAAAoR,aAAAA,GAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,GAEA9P,GAAAuL,EAAAqC,IAAAlP,EAAA,cAAA,GAAA6M,EAAAqC,IAAAlP,EAAA,iBAAA,GAAA6M,EAAAqC,IAAAlP,EAAA,kBAAA,GAAA6M,EAAAqC,IAAAlP,EAAA,qBAAA,GAEAsB,GTyoBIuL,ESvoBJkD,MAAAzO,SAAAA,EAAAA,GTwoBM,GAAIA,GAAQtB,EAAQoR,WU50B1B,ODuMArC,GTuoBQzN,GAASuL,EAAGqC,IAAIlP,EAAS,cAAc,GAAQ6M,EAAGqC,IAAIlP,EAAS,eAAe,GUh1BtFsB,GAAAuL,EAAAwE,IAAAA,EAAAC,eAAAA,GAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,mBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,oBAAAA,GAEAhQ,GAEAuL,IVo1BEzL,QUl1BFf,OAAAkR,sCAAA7C,QAAA,YAAA,WAAA,SAAArG,GVm1BI,MUl1BJA,UAAA4E,EAAAsE,EAAAA,GVm1BM,GAAIA,GAAU,IACd,OUl1BNA,YVm1BQ,GUl1BRA,GAAA3Q,KACA4Q,EAAAF,UACAD,EAAA7N,IAAAgO,CAkBA,OVi0BYD,IACFlJ,EUl1BV4E,OAAAsE,GVo1BQA,EUl1BR/N,EAAAiO,WVm1BUF,EAAU,KUj1BpBA,GVm1BYF,EAAK7N,MAAMiO,EAASD,IU30BhC9C,GAAA,GACAgD,GACAH,EAAAA,MAAAE,EAAAD,GAEAD,OVg1BO7C,QU70BP6C,YAAA,WAAA,SAAAlJ,GV80BI,MU70BJ,UAAAzI,EAAA+R,EAAAA,GV80BM,GAAIJ,GU70BV/N,IV+0BM,OADK5D,KAASA,MU50BpB2R,WV80BQ,GU70BRA,GAAA3Q,KACA4Q,EAAA5R,SV80Ba2R,KACC3R,EAAQ+R,WAAY,GACtBN,EU70BZO,MAAAH,EAAAD,GV+0BUD,EAAUlJ,EAAS,WACjBkJ,EAAU,KACN3R,EAAQiS,YAAa,GWh4BrCxR,EAAAmD,MAAAiO,EAAAD,IAOAM,GAAA,SXi4BE1Q,QW53BFR,OAAAmR,wCAAAnO,SAAA,eAAA,kBAAA,SAAAoO,GX63BI,QW53BJC,KX63BMrR,KAAKkR,KAAO,KW13BlBI,KAAAA,MAAAC,EAAAvR,KAAAqR,IAAAA,EX63BMrR,KAAKwR,MAAQ,EW53BnBF,KAAAA,QAAAC,EAAAvR,KAAAmR,QAAAzQ,EX+3BMV,KAAKqR,aAAe,EAwCtB,QWr4BJI,MXs4BI,QWr4BJrJ,GAAAsJ,GXs4BM,OWt4BNC,MAAAxB,WAAAA,KAAAA,SAAAA,GXw4BI,QAASyB,GAAuBxJ,EAAO1H,GWn4B3C,IAAAd,GAHAiS,GAAAzJ,EAAArC,OXw4BU+L,EAAMpR,EAAMqK,WAAW2G,cWr4BjC9R,EAAAI,EAAAJ,EAAAI,EAAAJ,IACAmS,GAAAA,EAAA5B,GAAAuB,gBAAAI,EACAE,MAAA7B,EAKA,OAAA8B,GXk1BIX,EWh4BJY,UAAAxR,gBAAAA,SAAAA,GXi4BMV,KAAKqR,aAAe3Q,GAEtB4Q,EWl4BJE,UAAA9Q,WAAAA,SAAAA,GXm4BMV,KAAKmR,QAAUzQ,GAEjB4Q,EWp4BJtR,UAAAwR,WAAAA,SAAAA,GXq4BMxR,KAAKkS,QAAUxR,GAEjB4Q,EWt4BJa,UAAAzR,SAAAA,SAAAA,GXu4BMV,KAAKwR,MAAQ9Q,GAEf4Q,EWx4BJc,UAAA1R,SAAAA,WXy4BM,MAAOV,MAAKwR,OAEdF,EW14BJJ,UAAAxQ,QAAAA,SAAAA,GX24BMV,KAAKmS,IAAMzR,GAEb4Q,EW34BJJ,UAAAmB,SAAAA,SAAAA,GACArS,KAAAoS,MAAA1R,GX64BI4Q,EW34BJE,UAAA9Q,YAAA4R,SAAAA,GACAtS,KAAAkS,KAAAA,GX64BIZ,EW34BJD,UAAAA,SAAAkB,SAAAA,GAaA,MAZAvS,MAAAkR,KAAAlR,EAAAA,cX44BMA,KAAKoS,MAAQ1R,EAAM8R,WWz4BzBlB,KAAAA,IAAAC,EAAAA,UACAvR,KAAAwR,MAAAiB,EAAAzS,WX24BMA,KAAKkS,QAAUxR,EAAMgS,aWx4B3B1S,KAAA2S,QAAArB,EAAAC,aAEAvR,KAAAqR,aAAAI,EAAAA,kBAGAmB,MXw4BItB,EAAUC,UAAUsB,OAAS,WWp4BjC,MAAAjB,IAAAA,MAAAA,KAAAA,KAAAA,KAAAxJ,MAAA1H,KAAAA,IAAAA,KAAAA,MAAAA,KAAAA,QAAAA,KAAAA,QAAAA,KAAAA,cXu4BI,IWr4BJiS,GAAAjS,EAAAqK,UAkBAnL,EAAAkT,KAAAA,UXm4BMf,OWh4BNgB,YXi4BMf,QWh4BNgB,EXk4BIhT,MAAKuM,MWh4BTvN,UAAAgT,aAAA,SAAAiB,EAAAC,GXi4BM,GWh4BNC,GAAA,SAAAhP,GXghCQ,QWj2BRiP,GAAArB,GACA,GAAAsB,GAAAA,EAAAC,EACA,OAAAC,GAAAC,GXm2BQ,QWh2BRhT,GAAAuR,GXi2BU,GWh2BV0B,GAAAC,EAAA3B,GACA4B,EAAAC,EAAAD,QAAAA,MAAAA,QXi2BcP,EWh2Bd,kBAEAC,EAAAC,EAAAvN,MAAAoK,GXg2BcoD,EW/1BdM,OAAAN,KAAAA,GXg2BcO,IAWJ,OAVAtT,SAAQC,QAAQ4S,EAAa,SAASM,GW91BhDG,GAAAA,EAAAH,GXg2BcA,EAAOC,EAAuBD,OAE9B,KAAK,GAAIxD,GAAI,EAAGA,EAAIoD,EAAaxN,OAAQoK,IW51BvDwD,EAAAI,EAAAA,MAAAA,EAAAC,IAAAA,KAAAA,KAAAA,EAAAA,IAaAF,GAAAJ,KAAAA,KXq1BiBI,EAAeG,KAAK,IAE7B,QWl1BRD,GAAAA,GXm1BU,MAAOA,GAAKnS,QAAQ,MAAO,UAAUA,QAAQ,KAAM,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,OAAQ,SAEtO,QWj1BR0R,GAAAC,GACA,MAAAU,SAAAC,KAAAA,GXm1BQ,QW/0BRD,GAAAF,GXg1BU,MAAOA,GAAKnS,QAAQ,WAAY,MAElC,QAASuS,GAAoBD,GW10BrC,IAAA,GAFAZ,GAAAc,OAAAtC,KAAAA,GACAmC,EAAAI,EACAC,EAAAA,EAAAA,EAAAA,EAAAL,OAAAA,IX80BYA,EAAKA,EAAGL,MAAM,KAAO1D,EAAI,KAAK8D,KAAK,IAAMlB,EAAUQ,EAAapD,IAAM,IW10BlF,OAAAoD,IAAAA,QAAAA,IAAAiB,EAAAhB,KAAAT,MX80BQ,QW50BR0B,GAAAA,GACA,GAAAC,GAAAA,EAAAA,EACA,OAAAC,GAAAA,GX80BQ,QW50BRC,GAAAA,GXo1BU,IWj1BV,GAEAD,GACAE,EAEAD,EX00BcC,EW/0BdtB,EAAAkB,OAAAK,KAAAA,GACAJ,EAAAD,GAAAA,QAAA,cAAA,KAOAG,KXy0BqE,QAAnDH,EAAcK,EAAYC,KAAKZ,KWt0BjDrB,EAAA1F,EAAAA,GACAuH,EAAA7B,EAAAA,GXw0BY+B,EAAgBG,EAASL,GWp0BrCC,EAAA3C,KAAAA,EXu0BU,OAAO2C,GAzMT,GW30BR9B,GACAmC,EAtDAC,EAAAlD,QAAAhR,UAAApB,EAAAuE,GACAgR,KACAC,GACAC,IAAA,WACAC,GAAAtW,aACAuW,EAAAvW,EAAAgT,OAAA,cAAA,mBACAwD,GAAAA,aACAC,EAAAA,EAAAxC,OAAAyC,cAAAC,mBACAC,GAAA,mBACAC,EAAA7W,EAAAgT,OAAA,iBAAA,oBACA8D,GAAAA,oBACAC,EAAAA,EAAA9C,OAAAyC,eAAAM,iBACAC,EAAAA,QACAC,KAAAlX,EAAAgT,iBAAAmE,IAAAlC,KAAA,KACAmC,IAAAA,EAAAV,iBAAAC,SAAA1B,KAAA,KACAoC,GAAA,yBACAC,EAAAtX,EAAAgT,OAAA,yBAAA,2BXi4BU8D,KAAM7C,EAAQyC,iBAAiBa,MAAMtC,KAAK,KW93BpD8B,IAAAf,EAAAA,iBAAAA,WAAAA,KAAAA,KACAhC,GAAAA,gBACAvI,EAAAA,EAAA+L,OAAAA,eAAAA,iBACAC,KAAA9D,gCACAQ,GAAAR,WACAuC,EAAAvC,EAAA+D,OAAAA,wBAAAA,kBAEAtB,GACAC,IAAA1C,EAAAgE,gBACArB,GAAA3C,EAAAgE,WACAnB,EAAAA,EAAA/D,WACAgE,GAAAA,EAAAhE,WACAmE,EAAAA,EAAAjD,WACAkD,GAAAlD,EAAAiE,SACArB,EAAA5C,EAAAgE,SXg4BUtB,GWh4BV1C,EAAAnB,SXi4BU8D,EWj4BV3C,EAAA3S,SXk4BUwV,KAAM/D,EWj4BhBqE,IAAAA,EXm4BUF,GWn4BVjD,EAAA3S,QXo4BU6V,EAAGlD,EAAMiE,QWn4BnBb,EAAAA,SAAArV,GAAA,GAAA8Q,GAAAqF,KAAAA,WAAAjF,EXs4BY,OAAO5R,MAAK2W,SAASjW,EAAMgM,MAAM,OAAS8E,EAAQ,GAAKA,IAEzDsE,KWv4BV,SAAAe,GXw4BY,MAAO7W,MAAK6W,SAASjF,EAAuBqB,EAAQyC,iBAAiBa,MAAO7V,KAE9EqV,IWz4BV,SAAAc,GX04BY,MAAO7W,MAAK6W,SAASjF,EAAuBqB,EAAQyC,iBAAiBM,WAAYtV,KWx4B7F2V,GAAA,SAAA3V,GAAA,MAAAV,MAAA8W,SAAAA,EAAApW,EAAA,IACA4V,EAAA,SAAA5V,GAAA,MAAAV,MAAAU,SAAA,EAAAA,EAAAqF,IX+4BUqQ,KAAMzD,EAAMmE,YW34BtBT,GAAAU,SAAAA,GACA9B,MAAAA,MAAAA,YAAAA,IAAAA,EAAAA,IAGAnC,EAAAA,SAAAkE,GACAD,MAAAE,KAAAA,EAAAA,GAAAD,IAAAlE,EAAAA,OAAAkE,KAAAA,YAAAA,IAAAA,EAAAA,GAAAA,KAAAA,YAAAA,EAAAA,ICnHA,OZmgCQlE,GW14BRiE,KAAA7N,WX24BU4J,EAAYkE,QAAU/D,EAAQyC,iBAAiB1W,EAAQ+S,SAAW/S,EAAQ+S,OWx4BpFe,EAAAA,EAAAA,EAAAoE,SAEAjC,EAAAlD,EAAAkB,EAAAyC,UX04BQ5C,EWx4BRqE,QAAApF,SAAAkF,GACA,MAAAG,SAAAA,OAAArF,IAAAsC,MAAAA,EAAAtC,WACAzM,EAAAA,KAAA6R,IX04BQrE,EWv4BRuE,MAAAH,SAAAvF,EAAAuF,EAAAI,EAAAC,GACAxF,IAAA5B,EAAA7K,EAAAS,iBAAAgM,IAAAA,GACAvR,QAAA4W,OAAAjH,KAAAiH,EAAAA,EAAAC,EAAA/R,GAAAwN,EAAAkE,QAAAO,GXw4BU,IAAIJ,GAAcpF,EAASkF,EAAgBlF,GAAUgF,EWr4B/DS,EAAA3E,EAAAA,EAAAA,GAAAA,EAGA4E,EAAAJ,EAAAtC,KAAAyC,EXq4BU,KWp4BVlS,EAAA,OAAA,CAGA,KAAA,GXk4Bc+R,GAAOH,IAAavF,MAAMuF,EAASI,YAAa,GAAIhG,IAAYoG,SAASR,IAAY,GAAI5F,IAAYoG,SAAS,GAAIjF,MAAK,KAAM,EAAG,EAAG,IWl4BjJ+E,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,IXo4BgBJ,EAAajH,IAAIiH,EAAajH,GAAGD,KAAKmH,EAAM/R,EAAQ6K,EAAI,GWh4BxE,IAAAkH,GAAAA,EAAAA,QAEA,OAAA3W,UAAAA,EAAAyR,IAAA,MAAAqF,EAAAG,WACAC,EAEAJ,GXm4BQ1E,EWj4BRuE,oBAAAQ,SAAAnX,EAAAqF,GXk4BU,GAAIsR,EACJ,IWj4BV,UAAAA,EAAA3W,CXk4BY,GAAIkX,GAAQ,GAAInF,KAChB4E,GWj4BZ,GAAAzE,MAAAA,EAAAlS,cAAAkX,EAAApF,WAAAoF,EAAAD,WAAA,YAAA9W,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,YAAAA,EAAA,EAAA,QAGAwW,GAFA7W,QAAAiX,SAAA/W,IAAAA,EAAAgM,MAAA,UXk4BgBhM,EWj4BhBF,MAAAA,KACAK,GAAAA,MAAAH,EAAAmX,OAAAC,EAAAA,EAAAA,OAAAA,IAEA,GAAArF,MAAA/R,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,IAGA2W,EAAAA,GXi4BmB,GAAI5E,MAAKgF,SAAS/W,EAAO,KW93B5CqX,QAAAA,SAAAA,IAAArX,IAAAA,EAAAG,OACAmX,YAAAA,IAAAA,EAAAA,KAAAA,EAAAA,GAGA,GAAAvF,MAAAA,EXg4BU,OW93BVuF,IXg4BQlF,EW93BRiF,oBAAArX,SAAAoW,EAAAA,GX+3BU,GAAIkB,EWv2Bd,OXy2BYA,GW/3BZnX,QAAAmX,GACA,GAAAvF,OAAAqE,YAAA,KAAA,EAAA,GACAhE,QAAAA,SAAApS,IAAA+R,EAAA/F,MAAA,UX+3BmB,GAAI+F,MAAK/R,EAAMmX,OAAO,EAAGnX,EAAMqF,OAAS,IAAI+Q,YAAY,KAAM,EAAG,GW53BpFkB,EAAAA,GX83BmB,GAAIvF,MAAKgF,SAAS/W,EAAO,KAAKoW,YAAY,KAAM,EAAG,GWl3BtEmB,QAAAA,SAAAA,IAAAZ,IAAA3W,EAAA2W,OACA,YAAAA,IAAAS,EAAAA,KAAAA,EAAAA,GXq3BmBhF,EAAYoF,MAAMxX,EAAO,GAAI+R,MAAK,KAAM,EAAG,EAAG,KWx2BjEK,EAAAqF,qBAAA,SAAAd,GACA,MAAAA,IAIAA,EAAAE,SAAAA,EAAAA,WAAA,GAAAF,EAAA/E,WAAA,EAAA,GACA+E,GAJA,MXi3BQvE,EAAYqF,qBAAuB,SAASd,EAAME,EAAUa,GW12BpE,MAAAf,IAYAnD,GAAAI,QAAAA,IACA+C,EAAAjD,GAAAA,MAAAA,EAAAA,WXm2BYiD,EAAKX,WAAWW,EAAK3E,cAAgB0F,EAAO,GAAK,GAAKf,EAAKgB,sBW/1BvE5E,GX21BmB,MY1kCnBzT,EAAAsY,OACArF,EAKAjT,OAAAuY,QZ8oCE/X,QY1oCFgY,OAAAA,2CAAAC,QAAAA,kBAAAA,UAAAA,aAAAA,SAAAA,EAAAA,GZupCI,QYpoCJC,GAAAC,GZqoCM,MAAO,wCAAwC5D,KAAKhD,GAAQ9I,MAAM,GAbpEjJ,KY1oCJsY,iBAAA5C,WZ2oCM,MAAOzC,GAAQhP,IAEjBjE,KYzoCJuY,kBAAA7C,SAAAS,EAAAA,GZ0oCM,MAAOlD,GAAQyC,iBAAiB3D,IAAWA,GAE7C/R,KYxoCJwY,cAAA,SAAAC,GZyoCM,MAAOxF,GAAQyC,iBAAiBC,UAElC3V,KYtoCJ4Y,SAAAF,SAAAC,GZuoCM,MAAO1F,GAAQyC,iBAAiBS,KAKlCnW,KYloCJ6Y,YAAAH,SAAAC,GZmoCM,MAAOD,GAAgBC,GAAY,IAErC3Y,KYhoCJ8Y,cAAAJ,SAAAC,GZioCM,MAAOD,GAAgBC,GAAY,IAErC3Y,KY9nCJ+Y,cAAAL,SAAAC,GZ+nCM,MAAOD,GAAgBC,GAAY,IAErC3Y,KY5nCJgZ,cAAAN,SAAAC,GZ6nCM,MAAOD,GAAgBC,GAAY,IAErC3Y,KY3nCJiZ,YAAA/F,SAAAnB,GZ4nCM,QAAS2G,EAAgBC,GAAY,IEvrC3CnY,KAAAA,OAAA,SAAAmY,GAGA,QAAA9V,EAAA1B,GAAAP,IFyrCIZ,KE1nCJkZ,WAAA3Z,SAAA8X,EAAAtF,EAAA/S,EAAAA,GF2nCM,ME1nCNmB,GAAAkX,EAAAtF,EAAAwF,OF6nCE/W,QAAQf,OAAO,0BAA2B0Z,QAAQ,cAAetW,GAwFjErC,QG/wCFuC,OAAA,6BAAA,oCAAA,uCAAA,2BAAAC,SAAA,cAAA,WHgxCI,GG/wCJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,OACAuB,YAAA,aAEAiW,UAAA,cACAC,YAAA,iCACAV,QAAAA,QACApB,WAAA,EACA+B,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAA3B,EACA/R,SAAA,OACA2T,WAAA,YACAC,SAAAA,KACAC,gBAAA,KACAC,WAAAA,EACAC,UAAAhC,EAAAA,GACAiC,UAAAjC,EAAAA,GACAkC,OAAAA,EH+wCMN,SAAU,EG5wChB1Z,WAAA,EAEA4Z,WAAAK,EACAJ,cAAA,EACAC,OAAAla,iCH6wCMma,SG5wCNna,mCH6wCMoa,cAAe,QAEjBha,MG1wCJuM,MAAA2N,UAAAtV,YAAAxF,aAAA4B,OAAApB,iBAAAuE,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GHgxCM,QGzwCNgW,GAAAjB,EAAAA,EAAAnH,GAcA,QAAAqI,GAAAA,GACAC,GAAAA,GAAAC,IAAAhI,EAAAA,UACAiI,OAAAA,IAAAD,MAAAA,KAAAhI,MAAAA,EAAAA,UAAAkI,GAAAA,GHi/CQ,QGttCRC,GAAAvV,EAAAA,GHutCU,GAAIwV,GGttCdC,EAAAvb,CHutCU,IGttCVA,EAAA,GAAAyL,gBAAA8P,CHutCY,GAAIF,GGttChBja,EAAA6K,GAAAA,iBACAjM,GAAAwb,UAAAlQ,GACAtL,EAAAyb,UAAAjQ,YAAA8P,GHutCYD,EAASK,QAAQ,YAAaJ,GAC9BD,EAASvV,aGptCrB2I,GAAAA,GAAAA,kBACAzO,EAAA,GAAAmM,kBAAAA,EAAAA,GHstCqB/K,QAAQ6K,YAAYjM,EAAQ,GAAGsL,kBGjtCpDqQ,EAAAb,GAAAA,eAAA9M,EACA8M,EAAA9M,GAAAA,aAAAsN,GHqtCQ,QGltCRtb,KHmtCUA,EGltCV,GAAAmM,QH28BQ,GAAI2O,GAActV,EAASxF,EAASoB,QAAQQ,UAAWpB,EAAUuE,IGvwCzEH,EAAAgX,EAAAhD,MAEAhZ,EAAAkb,EAAAlb,SACAkD,EAAAgY,EAAAe,OHwwCYxC,EAAOzZ,EAAQyZ,KGnwC3ByC,EAAAA,SAAA7D,EAAAtF,EAAAwF,GACA,MAAAzX,GAAAd,WAAA6a,EAAAmB,EAAAA,EAAAzD,IAMA4D,EAAAC,EACAC,EAAAf,EAAA/H,aAAAA,EAAAA,GAAAA,OAAAA,GAAAA,MHqwCY+H,EAAYpa,EAAWob,YAAcxb,EGlwCjDiS,GAEAsI,KAAAxB,EAAA0C,WACAhB,SAAAvB,EAAAuC,WAAAvC,GACAwC,OAAA1C,EAAAyC,aACAJ,OAAApC,EAAAwC,aACAF,YAAApC,EAAAsC,mBAGArZ,EAAAuZ,EAAA3B,kBAAAA,EAAAA,WAAAA,GACA5X,EAAAlD,EAAA+a,YAAAA,GAIA7X,EAAAqZ,EAAAlX,cAAAA,GACA6V,EAAAhV,EAAAb,cAAAA,GH+vCY0U,EAAgBwC,EAAexC,cAAchH,GG7vCzD7P,EAAAwZ,EAAAhb,YAAA2D,GACA6V,EAAAA,EAAAxZ,OAAA2D,EH+vCQnC,GAAMuZ,QAAUzc,EAAQ8a,OG7vChC5X,EAAAyZ,UAAAA,EAAA5B,SH+vCQ7X,EG9vCRgY,QAAA0B,SAAAA,EAAAvE,GH+vCU6C,EAAYhV,OAAOmS,EAAMhT,IAE3BnC,EG1vCR1B,WAAAqb,SAAAxE,EAAA1F,GH2vCUuI,EG1vCVA,WAAA7C,EAAAA,IH4vCQnV,EG1vCRmY,gBAAA/H,SAAAA,GH2vCU4H,EG1vCV7C,eAAA3E,IH4vCQwH,EG1vCRmB,OAAAhE,SAAA9E,GH2vCc/R,QAAQqb,OAAOxE,KAAU1F,MAAM0F,EAAKC,YGzvClD4C,EAAA4B,MAAAA,EH2vCYtb,QG1vCZQ,OAAAkZ,GACAA,KAAAA,EAAA4B,WH2vCcN,OAAQnE,EAAK3E,aACbyI,OAAQ9D,EAAK+D,aGxvC3BlB,YAAAhV,EAAAqN,oBAGArS,EAAAob,UHyvCsBpB,EAAY6B,UGtvClC7B,EAAA2B,UH0vCQ3B,EGrvCRha,OAAAwF,SAAAA,EAAAA,EAAAA,KACA1G,EAAAua,YAAAyC,MAAA9b,EAAAob,WAAAhE,cACA7P,EAAA6T,WAAA,UAAAtc,EAAAc,YAAA,GAAA2S,MAAA,GAAAA,MAAA,KAAA,EAAA,IHuvCejS,QAAQqb,OAAOxE,KAAOA,EAAO,GAAI5E,MAAK4E,IAC7B,IAAVhT,EAAanE,EAAWob,WAAW3E,SAASU,EAAK/E,YAAgC,IAAVjO,EAAanE,EAAWob,WAAW5E,WAAWW,EAAK3E,cAAkC,IAAVrO,GAAanE,EAAWob,WAAW9E,WAAWa,EAAK+D,cACzMlb,EAAW4F,cAActF,QAAQyb,KAAK/b,EAAWob,aGnvC3DpB,EAAA0B,UACA5c,EAAAkB,YAAAob,GACA7T,EAAA,WHqvCcyS,EAAYrS,MAAK,MAIvBqS,EGpvCRha,eAAAwF,SAAAA,GHqvCU,GAAKxF,EAAWob,aAAc3J,MAAMzR,EAAWob,WAAWhE,WAA1D,CG7uCV,GAAA4E,IAAAA,GAAAA,EAAAzE,YAAAzY,UACAkB,GAAAsR,WAAAA,SAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IACAtR,EAAAma,cAAAA,QAAAA,KAAAA,EAAAA,aACAna,EAAAwF,YHkvCQwU,EGhvCR5P,OAAAA,WHivCU,GGhvCV+M,GAGA8E,EAFA9U,EAAA6R,EAAAA,SAAAL,SAAAA,EAAAA,OAAAA,EAAAA,IACArO,IHkvCU,KAAK2F,EAAI,EAAGA,EAAInR,EAAQ+G,OAAQoK,IAC9BkK,EAAO,GAAI5H,MAAK,KAAM,EAAG,EAAG2H,EAASC,MAAQ6B,EAAW/L,GAAKnR,EAAQ0a,UG/uCjFlI,EAAAU,MACAsJ,KAAAA,EACAnU,MAAA6R,EAAAla,EAAA+G,GACAyV,SAAAtB,EAAAkC,OAAAhC,EAAAoB,YAAAU,EAAA/L,GACA+B,SAAA5H,EAAAA,YAAAA,EAAAA,IHmvCU,IG/uCV6R,GADA3R,IHkvCU,KAAK2F,EAAI,EAAGA,EAAInR,EAAQ+G,OAAQoK,IAC9BqL,EAAS,GAAI/I,MAAK,KAAM,EAAG,EAAG,EAAG2H,EAASoB,QAAUU,EAAW/L,GAAKnR,EAAQ2a,YG/uCxFzH,EAAAf,MACAgK,KAAAA,EACA9T,MAAA6R,EAAAla,EAAA+G,GACAoV,SAAAjB,EAAAkC,OAAAlC,EAAAiB,YAAAe,EAAAA,GACA/K,SAAA7G,EAAAA,YAAAA,EAAAA,IHmvCU,IG/uCV6R,GADA3R,IHkvCU,KAAK2F,EAAI,EAAGA,EAAInR,EAAQ+G,OAAQoK,IAC9BgL,EAAS,GAAI1I,MAAK,KAAM,EAAG,EAAG,EAAG,EAAG2H,EAASe,QAAUe,EAAW/L,GAAKnR,EAAQ4a,YG9uC3FzI,EAAAkL,MACAhF,KAAA8D,EACA9T,MAAA4R,EAAAkC,EAAApC,GACAsD,SAAA/R,EAAA4H,OAAA/B,EAAAA,YAAAA,EAAAA,GHgvCcgM,SG/uCdjC,EAAAoC,YAAAnB,EAAA,IHkvCU,IAAIkB,KG9uCdna,KAAAA,EAAAma,EAAAA,EAAAA,EAAAA,OAAAA,IACApD,EACA/W,EAAAqa,MAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,KAEAra,EAAA8W,MAAAA,EAAAA,GAAAA,EAAAA,IAIAkB,GAAAA,KAAAsC,EACAta,EAAAgY,YAAAkC,EH+uCUla,EG7uCVqa,OAAAjK,EH8uCUpQ,EAAMua,MG7uChBpY,EAAA+X,OAAA5K,EAAA0K,GAAA7E,MAAA/E,WAAA,GH8uCUpQ,EG7uCV8W,cAAAtG,EH8uCUwH,EG7uCV7V,UAAA,GH+uCQ6V,EAAYsC,YAAc,SAASnF,EAAMhT,GACvC,MAAK6V,GAAYkC,MAAwC,IAAV/X,EG3uCzD6V,EAAAoC,aAAApC,EAAA7V,MAAAA,WACAqY,IAAAA,EACArY,EAAAqO,eAAAwH,EAAAkC,MAAA1J,aACA2E,IAAAqF,EACArF,EAAAhT,eAAA6V,EAAAkC,MAAAhB,aADAsB,QHwuCyC,GAQjCxC,EG5uCRwC,YAAApF,SAAAA,EAAA8C,GH6uCU,GAAIsC,EAQJ,OGnvCVA,KAAArY,EH6uCYqY,EAAerF,EAAKC,UAA8B,IAAlB8C,EAASoB,OAAiC,IAAlBpB,EAASe,OG1uC7E,IAAAwB,EACAD,EAAA1C,EAAAA,UAAA,KAAAI,EAAAC,KAAA,IAAAD,EAAAe,OACAyB,IAAA1C,IH4uCYwC,EG3uCZrF,EAAAC,UAAA,KAAA8C,EAAAC,KAAA,IAAAD,EAAAoB,QH6uCiBkB,EAAiC,EAAlB1d,EAAQwa,SAAekD,EAAiC,EAAlB1d,EAAQya,SGxuC9ES,EAAAA,aAAA0C,SAAAlc,EAAA2D,GACA6V,WAAA1C,EAAAA,cACA0C,EAAA1C,eAAAlF,EAAAA,GAEA4H,EAAA1C,WAAA4D,EAAAA,IH6uCQlB,EG1uCR0C,eAAA,SAAAlc,EAAA2D,GH2uCU,GG1uCVmT,GAAAd,GAAAA,MAAAxE,EAAAuF,OAAAzY,GH2uCcwS,EG1uCdnN,EAAAA,WACAmT,EAAAhB,EAAArF,aH2uCcA,EAAUqG,EAAQ4D,YGzuChClW,KAAAgV,EH2uCY1C,EAAQb,SAASnF,EAAQiG,SAASzY,EAAQ0a,SAAU,IAAMhZ,GGxuCtEgb,IAAAA,EACAlE,EAAAqF,WAAAA,EAAAA,SAAAA,EAAAA,WAAAA,IAAAA,GACA,IAAAxY,GACAwY,EAAAA,WAAApK,EAAAgF,SAAA2C,EAAAC,WAAArb,IAAAA,GH2uCUkb,EGzuCV2C,OAAAA,EAAAvK,GAAAA,IH2uCQ4H,EGzuCRwB,WAAA,SAAAhb,EAAA2D,GH0uCU,GGzuCVwY,EACA7b,KAAAR,GH0uCYqc,EGzuCZA,GAAAA,MAAAnK,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,QH0uCYlS,QAAQQ,OAAOoZ,GACbC,KGzuCdwC,EAAAvK,cAEA8H,IAAApZ,GH0uCY6b,EGzuCZA,GAAAA,MAAAzB,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAAAA,WAAAA,EAAAA,QH0uCY5a,QAAQQ,OAAOoZ,GACboB,OAAQqB,EAAWnK,gBAEF,IAAVrO,IGvuCrB6V,EAAA/T,GAAAA,MAAAA,KAAA,EAAA,EAAAf,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAAAA,YAEA5E,QAAAsc,OAAAzO,GACAhI,OAAAA,EAAAA,gBH0uCU6T,EGtuCV6C,UHwuCQ7C,EAAY/T,aAAe,SAASf,GAGlC,GGxuCV,UAAA2X,EAAAA,OAAAC,SAAAA,eAAA5X,EAAAgB,iBHuuCUhB,EAAIiB,kBACA4W,EAAS,CGpuCvB/C,GAAAA,GAAApS,QAAA1I,QAAAgG,EAAAA,OACAA,YAAA2X,EAAA,GAAA1O,SAAAnF,gBACA9C,EAAAA,EAAAA,UAIA2W,EAAA/V,eAAA,WHsuCQkT,EAAYpS,WAAa,SAAS1C,GGhuC1C,GAAAoS,mBAAA0C,KAAAA,EAAAA,WAAAkC,EAAAA,WAAAA,EAAAA,OAAA,CAGA,GAFAhX,EAAAoM,iBACApM,EAAA8X,kBACA1F,KAAAtF,EAAAA,QAEA,WADAgI,GAAAiD,MAAAA,EAGA,IAAAC,GAAAA,GAAA3K,MAAAyH,EAAAkC,OACAiB,EAAAA,EAAA/K,WACAgL,EAAArE,EAAAA,EAAAsD,GAAAxW,OAGAsX,EAAAA,EAAA3K,aACAyK,EAAAnW,EAAAkU,EAAAA,GAAAA,OHguCc/J,EAAUqG,EAAQ4D,aG3tChCmC,EAAArE,EAAAgE,EAAAA,GAAAA,OACAM,EAAA,EACApY,EAAA4B,UAAAwW,KAAApY,EAAA4B,SACA5B,EAAA4B,EAAAwW,EAAAxW,EAAA,EAAAuV,CACAkB,KACAvC,KAAAwC,EAAAA,QAAAxC,EAAAA,EAAAjC,EAAAiC,EAAAA,EAAAA,EAAAjC,EAAAA,KAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GH8tCU,IG5tCVzB,IAAAhG,EAAAA,GAEA0L,EAAAA,CACA,MAAAK,EAAAA,UAAAL,EAAAA,IACAhC,KH2tCc9V,EG3tCd4B,UAAAkU,EAAA,EH4tCU,IG3tCV1D,GAAAgG,IAAA9G,GAAAe,EAEA0F,EAAA3F,IAAA2F,IAAArE,GAAA/S,IAAAA,GAAAA,CACAmX,KAAAK,GH2tCY/F,EG1tCZb,SAAA8G,EAAAD,EAAA/F,SAAAzY,EAAA0a,SAAA,KACAlC,EAAAhB,EAAArF,EAAAqM,GAAAxe,OAEA2e,GAAAzE,EAAAA,IACAgE,IAAAK,GH0tCY/F,EGztCZd,WAAAgH,EAAAF,EAAA/F,SAAAzY,EAAA2a,WAAA,KACAwD,EAAAE,EAAAnD,EAAA0B,GAAAA,OACA2B,GAAAL,EAAAE,EAAAA,IH0tCqBK,GGxtCrBvD,EAAAA,WAAA1C,EAAA0D,EAAAA,SAAAlc,EAAA4a,WAAA,KACAgE,EAAAL,EAAA/F,EAAA+F,GAAAxX,OACA/B,GAAAmD,EAAAA,EAAAA,EAAAA,EAAAA,IH0tCqBuW,IGrtCrBE,GAAAA,EAAA7X,iBACAwX,GAAAxX,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IHwtCUmU,EGttCVO,OAAArb,EAAAye,GAAAA,GHutCUD,EGttCVhD,EAAA,GAAA2C,EAAA,IHutCUvZ,EGttCV6W,WH0uCQ,IGltCRzb,GAAAuP,EAAAvB,IHmtCQ8M,GGltCR1V,KAAA,WHmtCU,MGltCVpF,IAAAJ,EAAA6O,WHmtCYzO,EAAQuP,KAAK,OAAQ,YGjtCjCoM,GAAAA,IAAAA,qBAAAA,eAGA+C,IACA5D,EAAAhP,KAAAA,OAAA,QACA9L,EAAA6a,KAAAA,WAAAb,QACAha,EAAA6L,GAAAA,QAAA4C,QAEAiQ,MAGA,IAAAC,GAAA7D,EAAA5S,OACA4S,GAAA5S,QAAA,WACA2S,GAAA7a,EAAAoF,WACAuZ,EAAAA,IAAAA,QAAAA,GHktCUD,IAEF,IAAIC,GG9sCZ3e,EAAAA,IH+sCQ8a,GAAY5S,KAAO,YG7sC3B2V,GAAA7d,EAAAoF,KAAA,aAAApF,EAAAoF,KAAA,cH+sCUuZ,IG5sCVtW,EAAAuW,WACA9D,EAAA3S,UAAA0W,EAAAA,SAAAA,GAAAA,EAAAA,aAAAA,YAAAA,EAAAA,cACA/D,EAAAA,UACAA,GAAA3S,EAAAA,GAAA2S,UAAA3S,EAAA0V,aAEA,GAAA7d,IH+sCQ,IG7sCR4e,GAAAC,EAAAA,IAkBAhE,OH4rCQC,GAAYrS,KAAO,SAASoW,GG3sCpC/D,EAAAA,WH6sCcA,EAAY3S,UAAU2S,EAAY3S,SAAS0D,IAAIgS,EAAU,aAAe,YAAa/C,EAAY/T,cGzsC/GgU,EAAAA,UACAA,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YAOA3R,EAAAyV,KAGAhE,EH64BM,GG1wCNA,GAAAjW,6BAAA9B,KAAAA,EAAAA,UAAAA,WACA+a,EAAAje,eAAAkf,GAAAA,UAAAA,CAgYAtV,OA/XAhJ,GAAAsa,OAEAta,EAAA6Y,KAAAzZ,EAAAyZ;AA4XA9P,EAAA/I,SAAAA,EACAgJ,MHqsCKJ,UGjsCLxJ,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GHksCI,GAAIY,GGjsCRsC,EAAAA,SHksCQ+X,EAAW,6BAA6B/Q,KAAK4C,EAAQqS,UAAUC,UACnE,QACEzV,SGjsCNnI,MHksCMoI,QAAS,UACT3G,KG/rCN4G,SAAAA,EAAAzJ,EAAAoF,EAAAtE,GHovCQ,QG/qCRA,GAAAme,GAEA,GAAAC,QAAAA,OAAAC,GAAA,CH+qCU,GG9qCVC,GAAA7M,MAAA3S,EAAAwa,UAAA,GAAA/G,MAAA8L,EAAAjH,WAAAR,YAAA,KAAA,EAAA,IAAA9X,EAAAwa,QH+qCc6E,EAAa1M,MAAM3S,EAAQya,UAAY,GAAIhH,MAAK8L,EAAWjH,WAAWR,YAAY,KAAM,EAAG,IAAM9X,EAAQya,QG7qCvHvZ,EAAAob,GAAAiD,CH+qCUre,GAAWue,aAAa,OAAQH,GG3qC1Cpe,EAAAwe,aAAAC,MAAAH,GAEAte,EAAAmX,aAAAA,MAAAA,GAEAuH,IH6qCU1e,EAAWob,WAAaiD,IA+C1B,QAASM,KACP,OAAQ3e,EAAWob,YAAc3J,MAAMzR,EAAWob,WAAWhE,WAAa,GAAK4B,EAAWhZ,EAAWob,WAAYtc,EAAQ2Z,YG9yCnInY,GAAAA,IACA0B,MAAA1B,EHisCQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,WAAY,OAAQ,YAAa,YAAa,WAAY,aAAc,WAAY,kBAAmB,YAAa,WAAY,aAAc,aAAc,SAAU,gBAAiB,SAAU,WAAY,eAAgB,KAAM,cAAe,cAAe,eAAiB,SAASI,GAC9YL,QAAQoF,UAAUpB,EAAK3D,MAAO7B,EAAQ6B,GAAO2D,EAAK3D,KAExD,IG7rCRgI,GAAAhI,eH8rCQL,SG7rCRA,SAAAoF,OAAApB,YAAA,YAAA,YAAA,gBAAA,SAAA3D,GACA7B,QAAA6B,UAAAqB,EAAA4c,KAAAhW,EAAAA,KAAAA,EAAAA,MH8rCY9J,EAAQ6B,IAAO,KGxrC3BL,QAAAue,SAAA7E,eAAA9a,SAAAc,eAAAlB,UAAAA,SAAAA,GACAA,GAAAA,GAAA+f,KAAAb,EAAAA,OAAAA,GAAAA,cAAAA,EAAAA,MAAAA,EAEAzF,SAAAzZ,UAAAyZ,EAAAA,MACAS,EAAAA,GAAAhX,EAAA4c,MAAAzH,EAAAtF,OAKAvN,IAAAxF,EAAAoa,WAAAxZ,EAAAwZ,aAAApa,EAAA2Z,WAAA,QHyrCQ,IGxrCRzW,GAAAsC,EAAApF,EAAA0K,EAAAC,EHyrCQ/K,GGxrCR+f,EAAAA,QHyrCQ,IGxrCRtG,GAAAjY,EAAAG,KACAuY,EAAApP,SAAAuN,EAAAtF,EAAAwF,GHyrCU,MGxrCVwH,GAAAzX,WAAAA,EAAAA,EAAAA,EAAAA,GH0rCY9C,GGxrCZua,QHyrCU7c,EAAM0H,OAAOpF,EAAKwa,OAAQ,SAASlV,EAAUC,GACtCgV,GAAeve,QAAQoF,UAAUkE,KAClCtJ,QAAQG,SAASmJ,KAAWA,IAAaA,EAAS4C,MAAM,2BGrrCxEuS,KAAAnM,EACAf,EAAA/S,OHwrCc+f,EAAWlX,SAIjB,IAAIoX,GGnrCZf,GHorCUnM,OGnrCV/S,EAAA+f,WHorCUtG,KGnrCVyG,GHqrCQ1e,SAAQC,SAAU,UAAW,WAAa,SAASI,GAC7CL,QAAQoF,UAAUpB,EAAK3D,KGhrCrCqB,EAAA0H,SAAAC,EAAAA,SAAAC,GAEAiV,EAAAvZ,SAAAtF,GAAAob,EAAAA,oBAAAA,EAAAA,GACA3J,MAAAoN,EAAAb,SAAArd,KAAAke,EAAAjD,SAEAoD,EAAAA,EAAAX,gBHmrCQrc,EG/qCRoc,OAAAA,EAAAE,QAAAA,SAAAH,EAAAA,GACAne,EAAAue,OAAAA,EAAAnD,cACApb,GH6rCQA,EGvqCRqe,SAAAA,QAAAA,SAAAA,GHwqCU,GGvqCVre,EHwqCU,KGrqCV0e,EAEAM,MHoqCYhf,GAAWue,aAAa,QAAQ,GGpqC5CS,IHuqCU,IGpqCV7H,GAAA4H,QAAA9G,OAAAA,GAAAoG,EAAAvf,EAAAuY,MAAAqH,EAAA1e,EAAAob,WHqqCU,QGpqCViD,GAAArF,MAAA7B,EAAAiC,YHqqCYpZ,EAAWue,aAAa,QAAQ,GGnqC5CQ,IHsqCUC,EGpqCV5H,GACA+B,WHoqCcra,EGpqCdA,UACAqY,EAAAA,EAAAC,qBAAAiH,EAAAvf,EAAAuY,UAAA,GACA2B,EAAAG,EAAAA,EAAAC,iBAAAta,EAAA2Z,cHsqCUtB,EAAO4H,EAAW9G,qBAAqBjY,EAAWob,WAAYtc,EAAQuY,UAAU,GGnqC1FF,WAAArY,EAAAyT,SHqqCmB4E,EAAKC,UGjqCxB,SAAAjN,EAAAA,SAEAgN,EAAAA,UAAAA,IACA9M,QAAA/J,EAAA6K,SACA8T,EAAAA,cAEA9H,GAAA9M,MAAAA,OHmqCQrK,EGjqCR+e,YAAA/G,KAAA3N,SAAAA,GHkqCU,GAAI8M,EAaJ,OAXEA,GGlqCZA,QAAAhM,YAAAd,IAAA,OAAAA,EACA4U,IACA3e,QAAA+J,OAAAA,GHkqCmBA,EG9pCnB0U,WAAA3D,EAAAA,SACAuD,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,iBHgqC0C,SAArB7f,EAAQqa,SG5pC7B3T,GAAAA,MAAA,IAAAA,GH+pCmB,GAAI+M,MAAKlI,GGzpC5BrK,EAAAA,WAAAob,EAAA3J,qBAAA2J,EAAAhE,EAAAA,UH4pCiBuH,MAET3e,EGzpCR6e,QAAAA,WACA/f,EAAAA,IAAA6f,MH8pCQ3c,EAAM8I,IAAI,WAAY,Wa7uD9BvL,GAAAsf,EAAA7T,UAIAtL,EAAAI,KACAH,EAAA,YbgvDEW,Qa3uDFsc,OAAA,0BAAA,sBAAA,sCAAA9Z,SAAA,WAAA,Wb4uDI,Ga3uDJoc,GAAApf,KAAAJ,UACAb,UAAAA,UACAQ,YAAA,GACA8f,YAAAA,UACAtc,YAAA,UACAG,WAAA,EACAtB,QAAA,EACA0F,UAAA,MACAgY,YAAA,2BACAC,SAAA,GACApc,eAAA,EACAqc,QAAAA,cACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,MAAAA,Gb4uDML,Ka3uDNM,Gb4uDM1c,Ma3uDN2c,Eb4uDMN,WAAW,EACXC,WAAW,EazuDjBzf,yBAAA,EAEA2f,0BAAA,EACAC,UACAC,SAAArf,OAEAsf,QAAAC,Gb2uDI/f,MaruDJuM,MAAAyT,UAAApb,aAAAqb,cAAAhgB,KAAAjB,iBAAAA,QAAAA,WAAAA,OAAAA,aAAAA,QAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GbyuDM,QanuDNA,GAAA6U,EAAA9N,Gb03DQ,QanqDRma,KACAC,EAAAA,MAAAA,EAAAthB,YAAA,QAAA+F,GACApE,QAAAxB,UAAAmE,EAAAnE,SAAA6I,QAAA7B,WAAAhH,EAAAohB,SACAphB,EAAA4F,OAAAA,Gb4sDQ,Qa/oDRyb,KAQAzb,GbwoDU1C,EAAMyD,MAAM3G,EAAQH,YAAc,QAAS+F,Ga5oDrD0b,QAAAA,UAAAA,EAAAA,SAAAA,QAAAA,WAAAA,EAAAA,Sb8oDYthB,EAAQuhB,OAAO3b,Ga1oD3BA,IAAA4b,EAAApb,CACA,GAAAA,GAAA,UAAApG,EAAA+D,QAAAqC,MAAAgB,GAAAA,GAAAA,MACAka,Mb4tDQ,QajnDRlhB,KbknDU,GAAIqhB,GajnDdjV,EAAAzI,QAAA8Q,MAAA,IbknDUrT,SAAQC,Qa/mDlBsC,EAAAA,SAAAA,GACA,UAAA3D,GAAAwE,gBAAAgB,EbgnDcxF,Ea/mDdA,GAAAoM,EAAA5G,EAAAA,QbgnDmC,WAAZ7B,IACJka,EavmDnByD,UAAAA,IACAD,EAAAA,GAAAzhB,QAAA+D,EAAA8Q,OACAzU,EAAAqhB,GAAAA,OAAA1a,EAAAoK,SbsmDgB/Q,EAAQoM,GAAe,UAAZzI,EAAsB,aAAe,QAAS6B,EAAShB,OAClExE,EAAQoM,GAAe,UAAZzI,EAAsB,aAAe,OAAQ6B,EAAS+b,WAQzE,QazmDRD,Kb2mDU,IAAK,GADDD,GazmDdxV,EAAAlI,QAAA8Q,MAAA,KACAzU,EAAAA,EAAA2D,OAAAoN,KAAA,Cb0mDY,GAAIpN,GavmDhBA,EAAAA,EACA,WAAA3D,GAAAwE,gBAAAgB,EbwmDcxF,EavmDdA,IAAA6L,EAAArG,EAAAA,QbwmDmC,WAAZ7B,IACJka,Ea/lDnB2D,UAAAA,IACA5hB,EAAA+D,IAAAA,QAAA6B,EAAAhB,OACAid,EAAArV,IAAA,OAAA5G,EAAAkc,Sb8lDgB1hB,EAAQ6L,IAAgB,UAAZlI,EAAsB,aAAe,QAAS6B,EAAShB,OACnExE,EAAQ6L,IAAgB,UAAZlI,EAAsB,aAAe,OAAQ6B,EAAS+b,UazlDlF,QAAAI,KACA,UAAA/hB,EAAA+D,QACA8d,EAAA5V,GAAAA,QAAArG,EAAAA,UAEAxF,EAAA6L,GAAAA,QAAArG,EAAAA,eAIA,QAAAoc,KACAC,UAAAjiB,EAAAiiB,QAGAxZ,EAAAwD,IAAA,QAAArG,EAAAkc,UAKAI,EAAA1V,IAAA,QAAA5G,EAAAiD,eAMA,QAAAsZ,KACA1Z,EAAAuZ,WACAH,EAAA5V,GAAAA,QAAAmW,GACAF,EAAAjW,GAAAA,QAAArG,EAAAA,MACAoc,GAAA,Gb0lDa,GAAG,GatlDhB,QAAAI,KACA3T,IbylDYoT,EAAW5V,IAAI,QAASmW,GaplDpCF,EAAAG,IAAAA,QAAA9Z,EAAAA,MACAA,GAAAvI,GbwlDQ,QanlDRsiB,GAAAvS,GACAtB,EAAA8T,kBbqlDQ,Qa9kDRC,GAAAA,Gb+kDUja,EAAWA,GAAavI,EAAQ8d,QAAU1d,Ca3kDpD,IAAAmiB,GAAApS,EAAAA,GAEAoS,EAAAA,SAAA/gB,EAAAA,QAAA2O,EAAAmS,EAAAA,wBAAApT,Ib8kDU,KAAK,GAAIsT,KAAKF,GACZC,EAAKC,GAAKF,EAAOE,Ea7kD7B,QAAAlS,EAAAH,QAAAD,EAAA1O,QAAAQ,UAAAugB,GAAAE,MAAAA,EAAAxS,MAAAyS,EAAAA,KACAC,OAAAA,EAAAA,OAAAA,EAAAA,MACA,IAAAC,GAAAA,GAAAzS,IAAAA,EAAAjB,KAAAA,GAAAuT,EAAAxS,OAAAyS,GAEAC,GbslDYA,OAAQE,EAASza,EAASmH,gBAAgB3H,WAAaQ,EAAS0a,KAAKlb,UAAYW,EAASoH,KAAK,cAAgB,GallD3HM,EAAAA,GACAE,MAAA0E,EAAAuL,gBAAA2C,YAEA7T,OAAA2F,EAAAmO,aACA,IbolDU,OanlDV/S,SAAAA,UAAAA,EAAAA,EAAAA,EAAAA,GbqlDQ,QanlDRC,GAAAS,EAAAR,EAAAA,EAAAA,GbolDU,GAAIF,GallDd4E,EAAAuL,EAAAvL,MAAA,IbolDU,QAAQA,EAAM,IanlDxB,IAAA,QACA5E,GACAK,IAAAK,EAAAL,IAAAK,EAAAzB,OAAAA,EAAAA,EAAAA,EACAgB,KAAAS,EAAAT,KAAAS,EAAAR,MAEA,MACA,KAAA,SACAF,GACAK,IAAAK,EAAAL,IAAAK,EAAAzB,OACAgB,KAAAS,EAAAT,KAAA+S,EAAAA,MAAAA,EAAAA,EAAAA,EAEA,MACA,KAAA,OACAhT,GACAK,IAAAK,EAAAL,IAAA4S,EAAAA,OAAAA,EAAAA,EAAAA,EACAhT,KAAAS,EAAAT,KAAAS,EAEA,MAGA,SACAV,GbslDcK,IAAKK,EAASL,IAAM4S,EallDlCrO,KAAAlE,EAAAT,KAAA2E,EAAA1E,MAAA,EAAA8S,EAAA,GbulDU,IanlDVpO,EAAA,GbolDY,MAAO5E,EAET,IaplDVC,QAAAD,EAAAA,IAAAU,WAAAA,EAAAT,GbqlDY,OaplDZ2E,EAAA,IbqlDa,IAAK,OaplDlB5E,EAAAC,KAAAS,EAAAT,IACA,MbulDa,KarlDb,QACAD,EAAA4E,KAAAlE,EAAAT,KAAAS,EAAAR,MAAA8S,MAKAhT,IAAAU,SAAAL,EAAAK,IAAAL,UAAAA,EAAAA,GbulDY,OatlDZuE,EAAA,IbulDa,IAAK,MatlDlB5E,EAAAK,IAAAK,EAAAL,IAAA4S,EAAAvS,EAAAzB,MACA,MbylDa,KAAK,SarlDlBe,EAAAA,IAAAA,EAAAA,IAUA,MAAAkT,GbqlDQ,QajlDRxQ,GAAAwQ,EAAAA,GAEAlT,GAAAA,GAAAK,EAAAA,GACAL,EAAAC,EAAAD,YAIAwS,EAAAhS,EAAAA,aACAW,EAAAqH,SAAA5H,EAAAA,IAAAA,EAAAA,cAAAA,IACAgR,EAAAvS,SAAAA,EAAAA,IAAAA,EAAAA,eAAAA,Gb8kDcqD,Oa7kDdrC,KAAAO,EAAAP,Gb8kDcqC,Ma7kDdzC,KAAAW,EAAAX,Gb8kDUD,Ea7kDVmT,IAAAnT,EAAAK,IAAA+S,Eb8kDUpT,EAAOC,KAAOD,EAAOC,KAAOiT,EAC5BV,EAAWhS,UAAU6S,EAAK9hB,QAAQQ,QAChCoP,Ma7kDZnB,SAAAY,GAGAoS,EAAAA,KACAC,IAAAA,KAAAA,MAAAI,EAAAlU,KAAAA,KAEAgR,KAAAA,KAAAA,MAAAvP,EAAAqS,MAAAA,KACAjT,MAAAK,OAOAL,GAAAsT,EAEA,IAAAC,GAAAF,EAAA9R,YACAvB,EAAAuT,EAAAtT,YAKAuS,IAJA,QbqkDcrC,GarkDd8C,IAAAhU,IACAe,EAAAK,IAAAA,EAAAA,IAAAA,EAAAA,IAGAmS,8CAAAxS,KAAAA,GAAAwS,CAEA,GAAAe,GAAAD,EAAAnD,EAAAnQ,EAAAgT,EAAAC,EAUA,IATAM,EAAAC,KACAxT,EAAAyT,MAAAA,EAAAD,KAGAE,EAAAA,KAAAD,EAAAA,IbokDUjB,EAAWhS,UAAU6S,EAAKrT,Ga/jDpC,wBAAAsT,KAAAnD,GAAAzP,CACA,GAAA6S,GAAAA,aAAAA,KAAAA,GAAAlT,EAAAmT,EAAA,EAAAD,EAAAtT,KAAAC,EAAA8S,EAAA,EAAAO,EAAAlT,IAAApB,EAAAgU,EAAAhT,EAAAuT,EAAA,cAAA,cbmkDYE,GAAaD,EAAYJ,EAAIM,GAAsBH,KAGvD,QalkDRI,GAAAxB,EAAAzc,EAAAke,EAAAA,GAEA,GAAAN,IACAlT,IAAAyT,EACA7T,KAAA8T,EbmkDU,KajkDVR,EAAAlT,UAAAuT,MAAAA,EbkkDU,IAAII,GajkDdD,EAAAA,UAAAH,EAAAA,SAAAA,SAAAA,EACAL,EAAAK,EAAAvT,EAAAuT,UbkkDU,IAAI,aAAa3Z,KAAKkW,GAAY,CAChC,GAAI2D,GajkDhBpT,EAAAL,IAAA2T,EAAAJ,EAAAlB,OACAuB,EAAAvT,EAAAT,IAAA+T,EAAAA,EAAAA,OAAAA,CACAE,GAAAA,EAAAF,IACAT,EAAAU,IAAAA,EAAAL,IAAAA,EACA3T,EAAA2T,EAAAK,IAAAA,EAAAA,SbkkDcV,EajkDdlT,IAAA6T,EAAAN,IAAAA,EAAA3U,OAAA8U,ObmkDiB,CACL,GAAIE,GAAiBvT,EAAST,KAAO+T,Ea/jDjDE,EAAAX,EAAAA,KAAAA,EAAAA,CbikDgBU,GAAiBL,EAAmB3T,Ka9jDpDsT,EAAAG,KAAAA,EAAAS,KAAAC,EACA9hB,EAAAshB,EAAAT,QAEAkB,EAAAhV,KAAA+U,EAAAnU,KAAA2T,EAAAO,MAAAA,GAMAlD,MAAAA,Gb6jDQ,Qa1jDRlhB,GAAAwgB,EAAA4D,EAAAC,Gb2jDU,Ga1jDVlC,GAAAA,EAAAA,yBAAAA,EAAAA,Gb2jDUmC,GAAOhV,IAAI+U,EAAe,OAAS,MAAO,IAAM,EAAIb,EAAQY,GAAa,KAAK9U,IAAI+U,EAAe,MAAQ,OAAQ,IAEnH,QazjDRtC,Kb0jDUb,aAAavP,GACT/L,EAASqD,UAA2B,OAAf4Y,IavjDnC0C,EAAA/D,WACA+D,Ib0jDgBvkB,EAAQkE,UatjDxB2d,Kb0jDc0C,IACFA,EAASC,WarjDrBD,EAAA3e,MAMAic,IAEA3e,EAAAuC,SbkjDYoc,EAAajc,EAAS2C,SAAW,MA5gBrC,GapuDRD,MAAAO,EAAAgM,EAAAqK,SAAA1d,QAAAQ,UAAApB,EAAAuE,GbsuDY6b,EatuDZpb,EAAA6e,SAAAxD,EAAAhgB,QAAAjB,GbuuDYkD,EAAQ0C,EAASE,OAAS9F,EAAQkD,OAASlD,EAAQkD,MAAMwhB,QAAUpW,EAAWoW,MajuD1F9e,IAAAA,EAAA+e,OAAA3kB,QAAAI,SAAAoF,EAAArB,OAAA,CAGA,GAAAnE,GAAAsgB,EAAAnc,MAAA0Q,MAAA,KAAAhH,IAAAmD,WACA9N,GAAAod,MAAAsE,EAAAC,OAAA7kB,GbiuDYsI,KAAMuM,EAAM,Ga7tDxB3R,KAAA4hB,EAAAA,IACA5hB,EAAA6C,GbguDQH,EAAS+e,IAAM3kB,EAAQiF,IAAM7E,EAAQoF,KAAK,OAAS,GAC/CxF,EAAQsgB,Qa7tDpBpd,EAAA6hB,MAAAH,EAAAC,YAAA7kB,EAAAsgB,QbguDQpd,Ea9tDR0C,YAAAiD,SAAAA,Gb+tDU3F,EAAM6C,aAAa,WACjBH,EAASof,WAAWC,MAGxB/hB,Ea9tDR0C,MAAA0C,Wb+tDUpF,EAAM6C,aAAa,WACjBH,EAASiD,UAGb3F,Ea9tDR0C,MAAAsf,Wb+tDUhiB,EAAM6C,aAAa,WACjBH,EAAS0C,UaxtDrBpF,EAAAie,QAAAA,WAGAje,EAAAiiB,aAAAA,WACAtD,EAAAA,YAGAb,EAAA7gB,SAAA+C,EAAAnC,UAAAA,Cb0tDQ,IaztDRokB,GACAvf,Eb0tDYuf,EavtDZvf,EAGAwf,EACAplB,CbutDQghB,GattDR1Y,KAAAtI,SAAAmE,GbutDUghB,EattDVnlB,EbutDU4F,EAASwI,SAEXxI,Ea/sDR5F,KAAAiE,WACAmhB,EAAAA,OAAAhlB,QAAAA,SAAAA,EAAAA,SbgtDYJ,Ea/sDZmE,OACAihB,KAAAA,EAAAplB,MbgtDc6I,Ka/sDd7I,EAAAA,QAKAqlB,SAAAA,EAAAA,UAGAD,EAAAtH,EACAA,QAAAtc,UAAA8jB,EAAAtlB,Wb4sDYolB,EAAeplB,EAAQiE,UaxsDnCjE,EAAAiE,YACAf,EAAA6C,EAAA/F,EAAAiE,Yb2sDUohB,IACIrlB,EazsDd8d,Sb0sDY9d,EazsDZ4F,OAAA0C,QAAAA,UAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,EAAAA,Sb2sDctI,EAAQsI,MACVpF,EAAM6C,aAAa,WACO,UAApB/F,EAAQ+D,QatsD1B6B,EAAAsG,GAAAK,QAMA+U,EAAAA,UbwsDQ1b,Ea9rDRub,QAAA,WACAO,Ib+rDUJ,IACApe,EAAMshB,YAER5e,Ea7rDRub,MAAAA,WAKAvb,MbyrDUsb,ca7rDV/c,Gb8rDUgd,EAAa,Ka1rDvBvb,EAAA0C,OAAAtI,EAAAmE,MAAAmE,UAIAqJ,EAAAnQ,WAAAoF,WACA2e,OAAAvlB,GAAA4F,EAAAA,Qb2rDa5F,EAAQmE,MAAMmE,Oa/rD3BtI,EAAAygB,QbisDQ7a,Ea1rDR4f,KAAAA,WACA,GAAAxlB,EAAAiE,YAAA2B,EAAAqD,SAAA,Cb2rDU/F,Ea1rDVwF,MAAA0c,EAAAA,YAAAA,eAAAA,GACA5jB,QAAA4jB,UAAAK,EAAAA,eAAAjkB,QAAAwF,WAAAhH,EAAAulB,eb2rDYvlB,Ea1rDZwlB,aAAAplB,Eb4rDU,Ia1rDVolB,Gb2rDcA,CACAxlB,Ga1rDdiE,WACAyE,EAAA0c,Eb4rDcI,Ea3rDdA,EAAAplB,GAAAA,Ub2rDsBoB,QAAQpB,QAAQglB,EAAa,GAAGK,WaprDtD7f,OAKA0K,EAAA,KAAAJ,EAAA9P,GAAAslB,GAAApE,IbwrDUiD,EaxrDVoB,EAAA7f,OAAA4e,ObyrDU7C,EAAajc,EAAS2C,SAAW4c,EAAYliB,KAAKshB,EAAU,SAASqB,EAAe1iB,MatrD9F2e,EAAA7hB,KAEAsQ,IAAAtQ,UAEAkQ,KAAAlQ,UAKAojB,MAAAoC,OACAA,QAAAA,QbkrDYG,WajrDZ,WbmrDc3lB,EAAQa,WAAWghB,EAAWgE,SAAS7lB,EAAQa,Wa/qD7D+E,EAAAqD,MAAAA,EAAAA,SAAAjJ,EAAA8lB,YAAA,IAAA9lB,EAAAugB,MACAha,EAAArD,aAAAA,EAAAA,SAAAA,EAAAA,aAGA0C,EAKA4f,EAAAhkB,MAAAiL,Gb4qDY/D,Ea1qDZqd,QAAAlE,Gb4qDUjc,EAASqD,SAAW/F,EAAM+F,UAAW,EazqD/C1C,EAAArD,GAEAuD,EAAAuf,kBAEAxkB,QAAAqgB,QAAAA,OAAAvS,EbyqDY2W,EazqDZN,MAAA9D,EAAAnZ,EAAA8c,EAAAU,GAGAD,EAAAjmB,MAAAkE,EAAAwE,EAAA8c,GAAArlB,KAAA+lB,Gb0qDU3f,EaxqDVX,GbyqDUa,EAAM,WavqDhBmb,GAAAA,EAAAA,KbyqDc+D,WAAY,YarqD1B3lB,EAAAwgB,WACAyB,UAAAA,EAAAA,SbwqDgBrc,EAAS2G,QanqDzBqV,OAGA5hB,EAAAohB,WbsqDYa,MASJrc,EanqDRub,MAAAA,WbsqDU,MAFAD,canqDVrY,GboqDUsY,EAAa,MalqDvBnhB,EAAAmE,OAAA0E,EAAAA,MAAAA,UAKA8I,EAAA6P,WAAAA,WACA,QAAA5b,GAEAA,EAAAA,QAEA5F,EAAAwB,MAAAoF,Ob0pDmBhB,EAASiD,OAQpB,IAAIsd,Ga7pDZA,Cb+pDQvgB,Ga3pDR4b,KAAAK,SAAAA,GAEAA,EAAAA,Wb2pDU3e,EaxpDV1B,MAAAA,EAAAiL,YAAA,eAAA7G,GACAqgB,QAAAA,UAAApE,EAAAA,eAAAR,QAAAA,WAAAA,EAAAA,ebypDYrhB,EaxpDZomB,aAAAxgB,Gb0pDUugB,EAAQlH,EACRuC,EAAaK,EatpDvB5Y,OAAArD,IACAW,QAAArD,QAAAA,OAAAA,EAGAlD,EAAAkE,MAAAA,EAAA2d,GbupDcoE,EAAStE,MAAME,GAAY1hB,KAAKkhB,IAGpCzb,EAASqD,SAAW/F,EAAM+F,UAAW,EACrC1C,EAAWrD,GalpDrBlD,EAAAqhB,UAAAA,OAAAA,GACAne,IAEAlD,EAAAuhB,WAAA3b,OAAAA,GbopDYuc,MAeJvc,Ea9oDRA,OAAAhB,SAAAA,Gb+oDcwB,GACFA,EAAIgB,iBa3oDhBya,EAAA5Y,Sb8oDYrD,EAAS+b,Qa1oDrB3hB,EAAAygB,Sb+oDQ7a,Ea3oDR5F,MAAA4gB,Wb4oDUiB,EAAW,GAAGtV,SAEhB3G,EaxoDRic,WAAA,SAAAoD,GAGAjlB,EAAAogB,UAAApgB,GbwoDQ4F,EatoDRygB,YAAAC,SAAApc,GAEAlK,EAAAqmB,SAAAzF,GbuoDQhb,EAASogB,gBAAkB,WajoDnCnE,GAAAA,EAAAA,CAIA,GAAA0E,GAAAA,EAAAlE,UACAmE,EAAA3E,eACA4E,EAAA5E,EAAAA,KAAAlS,EAGA/J,KAGAwa,EAAAiG,EAAAxjB,QAAAyjB,EAAA,KAAA1lB,EAAAwf,Wb6nDUyB,Ea3nDV6E,SAAAA,EAAArE,Ub4nDU,Ia1nDVkE,GAAAI,IACAvG,EAAAA,EAAAuG,KAAAA,eb2nDcF,Ea1nDd5E,EAAA8E,KAAAA,eb4nDU,IADA/gB,Ea1nDVwa,UAAAuG,EAAAA,UAAA9jB,EAAA7C,EAAA4gB,SAAAC,UAAA7gB,EAAA4gB,Ub2nDcyF,EAAW,CaxnDzB,GAAAM,GAAAA,EACAvG,EAAAA,EAAAxa,EAAAke,Ub0nDgB,UaznDhB5Z,KAAAyc,IAAAA,EAAAJ,OAAAnD,EAAAoD,EAAAE,OACAtG,EAAAA,EAAAvd,QAAA,SAAA,Ob0nDuB,MAAMqH,KAAKyc,IAAsBJ,EAAgBjW,IAAMmW,EAAYC,EAAiBpW,MavnD3GuR,EAAA+E,EAAAD,QAAAA,MAAAd,WAIAgB,OAAAA,KAAAC,IAAA1G,EAAAmG,KAAAA,EAAAC,EAAAC,KACAM,EAAAF,EAAAA,QAAAzG,OAAAA,SbunDuB,QAAQlW,KAAKyc,IAAsBJ,EAAgBnD,MAAQoD,EAAWE,EAAiBvW,QapnD9GvK,EAAAkc,EAAAjf,QAAAuD,QAAAA,SAEAR,EAAAiD,YAAAA,GAAAA,SAAAA,GbunDU,GAAIge,GAAcC,EAAoB1G,EAAWmG,EAAiBC,EAAUC,EAC5EM,GAAeF,EAAazG,KAE9Bxa,EapnDRQ,SAAA,SAAAA,GACA6Y,KAAA7e,EAAAA,OAAA6e,EAAAA,WACA7Y,EAAAiB,ObqnDYjB,EAAIiB,oBAGRzB,EannDR5F,cAAA0gB,SAAAA,GAAAtZ,KAAAhB,EAAAgB,QbqnDYhH,EAAQ,GAAG6e,OapnDvB7Y,EAAApG,oBbwnDQ4F,EatnDRA,yBAAA,SAAAQ,GACAhG,EAAAsgB,yBbunDYta,EAAIgB,iBAEFpH,EAAQ2gB,0BACVva,EAAIiB,kBajnDhBoa,EAAAA,SACAjgB,EAAAC,GAAAA,ObqnDYrB,EannDZA,GAAAoM,QbqqDQ,IAAIwV,IAAyB,CAuM7B,OAAOpc,GAET,QAASW,GAAWrD,GaziD1BsG,EAAAA,SAAAtG,EAAAwC,OAAAxC,EAAAwC,MAAAD,SAAAvC,EAAAiF,UAGAwB,QAAAA,GAAAqd,EAAA5mB,GACA8C,MAAA1B,SAAApB,SAAAA,GAAAgI,GAAA6e,iBAAAD,IbghCM,GaruDN/L,GAAArV,6BAAA1C,KAAAlD,EAAAkD,UAAAwhB,WAGAzG,EAAA9Z,eAAAxC,GAAAA,UAAAwC,EACA+d,EAAArN,QAAA7U,QAAAmE,EAAAiE,Sb4vEM,OaxiDN8e,Ob0iDK1d,UaxiDLtG,aAAAA,UAAAA,YAAAA,OAAAA,SAAAA,WAAAA,QAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GbyiDI,OACEyG,SaziDNlI,Mb0iDMyB,OaziDN,Eb0iDMD,KAAM,SAAkBC,EAAO9C,EAASoF,EAAM2hB,GatiDpD,GAAAtd,GACArI,GACA0B,MAAA1B,EbyiDQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,gBAAiB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,oBAAqB,OAAQ,cAAe,MAAQ,SAASI,GACtNL,QAAQoF,UAAUpB,EAAK3D,MAAO7B,EAAQ6B,GAAO2D,EAAK3D,KAExD,IariDRgI,GAAAhI,ebsiDQL,SariDRA,SAAAoF,OAAApB,aAAA,SAAA3D,GACA7B,QAAA6B,UAAAqB,EAAA4c,KAAAhW,EAAAA,KAAAA,EAAAA,MbsiDY9J,EAAQ6B,IAAO,KahiD3BL,QAAAA,SAAAoF,eAAAwgB,SAAA,eAAA,UAAA,SAAAvlB,GACA,GAAAgI,GAAAA,KAAAA,EAAAK,OAAAkd,GAAAA,cAAAvlB,EAAAoI,MAAA,EACAjK,SAAA8d,UAAAtY,EAAAsE,MboiDY9J,EaniDZ6B,GAAAqB,EAAA4c,MAAAta,EAAAsE,MbsiDQ,IAAIsd,GAAahnB,EAAQoF,KAAK,ca/hDtChE,SAAA6lB,UAAAA,KACAnkB,EAAAgH,KAAAkd,GbiiDYpnB,EAAQ8d,QAAS,Ea5hD7B9d,EAAAwB,OAAAoF,GAGA1D,EAAA1B,eAAAuJ,Wb+hDU7H,Ea9hDVuD,MAAA,IbgiDQjB,EAAK8hB,SAAS,QAAS,SAASxc,GAC9B,GAAItJ,QAAQoF,UAAUkE,KAAc5H,EAAMmkB,eAAe,SAAU,CACjE,GAAItc,GAAW7H,EAAMod,KACrBpd,GAAMod,MAAQsE,EAAKC,YAAY/Z,Ga5hD3Cwc,QAAA1gB,UAAAmE,IACAD,EAAAA,WACAjC,GAAAA,EAAAA,uBbkiDQrD,Ea3hDR8hB,SAAA9lB,WAAAsJ,SAAAA,GACAtJ,GAAAQ,EAAAkB,Ub4hDYgkB,Ea3hDZre,SAGArD,EAAAhE,Wb4hDU0B,Ea3hDVuD,OAAAjB,EAAA+hB,UAAA,SAAAzc,EAAAC,GACAvJ,QAAA0lB,SAAAA,Gb4hDc1lB,QAAQQ,OAAOkB,EAAO4H,GazhDpC5H,EAAAod,MAAAxV,EAIAtF,QAAAwa,UAAAjV,IACA7H,EAAA0H,WACAsc,GAAA1lB,EAAAoF,sBb4hDa,GAEDpB,EazhDZ0hB,Qb0hDUhkB,EAAM0H,OAAOpF,EAAKwa,OAAQ,SAASlV,EAAUC,GACtCmc,GAAY1lB,QAAQoF,UAAUkE,KAC/BtJ,QAAQG,SAASmJ,KAAWA,IAAaA,EAAS4C,MAAM,wBathDxElI,KAAA,EACAtC,EAAA0H,OAGAsc,EAAA1lB,Ub0hDYgE,EathDZ0hB,WbuhDUhkB,EAAM0H,OAAOpF,EAAKib,UAAW,SAAS3V,EAAUC,GACzCmc,GAAY1lB,QAAQoF,UAAUkE,KAC/BtJ,QAAQG,SAASmJ,KAAWA,IAAaA,EAAS4C,MAAM,0BanhDxElI,KAAA,EACAtC,EAAA0H,YAAAgW,GAEAsG,EAAAM,YAAA1c,MAQA5H,EAAA8I,UACA9I,EAAAgkB,OAAAA,EAAAA,SAAAhb,SAAAA,GACAlM,GAAAwB,QAAAoF,UAAAkE,IACAoc,EAAAM,YAAA1c,KbmhDQoc,EAAUthB,EAASxF,EAASJ,GAC5BkD,EAAM8I,IAAI,WAAY,Wc74E9BvL,GAAAymB,EAAAhb,UAIAtL,EAAAI,KACAH,EAAA,Ydg5EEW,QAAQf,OAAO,yBAA0BuD,SAAS,OAAQ,Wc14E5D,GAAAyjB,GAAAA,KAAAA,UAEA5mB,UAAA6mB,UACAnnB,SAAAknB,mBd24EME,SAAU,Wcx4EhBC,YAAA1mB,SACAuiB,YAAAziB,GAIAQ,KACAkmB,EAAA9gB,SAAAihB,EAAAhmB,Gdw4EW4lB,EAAU5lB,KAAM4lB,EAAU5lB,GAAOimB,Icn4E5CtmB,EAAAC,KAAAP,WAAA,SAAA4E,EAAAjE,EAAAA,EAAAA,Gdw5EM,Qc53ENkmB,GAAAC,EAAA7K,Gd63EQ,Gc53ER8K,GAAAD,CAEAD,Gd23EYG,Ec33EZC,EAAAC,EAAAL,EAAAI,EAAAH,OAAAtY,OAAAsY,EAAAA,EAAAA,Ed83EqB3iB,EAAQ,GAAK0iB,EAAKI,OAAOphB,OAAS,EAAI1B,EAAQ,Ecr3EnEgjB,EAAAA,OAAAA,GAAAA,SAEAN,EAAAC,EAAAM,GAEAxiB,EAAAA,WAAAsiB,EAAAE,OAAA5Y,GAAAA,MAAAsY,Gd01EM,Gcr4END,GAAAvmB,Ids4EMumB,GAAK7I,SAAW1d,QAAQyb,KAAKrc,Gcl4EnCkF,QAAAyiB,SAAAA,YAAArJ,WAAAyI,cAAAA,KAAAA,cAAAA,SAAAA,GACA7hB,QAAA0iB,UAAAT,EAAA7I,MAAA0I,EAAAA,SAAAA,GAAAA,EAAAA,Kdq4EM,Icl4EN/d,GAAA,edm4EMrI,Scl4ENumB,SAAAK,cAAA/iB,SAAAA,Gdm4EY7D,QAAQoF,UAAUihB,EAAOhmB,KAASgI,EAAiBK,KAAK2d,EAAOhmB,MAAOkmB,EAAK7I,SAASrd,IAAO,KAEjGiE,Ecj4ENuB,UAAAA,EAAAA,SAAAA,Sdk4EMvB,EAAO0iB,aAAeT,EAAK7I,SAAS0I,Yc/3E1C9hB,EAAA2iB,SAAAR,SAAAC,EAAAA,EAAAA,GACAF,EAAAA,UAEAD,EAAAG,WAAAI,EAAA5Y,MAAArK,Gdi4EQe,EAAIgB,iBACJhB,Ec73ER4hB,mBd44EMD,Ecp3ENA,OAAAtmB,EAAAA,Udq3EMsmB,Ecn3ENW,2BAAAxJ,EAAAA,wBdo3EM6I,Ecn3ENW,MAAAC,SAAAA,Gdo3EYnnB,QAAQ6K,YAAY0b,EAAKI,OAAOS,UAClC9iB,EAAOsiB,WAAWE,EAAK5Y,MAAQ,Gch3EzCqY,EAAA1iB,OAAA0iB,KAAAI,GACAJ,EAAAvgB,OAAAA,QAAA2gB,SAAAS,EAAAA,GACAF,EAAAG,aAAAA,EAAAA,SAAAA,KAAAA,EAAAA,EAAAA,EAAAA,SAAAA,GAAAA,SAAAA,EACAH,EAAAlnB,WAAAgG,EAAAA,SAAAvC,KAAAnF,EAAAA,EAAAioB,EAAA7I,SAAAja,GAAA,SAAAI,EAAA,Qdq3EM0iB,EAAKe,Qcl3EXthB,SAAAA,Gdm3EQ,GAEIqhB,GAFAxjB,Ecl3EZ0iB,EAAAI,OAAAlX,QAAAqX,GACAO,EAAAA,EAAAd,OAAAI,OAMAU,GAFAd,QAAAgB,SAAA1jB,GAEAwjB,EAAAA,OAAAhb,IAAA,SAAAya,GAGAO,MAAAA,GAAAA,Od82Ea5X,Qc72Eb5L,Gd+2EwB0iB,EAAKI,OAAOS,QAE5Bb,Ec32ERA,OAAAK,OAAAL,EAAAI,GACAU,Ed22EYxjB,Ec12EZ0iB,Id42EmB1iB,IAAUwjB,GAAeA,IAAgBd,EAAKI,OAAOphB,QAC9D8hB,Icx2EVd,GAAAa,GAAAlnB,EAAAA,EAAAA,OAAAA,OACAqmB,EAAAM,WAAAA,EAAAA,OAAAA,GAAA3Y,MAAAzC,Gd42EU8a,EAAKK,cAGTL,Ecz2ENK,WAAAD,EAAAS,WAAAI,SAAAjB,Gd02EQA,EAAKI,OAAOS,QAAUlnB,Ecv2E9BqmB,EAAAkB,2BAAAA,QAAA,SAAAC,GACAjc,Od22EM8a,Ect2ENmB,UAAA7hB,EAAAA,UAAAA,SAAAA,EAAAA,Gdu2EQ,Mcr2ER0gB,GAAAA,OAAA7I,UAAAuE,EAAAA,MAAAzb,EAAAA,OAAA4gB,UAAAO,Gdu2EMpB,EAAKkB,Ycp2EX/J,EAAAA,YAAAuE,SAAAzb,EAAAA,EAAA3C,GAEAA,KAAA4iB,EAAAA,SAAA,KAAAjgB,EAAAA,UAAA,KAAAmhB,EAAAA,SAAA,KAAAD,EAAAC,Udo2EUpB,EAAKK,WAAW1Y,GAChBwZ,EAAE9hB,iBACF8hB,EAAE7hB,mBcj2EZ0gB,EAAA7I,SAAAuE,YAAA,KAAAyF,EAAAlhB,SAAA,KAAAkhB,EAAAC,UAAA,KAAAD,EAAAlhB,SAAA,KAAAkhB,EAAAC,UAEAvoB,EAAAA,SAAAA,YAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,UAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,UACAwoB,EAAAloB,EAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,UAFAkoB,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,Wdw2EIpoB,MAAKuM,KAAO,Wc91EhB/D,GAAAA,KAOAtG,OALAkmB,GAAAxoB,SAAAwoB,EAEAA,EAAAloB,WAAAA,EACA0I,EAAAA,cAAA8d,EACA2B,EAAAA,SAAA5B,EACA2B,Kd+1EK5f,Uc71ELzJ,UAAA,UAAAyF,WAAAA,OAAAA,SAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,Gd81EI,Gc71EJ5E,GAAA4E,EAAAjF,Qd81EI,Qc51EJ0C,SAAA,WAAAyG,Ud81EM2f,Yc51ENC,Ed61EMpmB,Oc51ENqmB,Ed61EMroB,Ycz1ENsoB,SAAA,WAAAA,SAAA1pB,WAAAspB,EAAAloB,Yd01EMnB,Ycz1EN0pB,SAAAA,EAAAD,Gd01EQ,MAAOhkB,GAAKjF,UAAYK,EAASL,UAEnC0C,Kcp1ENsmB,SAAAlB,EAAAA,EAAAA,EAAAqB,Gdq1EQ,Gcp1ERJ,GAAAxiB,EAAAyiB,Gdq1EYA,EAAaG,EAAY,EAwB7B,Icz2ERre,KAAAie,EAAAA,QAAAhe,EAAAke,SAAAje,Gdm1EU6d,Ecj1EVG,cAAAnB,EAAA7c,OAAAA,Gdm1EY+d,IACFC,EAAWlB,2BAA2B/c,KAAK,Wc/0ErDie,EAAAlB,cAAAA,EAAA/c,OAAAsd,Wdk1EUU,Ec/0EVK,YAAAvpB,KAAAwpB,SAAAre,Gdi1EY,Mch1EZge,GAAApY,WAAAwY,GACAE,Kdk1EQN,EAAWlB,2BAA2B/c,KAAK,WACzC7C,EAAS,WAEP,IAAK,Gc90EjBkhB,GAAAvpB,EAAAwpB,KAAA,Md80EqBzY,EAAI,EAAGA,EAAIwY,EAAW5iB,OAAQoK,IAAK,Cc30ExDvC,GAAAkb,GAAAA,QAAA1pB,QAAAupB,EAAAxY,GAGA4Y,GAAAA,SAAA7b,EAAAU,SAAAkb,cAGAP,EAAAlB,KAAAA,KAAAA,GAAAA,UAKAnlB,Odw0EY0L,Ect0EZkb,aAAA,Cdu0EU,GAAIC,GAAqB7b,EAAOU,EAAMkb,aACtCP,GAAWlB,2BAA2B/c,KAAK,WACzCye,EAAmBC,OAAO9mB,EAAOqmB,EAAWpB,OAAOS,Wch0E/D1lB,EAAA0H,OAAAgE,EAAAkb,aAAA,SAAAhf,EAAAC,GACAnB,EAAAwe,WAAAtd,KACA,Sds0EOtB,Uc5zEPhE,UAAA,UAAA,WAAA,OAAA,SAAAsH,EAAAmZ,EAAArB,Gd6zEI,OACEhb,Sc1zEN0W,YAAAuE,Wd2zEM3hB,OAAO,EACPD,KcxzENC,SAAAwM,EAAAA,EAAAA,EAAAA,GAsCAua,QAAAA,Kd0yEU,GAAI5kB,GAAQkkB,EAAWpB,OAAOlX,QAAQ/N,EACtC+iB,GAASsD,EAAWljB,UAAUnD,EAAOmC,GAAS,WAAa,eAAejF,EAASmpB,EAAWrK,SAAS0I,ac/0EjH1kB,GAAAA,GAAA+B,EAAAA,EAEA/B,GAAAwM,SAAAxM,YAGA9C,EAAAmpB,KAAAA,OAAArK,YdqzEQtQ,EcpzERxO,SAAAylB,QAAA0D,SAAArK,EAAAre,GdqzEUqC,EAAMod,MAAQsE,EAAKC,YAAY/Z,KAEjC5H,EcnzERA,KAAAia,EAAAja,KdozEQA,EAAM+B,GAAK2J,EAAM3J,GchzEzBskB,EAAAA,KAAAW,EAAAhnB,MAAAA,EAAAA,GAIAA,EAAAinB,SAAAA,WACA/pB,EAAAoF,SAAA+jB,EAAArK,SAAAhc,WAIAA,EAAA8I,SAAA,WAAA,SAAAlB,EAAAC,GACAwe,EAAAA,SAAAT,EAAA5lB,MAAAA,KAGAqmB,EAAAU,MAAAA,GACA/mB,EAAAmC,eAAA8iB,GAEAlC,EAAAA,KAAAsD,mBAAArmB,EAAAmC,cAGAkkB,EAAAA,IAAAA,WAAAlB,WACA4B,EAAAA,QAAAA,KAUAV,EAAAlB,2BAAA/c,KAAA,WACA3B,MAEAzG,SdwyEOsG,UAAU,UAAW,WACxB,OACEG,SAAU,IevlFhBnI,KAAAf,SAAAyC,EAAAknB,EAAA5kB,GAIA5E,EAAAA,OAAAI,EAAAJ,QAAAA,SAAAA,EAAAA,GACAC,IAAAkK,GAAAD,GAAAsf,EAAA,GAAA7d,cf0lFE/K,QerlFFuC,OAAA,yBAAA,yBAAA,wCAAAC,SAAA,UAAA,WfslFI,GerlFJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,SACAuB,YAAA,UACAkmB,UAAA,cACAC,YAAAA,yBACAC,QAAA,QACAC,WAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,gBAAA,EACAC,MAAAA,EACA5F,UAAA,oCfslFMuF,YAAa,gCenlFnBzpB,QAAAuM,MAGAod,SAAA1P,OACA2P,UAAA3M,EAEA4M,cAAAE,WfklFMD,cehlFN3kB,yBfilFM+e,Qe9kFNllB,EfglFIgB,Me7kFJuM,MAAArK,UAAA4C,YAAAA,aAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GfglFM,Qe5kFN5C,GAAAyC,EAAAA,EAAAA,Gf6kFQ,GAAIQ,Me3kFZjD,EAAAyC,QAAAA,UAAA/E,EAAAuE,Ef6kFQgB,GAAUP,EAASxF,EAASJ,Ee3kFpCkD,IAAAA,GAAA8nB,EAAAhrB,MACAkD,GAAA+nB,YACA/nB,EAAAgoB,SACAhoB,EAAAioB,gBAGAjoB,EAAA2C,aAAA,Gf6kFQ3C,Ee3kFRiD,YAAAH,EAAAX,Sf4kFQnC,EAAM+nB,oBAAsBjrB,EAAQsqB,gBAAkBtqB,EAAQqqB,SAC9DnnB,EAAMgoB,eAAiBlrB,EAAQ8qB,cezkFvC5nB,EAAAiD,SAAAnG,EAAAqF,Qf2kFQnC,Ee1kFRA,UAAA6C,EAAA4kB,Sf2kFQznB,Ee1kFRiD,UAAAD,SAAAb,Gf2kFUnC,EAAM6C,aAAa,WACjBI,EAAQH,SAASX,MAGrBnC,EAAMiD,QAAU,SAASd,EAAOe,GevkFxClD,EAAAmD,aAAA,WACAF,EAAAA,OAAAE,Mf2kFQnD,EevkFR+E,WAAAkJ,WfwkFU,MevkFVjO,GAAAmD,cfykFQnD,EAAMmD,UAAY,SAAShB,GACzB,MAAOc,GAAQE,UAAUhB,IepkFnCnC,EAAAkoB,WAAAA,WACA,IAAA,GAAAja,GAAA,EAAAA,EAAAjO,EAAA+C,SAAAc,OAAAoK,IACAjO,EAAAmD,UAAA8K,IACAjO,EAAAiD,QAAAgL,IAOAhL,EAAAA,YAAA,WACAjD,IAAAA,GAAA+C,GAAAA,EAAAA,EAAAK,EAAAA,SAAAA,OAAAA,IACAH,EAAAklB,UAAAA,IfokFcnoB,EAAMiD,QAAQgL,IAIpBhL,EelkFRjD,OAAAyC,SAAAojB,GfmkFU7lB,EAAM+C,SelkFhBK,EfmkFUH,EelkFVjD,sBfokFQiD,EelkFRnG,SAAAuqB,SAAA5kB,GAUAzC,MAVAlD,GAAAuW,UfokFgBpQ,EAAQE,UAAUhB,GACpBnC,EepkFdyC,aAAAojB,OAAA7lB,EAAAyC,aAAAsL,QAAA5L,GAAA,GfskFcnC,EAAMyC,aAAa2F,KAAKjG,GAEtBrF,EAAQuqB,MAAMrnB,EAAMyC,aAAa4kB,KAAK,SAAShU,EAAG+U,GelkFlEnlB,MAAAD,GAAAolB,KfskFYpoB,EAAMyC,aAAeN,EenkFjCqJ,EAAA/I,cfukFQQ,EerkFRnG,OAAAqqB,SAAAhlB,GfskFU,KerkFVnE,QAAAA,YAAA4F,IAAAnB,EAAAzC,GAAAyC,GAAAzC,EAAAmC,SAAAA,QfqkFU,CAGA,GAAI3D,GAAQwB,EAAM+C,SAASZ,GAAO3D,KAClCwB,GerkFVwL,OAAAxL,WfskFYiD,EAAQH,SAASX,GACbrF,EerkFhBqqB,SACAnpB,EAAAlB,cAAAkD,EAAAyC,aAAAkI,IAAA,SAAAxI,GACAnE,MAAAA,SAAA4F,YAAAA,EAAApF,SAAAR,IACA,KfukFuBgC,EAAM+C,SAASZ,GAAO3D,UAG3B1B,EAAQklB,OelkF1Bve,EAAA3G,cAAAH,IAAAqB,EAAAmE,YAAAc,EAAAA,GAEAnG,EAAA6G,cAAAxB,GfqkFcc,EAAQ0C,UAGZ3F,EehkFV1B,MAAAA,EAAA2M,YAAAnD,UAAAA,EAAA3F,EAAAc,GACAjD,QAAAyC,UAAAA,EAAAzE,WAAA8J,QAAA6C,WAAAnM,EAAAA,WfikFY1B,EehkFZ6G,SAAAV,EAAAe,EAAAxF,KfmkFQyE,EehkFRjD,mBAAAyC,WfikFc3F,EAAQqqB,SACN7oB,QehkFhB2M,QAAAjN,EAAA8J,aACA9H,EAAA1B,aAAAN,EAAA8J,YAAAA,IAAA9H,SAAA+C,GACA/C,MAAAyC,GAAAA,UAAAQ,KfmkFcjD,EAAMyC,gBe5jFpBsC,QAAAA,UAAA/G,EAAA8J,cAAA9H,EAAA+C,SAAAc,OACA7D,EAAAlD,aAAAoE,EAAAlD,UAAAA,EAAA8J,afikFc9H,EAAMyC,aAAe,IAI3BQ,Ee7jFRnG,WAAAqqB,Wf8jFU,Me7jFVrqB,GAAAkD,WAAAyC,EfgkFiBzC,EAAM+C,SAASc,QAAU7F,EAAW+F,WAAWF,QAAU/G,EAAQoE,UAF/DlB,EAAM+C,SAASc,QAI1BZ,Ee5jFRd,UAAAA,SAAAA,GACA,MAAArF,GAAAqF,SACA3D,KAAAF,EAAA8F,aAAArB,QAAAZ,GAEAA,EAAAA,eAAAA,GAGAc,EAAAgB,UAAAA,SAAAzF,GAEA0E,GAAAgB,EACAhB,KAAAiB,EAAAA,EAAAA,SAAAA,OAAAA,MAEA4W,QAAA3W,OAAApE,EAAA+C,SAAAZ,GAAA3D,MAAAA,Kf2jFU,MezjFV6pB,If2jFQplB,EexjFRgB,aAAAqkB,SAAAzN,Gf2jFU,GAFA3X,EexjFVgB,iBfyjFUhB,EAAIiB,kBACA4W,EexjFdsN,CfyjFY,GevjFZC,GfujFgBzN,EAAWvc,QAAQpB,QAAQgG,EAAI0X,OAEnC,IAA4B,MAAxB1X,EAAI0X,OAAOzO,SerjF3B,IfsjFc,GAAImc,GAAkBzN,EAASrV,UetjF7C6iB,GAAAC,EAAAzkB,OAAA,GACAiX,MAAAxc,EAAA+pB,GAAAvN,WfwjFkBuN,EevjFlBC,GfyjFgBA,EAAkBA,EAAgB9iB,QenjFlDI,GACAtH,QAAApB,QAAA8J,GAAA9D,eAAA,SAGAA,EAAAgB,eAAAA,WfyjFQjB,EenjFR2C,WAAAD,SAAAA,GfojFU,MAAK,eAAeqB,KAAK9D,EAAI4B,UehjFvCqiB,IAAAjkB,EAAApG,UACAoG,EAAAgB,iBfkjFYhB,EAAIiB,mBe7iFhBrH,EAAAgI,UAAArC,IAAAS,EAAAlD,QAIAiF,EAAAA,Of8iFenI,EAAQqqB,UAA6B,KAAhBjkB,EAAI4B,SAAkC,IAAhB5B,EAAI4B,aexiF9DhI,EAAAiR,Wf4iFgC,KAAhB7K,EAAI4B,SAAkB9E,EAAMyC,aAAe,EAAGzC,EAAMyC,eAAyC,KAAhBS,EAAI4B,SAAkB9E,EAAMyC,aAAe,EAAGzC,EAAMyC,aAAezC,EAAM+C,SAASc,OAAS,EAA4B,KAAhBX,EAAI4B,SAAkB9E,EAAMyC,aAAezC,EAAM+C,SAASc,OAAS,EAAG7D,EAAMyC,eAAyBnE,QAAQ6K,YAAYnJ,EAAMyC,gBAAezC,EAAMyC,aAAe,GeziFvWQ,EAAAslB,YALAC,EAAAxlB,OAAAhD,EAAAyC,efkiFU,QAgBFQ,Ee1iFRwlB,MAAAA,Wf2iFU,Ge1iFV7N,GAAAA,EAAAvR,UAAAA,Sf2iFU,OAAOqf,GAAG3a,QAAQ,SAAW,GAAK2a,EAAG3a,QAAQ,YAAc,GAAK2a,EAAG3a,QAAQ,SAAW,GeriFhG9K,EAAA4Y,iBAAAzW,SAAAA,GACA,OAAAnC,EAAA,GAAA0lB,cAAAC,UACA/M,EAAAA,iBACAmK,EAAAlpB,2BACAmG,EAAAA,OAAAoC,Sf0iFQ,IeriFRpC,GAAAoC,EAAAA,IfsiFQpC,GeriFRnG,KAAAA,WfsiFU+e,IACI/e,EAAQqqB,UACVlkB,EeriFZoC,SAAAsd,SAAA,mBAGApd,EAAAuW,WACA7Y,EAAA0C,SAAA2D,GAAAyR,EAAA,aAAA,YAAA9X,EAAAgB,cACAnH,EAAAqqB,UACAnnB,EAAAyC,GAAAA,UAAAQ,EAAA2C,aAEA3C,GAAAA,GfsiFQ,IepiFR/F,GAAA6L,EAAApD,IAoBA,OfihFQ1C,GAAQ0C,KAAO,YeniFvBmW,EAAAqL,UAAA7oB,QAAA6K,YAAAnL,EAAA8J,efqiFY9H,EAAMyC,aAAe,IAEvBQ,EAAQoC,SAAS0D,IAAIgS,EAAU,aAAe,YAAa9X,EAAQgB,cehiF7E4jB,EAAAnqB,UACAR,EAAA2qB,IAAAA,UAAAA,EAAAA,YAMAvhB,GAAA,IAIArD,Ef80EM,Ge5kFNjD,GAAA+C,6BAAAA,KAAAA,EAAAA,UAAAA,WACAgY,EAAAoM,eAAAvd,GAAA1E,UAAA6S,CAgQAhY,OADA2G,GAAAhJ,SAAAA,EACAmqB,Mf6hFKvhB,Ue1hFLtG,YAAAA,UAAAA,SAAAA,KAAAA,UAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,Gf2hFI,GAAItC,Ge3hFR6pB,EAAA7pB,Qf4hFI,QACE+I,Se5hFNlI,Mf6hFMmI,Qe5hFNpI,Uf6hFMyB,KAAM,SAAkBC,EAAO9C,EAASoF,EAAMtE,GezhFpD,GAAA2I,IACArI,MAAAC,EACAgpB,YAAA7jB,EAAApB,Yf4hFQhE,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,WAAY,OAAQ,YAAa,cAAe,iBAAkB,YAAa,gBAAiB,UAAW,WAAY,gBAAiB,YAAa,KAAM,OAAQ,YAAa,cAAe,cAAe,UAAY,SAASI,GACtVL,QAAQoF,UAAUpB,EAAK3D,MAAO7B,EAAQ6B,GAAO2D,EAAK3D,KAExD,IexhFRgI,GAAAhI,efyhFQL,SexhFRA,SAAAoF,OAAApB,YAAA,iBAAA,QAAA,SAAA3D,GACA7B,QAAA6B,UAAAqB,EAAA4c,KAAAhW,EAAAA,KAAAA,EAAAA,MfyhFY9J,EAAQ6B,IAAO,KelhF3BL,QAAAA,SAAAoF,eAAAmlB,SAAA,eAAA,SAAA,YAAA,SAAAlqB,GACA,GAAAgI,GAAAA,KAAAA,EAAAK,OAAA6hB,GAAAA,cAAAlqB,EAAAoI,MAAA,EACAjK,SAAAqqB,UAAA7kB,EAAAsE,MfshFY9J,EerhFZ6B,GAAAqB,EAAA4c,MAAAta,EAAAsE,MfwhFQ,IAAIiiB,GAAe3rB,EAAQoF,KAAK,gBevgFxC,IAXApF,QAAAwG,UAAAyI,KACA2c,EAAA5rB,KAAAA,GACA4rB,EAAA1c,UAAA,EAEA0c,EAAAxG,SAAAplB,GAOAJ,WAAAkG,EAAAA,GAAAC,SAAA/F,cAAAJ,CAEA,GAAAkG,GAAAwlB,CACAtrB,GAAAkP,IAAA2c,UAAAA,Qf+gFU7rB,EAAUoB,QAAQpB,QAAQ,gFe3gFpC4rB,EAAAzhB,MAAAA,Gf8gFQ,Ge3gFRH,GAAAa,EAAA/J,EAAAA,WAEAgF,EAAAM,EAAAkE,EAAAA,EAAAA,EACAxJ,GAAAA,Sf2gFUd,EAAQ,GAAG6rB,iBAAiB,OAAQ/lB,EAAOulB,iBetgFrDvoB,IAAAA,GAAA2H,EAAAL,OAAAM,GAAAA,QAAAC,OAAAA,IAAAA,MfygFQ7H,GevgFRgD,OAAAmlB,EAAAA,SAAAA,EAAAA,GACAnqB,EAAAwF,SAAAA,EAAAA,GAAAA,KAAAA,SAAAA,GACAR,EAAAM,OAAAkE,GAGAxJ,EAAAwF,cAGA,GfqgFQxD,EepgFRlD,OAAAA,EAAAqqB,QAAA7oB,SAAA2M,EAAAjN,GfqgFUgF,EepgFVsF,qBfqgFUtK,EepgFVmE,YfqgFW,GACHnE,EepgFRmD,QAAA7C,WfqgFU,GepgFVgK,GACAA,CfqgFcxL,GepgFdqqB,UAAA7oB,QAAA2M,QAAAjN,EAAA8J,cfqgFYQ,EepgFZA,EAAAyJ,YAAApH,IAAA,SAAAnM,GfsgFc,MADA2D,GAAQa,EAAOgB,UAAUxF,GengFvC,KAAA2D,EAAAa,EAAAJ,OAAAG,SAAAZ,GAAAgD,OAAA,IACAhD,OAAAa,QAAAgB,WfsgFcsE,EergFdA,EAAAnG,QAAArF,EAAAkG,WAAAD,EAAAZ,WfqgFyBmG,EAASzE,OAAS,KAAO/G,EAAQ6qB,eAAiBjqB,EAASiqB,eAE3Drf,EAASyJ,KAAK,QehgFvC5P,EAAA3D,EAAAA,UAAAqF,EAAAiE,afogFYQ,EAAqB,KAAVnG,EAAea,EAAOJ,OAAOG,SAASZ,GAAOgD,OAAQ,Ge//E5EnF,EAAAN,MAAA4I,GAAAxL,EAAAyqB,cAAAzqB,EAAAwqB,WAAA5pB,EAAA4pB,aAEAxqB,EAAAqqB,WACAnkB,EAAAgmB,SAAA,SAAAxqB,GfkgFY,OAAQA,GAA0B,IAAjBA,EAAMqF,SAG3B7D,EAAM8I,IAAI,WAAY,WgBz5F9BvL,GAAAyF,EAAAgG,UAKAigB,EAAAnrB,KAEAJ,EAAAI,YhB05FEQ,QgBp5FF+L,OAAAA,4BAAA,kCAAA,sCAAA6e,SAAA9d,aAAAmU,WhBq5FI,GgBn5FJ0J,GAAAE,KAAA7qB,WACAZ,EAAAY,KAAAA,UACA8qB,SAAAC,IAIAC,SAAAnd,IhBi5FMY,OgBh5FN,IhBk5FIjP,MgB/4FJuM,MAAAkf,UAAAA,YAAAtnB,aAAAA,aAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GhBm5FM,QgB74FNunB,GAAAC,EAAAA,GACA,MAAAC,GAAAD,GAAAA,UAAAvsB,EAAA,GAAAJ,SAAAiF,gBAAAA,EAAAA,chB+4FM,QgB34FNknB,GAAAU,GhB44FQ,GgB34FR7sB,GAAAmsB,QAAAS,UAAAA,EAAAA,EhB44Fa5sB,GAAQI,UAASJ,EAAQI,QAAUmsB,EgBz4FhD,IAAAO,GAAAA,EAAAA,EAAAA,QAAAA,QAGAC,EAAAA,EAAAA,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,SAAAA,EAAAA,EACA,IAAAC,EAAAA,GAEA,MADAd,GAAAe,GAAAA,UACAC,EAAAA,EAEA,IACAC,GAEAC,EAOArsB,EAGAssB,EACAC,EACAb,EACAL,EACAK,EAjBAa,KAKA3lB,EAAAA,EAAAA,oBAEAklB,IA+JA7pB,OhB6uFQ6pB,GgBh4FRM,KAAAA,WACAL,KAAAA,QAAAA,EACAC,EAAAA,EAAA1e,KAAAA,cAAAtO,EAAAssB,UACAc,EAAAA,EAAAA,KAAAA,cAAAA,EAAAA,UAGAV,EAAAE,GAAAA,QAAA5rB,KAAAwsB,4BhB+3FUnB,EgB93FVO,GAAAA,SAAAE,GhB+3FUJ,EAASlgB,GAAG,SAAU+gB,GACtBH,EAAwBd,EAAStrB,KAAKysB,aAAcztB,EAAQssB,UgB33FtEQ,EAAAxe,EAAAtC,IAAA,qBAAAohB,GAGApsB,EAAA6rB,EAAAA,IAAAA,wBAAAA,GACAO,IACAR,IhB23FYT,EAAMS,GAAYE,IAGtBA,EgBx3FR7gB,QAAA,WACA8gB,KAAAA,UACAC,KAAAA,QAAAA,IhB23FUN,EAASzgB,IAAI,QAASjL,KAAKwsB,4BAC3BnB,EAASpgB,IAAI,SAAUqhB,GgBt3FjCR,EAAAY,IAAAA,SAAAA,GAGAX,IAGAnlB,IAGAylB,SAGAzlB,GAAAA,KhBk3FQklB,EgB72FR3b,cAAA+b,WhB82FU,GgB72FVA,EAAA7gB,OhB62FU,CAGA,GAFAzE,GgB72FVulB,EAAAD,EAAAA,YAAAR,EAAA/c,KAAA,eAAA,EhB82FU0d,EgB72FVzlB,KAAAslB,IAAAA,EAAA/b,YAAAwc,EAAAhe,KAAA,iBACA/H,EAAAslB,EAAAtlB,GAAAA,WAAAslB,IAAAA,EAAA,GAAApP,OACA,MAAAgP,GAAAc,iBAAAV,EAAA/b,GhB+2FU,KAAK,GAAIA,GAAI+b,EAAenmB,OAAQoK,KgB12F9C2b,IAAAA,QAAAU,YAAAA,EAAArc,GAAA1J,YAAA,OAAAylB,EAAA/b,GAAA1J,WAGAomB,IAAAH,EAAAvc,GAAA2M,UhB02FgBlW,EAAYslB,EAAe/b,GAAG1J,WgBr2F9CqlB,EAAAc,EAAAA,IAAAhmB,EAAAxH,EAAAA,EAAAA,GAAAA,WACA,MAAA+sB,GAAAS,iBAAAV,EAAA/b,MhBy2FQ2b,EgBt2FRjB,2BAAA,WhBu2FUgC,WgBt2FVxe,EAAAwc,cAAAiC,IhBw2FQhB,EAAWc,iBAAmB,SAASxtB,GACrC,GAAI+sB,EAAc,CAChB,GAAItB,GAAgBiB,EAAWiB,mBAAmBZ,EgBr2F9DA,KACA/sB,EAAAylB,OAAAe,YAAA,UACAvX,EAAAjP,EAAA0tB,OAAAze,OAAAjP,EAAA0tB,EAAAplB,OAAAA,SAAAA,SAAA,OACAtI,EAAAsI,OAAAA,SAAAmd,SAAAe,YAAA,WAKAuG,EAAAF,EAAA5oB,OhBs2FUjE,EgBr2FV0tB,OAAAhQ,SAAAA,UACAzO,EAAAjP,EAAA0tB,OAAA,OAAAze,EAAAjP,EAAA0tB,OAAAplB,SAAAA,SAAA,OhBs2FYtI,EAAQ0tB,OAAOplB,SAASA,SAASmd,SAAS,WAG9CiH,EgBj2FRkB,mBAAA5lB,SAAA6lB,GhBk2FU,MgBj2FVC,GAAAzmB,OAAAumB,SAAAA,GACA,MAAAhuB,GAAAA,SAAAkuB,IhBk2Fa,IAELpB,EgB/1FRpK,aAAAjb,WhBg2FUjG,QgB91FVC,QAAAwrB,EAAA3B,SAAAA,GACA,GAAA0C,GAAAvmB,EAAAA,cAAAA,EAAAA,OhB+1FYymB,GAAezmB,UAAYumB,EAAgBvL,EAAWxS,OAAO+d,GAAe1d,IAAM,KgB51F9Fgd,EAAAA,QAAAA,OAAAA,EAAAA,YAAAA,EAAAA,WAAAA,EAAAA,EAAAA,UAIAR,EAAAqB,EAAArQ,OAAAA,SAAAgQ,GACAb,MAAA3hB,QAAA2hB,EAAAA,YAAAnP,KAAAA,SAAAA,EAAAA,GAAAgQ,MAAAA,GAAAA,UAAAA,EAAAA,YhB+1FUR,KAEFR,EgB71FRsB,aAAAA,SAAAA,EAAAA,GACAnB,EAAAA,MACAnP,OAAAmP,EhB81FYa,OgB71FZM,KhBg2FQtB,EAAWuB,eAAiB,SAASvQ,EAAQgQ,GAE3C,IAAK,GgB91Ffb,GhB81FmB9b,EAAI8b,EAAgBlmB,OAAQoK,KgB31F/C2b,GAAAA,EAAA3b,GAAA2M,SAAA3M,GAAAA,EAAAA,GAAAA,SAAAA,EAAAA,CACA8b,EAAAA,ChB61Fc,OAGJA,EAAgBlE,OAAOqF,EAAU,IAEnCtB,EAAW9mB,SAAW,SAASmL,GgBl1FvC3H,EAAA2H,GAAA0U,SAAA,WAGAlc,EAAAyE,OACA0e,EhBktFM,GgB74FNT,GAAArsB,QAAAwB,QAAAQ,GACA2rB,EAAA3tB,QAAAI,QAAAJ,EAAAI,KAAAmsB,oBACAA,EAAAI,QAAAtd,QAAArP,EAAAI,SAAA0iB,KhB6gGM,OgBl1FN5f,OhBo1FKsG,UgBn1FLhI,eAAA,aAAA,WAAAK,aAAAA,aAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GhBo1FI,OACE8H,SAAU,MACV1G,KgBl1FNqrB,SAAAxB,EAAA9sB,EAAAA,GACAsuB,GAAAA,IAEAprB,MAAA8I,EhBm1FQxK,SgBj1FR8sB,SAAAD,SAAAA,UAAAvQ,SAAA1d,GACAkuB,QAAApiB,UAAAA,EAAAA,MAAAA,EAAAA,GAAAA,EAAAA,KhBm1FQ,IgBj1FRlM,GAAA8sB,EAAA9sB,EhBk1FQsuB,GgBj1FRA,aAAAtuB,EAAA8d,OAAA1d,GhBk1FQ8C,EAAM8I,IAAI,WAAY,WAChBsiB,IACFA,EAAUD,eAAeruB,EAAQ8d,OAAQ1d,GgB30FrDoJ,EAAA0C,WAGAvC,EAAA,KACA1I,EAAA,YhB+0FOuI,UgB30FP+kB,mBAAA,aAAA/oB,WAAA,aAAA+oB,aAAA,SAAAjgB,EAAAge,EAAA7J,EAAAqK,GhB40FI,OACEnjB,SAAU,IACV1I,QAAS,SAAkBb,EAASoF,GAClC,GAAIjC,GAAWnD,EAAQ,GAAG6mB,iBAAiB,eiBvkGnDzlB,SAAAf,QAAA8C,EAAA,SAAAirB,GAIA5tB,GAAAA,GAAAA,QAAAA,QAAAA,EACAC,GAAA6H,SAAAlD,KAAA,eAAA,IAAAA,KAAA,cAAA+oB,EAAA/oB,KAAA,gBjB0kGEhE,QiBlkGFzB,OAAAA,0BAAA,2BAAAiE,SAAA,WAAA,WjBmkGI,GiBlkGJxB,GAAAA,KAAA5B,UACAmD,UAAA,UACAG,YAAA,GACAtB,WAAA,EACA0d,QAAA,EACAmO,UAAA,QACAtqB,YAAA,2BACAqc,iBAAA,EjBmkGMzc,QAAS,QiBhkGf/C,UAAAuM,EAEA3K,MAAA,EjBikGM0d,MiB9jGNtgB,GjB+jGMyuB,QiB7jGNC,GjB8jGMvqB,MiB3jGNnE,EjB4jGMwgB,WiB3jGNkO,EjB6jGI1tB,MiB1jGJuM,MAAAmhB,WAAAA,SAAAA,GjB2jGM,QAASC,GAAevuB,EAAS+E,GiBvjGvC,GAAAnF,GAAA2uB,QAAAA,UAAAA,EAAAA,GjByjGYD,EAAW9oB,EAASxF,EAASJ,EiB9iGzC2J,OALAH,GAAAilB,UAEA9hB,EAAAA,OAAAA,QAAAG,EAAAH,SAGAhD,EAEA1G,MAAA0rB,OjBojGKnlB,UiBhjGLxJ,aAAAA,UAAAA,OAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GjBijGI,GAAI2M,GiBjjGRzJ,EAAAA,uBAAAA,EAAAA,UjBkjGI,QACEyG,SiBljGNlI,MjBmjGMyB,OiBljGN,EjBmjGMD,KAAM,SAAkBC,EAAO9C,EAASoF,GiB/iG9C,GAAAqE,GACArI,GACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,kBAAAI,YAAAA,YAAAA,QAAAA,UAAAA,OAAAA,YAAAA,cAAAA,YAAAA,KAAAA,cAAAA,cAAAA,aAAAA,SAAAA,GACAiI,QAAAlD,UAAA/E,EAAAkI,MAAAC,EAAAA,GAAAnI,EAAAoI,KjBgjGQ,IiB9iGRjK,GAAAkD,ejB+iGQ1B,SAAQC,SAAU,OAAQ,YAAa,aAAe,SAASI,GACzDL,QAAQoF,UAAUpB,EAAK3D,KAASgI,EAAiBK,KAAK1E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KiB1iG/FL,QAAAA,SAAAoF,eAAAwgB,SAAA,eAAA,UAAA,SAAAvlB,GACA,GAAAgI,GAAAA,KAAAA,EAAAK,OAAAkd,GAAAA,cAAAvlB,EAAAoI,MAAA,EACAjK,SAAA8d,UAAAtY,EAAAsE,MjB6iGY9J,EiB5iGZ6B,GAAAqB,EAAA4c,MAAAta,EAAAsE,MjB+iGQ,IAAIsd,GAAahnB,EAAQoF,KAAK,ciBziGtChE,SAAAC,UAAA2lB,KACA5hB,EAAA0E,KAAAkd,GACA5hB,EAAA8hB,QAAAzlB,EjB4iGY7B,EiB1iGZwB,OAAAoF,GjB6iGQpF,QAAQC,SAAU,QAAS,WAAa,SAASI,GAC3C2D,EAAK3D,IACP2D,EAAK8hB,SAASzlB,EAAK,SAASiJ,EAAUC,GACpC7H,EAAMrB,GAAO+iB,EAAKC,YAAY/Z,GAC1BtJ,QAAQoF,UAAUmE,IiBviGpCvF,EAAA,WACAoF,GAAAgkB,EAAA5I,wBAMAxgB,EAAAhE,WjByiGU0B,EiBxiGVyJ,OAAAA,EAAAA,UAAA,SAAA7B,EAAAC,GACAvJ,QAAAqtB,SAAAA,GjByiGcrtB,QAAQQ,OAAOkB,EAAO4H,GiBtiGpC5H,EAAAurB,QAAA3jB,EAIAtF,QAAAwa,UAAAjV,IACA7H,EAAA,WACA2rB,GAAArtB,EAAAoF,sBjByiGa,GAEDpB,EiBtiGZqpB,QjBuiGU3rB,EAAM0H,OAAOpF,EAAKwa,OAAQ,SAASlV,EAAUC,GACtC8jB,GAAYrtB,QAAQoF,UAAUkE,KAC/BtJ,QAAQG,SAASmJ,KAAWA,IAAaA,EAAS4C,MAAM,wBiBniGxElI,KAAA,EACAtC,EAAA0H,OAEAikB,EAAArtB,UjBwiGYgE,EiBpiGZqpB,WjBqiGU3rB,EAAM0H,OAAOpF,EAAKib,UAAW,SAAS3V,GAC/B+jB,GAAYrtB,QAAQoF,UAAUkE,KAC/BtJ,QAAQG,SAASmJ,KAAWA,IAAaA,EAAS4C,MAAM,0BiBjiGxElI,KAAA,EACAtC,EAAA0H,YAAAgW,GAEAiO,EAAArH,YAAA1c,MAQA5H,EAAA8I,UACA9I,EAAA2rB,OAAAA,EAAAA,SAAA3iB,SAAAA,GACAlM,GAAAwB,QAAAoF,UAAAkE,IACA+jB,EAAArH,YAAA1c,KjBiiGQ+jB,EAAUH,EAAStuB,EAASJ,GAC5BkD,EAAM8I,IAAI,WAAY,WkBjsG9BvL,GAAAouB,EAAA3iB,UAIAtL,EAAAI,KACA4mB,EAAA,YlBosGEpmB,QkB9rGFf,OAAA,4BAAAuD,SAAA,UAAA,WlB+rGI,GkB/rGJpD,GAAAA,KAAAA,UlBgsGMgnB,YAAa,SACbkH,UAAW,mBkB5rGjBtlB,QAAAA,EAIAxI,MAAAuM,KAAA,WACA5D,OACA1G,SAAArC,MlB8rGK4I,UkBzrGLhI,YAAAoF,UAAA/E,YAAAA,UAAAA,SAAAA,EAAAA,EAAAA,GlB0rGI,GAAIjB,GAAWmuB,EAAQnuB,QACvB,QACE+I,SkBtrGN,IlBurGM1G,KkBrrGN,SAAA8H,EAAAA,EAAAA,EAAAA,GlBsrGQ,GkBprGR/K,GAAA2pB,QAAAvpB,KAAAQ,ElBqrGQY,SkBnrGRA,QAAAC,OAAAkoB,KAAAA,GAAAqF,SAAAA,GAEAxtB,QAAAytB,UAAAztB,EAAApB,MAAA4uB,EAAAA,GAAAA,EAAAA,MlBorGQ9rB,EkBlrGR0H,OAAA5K,WlBmrGU,MkBlrGVkvB,GAAAC,QlBmrGW,SAASrkB,EAAUC,GACpB,GkBlrGV4e,GAAAvpB,EAAAgvB,GAAAF,iBAAA,MAAAlvB,EAAA8uB,UAAA,IlBmrGUttB,SkBjrGViM,QAAAvD,EAAAY,SAAAkkB,GlBkrGY,GkBjrGZC,GAAApJ,QAAA7lB,QAAA4nB,GlBkrGgBsH,EkBjrGhBD,EAAAzpB,KAAAxF,EAAA8uB,WAAAjsB,QAAA,IAAA,MACAosB,GAAArI,SlBkrGcsI,EAAU,IAAMA,EAAU,IAE5B,IAAIzhB,GAAS,GAAI2hB,QAAOF,EAAS,IAC7BzhB,GAAOvD,KAAKY,GACdmkB,EAAUpJ,SAAS7lB,EAAQ4nB,amBzuGzCnnB,EAAAmmB,YAAA5mB,EAAA4nB,sBnBkvGEpmB,QmBxuGF4e,OAAA,wBAAA,sBAAA,sCAAApc,SAAA,SAAA,WnByuGI,GmBxuGJjE,GAAAiB,KAAAJ,UACAL,UAAA,UACAiC,kBAAA,UACAyB,YAAA,GACA7D,YAAA,QACAivB,YAAA,QACAnrB,UAAA,MACAtB,YAAA,uBACA0F,SAAA,GACAgnB,iBAAA,EACAC,WAAA,EACAC,QAAAA,KnByuGMH,UAAU,EmBtuGhBruB,UAAAuM,EAEA3K,MAAAnB,EACA6G,MAAAqE,EACA2iB,KAAAG,KAEAF,OAAAG,KAEAF,iBAAAG,KnBsuGI3uB,MmBpuGJuM,MAAAqiB,UAAAA,aAAA,cAAA,WAAA,WAAA,OAAA,aAAA,SAAA9iB,EAAAwB,EAAA2S,EAAAgF,EAAAxd,EAAAmc,EAAAnC,GnBgvGM,QAASoN,GAAa1qB,GAyIpB,QmBhqGR2qB,KAEA5sB,EAAA4sB,MAAAA,EAAA/oB,YAAAvF,QAAApB,GAEAsvB,QAAAA,UAAAlqB,EAAA4b,SAAA5f,QAAAwF,WAAAhH,EAAAohB,SACAW,EAAAA,OAAAA,GnBgqGU+N,EAAatqB,KAAK,cAAe,SmB5pG3CuqB,EAAAvqB,KAAA,WAAA,KACAsqB,EAAA7mB,QAEA/F,EAAAlD,QAAAH,QAAAA,QAAAiwB,EAAAC,IAAAC,SAAAA,WACAN,EAAAlqB,KAAA,cAAA,SnB6pGYuc,KA2BJ,QmBlpGR2N,KnBmpGUxsB,EAAMyD,MAAM3G,EAAQH,YAAc,QAASkwB,GmBjpGrD/vB,QAAAa,UAAAA,EAAA0gB,SAAA/f,QAAAwF,WAAAhH,EAAAuhB,SACAkO,EAAAA,OAAA7I,GnBopGcrkB,EAAY,UAAUwE,QAAU,ImBhpG9C0oB,EAAAQ,YAAAA,EAAAA,YAAAA,SAEAP,EAAAQ,KAAA,cAAA,UAEAlwB,EAAAmwB,WnBipGYV,EmB9oGZrvB,YAAAoR,EAAAsU,YAAA1W,SAAAA,EAAAhP,WnBipGQ,QAAS6vB,KACP,GAAIC,GAAoB,mHmB3oGlC,IAAA9nB,EAAAgoB,cAAAA,CACA,GAAAhoB,GAAAyjB,MAAAA,UAAAxnB,OAAA6M,KAAA4e,EAAA,GAAA7I,iBAAAiJ,GAAA,SAAA9vB,GACA,MAAA+vB,GAAAF,YAAAA,GAAAA,EAAAA,aAAAA,GAAAA,IAAAA,EAAAA,eAEA,OAAAI,InB+oGQ,QmB3oGRhrB,GAAA+C,GnB4oGU,GmB3oGVA,EAAA+nB,cAAA,CnB4oGY,GAAIA,GAAYF,GAChB,IAAIE,IAAcrwB,EAAW,MmBzoGzColB,KACA6K,EAAA9mB,MAAAsJ,UAAA+d,QAAApf,KAAAif,GnB4oGY,IAAI9qB,GmB1oGhB8qB,EAAAlf,QAAA7I,EAAAyjB,cACAkE,OAAAznB,GAAAA,EAAAA,IAqDA,QAAAioB,KACAvwB,EAAAqvB,WACAS,EAAA7jB,GAAAA,QAAAukB,GACAC,EAAAxkB,GAAAA,QAAAukB,GACAC,EAAAxkB,GAAAA,QAAAykB,IAIA,QAAA9O,KACA5hB,EAAAkE,WACA4rB,EAAAtjB,IAAA,QAAAujB,GACAD,EAAA7jB,IAAA,QAAA8jB,GnB8nGYU,EAAgBxkB,IAAI,QAASykB,IAGjC,QmB5nGR1wB,KACA8vB,EAAAA,WACAA,EAAA7jB,GAAAA,QAAA8jB,EAAAA,UnB6nGYD,EAAatjB,GAAG,UAAWujB,EAAOjnB,aAGtC,QmBznGR1C,KACApG,EAAAqvB,WACAU,EAAAxjB,IAAAA,QAAAA,EAAAA,UnB0nGYujB,EmBznGZ7jB,IAAA,UAAA8jB,EAAAjnB,anB4nGQ,QAAS0nB,GAAoBpqB,GmBvnGrCA,EAAAsqB,SAAAA,EAAAA,gBACAtpB,WAAAA,EAAAA,SnBynGY2oB,EAAOxjB,QmBrnGnBwjB,EAAAA,QnB0nGQ,QAASW,GAAoBtqB,GmBpnGrCA,EAAAuqB,iBnBunGQ,QmBrnGRA,KnBsnGcZ,EAAO9mB,UAA6B,OAAjB6mB,ImBnnGjCS,IACAT,KnBsnGca,IACFA,EAAWnM,WmBlnGvBmM,EAAAZ,MAMAD,IAEA5sB,EAAAA,SnB+mGY4sB,EAAeC,EAAOxnB,SAAW,MmBjgH7C,GAAAwnB,MACA/vB,EAAAiE,EAAAA,SAAAzC,QAAAQ,UAAApB,EAAAuE,GnB8tGY6b,EAAU+O,EAAOtL,SAAWxD,EAAYhgB,QAAQjB,GmB3tG5DA,EAAAuvB,EAAAA,OAAAvvB,EAAAkD,OAAAlD,EAAAkD,MAAAwhB,QAAApW,EAAAoW,MACAkM,GAAAA,mBACAhB,EAAAA,QAAAgB,QAAAA,EAAApB,mBAMAO,EAAA/vB,SAAAiF,EAAAjF,YAEA+vB,EAAAc,UAAA,QAMA7wB,EAAAA,SnBotGU4wB,EAAmBnY,SAASzY,EAAQuvB,OAAQ,ImBhtGtDrsB,EAAA0tB,EAAA,InBmtGQb,EmBjtGRA,IAAAlnB,EAAAA,IAAAA,EAAAA,SAAAA,EAAAA,QAAAA,KAAAA,OAAAA,GnBktGQknB,EAAOc,YAAc,aACrBpvB,GAAU,QAAS,WAAa,SAASI,GmBhtGjDivB,EAAAjvB,KAAAqB,EAAArB,GAAA+iB,EAAAC,YAAA7kB,EAAA6B,OnBmtGQqB,EmBjtGR6sB,MAAAznB,WnBktGUpF,EAAM6C,aAAa,WACjBgqB,EAAOlnB,UAGX3F,EmBjtGR6sB,MAAA7K,WnBktGUhiB,EAAM6C,aAAa,WACjBgqB,EAAOznB,UmB3sGnBpF,EAAA4sB,QAAAA,WACA5sB,EAAAytB,aAAAA,WACAF,EAAAA,YnBitGQV,EmB9sGR9mB,SAAA/F,EAAA+F,UAAA,CnB+sGQ,ImB9sGRiH,GACA6gB,EACA3N,EnB+sGYqN,EAAkBjvB,QAAQpB,QAAQ,eAAiBJ,EAAQ8lB,YAAc,eAiQ7E,OmB98GR9E,GAAA1R,KACA6V,SAAAA,QACA4K,IAAAA,MnB+sGU7f,KAAM;AmB5sGhB6f,OAAA3hB,MAGAgV,MAAApjB,QnB6sGQghB,EmB3sGR+O,KAAAznB,SAAAA,GnB4sGU6c,EAAcpkB,EACdgvB,EAAO3hB,SmBvsGjB2hB,EAAA7jB,KAAAA,WAGA8kB,EAAAA,MAGA9tB,EAAAutB,aAAA,WACAA,EAAAA,UnBysGQV,EAAO7jB,QAAU,WmBjsGzB6jB,IACAA,IAEAU,EAAA/nB,SACA+nB,EAAAjL,MnBmsGUtiB,EmBjsGVwF,YnBmsGQqnB,EAAOznB,KmBjsGf,WnBksGU,ImBjsGVynB,EAAA/vB,SnBisGU,CACA,GmBjsGV0I,GACA8c,CnB0tGU,IAxBIhkB,QmBjsGd8jB,UAAAtlB,EAAAiE,YnBksGYyE,EmBjsGZA,EAAAzE,UnBksGYuhB,EmBjsGZA,EAAAxlB,UAAAI,GAAAA,UAAAA,QAAAA,QAAAA,EAAAA,UAAAA,GAAAA,WAAAA,MnBmsGgBJ,EAAQiE,WmB9rGxB6rB,EAAAA,EAAAkB,EAAAA,WAIAL,EAAAA,EAAAZ,IAAAjqB,EAAA4e,GAAAA,UAAAA,QAAAA,QAAAA,EAAAA,GAAAA,WAAAA,OAIA1kB,EAAAqvB,KAEAS,EAAAA,EAAAxgB,SAGAmhB,GAAAnhB,InB0rGUqhB,EmBzrGVM,EAAArB,OAAAA,OnB0rGUE,EAAeC,EAAOxnB,SAAW4c,EAAYliB,KAAK0tB,EAAY,SAAS/K,EAAe1iB,MmBtrGhGysB,EAAAA,WnBwrGYG,EAAaxgB,KmBrrGzBpM,UAAAyD,EAAA,GAAA9G,InBwrGY4wB,EAAgBnhB,KmBrrG5B9N,UAAAoF,EAAApF,GAAA+jB,InBwrGYoK,MmBlrGZjK,EAAAA,MAAA1lB,EAAAH,YAAA,eAAAkwB,GAAAC,iBnBorGU,CmB/qGVF,QAAAA,UAAAjK,EAAA7lB,eAAAkxB,QAAAA,WAAAA,EAAAA,enBmrGYlxB,EAAQulB,aAAawK,GAEvBD,EmBhrGV1vB,KnBirGYslB,QAAS,UmB7qGrBG,SAAAhlB,EAAAA,WACAb,EAAAA,anB+qGY8vB,EmB9qGZW,SAAA5K,EAAA7lB,aAEA8vB,EAAAA,MAAAjK,EAAA7lB,EAAAa,OnB+qGYW,QAAQpB,QAAQmC,EAAY,gBAAiButB,EAAa,KAAKjK,SAASsL,EAAWnxB,EAAQsvB,OmB3qGvGrJ,EAAArhB,YnB8qGgB5E,EAAQqvB,UmBzqGxB7tB,EAAAkL,SAAA1M,EAAAoxB,mBnB4qGYtB,EmB1qGZjK,SAAA7lB,EAAAa,YnB4qGcb,EAAQqvB,UmBxqGtBU,EAAA9mB,MAAAA,EAAAA,EAAA,MAIAyZ,QAAAoN,QAAAA,OAAA,EACAnjB,EAAAA,MAAAA,EAAAjE,EAAA8c,EAAAU,GnByqGYD,EAASrhB,MAAMkrB,EAAcpnB,EAAQ8c,GAAOrlB,KAAK+lB,GmBnqG7DwJ,EAAAA,SAAAlqB,EAAAyD,UAAA,EAEA1C,EAAAvG,EnBqqGU,ImBpqGVyvB,GAAAA,EAAA5J,EnBqqGUlZ,GAAsB,WmBjqGhC0kB,EAAAA,UnBoqGU5B,EAAY5J,SAAS7lB,EAAQ8lB,YAAc,SmBhqGrD4J,EAAAxJ,KAAAA,cAAAA,QACAhjB,EAAAlD,WACAyvB,EAAA7oB,SAAA5G,EAAAohB,YAAA5f,SAAAwF,EAAAhH,WnBmqGUqxB,ImB/pGVvB,OnB+qGQC,EAAOlnB,KAAO,WmB1pGtBinB,EAAAA,WAEAC,EAAAA,MAAAc,EAAAA,YAAAd,eAAAc,GAAAb,mBnB6pGcxuB,QmBvpGdoF,UAAA5G,EAAAomB,eAAA5kB,QAAAwF,WAAAhH,EAAAomB,eACAH,EAAAA,aAAA6J,GAGAA,EAAAT,KAAAA,cAAA,QAEAM,EAAAA,aAAAA,kBAAAA,GAAAA,aAAAA,EAAAA,cACA1J,QAAAtE,QAAA8O,OAAAA,EnBspGYxK,EAAStE,MAAMmO,EAAczO,GmBnpGzC9a,EAAArD,MAAAA,GAAAA,KAAAA,GAIA6e,EAAAA,WnBopGY4N,ImBjpGZ1J,EAAA5E,MAAAA,IAEA0O,EAAAvuB,SAAAoF,EAAA5G,UAAAuhB,EnBmpGUhb,EmBlpGVgb,GnBmpGUgP,ImBjpGVxO,OA4CAgO,EAAAxjB,OAAA,WACAujB,EAAAA,SnB0oGYC,EAAOlnB,OmBloGnBknB,EAAA/mB,QnBuoGQ+mB,EAAOxjB,MAAQ,WACbujB,EmBpoGVzoB,GAAAA,SnBsoGQ0oB,EAAOjO,SAAW,SAAS1b,GmBloGnC,IAAA0C,EAAAA,OAAA1C,KAAAA,EAAAA,QAAAA,EAAAA,WACAlC,KAAAlE,EAAAA,OACA+vB,EAAA/nB,OnBqoGY5B,EAAIiB,oBAGR0oB,EmBjoGRjnB,WAAAwoB,SAAAxxB,GnBkoGU,GAAIE,EmBjoGdoG,WACAiB,IAAAjB,EAAAA,SAAAiB,aAAAA,EAAAjB,OAAAiB,SAAAA,UAAAA,EAAAA,OAAAA,SnBkoGcjB,EmBhoGdgB,iBAEA+oB,InBgoGgB/pB,EmBhoGhB+pB,SAAAA,CnBioGc,GAAImB,GmBhoGlBlB,EAAAhqB,EAAAmrB,SnBioGc,ImBhoGdpB,IAAA5jB,EAAAA,CnBioGoBnG,EAAIgB,gBAAgBhB,EAAIgB,iBACxBhB,EAAIiB,iBAAiBjB,EAAIiB,iBAC7B,IAAI8oB,GAAYF,GACZ7pB,GAAImrB,SACNpB,EAAUA,EAAUppB,OAAS,GAAGwF,QmB7nGlDvM,EAAAqvB,GAAAA,WnBwrGeU,EAET,QAASxpB,GAAWrD,GmBtmG1BsG,EAAAA,SAAAtG,EAAAwC,OAAAxC,EAAAwC,MAAAD,SAAAvC,EAAAiF,UAGAwB,QAAAA,GAAAqd,EAAA5mB,GACA8C,MAAA1B,SAAApB,SAAAA,GAAAgI,GAAA6e,iBAAAD,IAtbA,GAAAmK,GAAAA,QAAAA,QACAK,EAAA1kB,EAAAH,uBAAAG,EAAA+gB,WACA4D,EAAAjwB,QAAApB,QAAA0M,EAAA1E,SAAA0a,MnBouGU4M,EAAoBluB,QAAQpB,QAAQ,oBmBjuG9CuvB,EAAAE,EAEAe,EAAAb,KAGAH,EAAA1Q,KAEAiS,GACAK,GAAAtuB,WAEAuuB,GAAAzxB,WnB+gHM,OmBpmGNA,OnBsmGKwJ,UmBpmGLpJ,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GnBqmGI,OACEuJ,SAAU,MACVzG,OmBpmGN1B,EnBqmGMyB,KmBpmGN,SAAA2D,EAAA/E,EAAA7B,EAAA6B,GnBqmGQ,GAAI7B,ImBjmGZkD,MAAAlD,EACAA,QAAAkxB,EnBmmGU5oB,MAAM,EmB9lGhB9G,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAAI,kBAAAA,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,YAAAA,oBAAAA,KAAAA,cAAAA,cAAAA,cAAAA,aAAAA,OAAAA,UAAAA,SAAAA,GACAL,QAAAoF,UAAApB,EAAA3D,MAAAA,EAAAgI,GAAAA,EAAAK,MAIA1I,EAAAC,aACAzB,EAAA8J,YAAAjI,EAAA6vB,WnBgmGQ,ImB9lGR1xB,GAAAkD,enB+lGQ1B,SAAQC,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASI,GACpEL,QAAQoF,UAAUpB,EAAK3D,KAASgI,EAAiBK,KAAK1E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KAEvFL,QmB5lGRgE,SAAA,eAAA,SAAA,eAAA,UAAA,SAAA3D,GnB6lGU,GmB5lGV2D,GAAA8hB,KAAAzlB,EAAAkI,OAAAe,GAAAA,cAAAC,EAAAA,MAAAA,EACA7H,SAAArB,UAAAgjB,EAAAA,MnB6lGY7kB,EAAQ6B,GAAOqB,EAAM4c,MAAMta,EAAKsE,OmBvlG5CtI,QAAAgE,SAAA,QAAA,WAAA,SAAA3D,GACAqB,EAAA0H,IACApF,EAAAhE,SAAAkC,EAAAA,SAAAoH,EAAAC,GACAvJ,EAAAA,GAAAQ,EAAAkB,YAAA4H,OnB8lGYtF,EmB1lGZmsB,SnB2lGUzuB,EAAM0H,OAAOpF,EAAKmsB,QAAS,SAAS7mB,EAAUC,GmBvlGxD6mB,QAAA7B,SAAA/vB,GAEAA,QAAAkE,OAAAA,EAAA4G,GAEA1K,EAAAquB,QAAAliB,InBylGa,EmBjlGbrJ,IAAAA,GAAA6sB,EAAA/vB,EACAA,GAAA4xB,WACA5xB,EAAAA,YAAA,WACA4xB,EAAA,GAAArlB,UnBslGQnM,EAAQoM,GAAGhH,EAAKzB,SAAW,QAAS6tB,EAAM1M,QAC1ChiB,EAAM8I,IAAI,WAAY,WoBtnH9BvL,GAAAmxB,EAAA1lB,UAIAtL,EAAAI,KACAH,EAAA,YpBynHEW,QoBpnHFuC,OAAA,2BAAA,2BAAAC,SAAA,YAAA,WpBqnHI,GoBpnHJC,GAAAjD,KAAAJ,UACAsD,UAAA,UACAtB,YAAA,WACAuB,YAAA,WpBqnHMic,UAAW,coBlnHjBpf,YAAA,6BAEA+C,QAAAwoB,QACAtoB,WAAA4tB,EAEA3tB,UAAA4tB,EpBknHMlvB,MoBhnHNmvB,EpBinHM5tB,MoB9mHNnE,EpBgnHIgB,MoB5mHJ+wB,MAAAA,UAAA3xB,aAAAJ,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GpB+mHM,QoB3mHNI,GAAAA,EAAA+E,GpBktHQ,QAAS6sB,GAAY5rB,GoBnkH7BoD,MAAAA,GAAAsU,SAAA1d,EAAA,GAAAN,EAEAsG,EAAA0X,SAAA1d,EAAA,IAAA2xB,EAAAlpB,OpB29GQ,GoB3mHRzI,MACAA,EAAAoF,QAAAxD,UAAApB,EAAAuE,EpB4mHQ4sB,GoB3mHRvsB,OAAAxF,EAAAkD,OAAAlD,EAAAkD,MAAAwhB,QAAApW,EAAAoW,OpB4mHQqN,EAAYnsB,EAASxF,EAASJ,EoBvmHtC+xB,IAAAA,GAAAjpB,EAAAJ,QACAtI,IAAA8J,EAAAlC,IAAA5B,WAAA4B,EAAAhI,GAAAA,QAAAkE,gBpBymHU9D,EoBxmHV2xB,KAAAlpB,gBAAAzC,QpBymHUhG,EoBxmHVoF,KAAA,cAAA,YpBymHUpF,EAAQoF,KAAK,gBAAiB,SoBvmHxCpF,EAAAoF,KAAA,OAAAY,WpB0mHQ2rB,EoBxmHR1qB,WAAAA,SAAAA,GAGA,GAAA4qB,MAAAA,KAAAzwB,EAAAA,WAAAuwB,EAAAxpB,UAAA0e,KAAAA,KAAAA,EAAAA,SAEA,WADA8K,GAAAhrB,KAAAA,KAAAmD,KAAA9D,EAAA4B,SpBymHU,IoBtmHV,UAAA6pB,KAAAA,EAAAA,SpBsmHU,CACAzrB,EAAIgB,iBoBnmHdhB,EAAAA,iBAIA6rB,IAAAA,GAAA5sB,QAAAkH,QAAAA,EAAAA,SAAAA,GAAAA,iBAAAA,sBpBkmHU,IAAK0lB,EAAMlrB,OAAX,CoB9lHVgrB,GAAAA,EAEAvwB,SAAA0wB,QAAAD,EAAA,SAAAvP,EAAAvR,GACAzI,GAAAtI,EAAA+xB,KAAAA,EAAAA,YAAAA,EAAAA,KAEAzpB,KAAAA,EAAAA,SAAAA,EAAAA,EAAAA,IAAAA,KAAAA,EAAAA,SAAAA,EAAAA,EAAAA,OAAAA,EAAAA,IAAAA,KAAAA,EAAAA,SAAAA,IAAAA,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,QAAAA,YAAAA,KAAAA,EAAAA,GpB+lHUupB,EoB9lHVvpB,GAAAA,GAAAA,GAAA5I,WpBgmHQiyB,EoB9lHRK,YAAA,SAAAhsB,GpBimHU,IAFA,GAAI8rB,IoB9lHd,EACAA,EAAA1wB,QAAApB,QAAAgG,EAAA+rB,epB+lHiBzpB,IAAW5I,GAAa4I,EAAO3B,QAAU2B,EAAO,KAAOoE,EAAQ1E,SAAS0a,MAAM,CoB3lH/F,GpB4lHYpa,EAASA,EAAOA,SoB5lH5BwpB,IAAApyB,GAAA4I,EAAA,KAAAqpB,EAAAxpB,SAAA,GAAA,CACAwpB,GAAAlpB,CpB8lHc,OoB3lHdzC,GAAAiB,EAMAiB,GAKAG,EAAAA,iBAEArI,EAAAA,mBANA2xB,EAAAzpB,OpBgmHQ,IAAIA,GoBvlHZypB,EAAAxpB,IpBwlHQwpB,GoBvlHRA,KAAAxpB,WpBwlHUD,IACAG,EoBvlHVzI,WpBmmHY,GAXAI,EoBvlHZ2xB,KAAAxpB,gBAAA,QACAwpB,EAAAxpB,WpBwlHcwpB,EAAUxpB,SAAS/C,KAAK,cAAe,SoBrlHrD+mB,EAAAhkB,SAAAypB,KAAAA,OAAAA,QAEAD,EAAAA,SAAAxpB,KAAA,WAAA,OAEA0pB,EAAAzsB,UAAAusB,EAAAxpB,WAEA/G,EAAApB,SAAA2xB,GAAAA,UAAAxpB,EAAA0e,YAEAgL,EAAAzwB,SAAApB,GAAAA,WAAAmI,EAAA6pB,cpBqlHY7F,EoBnlHZ0F,GAAAA,QAAAlrB,GACAkrB,EAAA1lB,SAAAA,CpBolHc,GAAI0lB,GAAQzwB,QAAQpB,QAAQ2xB,EAAUxpB,SAAS,GAAG0e,iBAAiB,oBACnEgL,GAAMzsB,KAAK,OAAQ,gBoBllHjChE,QAAApB,QAAA2xB,EAAAxpB,SAAA,GAAA0e,iBAAA,eAAAzhB,KAAA,OAAA,aACA6sB,EAAAA,QAAAC,QAAAP,EAAAM,SAAAxM,GAAAA,iBAAA,uBpBolHcoM,EAAMzsB,KAAK,OAAQ,YoBjlHjCqD,EAAAkpB,QAAAlpB,EAAAA,UACAkpB,EAAAlpB,GAAA0D,UAIAwlB,GAAAA,GAEA/xB,EAAAkE,SAAAA,aAAAqE,EAAAsd,SAAA,QpBklHQ,IoBhlHRkM,GAAAA,EAAAxpB,IpBilHQwpB,GAAUlpB,KAAO,SAASgoB,GoB9kHlCtE,EAAAtjB,WACA7I,EAAAiyB,KAAAC,gBAAA,SACA7pB,EAAAF,SAAA/C,KAAA,cAAA,QACAqD,EAAAA,UAAAA,EAAAA,WACAkpB,EAAAlB,SAAA5kB,IAAA,UAAA8lB,EAAAjpB,YpBglHYipB,EoB/kHZtpB,SAAAwD,IAAA,WAAA8lB,EAAAK,cpBilHU7F,EAAOtgB,IoB/kHjB7L,QAAAmM,GpBglHc8lB,EAASC,SAAS,aAAaD,EAASzL,YAAY,QACxDne,EoB/kHV,WpBglHYI,IoB9kHZgoB,GpBglHcpoB,EAAS,WoB7kHvByD,GAAA6lB,EAAA7lB,IACAA,EAAAA,GAAAK,SAEAL,GAAAA,IAKA,MpB6kHQ,IoB3kHRA,GAAA4R,EAAA1d,OAiBA8C,OpB2jHQ6uB,GAAU7lB,QAAU,WoBzkH5BqgB,EAAAwF,IAAAA,QAAAA,GpB2kHU7lB,KoB7jHV6lB,EpBs9GM,GoB5mHNxF,GAAA8F,QAAAjyB,QAAAsI,EAAAA,SAAAA,MAEAmpB,EAAAzxB,QAAAmS,UAAAsf,iBAAA7nB,QAAAA,UAAAuoB,uBAAAC,QAAAjgB,UAAAkgB,oBAAAD,QAAAjgB,UAAAmgB,mBAAAF,QAAAjgB,UAAAogB,gBpBytHM,OoBhkHNC,OpBkkHKppB,UoBhkHL,cAAAqpB,UAAAA,OAAAC,YAAA,SAAAhmB,EAAA8X,EAAAmN,GpBikHI,OACEpoB,SAAU,MACVzG,OoBhkHN,EpBikHMjC,QoBhkHN2xB,SAAAryB,EAAAsyB,GpBikHQ,IoBhkHRD,EAAA7yB,WAAAA,CpBkkHU,IADA,GoBhkHV8yB,GAAAE,EAAAC,GAAAA,YpBikHiBH,GAAwC,IAAzBA,EAAYC,UAChCD,EAAcA,EAAYA,WoB3jHtC7yB,IAAAA,EAAAA,UAAAA,MAAAA,KAAAA,QAAAA,kBAAAA,IACAkD,EAAAA,SAAAA,EAAAA,UpB8jHY0vB,EAAO7yB,YAAcD,EoB5jHjC0B,EAAAC,WAAAuxB,YAAAH,IpBgkHQ,MoB3jHRhpB,UAAA3G,EAAA9C,EAAAoF,GACAhE,GAAAA,IACA0B,MAAA1B,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAAI,YAAAA,QAAAA,UAAAA,WAAAA,OAAAA,YAAAA,KAAAA,aAAAA,SAAAA,GACAiI,QAAAlD,UAAA/E,EAAAkI,MAAAC,EAAAA,GAAAnI,EAAAoI,KpB2jHU,IoBzjHVjK,GAAAkD,epB0jHU1B,SAAQC,SAAU,OAAQ,aAAe,SAASI,GAC5CL,QAAQoF,UAAUpB,EAAK3D,KAASgI,EAAiBK,KAAK1E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KAEvFL,QoBvjHVoJ,SAAApF,eAAA,SAAAsF,eAAAC,UAAAA,SAAAA,GpBwjHY,GoBvjHZ7H,GAAAurB,KAAA3jB,EAAAA,OAAAA,GAAAA,cAAAA,EAAAA,MAAAA,EACAtJ,SAAAoF,UAAApB,EAAAsE,MpBwjHc9J,EAAQ6B,GAAOqB,EAAM4c,MAAMta,EAAKsE,OoBhjH9C5G,EAAA0H,YpBojHY1H,EoBnjHZ0H,OAAAqoB,EAAAA,WAAArsB,SAAAkE,EAAAC,GACA7H,EAAA1B,QAAAG,IACA,EpBqjHU,IAAIsxB,GoBnjHdlB,EAAA3xB,EAAAJ,EpBojHcwF,GoBnjHdytB,QpBojHY/vB,EAAM0H,OAAOpF,EAAKwa,OAAQ,SAASlV,EAAUC,GACtCkoB,GAAazxB,QAAQoF,UAAUkE,KAChCtJ,QAAQG,SAASmJ,KAAWA,IAAaA,EAAS4C,MAAM,yBoBhjH1E1B,KAAA,EACAinB,EAAAA,OAEAA,EAAApqB,UpBqjHU3F,EAAM8I,IAAI,WAAY,WAChBinB,GAAUA,EAAS/mB,UqBhzHnCzL,EAAA,KAGAG,EAAAI,arBqzHEQ,QqB7yHFyC,OAAA,6BAAA,oCAAA,uCAAA,sCAAA,oCAAA,2BAAAD,SAAA,cAAA,WrB8yHI,GqB7yHJE,GAAAlD,KAAAJ,UACAgC,UAAA,UACAuB,YAAA,aAEAiW,UAAA,cACA8Y,YAAA,iCACAC,QAAAA,QACA5a,WAAA,EACA6a,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAC,SAAAA,OACAC,WAAAA,YACAC,SAAAA,KACAnZ,gBAAA,KACAoZ,UAAA7a,KACA8a,YAAA9a,MACA+a,WAAA,OACAC,iBAAA,YACAC,gBAAA,OACAC,cAAAA,EACAC,WAAA,EACAC,UAAApb,EAAAA,GACAqb,UAAArb,EAAAA,GACAsb,UAAA,EAEAC,QAAAA,EAGAC,UAAAA,ErB0yHMN,mBAAoB,GqBvyH1BhzB,UAAAuM,EAEA2mB,UAAAjZ,EACAkZ,SAAAlW,mCACAmW,UAAAxzB,oCAEAyzB,uBAAAE,WrBuyHMD,aqBnyHNE,ErBqyHIxzB,MqBnyHJuM,MAAAvN,UAAAw0B,YAAAtV,aAAAA,OAAAA,iBAAAA,kBAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GrBuyHM,QqB7xHNuV,GAAAC,EAAAF,EAAAA,GrBmzHQ,QqBvwHRtxB,GAAAkD,EAAAxC,GrBwwHU,KqBvwHV4wB,yBAAAtqB,KAAA9D,EAAA4B,UAAA,yBAAAkC,KAAA9D,EAAA4B,UAAA5B,EAAAmrB,UAAA,yBAAArnB,KAAA9D,EAAA4B,UAAA5B,EAAAuuB,QrBwwHY,OqBvwHZ30B,CrB2wHU,IAFAoG,EqBvwHVgB,iBrBwwHUhB,EAAIiB,kBqBtwHdutB,KrBuwHcxuB,EqBvwHdouB,QAAAI,CrBwwHY,GAAK1xB,EAAM2xB,MAILjxB,IAAU9D,GAAa8D,EqBtwHzCV,EAAAwL,OAAA,WrBwwHkB8lB,EAAYI,QAAQ1xB,EAAM2xB,MAAQ,KqB7vHpD1uB,EAAAyuB,QAAAvc,EAAA8E,MAAAA,OrByvHc,IADAqX,EqBvwHd3rB,MAAA,GACA2rB,EAAAA,YAAAtxB,OAAA2xB,CrBixHY,QAAO,EqB9vHnBL,OAAAA,EAgPA,QAAAzY,GAAA3N,GAIAomB,EAAAA,SAAApmB,EAAAoP,YAAAkF,EAAArK,MACAqK,EAAAoS,QAAA7Z,EAAAjb,SrByqHQ,QqBvqHRI,KrBwqHUA,EqBvqHV,GAAAmM,QA/TAioB,GAAAA,GAAAO,EAAAN,EAAAO,QAAAA,UAAAA,EAAAA,IACA5Z,EAAAqZ,EAAAA,MAOAvxB,EAAAlD,EAAA6zB,SAEA3wB,EAAA+xB,EAAAj1B,MACAkD,GAAAgyB,YAAAl1B,EAAAo0B,WAAAA,EAAAA,SAEAlxB,EAAAiyB,KAAAA,gBAAAlB,SAAAA,KAAAA,gBAAAA,OACA/wB,IAAAA,GAAAlD,EAAAk0B,EAKAhxB,GAAAlD,OAAAiF,EAAA+vB,KACA9xB,IAAAA,GAAAkyB,EAAAnwB,QACA/B,GAAAgB,MAAAA,EAAAlE,UACAkD,EAAAoxB,UAAAA,EAAAt0B,SAGAkD,EAAAmyB,WAAAr1B,EAAAs1B,UACApyB,EAAAqyB,UAAAA,EAAAv1B,SAGAkD,EAAAsyB,UAAAhB,EAAAO,SAIA7xB,EAAA+B,GAAAmB,OAAAqvB,EAAAA,IAAA7xB,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,ErB2wHQV,EqB1wHRkyB,WAAAlrB,OAAAlK,EAAAiF,IAAA+C,EAAAA,KACAlI,EAAAE,EAAAiF,GAAAiF,YAAAlC,ErB0wHQ9E,EqBxwHRgB,SAAAlE,EAAAkE,SrBywHQhB,EAAMoxB,YAAct0B,EAAQs0B,YAC5BpxB,EqBxwHRkE,WAAAA,EAAAA,UrBywHQlE,EqBxwHRmE,eAAAA,EAAAA,arBywHQ,IqBvwHRmuB,GAAAxtB,EAAA+sB,OAAA7xB,EAAA2xB,MA+BA3xB,GAAAwyB,QAAAA,SAAArd,EAAA8E,GACAqX,GrBiwHUA,EAAYtuB,OAAOmS,IAErBnV,EqBhwHRlD,YAAAua,SAAA7Y,GrBiwHU8yB,EqBhwHVA,YAAA9yB,IrBkwHQwB,EAAMwyB,YqBhwHd,WrBiwHUlB,EqBhwHVA,SAAAtxB,EAAAuQ,MAAA,GAAA+gB,EAAAO,OAAAhuB,SrBkwHQ7D,EAAMyyB,UAAY,WqB/vH1BC,EAAAA,WACApB,EAAAja,QAAAA,GACAia,EAAAI,OAAAA,GAAAnhB,QrBkwHY+gB,EqBhwHZtuB,OAAA,GAAAuN,OAAA,IrBmwHQvQ,EAAM0yB,OAAS,WqB/vHvBC,EAAAA,WACA3yB,EAAA4yB,QAAAC,GACAvB,EAAAwB,OAAAA,OrBkwHYxB,EqBhwHZA,OAAAhuB,MAAAuvB,IrBmwHQ7yB,EAAM2yB,SAAW,SAASE,GACxB7yB,EAAM4yB,cAAgBC,EAAQ9wB,GAC1B8wB,EAAQC,SAAW9yB,EAAMsI,WqB/vHvC1C,EAAAA,MACAmtB,EAAAA,OAAAR,EAAAA,MAIAD,EAAAU,QAAAA,EAAA9vB,QrBkwHQlD,EqB7vHRizB,WAAA,SAAA/vB,EAAA+M,GACA,GAAAzK,GAAAtI,EAAA+xB,GAAAA,EACA8D,IACAvtB,EAAAA,UAAAA,IrBgwHQxF,EqB7vHRkvB,YAAA,SAAAhsB,GrBgwHU,IAFA,GAAI+vB,IqB7vHd,EACAA,EAAAA,QAAA/1B,QAAAgG,EAAA+rB,erB8vHiBzpB,IAAW5I,GAAa4I,EAAO3B,QAAU2B,EAAO,KAAOoE,EAAQ1E,SAAS0a,MAAM,CqBvvH/F,GrBwvHYpa,EAASA,EAAOA,SqBxvH5BytB,IAAA/vB,GAAA+rB,EAAA,KAEAqC,EAAA2B,SAAA,GAAA,CACA3B,GAAA3rB,CrBwvHc,OqBrvHdzC,GAAAgB,GAMAotB,GAAAhuB,EAAA2rB,iBAAA9Z,GAIAmd,EAAAA,kBrBovHYpvB,EAAIgB,kBqBtvHhBotB,EAAA3X,SAQA2X,EAAA4B,OAAAA,SAAAA,GACAp2B,QAAAq2B,OAAAA,KAAAC,MAAAA,EAAAA,aACA9B,EAAApX,MAAAla,EACA1B,EAAAC,OAAAA,KAAAyB,EAAAiO,IrBmvHUqjB,EAAY1X,QAAO,IAErB0X,EqB/uHRhzB,oBAAA,SAAA80B,GrBgvHUt2B,EqB/uHVwB,mBAAAN,CrBgvHU,KqB/uHVA,GAAAA,GAAAA,EAAAob,EAAAA,EAAAA,KAAAvV,OAAAsR,EAAAA,EAAAA,IrBgvHY7W,QAAQC,QAAQyB,EAAMma,KAAKlM,GAAIqjB,EAAY+B,iBAG/C/B,EAAYtuB,OAAS,SAASmS,EAAM2E,GqB9uH5Cxb,QAAAqzB,OAAAA,KACA3zB,QAAA4F,OAAAA,EAAAtF,aAAA6W,MAAAA,EAAAA,WAAAA,cACAnX,EAAAwF,WAAAA,GAAAA,MAAAA,IrBkvHYxF,EqB/uHZszB,WAAA,MrBivHetxB,EAAM2xB,OAAS7X,GAClB9b,EqB/uHZ4F,cAAAtF,QAAAyb,KAAA5E,IACA7W,EAAAQ,UACAkQ,EAAAmG,YAAAhF,GACAD,EAAAiF,WACAA,EAAAM,MAAAA,OrBmvHYnX,QAAQQ,OAAOoZ,GACblJ,KAAMmG,EAAKhF,cqBxuHzBmhB,MAAAI,EAAAA,WACA1xB,KAAA2xB,EAAA2B,YAGAhC,EAAA1X,QAAAA,EAAAA,MAAAA,GrByuHY0X,EAAY1X,WAGhB0X,EqBjuHRiC,QAAA,SAAAC,GACAlB,EAAAA,MAAAtkB,ErBkuHUskB,EAAUhB,EAAYO,OAAO7xB,EAAM2xB,OqB/tH7CL,EAAAmC,UrBkuHQnC,EqBhuHR/yB,OAAAyB,SAAAuzB,GACAG,KAAAA,GAAAzjB,EAAAA,QACAsjB,KAAAjrB,GAAAtI,EAAAsI,QrBiuHUgqB,EAAQqB,MAAM3lB,KAAKskB,IAErBhB,EAAYmC,gBAAkB,WqB9tHtCnC,IAAAA,GAAAA,GAAAhX,EAAAA,EAAAA,EAAAH,KAAAtW,OAAAsR,EAAAA,EAAAA,IACA7W,QAAAg0B,QAAAsB,EAAAA,KAAAze,GAAAA,SAAAA,GrBguHcue,EAAezjB,GqB7tH7BqhB,EAAA+B,WAAAA,EAAA/qB,SAAAkX,MrBkuHQ8R,EqB7tHRuC,YAAAA,SAAAA,GAIA,MAAAlZ,GAAAA,WAAApK,IrB4tHQ+gB,EqB1tHR3W,eAAAmZ,SAAAA,GrB2tHUtU,EqB1tHVtP,SAAAyK,EAAAoZ,WAAAA,EAAAA,OrB4tHQzC,EAAY0C,YAAc,SAASx1B,GqBztH3C8yB,GAAAA,GAAA1X,EAAAA,MrB2tHce,EAAa,GAAIpK,MAAKA,KAAK0jB,IAAI/b,EAASlJ,MAAQ6kB,EAAM7kB,MAAQ,GAAKxQ,EAAO0Z,EAAShI,OAAS2jB,EAAM3jB,OAAS,GAAK1R,EAAO,GqBxtHrI8yB,SAAAA,OAAArtB,GAEAf,KAAAgB,EAAAA,iBACAhB,MAAAiB,EAAAA,cAEAgR,KAAA4F,EAAAmZ,erBytHU5C,EqBvtHVzW,UrBytHQyW,EAAYrtB,aAAe,SAASf,GAGlC,GAFAA,EqBvtHV2X,iBrBwtHU3X,EAAIiB,kBACA4W,EAAS,CqB9sHvBuW,GAAAA,GAAA1rB,QAAA1I,QAAAgG,EAAAA,OACAA,YAAA6vB,EAAAA,GAAAA,SAAAR,gBAEAQ,EAAAA,EAAAvtB,UAGA1D,EAAAA,eAAAmD,WAiCAqsB,EAAAoC,WAAAlU,SAAAA,GACAA,GAAAlX,GAAAgpB,EAAA9R,EACAoS,KrBgrHYU,EAAQU,UAAU9vB,GqB7qH9BpB,EAAA6J,WrBwrHQ,IqBvqHRzO,GAAAuP,EAAAvB,IrBwqHQomB,GqBvqHRhvB,KAAA,WrBwqHU,MqBvqHVpF,IAAAJ,EAAA6O,WrBwqHYzO,EAAQuP,KAAK,OAAQ,YqBtqHjCoM,GAAAA,IAAAA,qBAAAA,eAKA+C,IAKA0V,EAAAtoB,KAAAA,OAAA,QACA9L,EAAA6a,KAAAA,WAAAb,QACAha,EAAA6L,GAAAA,QAAA4C,QAEAiQ,MAMA,IAAAC,GAAAyV,EAAAlsB,OAQAksB,GAAAlsB,QAAA,WAEA2S,GAAA7a,EAAAoF,WAGAuZ,EAAAA,IAAAA,QAAAA,GrBopHUD,IAEF,IqB5oHR1e,GAAAoF,EAAA8C,IrB6oHQksB,GqB1oHRA,KAAAjsB,YAGA0V,GAAA/Z,EAAAsB,KAAA,aAAApF,EAAAoF,KAAA,crByoHUuZ,IACAtW,EqBloHVrI,WrBmoHiBo0B,EAAYvrB,WACjBurB,EAAYjsB,SAAS/C,KAAK,cAAe,SACzCpF,EqBloHZoF,KAAA,gBAAA,QrBmoHYgvB,EAAYjsB,SAASiE,GAAGyR,EAAU,aAAe,YAAauW,EAAYrtB,cqB7nHtF6X,EAAAwV,WAOAA,EAAA3rB,aAEA2rB,EAAAA,GAAAvrB,UAAAurB,EAAA1rB,eAOA0rB,GAAAA,IrBqnHQ,IqBjnHRp0B,GAAA6L,EAAApD,IA0BA,OrBwlHQ2rB,GqBjnHRA,KAAAjsB,SAAA0D,GrBknHeuoB,EAAYvrB,WqBhnH3BurB,EAAAF,SAAAA,KAAA,cAAA,QrBknHUl0B,EqBhnHVA,KAAAmM,gBAAAA,SrBinHUioB,EAAYjsB,SAAS0D,IAAIgS,EAAU,aAAe,YAAauW,EAAYrtB,cqB9mHrF6X,EAAAC,WrBgnHY7e,EAAQ6L,IAAI,UAAWuoB,EAAY1rB,YqB7mH/C0rB,EAAAA,SAAAA,IAAAA,UAAAA,EAAAA,aAGAD,EAAAA,aACAn0B,EAAAm0B,GAAAA,QAMA/qB,EAAAyV,KAKAuV,ErBo2GM,GqBnyHNvZ,GAAAuZ,6BAAA1uB,KAAAA,EAAAA,UAAAA,WACAmY,EAAA4V,eAAA7zB,GAAA6zB,UAAA7zB,CAicAiD,OA9bA7C,GAAAoF,OAAA5E,EAAA6Y,KAAA8C,EAAAjD,oBA6bA1P,EAAAhJ,SAAAA,EACA2zB,MrBwmHK/qB,UqBpmHLtG,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GrBqmHI,GAAI+X,GAAW,6BAA6B/Q,KAAK4C,EAAQqS,UAAUC,UACnE,QACEzV,SqBpmHNnI,MrBqmHMoI,QAAS,UACT3G,KqBlmHN4G,SAAAA,EAAAzJ,EAAAoF,EAAAtE,GrB6pHQ,QqB3kHRm2B,GAAAC,GrB4kHU,MqB1kHVC,IAAAC,EAAAzwB,OACA0wB,EADA,KrBslHQ,QqBzkHRv2B,GAAAme,GAEA,GAAAC,QAAApe,OAAAA,GAAA,CrBykHU,GAAIse,GAAa7M,MAAM8kB,EAAWvY,SAASyU,UAAY+D,EAAWpf,WAAamf,EAAWvY,SAASyU,QqBrkH7GzyB,EAAAwe,MAAAC,EAAAT,SAAAU,UAAAA,EAAAA,WAAAA,EAAAA,SAAAA,QAEAvH,EAAAA,GAAAA,CAEAnX,GAAA0e,aAAA,OAAAN,GrBqkHUpe,EqBpkHVA,aAAAue,MAAAD,GrBqkHUte,EqBjkHVue,aAAA,MAAAJ,GrBkkHcC,IAASpe,EAAWob,WAAaob,IAmDvC,QAASC,KACP,OAAQz2B,EAAWob,YAAc3J,MAAMzR,EAAWob,WAAWhE,WAAa,GAAK4B,EAAWhZ,EAAWob,WAAYtc,EAAQmzB,YqBruHnI3xB,GAAAA,IACA0B,MAAA1B,ErBomHQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,YAAa,WAAY,aAAc,WAAY,kBAAmB,YAAa,eAAgB,YAAa,YAAa,YAAa,OAAQ,YAAa,UAAW,WAAY,YAAa,qBAAsB,KAAM,cAAe,cAAe,WAAY,WAAY,cAAe,YAAa,gBAAiB,aAAc,YAAa,aAAe,SAASI,GAC7fL,QAAQoF,UAAUpB,EAAK3D,MAAO7B,EAAQ6B,GAAO2D,EAAK3D,KAExD,IqBhmHRgI,GAAAhI,erBimHQL,SqBhmHRA,SAAAoF,OAAApB,YAAA,YAAA,YAAA,WAAA,WAAA,eAAA,SAAA3D,GACA7B,QAAA6B,UAAAqB,EAAA4c,KAAAhW,EAAAA,KAAAA,EAAAA,MrBimHY9J,EAAQ6B,IAAO,KqB3lH3B7B,QAAAA,SAAAy3B,eAAAvY,SAAAA,eAAAA,UAAAA,SAAAA,GAEA,GAAAjE,GAAAA,KAAAjb,EAAAoa,OAAAA,GAAApa,cAAAmzB,EAAAA,MAAA,EAEA1Z,SAAAzZ,UAAAyZ,EAAAA,MAEAS,EAAAA,GAAAhX,EAAA4c,MAAAzH,EAAAtF,MAIA,IAAAkN,GAAAnM,EAAAA,EAAAA,EAAAA,ErB2lHQ9T,GqB1lHRA,EAAAmzB,SACA1Z,GAAAA,EAAAA,YAAAA,EAAAA,WAAAA,arB2lHQ,IqB1lHRzG,GAAAhT,EAAA0zB,KrB2lHYxZ,EAAa,SAAS7B,EAAMtF,GqBvlHxC,MAAAiN,GAAA9F,WAAA7B,EAAAtF,EAAA0G,IAEAwG,EAAAwX,GrBylHU1kB,OqBxlHVvR,EAAAG,WrBylHU8X,KqBxlHV3O,ErBylHUkI,OqBxlHVykB,EAAAnvB,crB0lHY9C,GqBxlHZiyB,QrBylHUv0B,EAAM0H,OAAOpF,EAAKwa,OAAQ,SAASlV,EAAUC,GACtC0sB,GAAej2B,QAAQoF,UAAUkE,KAClCtJ,QAAQG,SAASmJ,KAAWA,IAAaA,EAAS4C,MAAM,2BqBrlHxEjM,KAAA,EAEAD,EAAAoF,OAGA6wB,EAAAvY,UrBwlHQ1d,QAAQC,SAAU,UAAW,WAAa,SAASI,GAC7CL,QAAQoF,UAAUpB,EAAK3D,KqBhlHrCL,EAAAA,SAAAoF,EAAApB,SAAA2tB,GACA3tB,EAAA0Z,SAAArd,GAAAoe,EAAAnV,oBAAAA,EAAAA,GACA2sB,MAAAvY,EAAAiU,SAAAroB,KAAAA,EAAAA,QAAAA,GrBklHc8sB,EAA0B12B,EAAWob,gBqB3kHnD9a,QAAAoF,UAAApB,EAAA2tB,aAIA3tB,EAAA8hB,SAAAgQ,aAAAC,SAAAA,GACAE,EAAAF,SAAAA,WAAAzsB,IAIA5H,EAAA1B,OAAAoF,EAAAA,QAAAixB,SAAAA,EAAA9sB,GACA7H,EAAA0H,OAAAitB,EAAAA,crB4kHW,GAKCr2B,QAAQoF,UAAUpB,EAAKqyB,gBACzB30B,EAAM0H,OAAOpF,EAAKqyB,cAAe,SAASL,EAAgBH,GqBxkHpEG,EAAAI,EAAAF,GACAL,EAAAxa,EAAAwa,GACA7X,GACAH,EAAAA,oBAAAH,KrBulHQhe,EqBjkHRw2B,SAAAA,QAAAA,SAAAA,GrBkkHU,GqBjkHVx2B,ErBkkHU,KqB/jHV0e,EAEAgY,MrB8jHY12B,GAAWue,aAAa,QAAQ,GqB9jH5CmY,IrBikHU,IqB9jHVvf,GAAA4H,EAAA9G,MAAAA,EAAAue,EAAA13B,WrB+jHU,QqB9jHV03B,GAAAxd,MAAA7B,EAAA+a,erB+jHYlyB,GAAWue,aAAa,QAAQ,IAGlCmY,EqB9jHVtf,GACA4a,WrB8jHclzB,EqB9jHdA,UACAqY,EAAAA,EAAAC,qBAAAof,EAAA13B,EAAAuY,UAAA,GACA2B,EAAAgZ,EAAAA,EAAAE,iBAAApzB,EAAAmzB,crBgkHU9a,EAAO4H,EAAW9G,qBAAqBjY,EAAWob,WAAYtc,EAAQuY,UAAU,GqB7jH1FF,WAAArY,EAAAyT,SrB+jHmB4E,EAAKC,UqB3jHxB,SAAAjN,EAAAA,SAEAgN,EAAAA,UAAAA,IACA9M,QAAA/J,EAAA6K,SACA8T,EAAAA,cAEA9H,GAAA9M,MAAAA,OrB6jHQrK,EqB3jHR+e,YAAA/G,KAAA3N,SAAAA,GrB4jHU,GAAI8M,EAiBJ,OAfEA,GqB5jHZA,QAAAhM,YAAAd,IAAA,OAAAA,EACA4U,IACA3e,QAAA+J,OAAAA,GrB4jHmBA,EqBpjHnB,WAAAvL,EAAAuY,SACArX,EAAAob,MAAAjE,EAAAA,KAAAA,EAAAA,iBACA,SAAArY,EAAAkzB,SACAhyB,GAAAob,MAAA2D,IAAA3D,GAEAqb,GAAAA,MAAAA,GAIA,QAAAz2B,EAAAwF,SAEAtG,EAAAu3B,WAAAA,EAGAz2B,EAAAy2B,WAAAA,EAAAA,qBAAAA,EAAAA,EAAAA,UrBmjHiBA,MAETz2B,EqB/iHRu2B,QAAAA,WACAz3B,EAAAA,IAAA23B,MASAnuB,EAAAA,IAAA,WAAA,WACAiuB,GAAAA,EAAAvrB,UACAtC,EAAA,KACA3G,EAAAyG,YrB+iHOF,UqB1iHP/H,uBAAA,cAAA,cAAA,iBAAA,SAAA+yB,EAAA1gB,EAAAyI,GrB2iHI,OACE3S,QAAS,UACT3G,KqBziHNjD,SAAAgC,EAAAwyB,EAAAA,EAAA5zB,GrBukHQ,QqBjiHRM,GAAAme,GAEA,GAAAC,QAAApe,OAAAA,GAAA,CrBiiHU,GAAIse,GAAa7M,MAAM3S,EAAQ2zB,UAAY+D,EAAWpf,WAAatY,EAAQ2zB,QqB7hHrFzyB,EAAAwe,MAAAC,EAAAiU,UAAAhU,EAAAA,WAAAA,EAAAA,QAEAvH,EAAAA,GAAAA,CAEAnX,GAAA0e,aAAA,OAAAN,GrB6hHUpe,EqB5hHVA,aAAAue,MAAAD,GrB6hHUte,EqBzhHVue,aAAA,MAAAJ,GrB0hHcC,IAASpe,EAAWob,WAAaob,IqBj9G/C,QAAAI,KACA,OAAA/wB,EAAAuV,YAAA3J,MAAAzR,EAAAob,WAAAhE,WAAA,GAAA4B,EAAAhZ,EAAAob,WAAAtc,EAAAmzB,YA7HA,GAAA1Z,IAEAvW,MAAAgX,ErByiHQ1Y,SAAQC,SAAU,WAAY,aAAc,WAAY,kBAAmB,YAAa,eAAgB,QAAU,SAASI,GqBriHnIoe,QAAAA,UAAAnM,EAAAA,MAAAA,EAAAA,GAAAA,EAAAA,MrBwiHQ9T,EqBtiHRyZ,QAAAA,UAAAA,EAAAA,SAAAA,ErBuiHQ,IqBtiHRzG,GAAAhT,EAAA0zB,KrBuiHYxZ,EAAa,SAAS7B,EAAMtF,GqBniHxCvR,MAAAC,GAAAyY,WAAA7B,EAAAtF,EAAA0G,IAEAjU,EAAA8hB,GrBqiHUvU,OqBpiHV/S,EAAA6B,WrBqiHU4X,KqBpiHVme,ErBqiHU5kB,OAAQhT,EAAQ0zB,cAElBlyB,SAAQC,SAAU,UAAW,WAAa,SAASI,GqBjiH3DL,QAAAoF,UAAApB,EAAA2tB,KACA3tB,EAAA8hB,SAAAzlB,EAAA,SAAAiJ,GACA9K,EAAAmzB,GAAAA,EAAAroB,oBAAAA,EAAAA,GrBmiHc8sB,EAA0B12B,EAAWob,gBqB7hHnD9a,QAAAge,UAAA7M,EAAA3S,aACAwF,EAAA6Z,SAAAA,aAAArf,SAAA4zB,GACA5zB,EAAAsf,WAAAE,IrB8iHQte,EqBzhHRw2B,SAAAA,QAAAA,SAAAA,GrB0hHU,GqBzhHVx2B,ErB0hHU,KqBvhHV0e,EAEAgY,MrBshHY12B,GAAWue,aAAa,QAAQ,GqBthH5CmY,IrByhHU,IqBthHVvf,GAAA4H,EAAA9G,MAAAA,EAAAue,EAAA13B,WrBuhHU,QqBthHV03B,GAAAxd,MAAA7B,EAAA+a,erBuhHYlyB,GAAWue,aAAa,QAAQ,IAGlCmY,EqBthHVtf,GACA4a,WrBshHclzB,EqBthHdA,UACAqY,EAAAA,EAAAC,qBAAAof,EAAA13B,EAAAuY,UAAA,GACA2B,EAAAgZ,EAAAA,EAAAE,iBAAApzB,EAAAmzB,crBwhHU9a,EAAO4H,EAAW9G,qBAAqBjY,EAAWob,WAAYtc,EAAQuY,UAAU,GqBphH1F,WAAAvY,EAAAqY,SrBshHmBA,EAAKC,UqBlhHxB,SAAAjN,EAAAA,SAEAgN,EAAAA,UAAAA,IACA9M,QAAA/J,EAAA6K,SACA8T,EAAAA,cAEA5U,OAAA8M,EAAA9M,KAAAA,GAAAA,MAAAA,OrBohHQrK,EqBlhHR+e,YAAA/G,KAAA3N,SAAAA,GrBmhHU,GAAI8M,EqBv/GdrU,OrBy/GYqU,GqBnhHZA,QAAAhM,YAAAd,IAAA,OAAAA,EACA4U,IACA3e,QAAA+J,OAAAA,GrBmhHmBA,EqB3gHnB,WAAAvL,EAAAuY,SACArX,EAAAob,MAAAjE,EAAAA,KAAAA,EAAAA,iBACA,SAAArY,EAAAkzB,SACAhyB,GAAAob,MAAA2D,IAAA3D,GAGAqb,GAAAA,MAAAA,GAGAA,QAAA33B,EAAA23B,SACAz2B,EAAAA,WAAAob,ErB4gHYpb,EAAWob,WAAa2D,EAAW9G,qBAAqBd,EAAMrY,EAAQuY,UqBtgHlFof,WrB+gHO3zB,SAAS,kBAAmB,WqB9/GnC,QAAA+zB,GAAAC,EAAA9hB,GrBigHM,IqBhgHN,GAAA4hB,MrBggHaG,EAAIlxB,OAAS,GqB7/G1B/F,EAAAuM,KAAA0qB,EAAAlP,OAAA,EAAAuG,GrBggHM,OqB5/GNpsB,GrB8/GI,QqB3/GJuW,GAAAA,EAAAzZ,GrB4/GM,OqB3/GNka,EAAAA,EAAAA,GAAAhE,ErB6/GIlV,KAAKuM,MAAS,iBAAkB,cAAe,OAAQ,SAASgP,EAAgBzI,EAAa8Q,GAC3F,MqB3/GN3E,UAAAA,GAoBA,IAAA7E,GAnBArI,GAAA/S,EAAAmzB,OACA1Z,EAAAA,EAAAA,SACAzG,EAAAhT,EAAA0zB,KrB4/GYxZ,EAAa,SAAS7B,EAAMtF,GqBz/GxC,MAAAmlB,GAAA3b,WAAA/C,EAAAA,EAAAC,IAEA0e,EAAAA,GACAplB,OAAAqlB,EAAAA,WAEA3e,KAAA4e,EACArlB,OAAA7B,EAAAA,eAEA+mB,EAAAI,EAAAF,cAAAjnB,GACAknB,EAAAA,EAAAze,SAAAH,GrB0/GY0e,EAAsBD,EAAYjuB,MAAMjK,EAAQ+zB,WAAWwE,OAAOL,EAAYjuB,MAAM,EAAGjK,EAAQ+zB,YqBx/G3GsE,EAAAzT,EAAAyT,MAAAA,EAAAA,WAAAA,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,YAEA/c,EAAA8B,GACAhC,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CACAlJ,GAAAA,GAAAmB,EAAAA,GACAD,EAAAI,EAAAA,EACA6E,IAAAM,2EAAAA,EAAAA,kBAAAA,EAAAA,KAAAA,EAAAA,eAGA0f,EAAArD,EAAAA,YAAAA,ErBw/GQ,IqBv/GRjiB,GAAA/S,EAAAqzB,QAAAA,EAAAA,UAAAA,EAAAA,oBAAAA,YAAAA,EAAAA,WAAAA,GAAAA,OACAxe,GACAkiB,KAAAA,EAAAA,crBw/GU3jB,MqBv/GVA,EAAAI,WrBw/GU6E,KAAMiD,EAAU3C,WqBr/G1Bqc,IrBw/GUjiB,OqBv/GVvR,EAAAQ,UrBw/GU6S,MqBv/GV3C,ErBw/GU6kB,OACE3jB,MqBv/GZiF,GrBy/GU7R,OqBv/GVgyB,SAAA1b,EAAAA,IrBw/GiB9b,KqBv/GjB01B,OAAA/d,GAAAA,EAAAyC,gBAAA/C,EAAAM,MAAAN,EAAA7E,aAAA4H,EAAAhI,OAKAgI,QAAAA,OAAA/C,GACAmgB,KAAA7B,EAAAA,MAAAA,crBo/GgBvjB,MAAOolB,EAAOpb,MAAM5J,WACpB6E,KAAMmgB,EAAOpb,MAAMzE,YqBj/GnC6f,EAAAC,WACAC,EAAAA,YAAAD,EAAAA,MAAApf,IAAAA,EAAAA,aACA+B,EAAAud,KAAAH,EAAA/kB,MAAAglB,UACAD,EAAAI,oBrBs/GU/B,MqBl/GVgC,WACA,GAAA1lB,GAAAA,GAAAA,MAAAA,EAAAA,KAAAA,EAAAA,MAAAA,GACA2lB,EAAAA,EAAAA,oBACAC,EAAAA,GAAAA,OAAAA,EAAAA,MAAAA,EAAAA,EAAAA,SAAAA,EAAAA,UAAAA,IACAH,EAAAD,EAAAtf,oBACAlG,EAAA8M,EAAAhH,qBAAAxF,GAAAA,MAAAklB,EAAAtlB,UAAAslB,cAEAC,KAAAI,IAAAA,EAAAA,GAAAA,OAAAA,EAAAA,KAAAA,EAAAA,IrBs/GY,KqBj/GZ3wB,GAHAgQ,GACA3W,EACAu3B,EAHAh0B,KAIAoD,EAAA6R,EAAAA,GAAAA,EAAA/G,IAAAnS,CrBk/GcmS,EqBj/Gd+lB,EAAAA,qBAAA3c,GAAAA,MAAAA,EAAAhD,cAAAvZ,EAAAq0B,WAAAA,EAAAA,UAAAA,GrBk/Gc,IqBj/Gd7oB,IACA2tB,GAAA3lB,OAAA2lB,EAAA3lB,IAAA4H,EAAAhI,KAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EACA+J,KAAAA,ErBk/GgBzb,MAAOyR,EAAIwF,UqB/+G3BsgB,QAAAD,EAAAxtB,iBAAAstB,EACAzwB,MAAA2wB,EAAAC,EAAAF,KAAAA,QAEAF,kBAAAG,EAAAA,EAAAA,EAAAA,kBAAAA,EAAAA,yBrBg/GgBxtB,SAAUgtB,EAAOpb,OAASpc,KAAK81B,WAAW3jB,GqB7+G1DjQ,MAAAsI,EAAAA,aAAA4P,EAAAhI,MAEAgmB,SAAAA,KAAAA,WAAAjmB,GAGA2lB,GAAAA,WAAAA,EAAAE,GACA91B,EAAA4yB,UAAAA,EAAAgD,GrB6+GcD,EqB5+GdvtB,KAAAytB,GrB8+GY71B,EqB3+GZA,SAAAsI,IrB4+GY,IAAI4tB,IqB3+GhB,CACAL,GAAAA,crB4+GkBD,GqB1+GlBM,EAAAA,cAAAA,EAAAn0B,GrB4+GoB8zB,IAAUA,EAASjE,SAAU,GACjCgE,EAAYhE,SAAU,EqBz+GtC5xB,EAAAod,SAAApG,GACAmf,EACAn2B,EAAAo2B,SAAAjB,EAEAe,GAAA,GAGAl2B,EAAAq2B,MAAAA,EAAAv4B,EAAAhB,EAAAyT,kBACAvQ,EAAAs2B,YAAAA,EACAt2B,EAAAu2B,OAAAA,EACAz4B,EAAA01B,KAAA7hB,EAAAgkB,EAAA73B,KAAA6T,OrB2+GgBukB,IqBz+GhBtC,EAAAA,KAAA,GAAA,GAAAze,QAAAA,GrB4+GYnV,EAAMq2B,gBAAkBv4B,KAAK04B,WAAW,GAAIjmB,OqBv+GxDimB,EAAAA,gBAAArhB,MAAAA,EAAAA,MACAnV,EAAA8V,WAAAV,EAAAA,WAGAtX,KAAAgY,OAAAhZ,GrBw+GU82B,WqBl+GV92B,SAAAq2B,GrBm+GY,MqBl+GZmC,GAAArnB,OAAAnR,EAAAA,gBAAAq2B,EAAAtvB,MAAAoK,eAAAkH,EAAA7E,aAAAglB,EAAApb,MAAA5J,YAAA6E,EAAAM,YAAA6f,EAAApb,MAAAzE,WrBo+GU+gB,WqBl+GV,SAAArhB,GrBm+GY,GAAIW,GAAOX,EAAKC,SAChB,IAAIU,EAAOhZ,EAAQ2zB,SAAW3a,EAAOhZ,EAAQ4zB,QAAS,OAAO,CAC7D,IAA0D,KAAtD5zB,EAAQg0B,mBAAmB/iB,QAAQoH,EAAKshB,UAAkB,OAAO,CqBh+GjF,IAAA35B,EAAAq2B,mBrBk+Gc,IAAK,GAAIllB,GAAI,EAAGA,EAAInR,EAAQq2B,mBAAmBtvB,OAAQoK,IqBh+GrE+kB,GAAAA,GAAAl2B,EAAAoG,mBAAAA,GAAAA,OAAAA,GAAAA,EAAAA,mBAAAA,GAAAA,IACAwzB,OAAAA,CrBq+GY,QAAO,GAET1D,UAAW,SAAS9vB,GAClB,GAAIwzB,EAQJ,IqBl+GZ55B,EAAAod,UAAApd,EAAAs0B,cAAAkE,EAAApb,QACA5b,QAAApB,QAAAgG,EAAA0X,QAAA8L,KAAA,QAAA0I,SAAA,arB49GgBkG,EAAOpb,MAAQ,GAAI3J,MqBv9GnC+E,EAAAA,MAAAA,EAAAA,MAAAA,QAAAA,QAAAA,EAAAA,QAAAA,KAAAA,cAAAA,KAAAA,EAAAA,0BAKAggB,EAAAx4B,MrBw9Gc,OqBv9Gdw4B,CrBy9GYoB,GAAapB,EAAOpb,MAAM9E,SAC1B,IqBv9GZE,ErBw9GY,QAAQpS,EAAI4B,SqBt9GxB,IAAA,IACA,GAAA5B,EAAAuuB,YrBy9GgB,MqBx9GhBnc,GAAAA,OAAA/E,GAAAA,MAAA+kB,IAAAnlB,IACA,CrBy9Gc,MAED,KAAK,IACAjN,EAAIuuB,OqBt9GtBnc,EAAA,GAAA/E,MAAA+kB,EAAApb,MAAA/J,cAAA,EAAAmlB,EAAApb,MAAA5J,WAAAglB,EAAApb,MAAAzE,YAGAH,EAAA,GAAA/E,MAAA+kB,EAAApb,MAAA/J,cAAAmlB,EAAApb,MAAA5J,WAAA,EAAAglB,EAAApb,MAAAzE,WACAvS,EAAAuuB,WAAA6D,EAAApb,MAAA5J,WAAA,IACAgF,EAAA,GAAA/E,MAAA+kB,EAAApb,MAAA/J,cAAAmlB,EAAAA,MAAApb,WAAA5J,IrBy9Gc,MAED,KAAK,IACApN,EAAIuuB,OqBp9GtBnc,EAAA,GAAA/E,MAAA+kB,EAAApb,MAAA/J,cAAA,EAAAmlB,EAAApb,MAAA5J,WAAAglB,EAAApb,MAAAzE,YAGAH,EAAA,GAAA/E,MAAA+kB,EAAApb,MAAA/J,cAAAmlB,EAAApb,MAAA5J,WAAA,EAAAglB,EAAApb,MAAAzE,WACAH,EAAA/E,WAAAmmB,EAAAxc,MAAA5J,WAAA,IACAgF,EAAA,GAAA/E,MAAA+kB,EAAApb,MAAA/J,cAAAmlB,EAAApb,MAAA5J,WAAA,EAAA,IAIAgF,MrBq9Ga,KAAK,IqBj9GlBA,EAAA,GAAA/E,MAAAmmB,EAAA,MACAphB,MrBo9Ga,KAAK,IqBh9GlBA,EAAA,GAAA/E,MAAAmmB,EAAA,OACAphB,MrBm9Ga,KAAK,IqBh9GlBA,EAAA,GAAA/E,MAAAmmB,EAAA,MACA,MAGA,KAAA54B,IAEAwX,EAAApS,GAAAiB,MAAAA,EAAAjB,OAEA,MrBg9Ga,SqB78GbsJ,OAAA,EAIAwC,MAFAlR,MAAA04B,WAAAlhB,IAAAggB,EAAAtyB,OAAAsS,GAAA,GACAue,GAAAA,EAAAA,iBAAAA,EAAAA,mBACA,KrBi9GUrnB,KqB98GV,QrB+8GUqD,OqB98GVvR,EAAAQ,YrB+8GU6S,MqB98GV3C,ErB+8GU6kB,OACE7kB,KqB98GZmG,GrBg9GU7R,OqB98GVgyB,SAAA1b,EAAAA,GrB+8GiB9b,KqB98GjB01B,OAAAljB,EAAAA,gBAAAJ,EAAAlB,KrBq9GuBmG,EAAK7E,aAAe4H,EAAShI,QqB78GpDyjB,QAAA70B,OAAAoZ,GAEAye,MAAAA,EAAAA,MAAAA,WACAzmB,KAAAA,EAAAA,MAAAA,YAEAolB,EAAAsB,oBAZAt4B,QAAAQ,OAAAoZ,GACAhI,KAAAA,EAAAolB,MAAApb,cACA/E,MAAAmgB,EAAApb,MAAAzE,WrB+8GgBN,KAAMmgB,EAAOpb,MAAMzE,YAErB6f,EAAO1b,WASX+Z,MqB78GVzjB,WrBm9GY,IqB58GZ+J,GAJA9E,GAEA7M,EACAytB,EAJAY,KAEAxxB,EAAA6R,GAAA9G,OAAApS,GAAAA,OAAA+R,eAAAA,GAAAA,OAAAA,WAAAA,GAGAoK,EAAAA,EAAAuc,GAAA14B,EAAA04B,IAAAA,CrB68GctmB,EAAQ,GAAIK,MAAK2H,EAASlJ,KAAMf,EAAG,EqB18GjD,IAAA4oB,IACA1hB,KAAA0hB,EAEAF,MAAAvuB,EAAAyuB,EAAAA,KAAAA,QrB28GgBvuB,SAAUgtB,EAAOhb,YAAYpK,GqBx8G7ClQ,QAAAsI,EAAA6H,gBAAA2mB,EAAA3mB,eAAAD,EAAAI,aAAAwmB,EAAAxmB,WAEA4lB,SAAAA,KAAAA,WAAAhmB,GAGA0mB,GAAAA,WAAAA,EAAAC,GACA72B,EAAA4yB,UAAAA,EAAAgE,GrBw8GcD,EqBv8GdI,KAAAA,GrBy8GY/2B,EqBt8GZA,SAAAsI,IrBu8GY,IAAI4tB,IqBt8GhB,CACAa,GAAAA,crBu8GkBH,GqBr8GlBV,EAAAA,cAAAA,EAAAn0B,GrBu8GoBg1B,IAAWA,EAAUnF,SAAU,GACnCgF,EAAchF,SAAU,EqBp8GxC5xB,EAAAod,SAAApG,GACAmf,EACAn2B,EAAA2R,SAAAglB,EAEA32B,GAAA,GAGAlC,EAAA01B,MAAAxc,EAAA9G,EAAApT,EAAAyzB,iBrBs8GYvwB,EAAMm2B,YAAa,EqBp8G/BvC,EAAAA,KAAAjiB,EAAAwD,EAAAA,KAAAA,OACA+gB,IrBs8Gcl2B,EAAMma,KAAK,GAAG,GAAG2Y,QAAS,GqBn8GxC9yB,EAAAg3B,WAAAl6B,EAAAqY,UACArX,KAAA01B,OAAAwD,GAEAhE,WAAA,SAAA9vB,GAGA,MAAApG,GAAAkE,OAAAA,EACAlE,gBAAAs0B,EACAkE,MAAApb,eACAhd,EAAAgG,aAAAwjB,EAAAxM,MAAAkV,YrBk8GUoH,WAAY,SAASrhB,GqB97G/B,GAAA6hB,IAAA9c,GAAA3J,MAAA4E,EAAAhF,cAAAgF,EAAA7E,WAAA,EAAA,ErBg8GY,OqB/7GZ0mB,GAAAl6B,EAAA2zB,SAAAtb,EAAAC,UAAAtY,EAAA4zB,SrBi8GUsC,UqB/7GViE,SAAA3B,GrBm8GY,GqBl8GZhgB,EAAAA,UAAAggB,EAAApb,cAAAA,EAAAA,OAAAA,QAAAA,QAAAA,EAAAA,QAAAA,KAAAA,QAAAA,SAAAA,eAEAob,EAAAxwB,MAAAA,GAAAyL,OAAA+E,GAAAA,OAAAX,eAAAsiB,GAAA1mB,OAAAD,WACAxL,IrB+7GiBwwB,EAAOpb,MAAZ,CqBt7GZrK,GAAAA,GAAAwgB,EAAAA,MAAAA,WACA1e,EAAA,GAAApB,MAAA+kB,EAAApb,MACA2Z,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,SAAAA,EAAAA,SAAAA,EAAAA,GACA7kB,EAAAoiB,aAAA,KAAAluB,EAAA4B,QAAAwwB,EAAAtyB,OAAA,GAAAuN,MAAA+kB,EAAApb,QAAApc,KAAA04B,WAAAlhB,IAAAggB,EAAAtyB,OAAAsS,GAAA,OrB47GU9I,KqBz7GV,OrB07GUqD,OqBz7GVvR,EAAAQ,WrB07GU6S,MqBz7GV3C,ErB07GU6kB,OACE7kB,KqBz7GZmG,IrB27GU7R,OqBz7GVgyB,SAAA1b,EAAAA,IrB07GiB9b,KqBz7GjB01B,OAAArjB,GAAAA,SAAA+H,EAAAA,cAAA,GAAA,MAAA3C,SAAA2C,EAAAlJ,KAAA,GAAA,KACA1Q,QAAAQ,OAAAoZ,GACAlJ,KAAAsmB,EAAApb,MAAA/J,cACAD,MAAAolB,EAAApb,MAAA5J,WACA6E,KAAAmgB,EAAApb,MAAAzE,YAEA6f,EAAA7B,UrB07GuBte,EAAKhF,gBAAkB+H,EAASlJ,OACzC1Q,QAAQQ,OAAOoZ,GqBx7G7Byb,KAAA2B,EAAApb,MAAA/J,cACA+mB,MAAAA,EAAAhf,MAAAA,WACAif,KAAAA,EAAAA,MAAAA,YAEA7B,EAAA8B,oBrB47GUzD,MqBz7GV3kB,WrB+7GY,IqBx7GZiL,GAHA9U,GACAmD,EACAytB,EAJAmB,EAAAG,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,KAAAA,OACAliB,KAIA8E,EAAAA,EAAAuc,GAAA14B,EAAA04B,IAAAA,CrBy7GcxnB,EAAO,GAAIuB,MAAK2mB,EAAYjpB,EAAG,EAAG,EqBt7GhD,IAAAopB,IACAliB,KAAAkiB,EAEAF,MAAA/uB,EAAAivB,EAAAA,KAAAA,QrBu7GgB/uB,SAAUgtB,EAAOhb,YAAYtL,GqBp7G7ChP,QAAAsI,EAAA6H,iBAAA,GAAAI,OAAAJ,cAEA+lB,SAAAA,KAAAA,WAAAlnB,GAGAooB,GAAAA,WAAAA,EAAAC,GACAr3B,EAAA4yB,UAAAA,EAAAwE,GrBo7GcD,EqBn7GdG,KAAAA,GrBq7GYt3B,EqBl7GZA,SAAAsI,IrBm7GY,IAAI4tB,IqBl7GhB,CACAoB,GAAAA,crBm7GkBF,GqBj7GlBlB,EAAAA,cAAAA,EAAAn0B,GrBm7GoBu1B,IAAUA,EAAS1F,SAAU,GACjCwF,EAAaxF,SAAU,EqBh7GvC5xB,EAAAod,SAAAga,GACAjB,EACAn2B,EAAA2R,SAAAwlB,EAEAn3B,GAAA,GAGAlC,EAAA01B,MAAA2D,EAAA,GAAAhyB,MAAA,IAAAgyB,EAAAA,EAAAtzB,OAAA,GAAAsB,MrBk7GYnF,EAAMm2B,YAAa,EqBh7G/BvC,EAAAA,KAAAjiB,EAAAwD,EAAAA,KAAAA,OACA+gB,IrBk7Gcl2B,EAAMma,KAAK,GAAG,GAAG2Y,QAAS,GqB/6GxC9yB,EAAAg3B,YAAAzmB,EAAA4E,UACArX,KAAA01B,OAAAwD,GAEAhE,WAAA,SAAA9vB,GAGA,MAAApG,GAAAkE,OAAAA,EACAlE,gBAAAs0B,EACAkE,MAAApb,erB+6GUsc,WAAY,SAASrhB,GqB16G/B,GAAA6hB,IAAA9c,GAAA3J,MAAA4E,EAAAhF,cAAA,EAAA,EAAA,ErB46GY,OqB36GZ6mB,GAAAl6B,EAAA2zB,SAAAtb,EAAAC,UAAAtY,EAAA4zB,SrB66GUsC,UqB36GVuE,SAAAjC,GrB+6GY,GqB96GZhgB,EAAAA,UAAAggB,EAAApb,cAAAA,EAAAA,OAAAA,QAAAA,QAAAA,EAAAA,QAAAA,KAAAA,QAAAA,SAAAA,eAEAob,EAAAxwB,MAAAA,GAAAyL,OAAA+E,GAAAA,OAAAkiB,cAAAD,EAAA,IrB46GiBjC,EAAOpb,MAAZ,CqBl6GZ4X,GAAAA,GAAAlB,EAAA6G,MAAApoB,cACA6I,EAAAA,GAAAA,MAAAA,EAAAA,MrBs6GgC,MAAhBhV,EAAI4B,QAAgBwQ,EAAQkiB,QAAQD,EAAa,GAA6B,KAAhBr0B,EAAI4B,QAAgBwQ,EAAQkiB,QAAQD,EAAa,GAA6B,KAAhBr0B,EAAI4B,QAAgBwQ,EAAQkiB,QAAQD,EAAa,GAA6B,KAAhBr0B,EAAI4B,SAAgBwQ,EAAQkiB,QAAQD,EAAa,GAC1Oz5B,KAAK04B,WAAWlhB,IAAUggB,EAAOtyB,OAAOsS,GAAS,MsBhsJlEhX,QAIAZ,MAAAA,EAAAA,QAAAA,MAAAA,UAAAA,MAAAA,KAAAA,EAAAA,EAAAA,SAAAA,EACAC,SAAAua,QtBqsJE5Z,QAAQf,OAAO,8BAA+BuD,SAAS,YAAa,WsB9rJtE,GAAA9C,GAAAA,KAAAF,UACAH,UAAAG,cAGA+mB,gBAAAvmB,EACAA,YAAAC,KtB8rJMm5B,gBsB7rJNh0B,EtB8rJMi0B,eAAe,GsBzrJrBr5B,EAAAC,KAAAP,WAAA,SAAA4E,EAAAyC,EAAAsf,GtBiwJM,QsBpqJNiT,GAAAC,GtBsqJQ,IAAK,GADDD,GAAgB/S,EAAKgT,SAASnS,QACzBzX,EAAI,EAAGA,EAAI2pB,EAAc/zB,OAAQoK,IACpC9L,EAAQy1B,EAAc3pB,KsBlqJpC2pB,EAAAp5B,GAAAA,EAAAA,GAAAA,GAEAo5B,EAAA7pB,KAAAvP,EAAAA,SAAAqF,StBoqJY+zB,EAAc3pB,GAAK4W,EAAKgT,SAASh0B,OAAS,GAIhD,QsBlqJNg0B,GAAAhT,GtBmqJQ,GsBlqJRA,GAAAA,EAAAgT,SAAAnS,OtBmqJQ,OsBlqJR,KAAAmS,EAAAnS,QAAAG,GtBoqJM,QAASiS,GAAet5B,GsBhqJ9B,GAAA2D,GAAA41B,EAAAA,SAAAv5B,QAAAA,QAAAA,EACAwd,MAAA7Z,IAEA0iB,EAAAA,SAAAgT,EAAAhT,SAAAgT,QAAAnS,IAAApjB,KAAA1F,cAAA,QtBiqJUioB,EsBhqJVA,SAAAgT,EAAAhT,SAAAgT,QAAAnS,IAAApjB,KAAA,gBAAA,StBiqJUuiB,EAAKgT,SAASnS,QAAQG,OAAO1jB,EAAO,IAGxC,QAAS41B,GAAav5B,GsB/pJ5BqmB,EAAAgT,SAAAnS,gBtBiqJcb,EAAKgT,SAAShT,EAAKgT,SAASnS,QAAQ,MAAQ9oB,GsB9pJ1DioB,EAAAgT,SAAAnS,EAAAA,SAAA3X,QAAAvP,IAAAA,KAAA,cAAA,QAGAqmB,EAAAgT,SAAAhT,EAAAgT,SAAAnS,QAAAb,KACAA,EAAAgT,SAAAhT,EAAAgT,SAAAnS,QAAAb,IAAAA,KAAAgT,gBAAAh0B,SAEAghB,EAAAA,SAAAmT,QAAAnT,OAAAgT,EAAAnS,ItBgqJqD,KAAzCb,EAAKgT,SAASnS,QAAQ3X,QAAQvP,KAChCqmB,EAAKgT,SAASnS,QAAQtd,KAAK5J,GACvBqmB,EAAKgT,SAAShT,EAAKgT,SAASnS,QAAQb,EAAKgT,SAASnS,QAAQ7hB,OAAS,MAAQjH,GAC7EioB,EAAKgT,SAAShT,EAAKgT,SAASnS,QAAQb,EAAKgT,SAASnS,QAAQ7hB,OAAS,IAAIvB,KAAK,cAAe,SsB1pJvG21B,EAAAA,SAAAA,EAAAA,SAAAA,QAAAA,EAAAA,SAAAA,QAAAA,OAAAA,MAAAA,GACAA,EAAAv6B,SAAAA,EAAAA,SAAAA,QAAAA,EAAAA,SAAAA,QAAAA,OAAAA,IAAAA,KAAAA,gBAAAA,StBgjJM,GsB3rJNmnB,GAAAvmB,ItB4rJMumB,GsB3rJNA,SAAA7I,QAAArd,KAAAjB,GtB4rJMY,QAAQC,SAAU,YAAa,iBAAkB,cAAe,iBAAkB,iBAAmB,SAASI,GACxGL,QAAQoF,UAAUihB,EAAOhmB,MAAOkmB,EAAK7I,SAASrd,GAAOgmB,EAAOhmB,KsBxrJxEkmB,IAAAA,GAAAgT,eAEAhT,SAAAqT,SAAAA,iBAAAA,iBAAAA,iBAAAA,SAAAA,GAEAC,QAAAA,UAAAxT,EAAAhmB,KAAAzB,EAAAA,KAAAA,EAAAA,MACA2nB,EAAAmT,SAAA5vB,IAAAlL,KAGA2nB,EAAAuT,YtByrJMvT,EsBxrJNA,YtByrJMA,EsBvrJNqT,wBtBwrJMrT,EsBvrJNsT,gBAAA,SAAAj7B,GtBwrJQ2nB,EsBvrJRmT,SAAA/pB,KAAA4W,GtBwrJQ3nB,EsBvrJR2nB,KAAAgT,gBAAA,UtByrJMhT,EsBvrJNuT,gBAAAvT,SAAAgT,GtBwrJQhT,EsBvrJRgT,SAAAA,KAAAA,EtBwrJQ,IAAI5pB,GsBvrJZ4W,CtBwrJQ,IAAIA,EAAKgT,SAAU,CACjB,IsBvrJV5pB,EAAA4W,EAAAmT,EAAAA,EAAAnT,SAAAgT,OAAAnS,ItBwrJYb,EsBvrJZA,SAAAmT,GAAAnT,KAAAgT,cAAAnS,OtByrJU,KAAKzX,EAAI,EAAGA,EAAI4W,EAAKgT,SAASnS,QAAQ7hB,OAAQoK,IACxC4W,EAAKgT,SAAShT,EAAKgT,SAASnS,QAAQzX,KACtC4W,EAAKgT,SAAShT,EAAKgT,SAASnS,QAAQzX,IAAI3L,KAAK,cAAe,SsBprJ1EH,EAAA0iB,SAAAmT,EAAAjqB,SAAA7Q,QAAAA,KAEA86B,EAAAA,SAAAnS,EAAA1jB,SAAAujB,QAAAzX,IAAA3L,KAAA,gBAAA,UtB0rJMuiB,EsBlrJNwT,kBAAAV,SAAAA,GtBmrJQ,GsBjrJRG,GAAAA,EAAA56B,SAAAA,QAAAA,EtBkrJQ2nB,GAAKmT,SAASnS,OAAO1jB,EAAO,IAE9B0iB,EsB9qJNA,kBAAAqT,SAAA35B,GtB+qJQ,GsB9qJRwL,GAAAA,EAAAA,SAAAA,QAAAA,EtB+qJQ8a,GAAKgT,SAAShS,OAAO1jB,EAAO,GACxB0iB,EAAK7I,SAAS2b,esB3qJ1B9S,EAAAa,GAEA4S,EAAA95B,GtB6qJQqmB,EsB5qJRA,qBAAArmB,QAAAA,SAAAA,GtB6qJUuL,OAGJ8a,EsB5qJNkT,SAAAA,QAAAv5B,EAAAA,SAAAA,mBAAAA,GtB6qJMqmB,EAAKK,WAAatiB,EAAOsiB,WAAa,SAAS1mB,GsB1qJrDqmB,QAAAqT,QAAAA,GACAnuB,EAAAA,SAAAA,QAAAA,GtB4qJoB8a,EAAK7I,SAASuc,gBAAkBC,EAASh6B,GACnDs5B,EAAet5B,GsBxqJzBu5B,EAAA/b,GtB4qJQ6I,EAAKqT,qBAAqB35B,QAAQ,SAASwL,GsBzqJnDA,OtB6qJM8a,EsBvqJN4T,eAAA5T,WACA,MAAAA,GAAA5W,SAAAA,cACA9L,EAAAy1B,SAAAA,QtByqJgD,IAAjC/S,EAAKgT,SAASnS,QAAQ7hB,OAAeghB,EAAKgT,SAASnS,QAAQ,GAAK,IsB1mJ/E5nB,MAAAuM,KAAA,WACA3D,GAAAA,KtB2pJM,OsB1pJN1I,GAAAA,SAAAN,EACAqC,EAAA/B,WAAAwI,EAEA4f,KtBypJK9f,UsBtpJL8f,cAAA,UAAA,WAAA,YAAA,SAAAxc,EAAAmZ,EAAAkV,GtBupJI,OACEvxB,SsBppJN0f,WAAAxiB,ctBqpJM5F,YAAc,SAAU,WAAY,SAAUi6B,EAAUj6B,YACxD+B,KsBlpJNqmB,SAAAje,EAAAC,EAAAsD,EAAArD,GtBmpJQ,GsBjpJR+d,GAAAnb,EAAA5C,GtBkpJYqwB,EsB/oJZxT,EAAA7c,EtBgpJY+d,KACFsS,EsB/oJVd,qBAAAc,KAAAD,WtBgpJYrS,EsB9oJZ9nB,cAAAs5B,EAAAa,oBtBgpJUrS,EsB5oJVsS,YAAAxT,KAAAA,SAAA7c,GtB6oJY,GAAI/J,QAAQ2M,QAAQ5C,GAClBqwB,EsB5oJdd,WAAAA,OACAc,CtB6oJc,GAAId,GAAgBc,EAAeD,gBAC/Bn6B,SAAQ2M,QAAQ2sB,GsB3oJlCvvB,KAAAA,EAAAA,QAAAA,EAAAA,ItB6oJkBqwB,EAAexT,WAAwB,EAAb7c,GAEnBuvB,IAA+B,EAAbvvB,GAC3BqwB,EAAexT,WAAwB,EAAb7c,GsBpoJ1CswB,MAAAtwB,WAKAtI,UAAA,mBAAA7C,WtBwoJI,GsBroJJsE,ItBsoJMm3B,MsBnoJNz7B,GtBooJM07B,MsBjoJNF,GtBmoJI,QACEhyB,SAAW,YAAa,eACxB3G,KsB9nJN84B,SAAAA,EAAA37B,EAAAwO,EAAA8a,GtB+nJQ,GsB9nJRkS,GAAAze,EAAA,EtB+nJQ/c,GsB9nJRiF,KAAAA,cAAA22B,YtB+nJQJ,EsB9nJRA,gBAAAv2B,GtB+nJQnC,EsB9nJRA,IAAAwL,WAAAA,WtB+nJUktB,EAAeL,kBAAkBn7B,IsB3nJ3CA,IAAAA,GAAA27B,WACA37B,IAAAA,EAAA+c,SAAA,CACA,GAAAnU,GAAAA,EAAAtE,kBAAA,uBAAAsE,EAAAA,iBAAA4F,EAAAotB,iBAAAJ,EAAAV,SAAAjqB,QAAA7Q,EACAe,GAAAinB,WAAA,EAAA/iB,GACA02B,EAAAA,UtBgoJQ37B,GAAQoM,GAAG,QAASuvB,GACpB37B,EAAQ67B,KAAK,mBAAoB,SAAS/S,IACpCA,EAAElgB,QAAUtE,EAAUm3B,OAAS3S,EAAElgB,QAAUtE,EAAUo3B,SsBznJnEtyB,QAAA0yB,IAAA,wBAEAH,IACAnyB,EAAAA,wBtB8nJKJ,UsBlnJLpJ,oBAAAw7B,WAAA1c,SAAAre,GtBmnJI,OACE+I,SsBhnJNgyB,YAAAN,etBinJMr4B,KsB9mJNC,SAAAA,EAAA9C,EAAAwO,EAAA8a,GtBwnJQ,QAASO,KACP,GAAI5kB,GsB7mJdA,EAAAmC,SAAAyJ,QAAA7Q,GACA+7B,EAAAP,EAAAD,iBtB8mJcQ,EAAS,asB3mJvBlW,SAAAkW,QAAA/7B,GtB6mJ0C,KAA1BoH,EAAOyJ,QAAQ5L,KsB1mJ/Bu2B,EAAAR,YtB6mJqB/1B,IAAUmC,IsB1mJ/ByiB,EAAAA,YtB6mJUhE,EAASkW,GAAQ/7B,EAASw7B,EAAe1c,SAAS0I,aApBpD,GsB9mJRgU,GAAAQ,EAAAA,EtB+mJQh8B,GAAQylB,SAAS,YsB5mJzB+V,EAAA3R,SAAAA,WACA7pB,EAAAiF,SAAAu2B,EAAAb,SAAA9pB,WtB+mJQ2qB,EsB7mJRN,gBAAAl7B,GtB8mJQ8C,EsB7mJR1B,IAAAA,WAAAgG,WtB8mJUo0B,EsB7mJV3qB,kBAAA7Q,KCpSAoB,EAAA45B,qBAAA9vB,KAEAtH,WAEApD,MAEAy7B,SvBi6JE76B,QuB75JFZ,OAAAA,4BAAAA,SAAAA,UAAAA,WvB85JI,GAAIA,GAAWI,KAAKJ,UAClBgnB,YAAa,SuB15JnBpe,YAAA,QvB65JIxI,MuB15JJ2I,KAAA,WACAC,OACA3I,SAAAL,MvB65JK4I,UuB15JLjG,kBAAA0jB,WvB25JI,OACEtd,SuB15JN4kB,IvB25JM3kB,QuB15JN2kB,UvB25JMttB,QuB15JNstB,SAAAnuB,EAAAyK,GvB25JQzK,EAAQoF,KAAK,cAAe,WAC5BpF,EAAQuC,WAAW,WACnB,IAAIY,GAAWnD,EAAQ,GAAG6mB,iBAAiB,yBuBr5JnDzd,SAAA/H,QAAA8B,EAAA,SAAAirB,GAEA5tB,GAAAA,GAAA07B,QAAA17B,QAAAA,EACA27B,GAAAA,KAAAA,cAAA,IAEAhO,EAAA/oB,KAAA,WAAAA,EAAAqF,QAAA,IAAA0jB,EAAA/oB,KAAA,gBvBw5JKgE,UuBn5JLxJ,cAAAY,UAAAA,QAAAA,SAAAA,EAAAA,GvBo5JI,GuBj5JJA,GAAA47B,EAAAp8B,SACAm8B,EAAAC,oBvBk5JI,QACE7yB,SuBh5JN4yB,IvBi5JM3yB,QuBh5JN6yB,UvBi5JMx5B,KAAM,SAAkBC,EAAO9C,EAASoF,EAAMtE,GuB/4JpD,GAAAw7B,GAAAA,EACAH,EAAAG,UAAAH,EAAAA,GAAAryB,SACAwyB,EAAAx5B,EAAAsC,EAAAk3B,SAAAA,EvBi5JYD,EAAYj7B,QAAQoF,UAAUpB,EAAKi3B,WAAaj3B,EAAKi3B,WAAY,CuB74J7EE,GAAAA,KAAAF,EAAAA,aACAA,EAAAE,EAAAA,MAAAn3B,EAAAi3B,WvBg5JQ,IuB74JRC,GAAA9c,QAAA6c,UAAAC,EAAAA,YAAAA,EAAAA,YAAAA,CvB84JYH,GAAoBryB,KAAK1E,EAAKk3B,cuB34J1Cx7B,EAAAmK,EAAAA,MAAAC,EAAAoxB,YvB84JQ,IAAIC,GAAuC,iBAAdF,IAAiD,iBAAfC,EAC3DC,KuBx4JZz7B,EAAAwF,SAAA4E,KAAA,SAAAsU,GAEA,MAAA8b,GAAAx6B,EAAA+F,IvB04JU/F,EuBx4JVs7B,YAAAlxB,KAAAsxB,SAAAlB,GACA7P,MAAAA,SAAAgR,OAAAA,EAAAjV,MAKAxnB,EAAA67B,QAAAI,WACAn5B,GAAAA,KAAAhC,EAAA+F,UvBu4JUR,GuBr4JV,WACAvF,IAAA4F,EAAAA,GAAAA,QAAA+kB,GvBs4JYA,EAAcgR,YAAY78B,EAAQ4nB,YAAa8T,MAGnDt7B,EAAQ67B,KAAKj8B,EAAQq8B,YAAa,WAChCn5B,EAAMwL,OAAO,WACN8tB,GuB/3JjBhzB,EAAA1C,eAAA+kB,EAAAyG,SAAA,WAGA3oB,EAAAjD,mBvBo4JO8C,UuB/3JPjG,eAAA,WvBg4JI,OACEoG,SuB/3JNnI,IvBg4JMoI,QuB/3JNpI,UvBg4JMP,QAAS,SAAkBb,EAASoF,GAClCpF,EAAQoF,KAAK,cAAe,WAC5BpF,EAAQuC,WAAW,WuB13J3B6G,IAAAA,GAAApJ,EAAA,GAAA6mB,iBAAA,sBAEArmB,SAAAA,QAAA07B,EAAA17B,SAAAA,GACA27B,QAAAA,QAAAA,GAAA/2B,KAAA,WAAA,IAEAhE,QAAApB,QAAAouB,GAAAhpB,KAAA,WAAAA,EAAAqF,evB63JKrB,UuBx3JLxJ,WAAAY,UAAAA,QAAAA,SAAAA,EAAAA,GvBy3JI,GuBt3JJA,GAAA47B,EAAAp8B,SACAm8B,EAAAC,oBvBu3JI,QACE7yB,SuBr3JN2d,IvBs3JM1d,QuBr3JN,UvBs3JM3G,KuBr3JNvB,SAAAoe,EAAAgd,EAAAA,EAAAA,GvBs3JQ,GuBl3JR57B,GvBk3JYlB,EuBr3JZY,EACAc,EAAAo7B,UAAAA,EAAAA,GAAAA,SvBs3JYjR,EAAgB2Q,EAAUp8B,EAAQsI,SAAWtI,CAEjDoF,GAAK8hB,SAAS,QAAS,SAASwV,GuBh3JxCp7B,EAFAgF,iBAAAA,IAAA61B,EAAAryB,KAAA4yB,GAEApB,EAAAl6B,MAAAA,GAEAg7B,EvBo3JUt7B,EAAWwF,YuB92JrBtG,EAAA67B,QAAAI,WACAn5B,GAAAA,GAAA1B,QAAA8F,OAAApG,EAAA+F,WAAAvF,EvBi3JU+E,GuB/2JVvF,WACAA,IAAAwF,EAAAA,GAAAA,QAAAA,GvBg3JYmlB,EAAcgR,YAAY78B,EAAQ4nB,YAAa8T,MAGnDt7B,EAAQ67B,KAAKj8B,EAAQq8B,YAAa,WAChCn5B,EAAMwL,OAAO,WwBnhKvBjO,EAAAqG,cAAApF,GAIAd,EAAAI,mBxBuhKEQ,QwBjhKFyC,OAAA,wBAAA,yBAAAD,SAAA,SAAA,WxBkhKI,GwBjhKJ5D,GAAAY,KAAAJ,UACAyuB,UAAA,UACAnrB,YAAA,QACAoE,YAAA,QAEAy0B,UAAA,KACAxc,YAAA,uBACAyc,WAAAA,EACAC,QAAAA,KxBihKM5N,UAAU,EwB9gKhBruB,UAAAuM,EAEAjF,MAAA,ExB+gKMy0B,UwB7gKNG;AxB8gKM3c,MwB3gKNvgB,ExB4gKMg9B,awB1gKNjN,ExB2gKMkN,iBwBzgKNpM,ExB2gKI7vB,MAAKuM,MwBzgKT4vB,SAAAA,WAAA/8B,SAAA88B,EAAA30B,GxB0gKM,QwBxgKN60B,GAAAD,GxBygKQ,GAAID,MACAl9B,EAAUwB,QAAQQ,UAAWpB,EAAUuE,EAC3C+3B,GAASnN,EAAO/vB,GAChBk9B,EwBxgKRrM,YAAAT,WxBygKU,QwBxgKVhoB,KxBygKY,GwBxgKZ+0B,GAAAlN,QAAAA,QAAAA,EAAAA,UAAAoN,QAAAA,kBxBygKY,OwBxgKZlN,GAAAA,KAAArwB,yIAAAuE,OAAA,SAAA8M,EAAAuR,GACA,OAAArd,QAAA8qB,QAAAlf,GAAAA,aAAA4a,EAAAA,mBAAAA,SxB2gKU,QAASuE,KwBvgKnB5uB,GAAAA,EAAApB,cAAAgwB,CxBygKc,GAAID,GAAYF,IAAwBoN,SwBngKtDH,IAAAp3B,IAAAk3B,EAAAh9B,MACAA,IAAAA,GAAAmwB,EAAAlf,QAAA7I,EAAAyjB,cACAqR,OAAAp3B,GAAA9F,EAAAugB,IAGA2c,QAAAp3B,QAAAm3B,KAAAA,SAIAC,EAAA50B,OAAA40B,cAAA50B,EAAAA,YACAtI,EAAA+8B,OACAG,EAAA50B,OAAAiY,KAAAvgB,EAAAugB,MAEA9X,EAAAA,kBxBmgKUy0B,EwBlgKVA,OAAAr0B,gBAAAA,EAAAA,gBxBogKQ,IAAIP,GAAO40B,EAAO50B,IwBj/J1BpF,OxBk/JYlD,GAAQ+8B,WwBhgKpBG,EAAAA,KAAAA,WxBkgKY50B,IwB9/JZG,EAAA20B,WxBggKcF,EAAOr0B,QwB1/JrB,IAAA7I,EAAA+8B,YAIAG,ExB4/JM,MwBx/JNl9B,OxB0/JKwJ,UwB1/JLpJ,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GxB2/JI,OACEuJ,SAAU,MACVzG,OwB5/JN1B,ExB6/JMyB,KwB5/JN,SAAA2D,EAAA/E,EAAA7B,EAAA6B,GxB6/JQ,GAAI7B,IwBz/JZkD,MAAA2G,EACArI,QAAAC,EACA6G,MAAA9G,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,YAAAI,WAAAA,OAAAA,YAAAA,YAAAA,WAAAA,eAAAA,SAAAA,GACAiI,QAAAlD,UAAA/E,EAAAkI,MAAAC,EAAAA,GAAAnI,EAAAoI,KxB0/JQ,IwBx/JRjK,GAAAkD,exBy/JQ1B,SAAQC,SAAU,WAAY,OAAQ,YAAa,eAAiB,SAASI,GACvEL,QAAQoF,UAAUpB,EAAK3D,KAASgI,EAAiBK,KAAK1E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KAEvFL,QwBr/JR8e,SAAA,eAAA,SAAA,eAAA,UAAA,SAAAze,GxBs/JU,GAAIiI,GAAQ,KAAOjI,EAAIkI,OAAO,GAAGC,cAAgBnI,EAAIoI,MAAM,EwBl/JrEzI,SAAAC,UAAA+D,EAAAsE,MACA9J,EAAA6B,GAAAqB,EAAA4c,MAAAta,EAAAsE,OxBs/Ja5G,EAAMmkB,eAAe,WACxBnkB,EAAMod,MAAQ,IwB/+JxB9e,QAAAgE,SAAA,QAAA,UAAA,QAAA,SAAA3D,GACAqB,EAAA0H,IACApF,EAAAhE,SAAAkC,EAAAA,SAAAoH,EAAAC,GACAvJ,EAAAA,GAAAQ,EAAAkB,YAAA4H,OxBq/JYtF,EwBj/JZ83B,SxBk/JUp6B,EAAM0H,OAAOpF,EAAK83B,QAAS,SAASxyB,EAAUC,GwB9+JxDwyB,QAAAL,SAAAl9B,GAGAI,QAAAoF,OAAAzB,EAAA+G,GAIAyyB,EAAAA,QAAArxB,IAEAqxB,ExB6+JQ,IAAIA,GAAQL,EAAOl9B,EACnBI,GAAQoM,GAAGhH,EAAKzB,SAAW,QAASw5B,EAAMrY,QAC1ChiB,EAAM8I,IAAI,WAAY,WyBpoK9BvL,GAAA88B,EAAArxB,UAIAtL,EAAAI,KACAyG,EAAA,YzBuoKEjG,QyBhoKF+qB,OAAAA,wBAAAnkB,oCAAA0a,oCAAAA,SAAAA,SAAAA,WzBioKI,GyBhoKJliB,GAAAyrB,KAAA7qB,UAEAiG,UAAA+1B,OzBgoKMC,cyB9nKNC,EzB+nKMC,UyB5nKN39B,EzB8nKIgB,MyB1nKJuM,MAAAqwB,UAAA,WAAA,aAAA,SAAA9wB,EAAAwf,EAAA7J,GzB6nKM,QyB1nKNob,GAAAA,EAAA14B,GzBkvKQ,QyB9kKR24B,GAAAC,EAAAptB,EAAAL,GzB+kKU,GyB9kKV1I,GAAAo2B,IzB+kKcC,EAAeC,GyB7kK7B,OAAAz2B,IAAAG,EzB+kKmB,MyB5kKnBo2B,OAAAA,EACAjgB,EAAAggB,GAAAjxB,EAAAA,IAAAqxB,SAAApgB,SzB8kKsC,OAAjBqgB,GAAyBztB,EAASL,IAAM+tB,EAAgBC,GAAmBL,EAAeG,EyB3kK/GF,SzB8kKiB,SyBzkKjB,QAAAR,KzB4kKU,MAAO3f,GAAS,KAAOjR,EAAUA,EAAQqxB,YAAcpgB,EAAS,GAAGnW,UAErE,QAASs2B,KyBpkKjB10B,MAAAuU,GAAA,KAAAjR,EAAAA,EAAA1E,SAAA0a,KAAAmb,aAAAnxB,EAAArE,GAAAA,aA5LA,GAAAhB,MACA22B,EAAAA,QAAAp8B,UAAApB,EAAAuE,GACAo5B,EAAAv+B,EAAA8d,OACA0gB,EAAA,+BAEA91B,GAAAtI,EAEAJ,EAAA+O,EACA8uB,EAAA9uB,EACAtH,EAAA0J,EzBynKYitB,EyBxnKZ11B,EzBynKY61B,EAAU,KACVC,EyBxnKZ,KACA91B,EAAAlH,EAAApB,QzBynKQ,IAAIJ,EAAQ+O,aACV,GAAI/O,EAAQ+O,aAAarB,MAAM,SyBtnKzCgwB,IAAAtvB,GAAAA,GAAA,EAAA+C,EAAA,EAAAnR,EAAA+O,aAAA,EAAAoC,IAEAnQ,EAAAy9B,EAAAA,aAKA1gB,GAAAvR,QAAApM,QAAAstB,EAAAA,aAwKA9jB,OzB+8JQ8zB,GyBjnKRhQ,KAAAA,WACA1sB,KAAAwsB,gBzBknKUqQ,EAAmBpb,EAAWxS,OAAO7P,EAAQ,IAAIkQ,IAAMguB,EyB9mKjEZ,EAAAxxB,EAAAyxB,WAAAv9B,EAAA,GAAA4P,MAAAG,MAGA4N,EAAA9R,GAAAA,SAAAjL,KAAAA,eACA+c,EAAA9R,GAAAA,QAAAjL,KAAAA,4BACAqrB,EAAApgB,GAAAA,SAAAjL,KAAAA,oBzB8mKUA,KAAK0sB,gByB1mKfgQ,KAAAlQ,8BzB6mKQkQ,EAAOxxB,QAAU,WyBrmKzBwxB,EAAAhQ,IAAAA,SAAA1sB,KAAA0sB,eAGA3P,EAAAnW,IAAAA,QAAAo2B,KAAAA,4BACA3R,EAAA1b,IAAAA,SAAA8R,KAAAxS,qBzBsmKQytB,EyBlmKRgB,2BAAAF,WAGA3Q,WAAA0Q,EAAAG,cAAA,IzBkmKQhB,EyB/lKRgB,cAAA,WzBgmKU,GyB/lKVF,GAAAR,IACArtB,EAAAgtB,EAAA1tB,OAAA7P,EAAA,IACAA,EAAAqiB,EAAAvT,OAAA9O,EAAA,IzBgmKcs+B,EAAQZ,EAAsBU,EAAO7tB,EAAU0tB,EyB9lK7DE,KAAAd,IzBgmKUc,EyB/lKVn+B,EACAkP,QAAAlP,GzBgmKYo+B,EAAQ,KACJb,GyB9lKhBv9B,EAAAJ,IAAA2+B,QAAAA,IzBimKgB3+B,EyB/lKhBy9B,eAGAe,EAAA7tB,IAAAA,WAAA/I,EAAAA,aAAAA,GAAAA,YzB8lKcxH,EAAQkP,IAAI,MAAO,MyB3lKjC,WAAAlP,GAEAo+B,EzB4lKgBx+B,EAAQ2+B,cyB5lKxB,EAAAlB,EAAAA,aAEAnuB,EAAAgB,IAAAtQ,EzB+lKgB29B,GyB5lKhBa,EAAAlvB,IAAA,QAAA,IAEAlP,EAAAkP,ezB8lKclP,EAAQkP,IAAI,WAAYtP,EAAQ+O,aAAe,GAAK,YyB5lKlE3O,EAAAJ,IAAAy9B,MAAAA,EAAA1uB,aAAA,GAAAwd,EAAA,GAAAnd,aAAAgvB,EAAAC,EAAAR,EAAA,SzBgmKYW,EAAQ,KACJb,GyB1lKhBv9B,EAAAwmB,IAAAA,QAAAgX,EAAA/X,GAAArU,YAAAktB,MAIAE,EAAAA,eACAlB,EAAAe,IAAAA,WAAAA,SACAf,EAAAhQ,IAAAA,MAAAA,EAAAA,QAIAgQ,EAAAe,YAAAA,GAAA5Y,SAAA,SAAA,WAAA6Y,EAAA,IAAAA,EAAA,OzB0lKQhB,EyBxlKRmB,UAAAz+B,WAEAs9B,EAAA19B,gBzBwlKU09B,EyBvlKVt9B,iBzBylKQs9B,EAAOoB,mBAAqBxS,EAASoR,EAAOkB,UAAW,IACvDlB,EyBtlKR19B,cAAAyH,WzBulKU,GyBtlKVs3B,GAAAt3B,EAAA,GAAAuI,MAAAW,SACA3Q,EAAAyH,EAAA,GAAAuI,MAAAM,GzBulKctQ,GAAQy9B,eyBrlKtBr9B,EAAAJ,IAAAyH,WAAAiG,EAAAqB,aAAA,GAAA,YzBulKY3O,EyBtlKZk+B,IAAAA,MAAAA,KzBwlKct+B,EyBtlKdyH,YACA,SzBslKgBzH,EyBtlKhByH,YzBulKczH,EyBtlKdyH,UAAAgb,MzBwlKgBziB,EyBtlKhByH,UAAAiG,MAAA,cACAjG,EAAA,GAAAzH,EAAAyH,UzBwlKgBA,EADEzH,EAAQ+O,aACE0T,EAAWxS,OAAOvH,EAAO,IAAI4H,IAA0B,EAApBtQ,EAAQyH,UyBnlKvEsH,EAAAA,OAAA/O,EAAAo+B,IAAAA,IAAA1wB,EAAA4B,IAAAlP,EAAA,GAAA,aAAA,GAAA,EAAAJ,EAAAyH,WAIA22B,EAAAA,EAAAA,EAAAp+B,WAKAA,EAAAy9B,eAEAr9B,EADAA,EAAA2O,cAAAgwB,EAAAA,aAAAA,MAAAA,aACAb,KAAAW,EAAAA,OAAAA,EAAAA,IAAAA,IAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,aAAAA,EzBolKoD,EAAvB7+B,EAAQo+B,cyB5kKrCH,EAAAA,eAEA79B,EAAAwH,IAAAA,WAAAH,GACArH,EAAAkP,IAAA,MAAAuvB,KA+BAl1B,EAAAA,OACA+zB,EzBu7JM,GyB1nKNnR,GAAAoR,QAAAv9B,QAAA0M,EAAA1E,SAAA0a,MACAuJ,EAAAiS,QAAAA,QAAAxxB,EzBwwKM,OyBnkKN9M,OzBqkKKwJ,UyBrkKLsU,WAAAkhB,SAAAA,UAAAz2B,WAAA/G,SAAApB,EAAA0M,EAAAA,GzBskKI,OACEnD,SyBtkKNlI,MzBukKMmI,QyBtkKNpI,kBzBukKMyB,KyBtkKN,SAAApB,EAAAA,EAAAA,EAAAA,GzBukKQ,GyBtkKR7B,IzBukKUkD,MyBtkKVA,EzBukKU4a,OyBtkKV9d,EAAAi/B,EAAAA,SAAAA,QAAAA,QAAAA,GzBwkKQz9B,SAAQC,SAAU,YAAa,eAAgB,eAAgB,cAAe,eAAgB,YAAc,SAASI,GyBpkK7H,GAAA68B,QAAAA,UAAAA,EAAAA,IAAAA,CACAj2B,GAAAA,GAAAjD,EAAA3D,EAAA68B,SAAAhB,KAAAt9B,KAAAJ,GAAAA,GzBukKgB,SAASkK,KAAK+0B,KAASA,GAAS,GyBtkKhD/7B,EAAArB,GAAAo9B,IzB0kKQ,IyBvkKRP,EzBwkKQj2B,GAAS,WACPi2B,EAAQhB,EAAOt9B,EAASJ,KyBjkKlCwJ,EAAAA,IAAA,WAAA,WACAk1B,GAAAA,EAAAxyB,UACAhL,EAAA,KACAF,EAAAuH,YCzPA/G,UAAA,gBAAA,WAIA,OACAX,YAAA,WAAA,SAAA0H,GACAud,KAAAA,SAAAvd,O1Bi0KE/G,Q0B7zKFgB,OAAAA,wBAAA,yBAAAwB,SAAA,SAAA,W1B8zKI,G0B7zKJC,GAAAjD,KAAAJ,UACAR,UAAA,0BACAivB,YAAA,QACAnrB,YAAA,QACAtB,UAAA,QACA0F,YAAA,uB1B8zKM9F,iBAAiB,E0B3zKvBxB,WAAAuM,EAEAnN,QAAA8+B,K1B4zKM7P,U0B1zKN8P,E1B2zKMj7B,U0BxzKNlE,E1ByzKM4C,M0BvzKNu8B,E1BwzKM72B,M0BtzKN,E1BwzKItH,M0BpzKJuM,MAAA2xB,SAAAA,SAAAA,G1BqzKM,QAASA,GAAa/5B,G0B/yK5BqE,GAAAA,MAEAxJ,EAAAwB,QAAAQ,UAAApB,EAAAuE,EAEAjC,OADAyG,GAAAomB,EAAA/vB,G1BkzKM,M0B9yKNA,O1BgzKKwJ,U0BhzKLpJ,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,G1BizKI,OACEuJ,SAAU,MACVzG,O0BlzKN1B,E1BmzKMyB,K0BlzKN,SAAA2D,EAAA/E,EAAA7B,EAAA6B,G1BmzKQ,GAAI7B,I0B/yKZkD,MAAA2G,EACArI,QAAAC,EACA6G,MAAA9G,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAA,kBAAAI,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,aAAAA,SAAAA,GACAiI,QAAAlD,UAAA/E,EAAAkI,MAAAC,EAAAA,GAAAnI,EAAAoI,K1BgzKQ,I0B9yKRjK,GAAAkD,e1B+yKQ1B,SAAQC,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASI,GACpEL,QAAQoF,UAAUpB,EAAK3D,KAASgI,EAAiBK,KAAK1E,EAAK3D,MAAO7B,EAAQ6B,IAAO,KAEvFL,Q0B5yKRgE,SAAA,eAAA,SAAA,eAAA,UAAA,SAAA3D,G1B6yKU,G0B5yKV2D,GAAA8hB,KAAAzlB,EAAAkI,OAAAe,GAAAA,cAAAC,EAAAA,MAAAA,EACA7H,SAAArB,UAAAgjB,EAAAA,M1B6yKY7kB,EAAQ6B,GAAOqB,EAAM4c,MAAMta,EAAKsE,O0BvyK5CtI,QAAAgE,SAAA,QAAA,WAAA,SAAA3D,GACAqB,EAAA0H,IACApF,EAAAhE,SAAAkC,EAAAA,SAAAoH,EAAAC,GACAvJ,EAAAA,GAAAQ,EAAAkB,YAAA4H,O1B8yKYtF,E0B1yKZ45B,S1B2yKUl8B,EAAM0H,OAAOpF,EAAK45B,QAAS,SAASt0B,EAAUC,G0BvyKxDs0B,QAAAF,SAAAn/B,GAGAI,QAAAoF,OAAAzB,EAAA+G,GAIAu0B,EAAAA,QAAAnzB,IAEAmzB,E1BsyKQ,IAAIA,GAAQF,EAAOn/B,EACnBI,GAAQoM,GAAGhH,EAAKzB,SAAW,QAASs7B,EAAMna,QAC1ChiB,EAAM8I,IAAI,WAAY,W2Bx4K9BvL,GAAA4+B,EAAAnzB,U3B2lPGsD,EAAQpH,KAhtEDi3B,EAAQ,YAKhB79B,QAAQf,OAAO,kBAAoB,uBAAwB,uBAAwB,uBAAwB,wBAAyB,wBAAyB,4BAA6B,4BAA6B,wBAAyB,yBAA0B,yBAA0B,0BAA2B,2BAA4B,2BAA4B,uBAAwB,qBAAsB,6BACpa+O,OAAQpH","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\r\n'use strict';\r\n\r\n// Source: typeahead\\typeahead1.js\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    var KEY_CODES = {\n      downArrow: 40,\n      enter: 13,\n      escape: 27,\n      upArrow: 38\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n        scope.id = options.id;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        scope.$isActive = function isActive (index) {\n          return scope.$activeIndex === index ? true : undefined;\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        scope.$generateResultId = function (index) {\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          // If the key code isn't up arrow, down arrow, or enter return.\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n            // Navigate with keyboard\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n            setAriaActiveDescendant(scope.$activeIndex);\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n            setAriaActiveDescendant(scope.$activeIndex);\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n            setAriaActiveDescendant();\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              if (options.id) {\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\n                $typeahead.$element.attr('id', options.id + '_listbox');\n                element.attr('aria-controls', options.id + '_listbox');\n\n                var assertDiv = document.getElementById(options.id + '_sr_text');\n                if (!assertDiv) {\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\n                }\n              }\n\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\n\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n\n          var assertDiv = document.getElementById(options.id + '_sr_text');\n          angular.element(assertDiv).remove();\n\n          setAriaActiveDescendant();\n\n          hide();\n        };\n\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\n        $typeahead.$onKeyUp = function (evt) {\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\n            $typeahead.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\n        $typeahead.$onFocusKeyUp = function (evt) {\n          if (evt.which === KEY_CODES.escape) {\n            $typeahead.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        // Helper functions within this closure\n\n        function setAriaActiveDescendant (index) {\n          if (index === undefined || !scope.id) {\n            element.removeAttr('aria-activedescendant');\n          } else {\n            var resultId = scope.$generateResultId(index);\n            if (resultId) {\n              element.attr('aria-activedescendant', resultId);\n            } else {\n              element.removeAttr('aria-activedescendant');\n            }\n          }\n        }\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\n          element.attr('aria-autocomplete', 'list');\n        }\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          element.off('keydown');\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: typeahead\\typeahead.js\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    var KEY_CODES = {\n      downArrow: 40,\n      enter: 13,\n      escape: 27,\n      upArrow: 38\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n        scope.id = options.id;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        scope.$isActive = function isActive (index) {\n          return scope.$activeIndex === index ? true : undefined;\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        scope.$generateResultId = function (index) {\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          // If the key code isn't up arrow, down arrow, or enter return.\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n            // Navigate with keyboard\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n            setAriaActiveDescendant(scope.$activeIndex);\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n            setAriaActiveDescendant(scope.$activeIndex);\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\n          } \n          else if ((evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex == 0) || (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex == scope.$matches.length - 1)) {\n            scope.$activeIndex = -1;\n            var ele = '#' + evt.currentTarget.id;\n            angular.element(ele).val('').val(controller.$viewValue);\n            angular.element(ele).focus();\n          }\n          else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n            setAriaActiveDescendant();\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              if (options.id) {\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\n                $typeahead.$element.attr('id', options.id + '_listbox');\n                element.attr('aria-controls', options.id + '_listbox');\n\n                var assertDiv = document.getElementById(options.id + '_sr_text');\n                if (!assertDiv) {\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\n                }\n              }\n\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\n\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                //event for the element that we attach is added to event queue\n                //before pushing the same event more that once for the same element, event need to detach\n                //list item jumps happening in search list for this setted keydown off\n                if (element) element.off('keydown', $typeahead.$onKeyDown); \n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n\n          var assertDiv = document.getElementById(options.id + '_sr_text');\n          angular.element(assertDiv).remove();\n\n          setAriaActiveDescendant();\n\n          hide();\n        };\n\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\n        $typeahead.$onKeyUp = function (evt) {\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\n            $typeahead.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\n        $typeahead.$onFocusKeyUp = function (evt) {\n          if (evt.which === KEY_CODES.escape) {\n            $typeahead.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        // Helper functions within this closure\n\n        function setAriaActiveDescendant (index) {\n          if (index === undefined || !scope.id) {\n            element.removeAttr('aria-activedescendant');\n          } else {\n            var resultId = scope.$generateResultId(index);\n            if (resultId) {\n              element.attr('aria-activedescendant', resultId);\n            } else {\n              element.removeAttr('aria-activedescendant');\n            }\n          }\n        }\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\n          element.attr('aria-autocomplete', 'list');\n        }\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          element.off('keydown');\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: helpers\\raf.js\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\r\n\r\n// Source: helpers\\parse-options.js\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\r\n\r\n// Source: helpers\\focus-out.js\r\nangular.module('mgcrea.ngStrap.helpers.ngFocusOut', [])\n  .directive('ngFocusOut', ['$parse', '$rootScope', function ($parse, $rootScope) {\n    return {\n      restrict: 'A',\n      compile: function ($element, attr) {\n        // NOTE:\n        // We expose the powerful `$event` object on the scope that provides access to the Window,\n        // etc. This is OK, because expressions are not sandboxed any more (and the expression\n        // sandbox was never meant to be a security feature anyway).\n        var fn = $parse(attr.ngFocusOut);\n\n        return function link (scope, element) {\n          function ngEventHandler (event) {\n            var callback = function () {\n              fn(scope, {\n                $event: event\n              });\n            };\n            if ($rootScope.$$phase) {\n              scope.$evalAsync(callback);\n            } else {\n              scope.$apply(callback);\n            }\n          }\n\n          // setup the handler\n          element.on('focusout', ngEventHandler);\n\n          scope.$on('$destroy', function () {\n            // tear down the handler\n            element.off('focusout', ngEventHandler);\n          });\n        };\n      }\n    };\n  }]);\r\n\r\n// Source: helpers\\focus-element.js\r\nangular.module('mgcrea.ngStrap.helpers.focusElement', [])\n  .directive('focusElement', ['$timeout', '$parse', function ($timeout, $parse) {\n    return {\n      link: function (scope, element, attrs) {\n        scope.$watch(attrs.focusElement, function (value) {\n          if (value === true) {\n            $timeout(function () {\n              element[0].focus();\n            });\n          }\n        });\n      }\n    };\n  }]);\r\n\r\n// Source: helpers\\dimensions.js\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\r\n\r\n// Source: helpers\\debounce.js\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\r\n\r\n// Source: helpers\\date-parser.js\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          if (value.match(/Z/)) {\n            date = new Date(value.substr(1, value.length - 3));\n          } else {\n            date = new Date(value.substr(1, value.length - 2));\n          }\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\r\n\r\n// Source: helpers\\date-formatter.js\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    this.weekdays = function (lang) {\n      return $locale.DATETIME_FORMATS.DAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\r\n\r\n// Source: helpers\\compiler.js\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\r\n\r\n// Source: timepicker\\timepicker.js\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: tooltip\\tooltip.js\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        // var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n              // element.on('blur', $tooltip.leave);\n            } else if (trigger !== 'manual') {\n              // Only bind up hover events if we are on a desktop\n              if (!isTouch) {\n                element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n                element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              }\n\t\t\t  //but do bind focus events for touch\n              else if (trigger === 'focus') {\n                element.on('focus', $tooltip.enter);\n                element.on('blur', $tooltip.leave);\n\t\t\t  }\n\t\t  \n              // if (nodeName === 'button' && trigger !== 'hover') {\n              //   element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              // }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              // Remove previously defined hover events if we are on a desktop\n              if (!isTouch) {\n                element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n                element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              }\n\t\t\t  // Remove previously defined focus events\n              else if (trigger === 'focus') {\n                element.off('focus', $tooltip.enter);\n                element.off('blur', $tooltip.leave);\n\t\t\t  }\n\t\t\t  \n              // if (nodeName === 'button' && trigger !== 'hover') {\n              //   element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              // }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: tab\\tab.js\r\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active',\n      isVertical: false\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['isVertical'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      $scope.$onClick = function $onClick (evt, pane, index) {\n        if (!pane.disabled) {\n          self.$setActive(pane.name || index);\n        }\n\n        evt.preventDefault();\n        evt.stopPropagation();\n      };\n\n      function navigatePane (index, toLeft) {\n        var newIndex = 0;\n\n        if (toLeft) {\n          // Moving to the left\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\n        } else {\n          // Moving to the right\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\n        }\n\n        if (self.$panes[newIndex].disabled) {\n          navigatePane(newIndex, toLeft);\n        } else {\n          self.$setActive(self.$panes[newIndex].name || newIndex);\n        }\n      }\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n\n        self.$panes.push(pane);\n\n        self.$panes.forEach(function (tabPane, index) {\n          // Set an id value for the pane so that it can be used in the template\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\n        });\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          // If space or enter was pressed\n          self.$setActive(name);\n\n          e.preventDefault();\n          e.stopPropagation();\n\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\n          // If the left of right arrow key was pressed.\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\n          // If the left of right arrow key was pressed.\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          $timeout(function () {\n            // get li elements\n            var liElements = element.find('li');\n            for (var i = 0; i < liElements.length; i++) {\n              var iElement = angular.element(liElements[i]);\n              if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\n                // if li is active, set focus to it.\n                iElement.find('a')[0].focus();\n              }\n            }\n            // delay, for the class (.active) change to reflect in DOM.\n          }, 100);\n        });\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Set up the assistive attributes\n        element.attr('role', 'tabpanel');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n        // Save tab id into scope\n        scope.id = attrs.id;\n\n        scope.name = scope.name || scope.id;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // Once the push has occured when can then update the element with some properties.\n        // Update the aria-describedby attribute\n        if (scope.$describedBy !== undefined) {\n          element.attr('aria-describedby', scope.$describedBy);\n        }\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  })\n  \n  .directive('focusOn', function() {\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t\tlink: function(scope, elem, attr) {\n\t\t\t\tscope.$watch(attr.focusOn, function(newValue, oldValue) {\n\t\t\t\t\tnewValue !== oldValue && newValue && elem[0].focus();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t})\r\n\r\n// Source: select\\select.js\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: scrollspy\\scrollspy.js\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\r\n\r\n// Source: popover\\popover.js\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: navbar\\navbar.js\r\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\r\n\r\n// Source: modal\\modal.js\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null,\n      containerElement: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var layoutHideElement = angular.element('#layoutContainer');\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (options.containerElement) {\n          layoutHideElement = angular.element(options.containerElement);\n        }\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        $modal.returnFocus = function () {\n\n        };\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({\n          position: 'fixed',\n          top: '0px',\n          left: '0px',\n          bottom: '0px',\n          right: '0px'\n        });\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({\n              'z-index': dialogBaseZindex + (backdropCount * 20)\n            });\n            backdropElement.css({\n              'z-index': backdropBaseZindex + (backdropCount * 20)\n            });\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({\n            display: 'block'\n          }).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n\n          layoutHideElement.attr('aria-hidden', 'true');\n\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'false');\n\t\t  modalElement.attr('tabindex', '0');\n\t\t  modalElement.focus();\n\n\t\t  if(!modalElement.length || !angular.element(modalElement[0]).hasClass(\"modal\"))\n\t\t  {\n\t\t\tlayoutHideElement.attr('aria-hidden', 'false');\n\t\t\tunbindKeyboardEvents();\n\t\t  }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'true');\n\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n            layoutHideElement.attr('aria-hidden', 'false');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        function findFocusableElements () {\n          // Add all elements we want to include in our selection\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\n          if (document.activeElement) {\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\n              function (element) {\n                // Check for visibility while always include the current activeElement\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\n              });\n\n            return focusable;\n          }\n        }\n\n        function findNextFocusableElement (inReverse) {\n          if (document.activeElement) {\n            var focusable = findFocusableElements();\n            if (focusable === undefined) return;\n            if (inReverse) {\n              focusable = Array.prototype.reverse.call(focusable);\n            }\n\n            var index = focusable.indexOf(document.activeElement);\n            return focusable[index + 1];\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          // Escape was pressed on an open modal. Hide it.  Backspace key, nothing happen.\n          if ((evt.which === 8||evt.which === 27) && $modal.$isShown) {\n            if (evt.which === 27) {\n               $modal.hide();\n            }\n            evt.stopPropagation();\n          }\n        };\n\n        $modal.$onKeyDown = function (evt) {\n          if (options.keyboard) {\n            if (evt.keyCode === 8 && evt.target.tagName!=='TEXTAREA' && evt.target.tagName!=='INPUT') {\n                evt.preventDefault();\n            }\t\t\t\t\n\t\t\t  \n            if (evt.keyCode === 9) {\n\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\n              if (nextFocusable === undefined) {\n                if (evt.preventDefault) evt.preventDefault();\n                if (evt.stopPropagation) evt.stopPropagation();\n\n                var focusable = findFocusableElements();\n                if (evt.shiftKey) {\n                  focusable[focusable.length - 1].focus();\n                } else {\n                  focusable[0].focus();\n                }\n              }\n            }\n          }\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n            modalElement.on('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n            modalElement.off('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {\n          scope: scope,\n          element: element,\n          show: false\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        if (options.keyboard) {\n          modal.returnFocus = function () {\n            element[0].focus();\n          };\n        }\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: dropdown\\dropdown.js\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        if (element && element[0] && element[0].tagName.toUpperCase() === 'BUTTON') {\n          element.attr('aria-haspopup', 'true');\n          element.attr('data-toggle', 'dropdown');\n          element.attr('aria-expanded', 'false');\n          element.attr('role', 'button');\n        }\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if ((/(9)/.test(evt.keyCode) && !options.keyboard) || /27/.test(evt.keyCode)) {\n            $dropdown.hide(/27/.test(evt.keyCode));\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (evt.keyCode === 40 && index === items.length - 1) index = 0;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        $dropdown.$onFocusOut = function (evt) {\n          // find out if the related target's parents contain the datepicker's $element\n          var inMenu = false;\n          var parent = angular.element(evt.relatedTarget);\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n            parent = parent.parent();\n            if (parent !== undefined && parent[0] === $dropdown.$element[0]) {\n              inMenu = true;\n              break;\n            } else {\n              inMenu = false;\n            }\n          }\n\n          if (!inMenu) {\n            $dropdown.hide();\n          } else {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Set assistive technology properties\n            element.attr('aria-expanded', 'true');\n            if ($dropdown.$element) {\n              $dropdown.$element.attr('aria-hidden', 'false');\n              $dropdown.$element.attr('role', 'menu');\n              $dropdown.$element.attr('tabindex', '-1');\n            }\n            if (options.keyboard && $dropdown.$element) {\n              $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n              $dropdown.$element.on('focusout', $dropdown.$onFocusOut);\n            }\n\n            bodyEl.on('click', onBodyClick);\n\n            if ($dropdown.$element) {\n              var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider)'));\n              items.attr('role', 'presentation');\n\n              angular.element($dropdown.$element[0].querySelectorAll('li.divider')).attr('role', 'seperator');\n\n              items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n              items.attr('role', 'menuitem');\n              if (items.length && options.keyboard) {\n                items[0].focus();\n              }\n            }\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function (returnFocus) {\n          if (!$dropdown.$isShown) return;\n\n          element.attr('aria-expanded', 'false');\n          $dropdown.$element.attr('aria-hidden', 'true');\n\n          if (options.keyboard && $dropdown.$element) {\n            $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n            $dropdown.$element.off('focusout', $dropdown.$onFocusOut);\n          }\n\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          $timeout(function () {\n            hide();\n            if (returnFocus) {\n              $timeout(function () {\n                if (element && element[0]) {\n                  element[0].focus();\n                }\n              }, 0, false);\n            }\n          }, 200);\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return undefined;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\r\n\r\n// Source: datepicker\\datepicker.js\r\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      // The format that will be given to the screen reader values placed in the DOM.\n      screenReaderDateFormat: 'fullDate',\n      // Focuses the table element in the dropdown upon display of the picker.\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\n      focusOnOpen: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\n        // defaults and the configuration passed.\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // Add assistive technology helper attributes.\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\n\n        // View vars\n\n        // Initialize the datepicker view collection by passing a reference to the base object.\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        /*\n         * View mode for the date picker.\n         * 0: days\n         * 1: months\n         * 2: years\n         */\n        scope.$mode = options.startView;\n        // icon class override\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        // Show buttons at the bottom of the picker.\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        /*\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\n         * aria attributes which are linked via ids.\n         */\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\n        scope.keyboard = options.keyboard;\n        scope.focusOnOpen = options.focusOnOpen;\n\n        // labels\n        scope.$nextLabel = options.labelNext;\n        scope.$previousLabel = options.labelPrevious;\n\n        // This is the actual current picker view.\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Internal handlers\n\n        function handleOnKeyDown (evt, apply) {\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\n            return false;\n          }\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n              if (options.focusOnOpen) return true;\n            } else {\n              if (apply === undefined || apply) {\n                scope.$apply(function () {\n                  $datepicker.setMode(scope.$mode - 1);\n                });\n              } else {\n                $datepicker.setMode(scope.$mode - 1);\n              }\n            }\n            return false;\n          }\n\n          return true;\n        }\n\n        // Scope methods\n\n        /**\n         * Pass through from the scope to the provider for the selection of a date.\n         */\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n        scope.$focused = function (dayInfo) {\n          scope.selectedDayId = dayInfo.id;\n          if (dayInfo.isNext && !scope.selected) {\n            if (scope.$mode) {\n              $datepicker.update(dayInfo.date);\n            } else {\n              scope.$select(dayInfo.date);\n            }\n          }\n        };\n        scope.$onKeyDown = function (evt, day) {\n          var continueHandling = handleOnKeyDown(evt, false);\n\n          if (continueHandling) {\n            // Navigate with keyboard\n            $picker.onKeyDown(evt);\n          }\n        };\n        scope.$onFocusOut = function (evt) {\n          // find out if the related target's parents contain the datepicker's $element\n          var inTable = false;\n          var parent = angular.element(evt.relatedTarget);\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n            parent = parent.parent();\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\n              inTable = true;\n              break;\n            } else {\n              inTable = false;\n            }\n          }\n\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\n          //\n\n          if (!inTable && !evt.relatedTarget) {\n            // hmm\n          } else if (!inTable) {\n            $datepicker.hide();\n          } else {\n            evt.stopPropagation();\n            evt.preventDefault();\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () {\n                $datepicker.hide(true);\n              });\n            }\n          } else {\n            angular.extend(viewDate, {\n              year: date.getFullYear(),\n              month: date.getMonth(),\n              date: date.getDate()\n            });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        /**\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\n         * rebuilt. The views are days, months, and years.\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\n         */\n        $datepicker.setMode = function setMode (mode) {\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          // The picker has been changed so the view needs to be built.\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        /**\n         * Builds the datepicker's view based on the picker that is currently set.\n         */\n        $datepicker.$build = function $build (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], function (day) {\n              updateSelected(day);\n              if (day.selected) scope.selected = day;\n            });\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {\n            year: targetDate.getUTCFullYear(),\n            month: targetDate.getUTCMonth(),\n            date: targetDate.getUTCDate()\n          });\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        /**\n         * Handles the onKeyDown event from the element that this datepicker is bound.\n         * In the standard case this will be an input element. If the trigger is set\n         * to click and is bound to a button then it is likely we're servicing a 508\n         * type situation where the implementation will no longer uses. Focus will be\n         * given to the table.\n         */\n        $datepicker.$onKeyDown = function (evt) {\n          var continueHandling = handleOnKeyDown(evt);\n\n          if (continueHandling) {\n            // Navigate with keyboard\n            $picker.onKeyDown(evt);\n            parentScope.$digest();\n          }\n        };\n\n        // $datepicker.$onFocusOut = function (evt) {\n        //   // find out if the related target's parents contain the datepicker's $element\n        //   var inTable = false;\n        //   var parent = angular.element(evt.relatedTarget);\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n        //     parent = parent.parent();\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\n        //       inTable = true;\n        //       break;\n        //     } else {\n        //       inTable = false;\n        //     }\n        //   }\n\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\n        //   //\n\n        //   if (!inTable && !evt.relatedTarget) {\n        //     // hmm\n        //   } else if (!inTable) {\n        //     $datepicker.hide();\n        //   } else {\n        //     evt.stopPropagation();\n        //     evt.preventDefault();\n        //   }\n        // };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n          el.focused = el.selected;\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        // The datepicker will override the init functionality of the tool\n        var _init = $datepicker.init;\n        /**\n         * Initialize the datepicker.\n         */\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\n        var _destroy = $datepicker.destroy;\n\n        /**\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\n         */\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\n        // is to be shown.\n        var _show = $datepicker.show;\n\n        /**\n         * Override for the tooltip's show function.\n         *\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\n         * Once shown it sets up the appropriate events.\n         */\n        $datepicker.show = function show () {\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n\n          // Call the \"overriden base\" function on the tooltip.\n          _show();\n\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n\n            // Update assistive technologies for view changes:\n            $datepicker.$element.attr('aria-hidden', 'false');\n            element.attr('aria-expanded', 'true');\n\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\n            // If keyboard navigation is enabled (true by default).\n            if (options.keyboard) {\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\n              // Check to see if the table element should receive the focus when the picker is shown.\n              if (options.focusOnOpen) {\n                // Focus the table element.\n                // $datepicker.$element.find('table')[0].focus();\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\n              } else {\n                element.on('keydown', $datepicker.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\n        // is to be hidden.\n        var _hide = $datepicker.hide;\n\n        /**\n         * Overrid efor the tooltip's hide function.\n         *\n         * Updates attributes for assistive technologies and unbinds events.\n         */\n        $datepicker.hide = function (blur) {\n          // If the picker is already hidden don't do anything.\n          if (!$datepicker.$isShown) return;\n\n          // Update the attributes used by assisteive technologies\n          $datepicker.$element.attr('aria-hidden', 'true');\n          element.attr('aria-expanded', 'false');\n\n          // Unbind the mouse and touch events\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\n          // If keyboard events were bound then unbind them.\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\n          }\n          if (options.focusOnOpen) {\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\n            element[0].focus();\n          }\n          // Call the tooltip's hide function.\n          _hide(blur);\n        };\n\n        return $datepicker;\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\n    return {\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        options = angular.extend({}, $datepicker.defaults, options);\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              options[key] = dateParser.getDateForAttribute(key, newValue);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            options.dateFormat = newValue;\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n\n          return date === null ? null : new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n\n          return getDateFormattedString();\n        });\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n      }\n    };\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLong = $dateFormatter.weekdays(lang);\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n\n        var weekDaysLabelsHtml = '';\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\n          var weekDayShortLabel = weekDaysShortLabels[i];\n          var weekDayLabel = weekDaysLongLabels[i];\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\n        }\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {\n          year: startDate.getFullYear(),\n          month: startDate.getMonth(),\n          date: startDate.getDate()\n        };\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {\n            month: 1\n          },\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\n              // in $datepicker.$selectPane, so picker would not update selected day display if\n              // user picks first day of the new month.\n              // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n            // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            var selectedDay;\n            var todayDay;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              // push the day information onto the collection\n              var dayItem = {\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\n                date: day,\n                value: day.getDate(),\n                isToday: day.toDateString() === today,\n                label: formatDate(day, this.format),\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\n                selected: picker.$date && this.isSelected(day),\n                muted: day.getMonth() !== viewDate.month,\n                disabled: this.isDisabled(day)\n              };\n\n              if (dayItem.selected) selectedDay = dayItem;\n              if (dayItem.isToday) todayDay = dayItem;\n\n              days.push(dayItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedDay) {\n                scope.selectedDayId = selectedDay.id;\n                if (todayDay) todayDay.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedDay.focused = true;\n                scope.selected = selectedDay;\n              } else if (todayDay) {\n                todayDay.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            scope.hasSelectedDate = picker.$date != null;\n            scope.$modeLabel = options.labelMonth;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\n              date.getMonth() === picker.$date.getMonth() &&\n              date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n            // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n            // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n            // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            var actualTime;\n\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date) {\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\n                picker.$date = new Date();\n              } else {\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\n              }\n            }\n\n            if (!picker.$date) {\n              return false;\n            }\n\n            actualTime = picker.$date.getTime();\n\n            var newDate;\n\n            switch (evt.keyCode) {\n              // enter\n              case 13:\n                if (options.focusOnOpen) {\n                  picker.select(new Date(actualTime), true);\n                  return false;\n                }\n                break;\n                // pageup\n              case 33:\n                if (evt.altKey) { // move back a year\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\n                } else { // move back a month\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\n                  }\n                }\n                break;\n\n                // pagedown\n              case 34:\n                if (evt.altKey) { // move forward a year\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\n                } else { // move forward a month\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\n                  }\n                }\n\n                break;\n\n                // left arrow\n              case 37:\n                newDate = new Date(actualTime - 1 * 864e5);\n                break;\n\n                // up arrow\n              case 38:\n                newDate = new Date(actualTime - 7 * 864e5);\n                break;\n\n                // right arrow\n              case 39:\n                newDate = new Date(actualTime + 1 * 864e5);\n                break;\n\n                // down arrow\n              case 40:\n                newDate = new Date(actualTime + 7 * 864e5);\n                break;\n\n              default:\n                return false;\n            }\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n\n            if (evt && evt.stopPropagation) evt.stopPropagation();\n\n            return false;\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {\n            year: 1\n          },\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\n            var selectedMonth;\n            var thisMonth;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n\n              var monthItem = {\n                date: month,\n                label: formatDate(month, this.format),\n                selected: picker.$isSelected(month),\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\n                disabled: this.isDisabled(month)\n              };\n\n              if (monthItem.selected) selectedMonth = monthItem;\n              if (monthItem.isToday) thisMonth = monthItem;\n\n              months.push(monthItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedMonth) {\n                scope.selectedDayId = selectedMonth.id;\n                if (thisMonth) thisMonth.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedMonth.focused = true;\n                scope.selected = selectedMonth;\n              } else if (thisMonth) {\n                thisMonth.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.$modeLabel = options.labelYear;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date &&\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\n            }\n\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {\n            year: 12\n          },\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            var selectedYear;\n            var thisYear;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n\n              var yearItem = {\n                date: year,\n                label: formatDate(year, this.format),\n                selected: picker.$isSelected(year),\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\n                disabled: this.isDisabled(year)\n              };\n\n              if (yearItem.selected) selectedYear = yearItem;\n              if (yearItem.isToday) thisYear = yearItem;\n\n              years.push(yearItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedYear) {\n                scope.selectedDayId = selectedYear.id;\n                if (thisYear) thisYear.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedYear.focused = true;\n                scope.selected = selectedYear;\n              } else if (thisYear) {\n                thisYear.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.$modelLabel = options.labelDays;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date &&\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\n            }\n\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\r\n\r\n// Source: collapse\\collapse.js\r\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n        element.attr('aria-expanded', 'false');\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n\n        var i = 0;\n        if (self.$targets) {\n          for (i = 0; i < self.$targets.length; i++) {\n            self.$targets[i].attr('aria-hidden', 'true');\n          }\n          for (i = 0; i < self.$targets.$active.length; i++) {\n            if (self.$targets[self.$targets.$active[i]]) {\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\n            }\n            if (self.$toggles[self.$targets.$active[i]]) {\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\n            }\n          }\n        }\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\n          }\n          if (self.$toggles[self.$targets.$active[0]]) {\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\n          }\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\n          }\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\n          }\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n    var KEY_CODES = {\n      ENTER: 13,\n      SPACE: 32\n    };\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\n            console.log('key handler handling');\n            actionEventHandler();\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\r\n\r\n// Source: button\\button.js\r\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\r\n\r\n// Source: alert\\alert.js\r\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true,\n\t  focusMeDisabled: false\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\t\t\n\t\t$alert.returnFocus = function() {\n\t\t\tfunction findFocusableElements() {\n\t\t\t\tvar containerEl = angular.element($alert.$element).closest('[ng-controller]');\n\t\t\t\t\n\t\t\t\treturn containerEl.find('a:not([disabled]),button:not([disabled]),input:not([disabled]),select:not([disabled]),[tabindex]:not([disabled]):not([tabindex=\"-1\"])').filter(function (i,el) {\n\t\t\t\t\treturn !angular.element(el).parentsUntil(containerEl, '[tabindex=\"-1\"]').length\n\t\t\t\t});\n\t\t\t}\n\t\t\tfunction findNextFocusableElement() {\n\t\t\t\tif (document.activeElement) {\n\t\t\t\t\tvar focusable = findFocusableElements().toArray();\n\t\t\t\t\tif (focusable === undefined) return;\n\t\t\t\t\tvar index = focusable.indexOf(document.activeElement);\n\t\t\t\t\treturn focusable[index + 1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tangular.element(findNextFocusableElement()).focus();\n\n\n\t\t}\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\t\tif (options.focusMeDisabled) {\n          $alert.$scope.focusMeDisabled = options.focusMeDisabled;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: affix\\affix.js\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\r\n\r\n// Source: aside\\aside.js\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: module.js\r\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\r\n\r\n})(window, document);\r\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    var KEY_CODES = {\n      downArrow: 40,\n      enter: 13,\n      escape: 27,\n      upArrow: 38\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n        scope.id = options.id;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        scope.$isActive = function isActive (index) {\n          return scope.$activeIndex === index ? true : undefined;\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        scope.$generateResultId = function (index) {\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          // If the key code isn't up arrow, down arrow, or enter return.\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n            // Navigate with keyboard\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n            setAriaActiveDescendant(scope.$activeIndex);\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n            setAriaActiveDescendant(scope.$activeIndex);\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n            setAriaActiveDescendant();\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              if (options.id) {\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\n                $typeahead.$element.attr('id', options.id + '_listbox');\n                element.attr('aria-controls', options.id + '_listbox');\n\n                var assertDiv = document.getElementById(options.id + '_sr_text');\n                if (!assertDiv) {\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\n                }\n              }\n\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\n\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n\n          var assertDiv = document.getElementById(options.id + '_sr_text');\n          angular.element(assertDiv).remove();\n\n          setAriaActiveDescendant();\n\n          hide();\n        };\n\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\n        $typeahead.$onKeyUp = function (evt) {\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\n            $typeahead.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\n        $typeahead.$onFocusKeyUp = function (evt) {\n          if (evt.which === KEY_CODES.escape) {\n            $typeahead.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        // Helper functions within this closure\n\n        function setAriaActiveDescendant (index) {\n          if (index === undefined || !scope.id) {\n            element.removeAttr('aria-activedescendant');\n          } else {\n            var resultId = scope.$generateResultId(index);\n            if (resultId) {\n              element.attr('aria-activedescendant', resultId);\n            } else {\n              element.removeAttr('aria-activedescendant');\n            }\n          }\n        }\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\n          element.attr('aria-autocomplete', 'list');\n        }\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          element.off('keydown');\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    var KEY_CODES = {\n      downArrow: 40,\n      enter: 13,\n      escape: 27,\n      upArrow: 38\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n        scope.id = options.id;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        scope.$isActive = function isActive (index) {\n          return scope.$activeIndex === index ? true : undefined;\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        scope.$generateResultId = function (index) {\n          return scope.id ? scope.id + '_typeahead_result_' + index : undefined;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          // If the key code isn't up arrow, down arrow, or enter return.\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === KEY_CODES.enter && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === KEY_CODES.enter && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n            // Navigate with keyboard\n          } else if (evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n            setAriaActiveDescendant(scope.$activeIndex);\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\n          } else if (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n            setAriaActiveDescendant(scope.$activeIndex);\n            angular.element(document.getElementById(options.id + '_sr_text')).html(scope.$matches[scope.$activeIndex].label);\n          } \n          else if ((evt.keyCode === KEY_CODES.upArrow && scope.$activeIndex == 0) || (evt.keyCode === KEY_CODES.downArrow && scope.$activeIndex == scope.$matches.length - 1)) {\n            scope.$activeIndex = -1;\n            var ele = '#' + evt.currentTarget.id;\n            angular.element(ele).val('').val(controller.$viewValue);\n            angular.element(ele).focus();\n          }\n          else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n            setAriaActiveDescendant();\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              if (options.id) {\n                // Set the id on the \"dropdown\" component of the typeahead. The input should \"control\" this element.\n                $typeahead.$element.attr('id', options.id + '_listbox');\n                element.attr('aria-controls', options.id + '_listbox');\n\n                var assertDiv = document.getElementById(options.id + '_sr_text');\n                if (!assertDiv) {\n                  $typeahead.$element.parent().append('<div id=\"' + options.id + '_sr_text\" aria-live=\"assertive\" style=\"position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0;\"></div>');\n                }\n              }\n\n              // If the input was given an aria-labelledby attribute apply it to the \"dropdown\" component.\n              $typeahead.$element.attr('aria-labelledby', options.ariaLabelledby);\n\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                //event for the element that we attach is added to event queue\n                //before pushing the same event more that once for the same element, event need to detach\n                //list item jumps happening in search list for this setted keydown off\n                if (element) element.off('keydown', $typeahead.$onKeyDown); \n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n\n          var assertDiv = document.getElementById(options.id + '_sr_text');\n          angular.element(assertDiv).remove();\n\n          setAriaActiveDescendant();\n\n          hide();\n        };\n\n        var onKeyUp = $typeahead.$onKeyUp; // eslint-disable-line no-unused-vars\n        $typeahead.$onKeyUp = function (evt) {\n          if (evt.which === KEY_CODES.escape && $typeahead.$isShown) {\n            $typeahead.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        var onFocusKeyUp = $typeahead.$onFocusKeyUp; // eslint-disable-line no-unused-vars\n        $typeahead.$onFocusKeyUp = function (evt) {\n          if (evt.which === KEY_CODES.escape) {\n            $typeahead.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        // Helper functions within this closure\n\n        function setAriaActiveDescendant (index) {\n          if (index === undefined || !scope.id) {\n            element.removeAttr('aria-activedescendant');\n          } else {\n            var resultId = scope.$generateResultId(index);\n            if (resultId) {\n              element.attr('aria-activedescendant', resultId);\n            } else {\n              element.removeAttr('aria-activedescendant');\n            }\n          }\n        }\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass', 'ariaLabelledby'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        if (!element.attr('aria-autocomplete') && !bsOptions.templateUrl) {\n          // Per draft spec for a combobox element the aria-auto complete should be set to a list.\n          element.attr('aria-autocomplete', 'list');\n        }\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          element.off('keydown');\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.ngFocusOut', [])\n  .directive('ngFocusOut', ['$parse', '$rootScope', function ($parse, $rootScope) {\n    return {\n      restrict: 'A',\n      compile: function ($element, attr) {\n        // NOTE:\n        // We expose the powerful `$event` object on the scope that provides access to the Window,\n        // etc. This is OK, because expressions are not sandboxed any more (and the expression\n        // sandbox was never meant to be a security feature anyway).\n        var fn = $parse(attr.ngFocusOut);\n\n        return function link (scope, element) {\n          function ngEventHandler (event) {\n            var callback = function () {\n              fn(scope, {\n                $event: event\n              });\n            };\n            if ($rootScope.$$phase) {\n              scope.$evalAsync(callback);\n            } else {\n              scope.$apply(callback);\n            }\n          }\n\n          // setup the handler\n          element.on('focusout', ngEventHandler);\n\n          scope.$on('$destroy', function () {\n            // tear down the handler\n            element.off('focusout', ngEventHandler);\n          });\n        };\n      }\n    };\n  }]);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.focusElement', [])\n  .directive('focusElement', ['$timeout', '$parse', function ($timeout, $parse) {\n    return {\n      link: function (scope, element, attrs) {\n        scope.$watch(attrs.focusElement, function (value) {\n          if (value === true) {\n            $timeout(function () {\n              element[0].focus();\n            });\n          }\n        });\n      }\n    };\n  }]);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          if (value.match(/Z/)) {\n            date = new Date(value.substr(1, value.length - 3));\n          } else {\n            date = new Date(value.substr(1, value.length - 2));\n          }\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    this.weekdays = function (lang) {\n      return $locale.DATETIME_FORMATS.DAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        // var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n              // element.on('blur', $tooltip.leave);\n            } else if (trigger !== 'manual') {\n              // Only bind up hover events if we are on a desktop\n              if (!isTouch) {\n                element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n                element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              }\n\t\t\t  //but do bind focus events for touch\n              else if (trigger === 'focus') {\n                element.on('focus', $tooltip.enter);\n                element.on('blur', $tooltip.leave);\n\t\t\t  }\n\t\t  \n              // if (nodeName === 'button' && trigger !== 'hover') {\n              //   element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              // }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              // Remove previously defined hover events if we are on a desktop\n              if (!isTouch) {\n                element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n                element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              }\n\t\t\t  // Remove previously defined focus events\n              else if (trigger === 'focus') {\n                element.off('focus', $tooltip.enter);\n                element.off('blur', $tooltip.leave);\n\t\t\t  }\n\t\t\t  \n              // if (nodeName === 'button' && trigger !== 'hover') {\n              //   element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              // }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active',\n      isVertical: false\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs, $timeout) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass', 'id', 'isVertical'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['isVertical'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) self.$options[key] = false;\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      $scope.$onClick = function $onClick (evt, pane, index) {\n        if (!pane.disabled) {\n          self.$setActive(pane.name || index);\n        }\n\n        evt.preventDefault();\n        evt.stopPropagation();\n      };\n\n      function navigatePane (index, toLeft) {\n        var newIndex = 0;\n\n        if (toLeft) {\n          // Moving to the left\n          newIndex = index - 1 < 0 ? (self.$panes.length - 1) : (index - 1);\n        } else {\n          // Moving to the right\n          newIndex = (index + 1) >= self.$panes.length ? 0 : (index + 1);\n        }\n\n        if (self.$panes[newIndex].disabled) {\n          navigatePane(newIndex, toLeft);\n        } else {\n          self.$setActive(self.$panes[newIndex].name || newIndex);\n        }\n      }\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n\n        self.$panes.push(pane);\n\n        self.$panes.forEach(function (tabPane, index) {\n          // Set an id value for the pane so that it can be used in the template\n          tabPane.$describedBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index;\n          tabPane.$labeledBy = self.$options.id === undefined ? undefined : self.$options.id + '_$tab_' + index + '_a';\n        });\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, name, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          // If space or enter was pressed\n          self.$setActive(name);\n\n          e.preventDefault();\n          e.stopPropagation();\n\n        } else if (!self.$options.isVertical && (e.keyCode === 37 || e.charCode === 37 || e.keyCode === 39 || e.charCode === 39)) {\n          // If the left of right arrow key was pressed.\n          navigatePane(index, (e.keyCode === 37 || e.charCode === 37));\n        } else if (self.$options.isVertical && (e.keyCode === 38 || e.charCode === 38 || e.keyCode === 40 || e.charCode === 40)) {\n          // If the left of right arrow key was pressed.\n          navigatePane(index, (e.keyCode === 38 || e.charCode === 38));\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse, $timeout) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', '$timeout', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          $timeout(function () {\n            // get li elements\n            var liElements = element.find('li');\n            for (var i = 0; i < liElements.length; i++) {\n              var iElement = angular.element(liElements[i]);\n              if (iElement.hasClass(bsTabsCtrl.$options.activeClass)) {\n                // if li is active, set focus to it.\n                iElement.find('a')[0].focus();\n              }\n            }\n            // delay, for the class (.active) change to reflect in DOM.\n          }, 100);\n        });\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Set up the assistive attributes\n        element.attr('role', 'tabpanel');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n        // Save tab id into scope\n        scope.id = attrs.id;\n\n        scope.name = scope.name || scope.id;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // Once the push has occured when can then update the element with some properties.\n        // Update the aria-describedby attribute\n        if (scope.$describedBy !== undefined) {\n          element.attr('aria-describedby', scope.$describedBy);\n        }\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  })\n  \n  .directive('focusOn', function() {\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t\tlink: function(scope, elem, attr) {\n\t\t\t\tscope.$watch(attr.focusOn, function(newValue, oldValue) {\n\t\t\t\t\tnewValue !== oldValue && newValue && elem[0].focus();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t})\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null,\n      containerElement: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var layoutHideElement = angular.element('#layoutContainer');\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (options.containerElement) {\n          layoutHideElement = angular.element(options.containerElement);\n        }\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        $modal.returnFocus = function () {\n\n        };\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({\n          position: 'fixed',\n          top: '0px',\n          left: '0px',\n          bottom: '0px',\n          right: '0px'\n        });\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({\n              'z-index': dialogBaseZindex + (backdropCount * 20)\n            });\n            backdropElement.css({\n              'z-index': backdropBaseZindex + (backdropCount * 20)\n            });\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({\n            display: 'block'\n          }).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n\n          layoutHideElement.attr('aria-hidden', 'true');\n\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'false');\n\t\t  modalElement.attr('tabindex', '0');\n\t\t  modalElement.focus();\n\n\t\t  if(!modalElement.length || !angular.element(modalElement[0]).hasClass(\"modal\"))\n\t\t  {\n\t\t\tlayoutHideElement.attr('aria-hidden', 'false');\n\t\t\tunbindKeyboardEvents();\n\t\t  }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          modalElement.attr('aria-hidden', 'true');\n\n          if ($modal.returnFocus && typeof $modal.returnFocus === 'function') $modal.returnFocus();\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n            layoutHideElement.attr('aria-hidden', 'false');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        function findFocusableElements () {\n          // Add all elements we want to include in our selection\n          var focusableElements = 'a:not([disabled]), button:not([disabled]), input:not([disabled]), [tabindex]:not([disabled]):not([tabindex=\"-1\"])';\n          if (document.activeElement) {\n            var focusable = Array.prototype.filter.call(modalElement[0].querySelectorAll(focusableElements),\n              function (element) {\n                // Check for visibility while always include the current activeElement\n                return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement;\n              });\n\n            return focusable;\n          }\n        }\n\n        function findNextFocusableElement (inReverse) {\n          if (document.activeElement) {\n            var focusable = findFocusableElements();\n            if (focusable === undefined) return;\n            if (inReverse) {\n              focusable = Array.prototype.reverse.call(focusable);\n            }\n\n            var index = focusable.indexOf(document.activeElement);\n            return focusable[index + 1];\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          // Escape was pressed on an open modal. Hide it.  Backspace key, nothing happen.\n          if ((evt.which === 8||evt.which === 27) && $modal.$isShown) {\n            if (evt.which === 27) {\n               $modal.hide();\n            }\n            evt.stopPropagation();\n          }\n        };\n\n        $modal.$onKeyDown = function (evt) {\n          if (options.keyboard) {\n            if (evt.keyCode === 8 && evt.target.tagName!=='TEXTAREA' && evt.target.tagName!=='INPUT') {\n                evt.preventDefault();\n            }\t\t\t\t\n\t\t\t  \n            if (evt.keyCode === 9) {\n\n              var nextFocusable = findNextFocusableElement(evt.shiftKey);\n              if (nextFocusable === undefined) {\n                if (evt.preventDefault) evt.preventDefault();\n                if (evt.stopPropagation) evt.stopPropagation();\n\n                var focusable = findFocusableElements();\n                if (evt.shiftKey) {\n                  focusable[focusable.length - 1].focus();\n                } else {\n                  focusable[0].focus();\n                }\n              }\n            }\n          }\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n            modalElement.on('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n            modalElement.off('keydown', $modal.$onKeyDown);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {\n          scope: scope,\n          element: element,\n          show: false\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        if (options.keyboard) {\n          modal.returnFocus = function () {\n            element[0].focus();\n          };\n        }\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        if (element && element[0] && element[0].tagName.toUpperCase() === 'BUTTON') {\n          element.attr('aria-haspopup', 'true');\n          element.attr('data-toggle', 'dropdown');\n          element.attr('aria-expanded', 'false');\n          element.attr('role', 'button');\n        }\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if ((/(9)/.test(evt.keyCode) && !options.keyboard) || /27/.test(evt.keyCode)) {\n            $dropdown.hide(/27/.test(evt.keyCode));\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (evt.keyCode === 40 && index === items.length - 1) index = 0;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        $dropdown.$onFocusOut = function (evt) {\n          // find out if the related target's parents contain the datepicker's $element\n          var inMenu = false;\n          var parent = angular.element(evt.relatedTarget);\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n            parent = parent.parent();\n            if (parent !== undefined && parent[0] === $dropdown.$element[0]) {\n              inMenu = true;\n              break;\n            } else {\n              inMenu = false;\n            }\n          }\n\n          if (!inMenu) {\n            $dropdown.hide();\n          } else {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Set assistive technology properties\n            element.attr('aria-expanded', 'true');\n            if ($dropdown.$element) {\n              $dropdown.$element.attr('aria-hidden', 'false');\n              $dropdown.$element.attr('role', 'menu');\n              $dropdown.$element.attr('tabindex', '-1');\n            }\n            if (options.keyboard && $dropdown.$element) {\n              $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n              $dropdown.$element.on('focusout', $dropdown.$onFocusOut);\n            }\n\n            bodyEl.on('click', onBodyClick);\n\n            if ($dropdown.$element) {\n              var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider)'));\n              items.attr('role', 'presentation');\n\n              angular.element($dropdown.$element[0].querySelectorAll('li.divider')).attr('role', 'seperator');\n\n              items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n              items.attr('role', 'menuitem');\n              if (items.length && options.keyboard) {\n                items[0].focus();\n              }\n            }\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function (returnFocus) {\n          if (!$dropdown.$isShown) return;\n\n          element.attr('aria-expanded', 'false');\n          $dropdown.$element.attr('aria-hidden', 'true');\n\n          if (options.keyboard && $dropdown.$element) {\n            $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n            $dropdown.$element.off('focusout', $dropdown.$onFocusOut);\n          }\n\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          $timeout(function () {\n            hide();\n            if (returnFocus) {\n              $timeout(function () {\n                if (element && element[0]) {\n                  element[0].focus();\n                }\n              }, 0, false);\n            }\n          }, 200);\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return undefined;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.helpers.focusElement', 'mgcrea.ngStrap.helpers.ngFocusOut', 'mgcrea.ngStrap.tooltip'])\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right',\n      // The format that will be given to the screen reader values placed in the DOM.\n      screenReaderDateFormat: 'fullDate',\n      // Focuses the table element in the dropdown upon display of the picker.\n      // Used mainly in 508 situations when a button is pressed via a keyboard to show the calendar.\n      focusOnOpen: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        // The datepicker is based on the tooltip control. Build a basic tooltip from the\n        // defaults and the configuration passed.\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // Add assistive technology helper attributes.\n        element.attr('aria-expanded', 'false').attr('aria-haspopup', 'true');\n\n        // View vars\n\n        // Initialize the datepicker view collection by passing a reference to the base object.\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        /*\n         * View mode for the date picker.\n         * 0: days\n         * 1: months\n         * 2: years\n         */\n        scope.$mode = options.startView;\n        // icon class override\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        // Show buttons at the bottom of the picker.\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        /*\n         * An id on the element is necessary when working with assistive technologies. The view will use the id to build out the\n         * aria attributes which are linked via ids.\n         */\n        scope.id = options.id !== null && options.id !== undefined ? options.id : undefined;\n        scope.dropdownId = options.id !== null && options.id !== undefined ? (options.id + '_dropdown') : undefined;\n        scope.keyboard = options.keyboard;\n        scope.focusOnOpen = options.focusOnOpen;\n\n        // labels\n        scope.$nextLabel = options.labelNext;\n        scope.$previousLabel = options.labelPrevious;\n\n        // This is the actual current picker view.\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Internal handlers\n\n        function handleOnKeyDown (evt, apply) {\n          if (!/(33|34|38|37|39|40|13)/.test(evt.keyCode) &&\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.shiftKey) &&\n            !(/(33|34|38|37|39|40|13)/.test(evt.keyCode) && evt.altKey)) {\n            return false;\n          }\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n              if (options.focusOnOpen) return true;\n            } else {\n              if (apply === undefined || apply) {\n                scope.$apply(function () {\n                  $datepicker.setMode(scope.$mode - 1);\n                });\n              } else {\n                $datepicker.setMode(scope.$mode - 1);\n              }\n            }\n            return false;\n          }\n\n          return true;\n        }\n\n        // Scope methods\n\n        /**\n         * Pass through from the scope to the provider for the selection of a date.\n         */\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n        scope.$focused = function (dayInfo) {\n          scope.selectedDayId = dayInfo.id;\n          if (dayInfo.isNext && !scope.selected) {\n            if (scope.$mode) {\n              $datepicker.update(dayInfo.date);\n            } else {\n              scope.$select(dayInfo.date);\n            }\n          }\n        };\n        scope.$onKeyDown = function (evt, day) {\n          var continueHandling = handleOnKeyDown(evt, false);\n\n          if (continueHandling) {\n            // Navigate with keyboard\n            $picker.onKeyDown(evt);\n          }\n        };\n        scope.$onFocusOut = function (evt) {\n          // find out if the related target's parents contain the datepicker's $element\n          var inTable = false;\n          var parent = angular.element(evt.relatedTarget);\n          while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n            parent = parent.parent();\n            if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\n              inTable = true;\n              break;\n            } else {\n              inTable = false;\n            }\n          }\n\n          // In Chrome there is an issue when moving from month to month, year to year, etc.\n          //\n\n          if (!inTable && !evt.relatedTarget) {\n            // hmm\n          } else if (!inTable) {\n            $datepicker.hide();\n          } else {\n            evt.stopPropagation();\n            evt.preventDefault();\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () {\n                $datepicker.hide(true);\n              });\n            }\n          } else {\n            angular.extend(viewDate, {\n              year: date.getFullYear(),\n              month: date.getMonth(),\n              date: date.getDate()\n            });\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        /**\n         * This changes the mode of the picker. By setting the mode the view for the picker will be\n         * rebuilt. The views are days, months, and years.\n         * @param {int} mode View mode for the datepicker. 0: day view, 1: month view, 2: year view.\n         */\n        $datepicker.setMode = function setMode (mode) {\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          // The picker has been changed so the view needs to be built.\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        /**\n         * Builds the datepicker's view based on the picker that is currently set.\n         */\n        $datepicker.$build = function $build (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], function (day) {\n              updateSelected(day);\n              if (day.selected) scope.selected = day;\n            });\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {\n            year: targetDate.getUTCFullYear(),\n            month: targetDate.getUTCMonth(),\n            date: targetDate.getUTCDate()\n          });\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        /**\n         * Handles the onKeyDown event from the element that this datepicker is bound.\n         * In the standard case this will be an input element. If the trigger is set\n         * to click and is bound to a button then it is likely we're servicing a 508\n         * type situation where the implementation will no longer uses. Focus will be\n         * given to the table.\n         */\n        $datepicker.$onKeyDown = function (evt) {\n          var continueHandling = handleOnKeyDown(evt);\n\n          if (continueHandling) {\n            // Navigate with keyboard\n            $picker.onKeyDown(evt);\n            parentScope.$digest();\n          }\n        };\n\n        // $datepicker.$onFocusOut = function (evt) {\n        //   // find out if the related target's parents contain the datepicker's $element\n        //   var inTable = false;\n        //   var parent = angular.element(evt.relatedTarget);\n        //   while (parent !== undefined && parent.length && parent[0] !== $window.document.body) {\n        //     parent = parent.parent();\n        //     if (parent !== undefined && parent[0] === $datepicker.$element[0]) {\n        //       inTable = true;\n        //       break;\n        //     } else {\n        //       inTable = false;\n        //     }\n        //   }\n\n        //   // In Chrome there is an issue when moving from month to month, year to year, etc.\n        //   //\n\n        //   if (!inTable && !evt.relatedTarget) {\n        //     // hmm\n        //   } else if (!inTable) {\n        //     $datepicker.hide();\n        //   } else {\n        //     evt.stopPropagation();\n        //     evt.preventDefault();\n        //   }\n        // };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n          el.focused = el.selected;\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        // The datepicker will override the init functionality of the tool\n        var _init = $datepicker.init;\n        /**\n         * Initialize the datepicker.\n         */\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        // The datepicker will override the destroy functionalty of the tooltip. Storing a ref to the\n        // tooltip's destroy function so that it can be invoked when the datepicker needs to be destroyed.\n        var _destroy = $datepicker.destroy;\n\n        /**\n         * Destroys the datepicker by removing bound events. Calls the destroy function on the tooltip.\n         */\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        // The datepicker will override the show functionality of the tooltip. Store a ref to the\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\n        // is to be shown.\n        var _show = $datepicker.show;\n\n        /**\n         * Override for the tooltip's show function.\n         *\n         * Checks the element for readonly or disabled before showing the \"tooltip\".\n         * Once shown it sets up the appropriate events.\n         */\n        $datepicker.show = function show () {\n          // If the input the directive is bound to is readonly or disabled then do not show a picker.\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n\n          // Call the \"overriden base\" function on the tooltip.\n          _show();\n\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n\n            // Update assistive technologies for view changes:\n            $datepicker.$element.attr('aria-hidden', 'false');\n            element.attr('aria-expanded', 'true');\n\n            // Setup the event mouse click event. TODO: Can this be wired up in the view?\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\n            // If keyboard navigation is enabled (true by default).\n            if (options.keyboard) {\n              // $datepicker.$element.on('keydown', $datepicker.$onKeyDown);\n              // Check to see if the table element should receive the focus when the picker is shown.\n              if (options.focusOnOpen) {\n                // Focus the table element.\n                // $datepicker.$element.find('table')[0].focus();\n                // $datepicker.$element.on('focusout', $datepicker.$onFocusOut);\n              } else {\n                element.on('keydown', $datepicker.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        // The datepicker will override the hide functionality of the tooltip. Store a ref to the\n        // tooltip's show function so that it can be invoked at the appropriate time when the picker\n        // is to be hidden.\n        var _hide = $datepicker.hide;\n\n        /**\n         * Overrid efor the tooltip's hide function.\n         *\n         * Updates attributes for assistive technologies and unbinds events.\n         */\n        $datepicker.hide = function (blur) {\n          // If the picker is already hidden don't do anything.\n          if (!$datepicker.$isShown) return;\n\n          // Update the attributes used by assisteive technologies\n          $datepicker.$element.attr('aria-hidden', 'true');\n          element.attr('aria-expanded', 'false');\n\n          // Unbind the mouse and touch events\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n\n          // If keyboard events were bound then unbind them.\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n            $datepicker.$element.off('keydown', $datepicker.$onKeyDown);\n          }\n          if (options.focusOnOpen) {\n            // $datepicker.$element.off('focusout', $datepicker.$onFocusOut);\n            element[0].focus();\n          }\n          // Call the tooltip's hide function.\n          _hide(blur);\n        };\n\n        return $datepicker;\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear', 'focusOnOpen', 'labelNext', 'labelPrevious', 'labelMonth', 'labelYear', 'labelDays'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear', 'focusOnOpen'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsDatepickerDisplay', function ($datepicker, $dateParser, $dateFormatter) {\n    return {\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'lang'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        options = angular.extend({}, $datepicker.defaults, options);\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              options[key] = dateParser.getDateForAttribute(key, newValue);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            options.dateFormat = newValue;\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(options.minDate) || parsedDate.getTime() >= options.minDate;\n          var isMaxValid = isNaN(options.maxDate) || parsedDate.getTime() <= options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n\n          return date === null ? null : new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n\n          return getDateFormattedString();\n        });\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n      }\n    };\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({\n          format: options.dateFormat,\n          lang: lang,\n          strict: options.strictFormat\n        });\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLong = $dateFormatter.weekdays(lang);\n        var weekDaysShortLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLongLabels = weekDaysLong.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n\n        var weekDaysLabelsHtml = '';\n        for (var i = 0; i < weekDaysShortLabels.length; i++) {\n          var weekDayShortLabel = weekDaysShortLabels[i];\n          var weekDayLabel = weekDaysLongLabels[i];\n          weekDaysLabelsHtml += '<th scope=\"col\" role=\"columnheader\" class=\"dow text-center\" aria-label=\"' + weekDayLabel + '\"><abbr title=\"' + weekDayLabel + '\">' + weekDayShortLabel + '</abbr></th>';\n        }\n        weekDaysLabelsHtml = $sce.trustAsHtml(weekDaysLabelsHtml);\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {\n          year: startDate.getFullYear(),\n          month: startDate.getMonth(),\n          date: startDate.getDate()\n        };\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {\n            month: 1\n          },\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n              // chaging picker current month will cause viewDate.date to be set to first day of the month,\n              // in $datepicker.$selectPane, so picker would not update selected day display if\n              // user picks first day of the new month.\n              // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n            // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            var selectedDay;\n            var todayDay;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              // push the day information onto the collection\n              var dayItem = {\n                id: options.id !== null && options.id !== undefined ? (options.id + '_cell_' + i) : undefined,\n                date: day,\n                value: day.getDate(),\n                isToday: day.toDateString() === today,\n                label: formatDate(day, this.format),\n                screenReaderLabel: formatDate(day, $dateFormatter.getDatetimeFormat(options.screenReaderDateFormat)),\n                selected: picker.$date && this.isSelected(day),\n                muted: day.getMonth() !== viewDate.month,\n                disabled: this.isDisabled(day)\n              };\n\n              if (dayItem.selected) selectedDay = dayItem;\n              if (dayItem.isToday) todayDay = dayItem;\n\n              days.push(dayItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedDay) {\n                scope.selectedDayId = selectedDay.id;\n                if (todayDay) todayDay.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedDay.focused = true;\n                scope.selected = selectedDay;\n              } else if (todayDay) {\n                todayDay.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            scope.hasSelectedDate = picker.$date != null;\n            scope.$modeLabel = options.labelMonth;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() &&\n              date.getMonth() === picker.$date.getMonth() &&\n              date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n            // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n            // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n            // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            var actualTime;\n\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date) {\n              if (angular.element(evt.target).find('span').hasClass('btn-today')) {\n                picker.$date = new Date();\n              } else {\n                picker.$date = dateParser.parse(angular.element(evt.target).attr('aria-label'), null, options.screenReaderDateFormat);\n              }\n            }\n\n            if (!picker.$date) {\n              return false;\n            }\n\n            actualTime = picker.$date.getTime();\n\n            var newDate;\n\n            switch (evt.keyCode) {\n              // enter\n              case 13:\n                if (options.focusOnOpen) {\n                  picker.select(new Date(actualTime), true);\n                  return false;\n                }\n                break;\n                // pageup\n              case 33:\n                if (evt.altKey) { // move back a year\n                  newDate = new Date(picker.$date.getFullYear() - 1, picker.$date.getMonth(), picker.$date.getDate());\n                } else { // move back a month\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() - 1, picker.$date.getDate());\n                  if (newDate.getMonth() > (picker.$date.getMonth() - 1)) {\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth(), 0);\n                  }\n                }\n                break;\n\n                // pagedown\n              case 34:\n                if (evt.altKey) { // move forward a year\n                  newDate = new Date(picker.$date.getFullYear() + 1, picker.$date.getMonth(), picker.$date.getDate());\n                } else { // move forward a month\n                  newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, picker.$date.getDate());\n                  if (newDate.getMonth() > (picker.$date.getMonth() + 1)) {\n                    newDate = new Date(picker.$date.getFullYear(), picker.$date.getMonth() + 1, 1);\n                  }\n                }\n\n                break;\n\n                // left arrow\n              case 37:\n                newDate = new Date(actualTime - 1 * 864e5);\n                break;\n\n                // up arrow\n              case 38:\n                newDate = new Date(actualTime - 7 * 864e5);\n                break;\n\n                // right arrow\n              case 39:\n                newDate = new Date(actualTime + 1 * 864e5);\n                break;\n\n                // down arrow\n              case 40:\n                newDate = new Date(actualTime + 7 * 864e5);\n                break;\n\n              default:\n                return false;\n            }\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n\n            if (evt && evt.stopPropagation) evt.stopPropagation();\n\n            return false;\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {\n            year: 1\n          },\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            var thisMonthDate = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\n            var selectedMonth;\n            var thisMonth;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n\n              var monthItem = {\n                date: month,\n                label: formatDate(month, this.format),\n                selected: picker.$isSelected(month),\n                isToday: month.getFullYear() === thisMonthDate.getFullYear() && month.getMonth() === thisMonthDate.getMonth(),\n                disabled: this.isDisabled(month)\n              };\n\n              if (monthItem.selected) selectedMonth = monthItem;\n              if (monthItem.isToday) thisMonth = monthItem;\n\n              months.push(monthItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedMonth) {\n                scope.selectedDayId = selectedMonth.id;\n                if (thisMonth) thisMonth.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedMonth.focused = true;\n                scope.selected = selectedMonth;\n              } else if (thisMonth) {\n                thisMonth.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.$modeLabel = options.labelYear;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date &&\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\n              picker.$date = new Date((new Date()).getFullYear(), (new Date()).getMonth(), 1);\n            }\n\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (options.focusOnOpen && evt.keyCode === 13) picker.select(new Date(picker.$date));\n            else if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {\n            year: 12\n          },\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {\n                year: picker.$date.getFullYear(),\n                month: picker.$date.getMonth(),\n                date: picker.$date.getDate()\n              });\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            var selectedYear;\n            var thisYear;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n\n              var yearItem = {\n                date: year,\n                label: formatDate(year, this.format),\n                selected: picker.$isSelected(year),\n                isToday: year.getFullYear() === (new Date()).getFullYear(),\n                disabled: this.isDisabled(year)\n              };\n\n              if (yearItem.selected) selectedYear = yearItem;\n              if (yearItem.isToday) thisYear = yearItem;\n\n              years.push(yearItem);\n            }\n\n            scope.selected = null;\n\n            var defaultFirstDayTabIndex = false;\n            // Setup the focusing\n            if (options.focusOnOpen) {\n              if (selectedYear) {\n                scope.selectedDayId = selectedYear.id;\n                if (thisYear) thisYear.focused = false;\n                // Needs to fire after the today focusing is unset in case the selected day is today.\n                selectedYear.focused = true;\n                scope.selected = selectedYear;\n              } else if (thisYear) {\n                thisYear.focused = true;\n              } else {\n                defaultFirstDayTabIndex = true;\n              }\n            }\n\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            if (defaultFirstDayTabIndex) {\n              scope.rows[0][0].isNext = true;\n            }\n            scope.$modelLabel = options.labelDays;\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            // If the picker doesn't have a date selected and the event comes from the today TD\n            // then set the picker's $date to today and set the actual time to its value.\n            if (options.keyboard &&\n              options.focusOnOpen &&\n              !picker.$date &&\n              angular.element(evt.target).find('span').hasClass('btn-today')) {\n              picker.$date = new Date((new Date()).getFullYear(), 0, 1);\n            }\n\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n        element.attr('aria-expanded', 'false');\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n\n        var i = 0;\n        if (self.$targets) {\n          for (i = 0; i < self.$targets.length; i++) {\n            self.$targets[i].attr('aria-hidden', 'true');\n          }\n          for (i = 0; i < self.$targets.$active.length; i++) {\n            if (self.$targets[self.$targets.$active[i]]) {\n              self.$targets[self.$targets.$active[i]].attr('aria-hidden', 'false');\n            }\n            if (self.$toggles[self.$targets.$active[i]]) {\n              self.$toggles[self.$targets.$active[i]].attr('aria-expanded', 'true');\n            }\n          }\n        }\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets[self.$targets.$active[index]].attr('aria-hidden', 'true');\n          self.$toggles[self.$targets.$active[index]].attr('aria-expanded', 'false');\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          if (self.$targets[self.$targets.$active[0]] !== undefined) {\n            self.$targets[self.$targets.$active[0]].attr('aria-hidden', 'true');\n          }\n          if (self.$toggles[self.$targets.$active[0]]) {\n            self.$toggles[self.$targets.$active[0]].attr('aria-expanded', 'false');\n          }\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n\n          if (self.$targets[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\n            self.$targets[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-hidden', 'false');\n          }\n          if (self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]] !== undefined) {\n            self.$toggles[self.$targets.$active[self.$targets.$active.length - 1]].attr('aria-expanded', 'true');\n          }\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n    var KEY_CODES = {\n      ENTER: 13,\n      SPACE: 32\n    };\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === KEY_CODES.ENTER || e.which === KEY_CODES.SPACE) {\n            console.log('key handler handling');\n            actionEventHandler();\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true,\n\t  focusMeDisabled: false\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\t\t\n\t\t$alert.returnFocus = function() {\n\t\t\tfunction findFocusableElements() {\n\t\t\t\tvar containerEl = angular.element($alert.$element).closest('[ng-controller]');\n\t\t\t\t\n\t\t\t\treturn containerEl.find('a:not([disabled]),button:not([disabled]),input:not([disabled]),select:not([disabled]),[tabindex]:not([disabled]):not([tabindex=\"-1\"])').filter(function (i,el) {\n\t\t\t\t\treturn !angular.element(el).parentsUntil(containerEl, '[tabindex=\"-1\"]').length\n\t\t\t\t});\n\t\t\t}\n\t\t\tfunction findNextFocusableElement() {\n\t\t\t\tif (document.activeElement) {\n\t\t\t\t\tvar focusable = findFocusableElements().toArray();\n\t\t\t\t\tif (focusable === undefined) return;\n\t\t\t\t\tvar index = focusable.indexOf(document.activeElement);\n\t\t\t\t\treturn focusable[index + 1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tangular.element(findNextFocusableElement()).focus();\n\n\n\t\t}\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\t\tif (options.focusMeDisabled) {\n          $alert.$scope.focusMeDisabled = options.focusMeDisabled;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}